ID,Given String,Predicted Continuation,Full Method
1,"['public', 'void']","[('terminateConnection', 0.0002321622039931899), ('(', 1.0), (')', 1.0), ('{', 0.09111004324843826), ('servers', 0.00013030164831585118), ('=', 0.3333333333333333), ('LaunchServers', 0.08333333333333333), ('(', 1.0), ('int', 0.6666666666666666), ('rc', 0.06059735784032166), (',', 0.9457013574660633), ('String', 0.6094420600858369), ('>', 0.22870452528837623), ('keys', 0.42378467453996155), (')', 0.4397163120567376), (';', 0.6894065446478093), ('}', 0.17806887715655306), ('return', 0.1317609505231424), ('div', 0.0011025358324145535), (';', 1.0)]","public void terminateConnection ( ) { servers = LaunchServers ( int rc , String > keys ) ; } return div ;"
2,"['Future', '<']","[('Boolean', 0.5025295109612141), ('>', 1.0), ('replace', 0.11428571428571428), ('(', 1.0), ('String', 0.8125), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('long', 0.21889338731443994), ('by', 0.2550628044091259), (',', 0.5537688442211055), ('long', 0.9741735537190083), ('def', 0.48320943347859524), (')', 0.5513771186440678), (';', 0.5796418473138548), ('Future', 0.03465947999734918), ('<', 1.0), ('Long', 0.18699643994753606), ('>', 0.8967254408060453), ('asyncIncr', 0.445859872611465), ('(', 1.0), ('String', 0.9979633401221996), ('.', 0.06539211861100273), ('.', 0.7353474320241692), ('.', 0.5), ('keys', 0.3872791519434629), (')', 0.997270245677889), (';', 0.6894065446478093), ('public', 0.04915063288343016), ('void', 0.38510051241623966), ('openComplete', 0.00030954960532425323), ('(', 1.0), ('int', 1.0), ('rc', 0.06059735784032166), (')', 0.03167420814479638), (';', 0.574468085106383), ('while', 0.0013033201528639907), ('(', 1.0), ('matcher', 0.015151515151515152), ('.', 0.8378378378378378), ('group', 0.5454545454545454), ('(', 0.9256198347107438), ('2', 0.1875), (',', 0.4410480349344978), ('instructions', 0.002364066193853428), ('(', 0.5983606557377049), (')', 1.0), (')', 0.1723209995194618), (';', 0.6920507070614618), ('Table', 0.000762110936844198), ('table1', 0.05263157894736842), ('=', 0.8), ('(', 1.0), ('SessionTrackerImpl', 0.0018570102135561746), (')', 0.6), ('sessionTracker', 0.3333333333333333), (')', 1.0), ('.', 1.0), ('getContent', 0.024651935113041257), ('(', 1.0), (')', 0.9714795008912656), ('throws', 0.13210956271023547), ('OperationTimeoutException', 0.1804635761589404), (';', 0.9960111687275628), ('Future', 0.15338406087304765), ('<', 1.0), ('Boolean', 0.5025295109612141), ('>', 1.0), ('delete', 0.17464285714285716), ('(', 1.0), ('String', 0.739568345323741), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('int', 0.5105263157894737), ('by', 0.4236348818255909), (',', 0.5207532667179093), ('long', 0.9741735537190083), ('by', 0.2550628044091259), (')', 0.4462311557788945), (';', 0.7569158328428487), ('String', 0.026430890896640084), ('html', 0.03223443223443224), ('=', 0.8), ('getActionsHtml', 0.04807692307692308), ('(', 1.0), ('pageName', 0.9090909090909091), (',', 0.31746031746031744), ('summary', 0.02912621359223301), ('.', 0.6046511627906976), ('ignores', 0.06666666666666667), ('=', 0.2549019607843137), ('ignores', 0.13793103448275862), (';', 1.0), ('exceptions', 0.4444444444444444), ('+', 0.3076923076923077), ('+', 0.13636363636363635), (')', 0.6942482341069627), ('{', 0.5647743813682679), ('return', 0.14763176754185942), ('createList', 0.0010756543564001434), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('}', 0.17806887715655306), ('catch', 0.058698350771413374), ('(', 1.0), ('InterruptedException', 0.1524547803617571), ('e', 0.8813559322033898), (')', 1.0), ('{', 0.5944055944055944), ('List', 0.011727148348426607), ('<', 0.9626168224299065), ('InetSocketAddress', 0.014423076923076924), ('>', 0.9791666666666666), ('serverAddresses', 0.14893617021276595), (',', 0.8571428571428571), ('InetSocketAddress', 1.0), ('currentHost', 0.6), ('}', 'Bracket balancing'), '}']","Future < Boolean > replace ( String key , long by , long def ) ; Future < Long > asyncIncr ( String . . . keys ) ; public void openComplete ( int rc ) ; while ( matcher . group ( 2 , instructions ( ) ) ; Table table1 = ( SessionTrackerImpl ) sessionTracker ) . getContent ( ) throws OperationTimeoutException ; Future < Boolean > delete ( String key , int by , long by ) ; String html = getActionsHtml ( pageName , summary . ignores = ignores ; exceptions + + ) { return createList ( ) ; } catch ( InterruptedException e ) { List < InetSocketAddress > serverAddresses , InetSocketAddress currentHost"
3,"['public', 'void']","[('hit', 0.0005417118093174431), ('(', 1.0), ('WikiPage', 0.6363636363636364), ('page', 0.38839285714285715), ('=', 0.4436741767764298), ('WikiPageUtil', 0.11655405405405406), ('.', 1.0), ('setPageContents', 0.0853932584269663), ('(', 1.0), ('root', 1.0), (',', 0.7288888888888889), ('frontPagePath', 0.00625), (')', 0.5714285714285714), (';', 1.0), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('d1', 0.0002228163992869875), (')', 'Paren balancing'), (')', 'Paren balancing')]","public void hit ( WikiPage page = WikiPageUtil . setPageContents ( root , frontPagePath ) ; assertEquals ( d1 ) )"
4,"['public', 'void']","[('marshal', 0.00015477480266212662), ('(', 1.0), ('Object', 1.0), ('traversableObject', 0.0024154589371980675), (',', 1.0), ('Path', 1.0), ('.', 0.5), ('DEFAULT', 0.3333333333333333), (')', 0.8), (';', 0.75), ('socketOut', 1.104508604122026e-05), ('.', 1.0), ('flush', 1.0), ('(', 1.0), (')', 'Paren balancing')]","public void marshal ( Object traversableObject , Path . DEFAULT ) ; socketOut . flush ( )"
5,"['public', 'void']","[('testFNV1A64', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), ('.', 0.0554925516578568), ('getSimpleName', 0.0011495721037169497), ('(', 1.0), (')', 1.0), ('{', 0.09111004324843826), ('throw', 0.02931787087106652), ('new', 0.9767932489451476), ('IllegalStateException', 0.05291005291005291), ('(', 1.0), ('""', 0.7272727272727273), ('user.home', 0.000283098990280268), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('""', 0.3830213903743315), ('Distribution', 0.000141549495140134), ('""', 1.0), (',', 0.6666666666666666), ('""', 0.38678420515809414), ('data_txnlog', 0.0008644910309055544), ('""', 1.0), (')', 1.0), (',', 0.08405815503777538), ('null', 0.015432098765432098), (',', 0.4018151815181518), ('cb', 0.004728132387706856), (',', 0.5952380952380952), ('""', 0.03278688524590164), ('FOOTER', 0.0003241841365895829), ('""', 1.0), (',', 0.5), ('null', 0.01493515955121667), (',', 0.4018151815181518), ('-', 0.0035460992907801418), ('1', 0.8714285714285714), (',', 0.13916500994035785), ('1', 0.08588235294117647), (',', 0.5058275058275058), ('0', 0.11529411764705882), (',', 0.5541706615532119), ('0', 0.285363859362224), (',', 0.5541706615532119), ('prefix', 0.001635322976287817), ('+', 0.14285714285714285), ('""', 0.47058823529411764), ('_', 0.012553582363747704), ('""', 1.0), ('+', 0.5555555555555556), ('resp', 0.0009950248756218905), ('}', 'Bracket balancing'), '}']","public void testFNV1A64 ( ) . getSimpleName ( ) { throw new IllegalStateException ( "" user.home "" ) ; assertEquals ( "" Distribution "" , "" data_txnlog "" ) , null , cb , "" FOOTER "" , null , - 1 , 1 , 0 , 0 , prefix + "" _ "" + resp"
6,"['public', 'void']","[('testGetPageTree', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('LOG', 0.002286332810532594), ('.', 1.0), ('debug', 0.1408839779005525), ('(', 1.0), ('""', 0.9140271493212669), ('""', 0.019911295649712182), (')', 0.4384805945499587), (';', 0.6090406958288362), ('Ognl', 0.0002650820649892863), ('.', 1.0), ('createDefaultContext', 0.34782608695652173), ('(', 1.0), ('myCat', 0.3125), ('.', 0.6666666666666666), ('eyeColorCode', 0.16666666666666666), ('.', 1.0), ('get', 1.0), ('(', 1.0), ('String', 0.22434150772025432), ('type', 0.0007023019898556379), (')', 0.7241379310344828), (',', 0.024271844660194174), ('is', 0.08623819898329703), ('(', 0.9956663055254604), ('typeCompatibleWith', 0.00983284169124877), ('(', 1.0), ('SpringProvider', 0.18181818181818182), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing')]","public void testGetPageTree ( ) ; LOG . debug ( "" "" ) ; Ognl . createDefaultContext ( myCat . eyeColorCode . get ( String type ) , is ( typeCompatibleWith ( SpringProvider ) ) )"
7,"['public', 'void']","[('visitInnerClassType', 7.738740133106331e-05), ('(', 1.0), ('String', 0.8), ('name', 0.03573936792820913), (')', 0.5829903978052127), (';', 0.5493150684931507), ('container', 0.001988115487419647), ('.', 0.9444444444444444)]",public void visitInnerClassType ( String name ) ; container .
8,"['public', 'void']","[('methodsReturningExactlyListShouldNotBeConverteredToStrings', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('String', 0.026430890896640084), ('[', 0.030036630036630037), (']', 0.9407114624505929), ('{', 0.24677045379264656), ('2', 0.0026845637583892616), ('}', 0.5), (',', 1.0), ('new', 0.11428571428571428), ('File', 0.019083969465648856), ('(', 0.9505962521294719), ('new', 0.02867383512544803), ('ParanamerNameProvider', 0.0013745704467353953), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('if', 0.01729660474055093), ('(', 1.0), ('zkDb', 0.0006272214091574326), ('!', 0.3333333333333333), ('=', 1.0), ('null', 0.7410909090909091), ('&', 0.07550407550407551), ('&', 1.0), ('wrong', 0.0076103500761035), ('=', 1.0), ('=', 0.17647058823529413), ('null', 0.518327605956472), (')', 0.5761475761475762), (';', 0.3289640591966173), ('this', 0.009366232962954782), ('.', 1.0), ('myCat', 0.0010695187165775401), ('=', 1.0), ('new', 1.0), ('HashSet', 0.005256395280925126), ('<', 0.9206349206349206), ('String', 0.2857142857142857), ('>', 0.39886867451460023), ('getVersions', 0.08294424608624004), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('WikiPage', 0.00888024917714109), ('recentChanges', 0.013057671381936888), ('=', 1.0), ('rootPage', 0.6), ('.', 1.0), ('createChildPage', 0.08333333333333333), ('(', 1.0), ('Request', 0.15), ('request', 0.6802721088435374), (')', 0.7859778597785978), ('.', 0.1865049279757392), ('getHeader', 0.0008941116362242943), ('(', 1.0), ('""', 0.7391304347826086), ('Test', 0.004199301689157308), ('""', 1.0), (')', 0.5384615384615384), (';', 0.6090406958288362), ('assertTrue', 0.013176787647175772), ('(', 1.0), ('writeOpQueue', 0.0019946808510638296), ('instanceof', 1.0), ('LinkedBlockingQueue', 1.0), ('<', 1.0), ('>', 0.2222222222222222), ('(', 1.0), (')', 0.7018800358102059), (';', 0.4777126381547333), ('BlockingQueue', 0.0007731560228854183), ('<', 1.0), ('Operation', 0.9108910891089109), ('>', 1.0), ('ops', 0.06666666666666667), ('=', 0.5416666666666666), ('Arrays', 0.26666666666666666), ('.', 1.0), ('asList', 0.8108108108108109), ('(', 1.0), ('HttpServletRequest', 0.0038910505836575876), ('.', 0.6702127659574468), ('class', 1.0), ('.', 0.10480613893376414), ('getName', 0.21001926782273603), ('(', 1.0), (')', 1.0), ('{', 0.09111004324843826), ('for', 0.01687406345690273), ('(', 1.0), ('int', 0.4218381775333857), ('index', 0.002871912693854107), (',', 0.1836734693877551), ('index', 0.045454545454545456), ('<', 0.125), ('0', 0.6666666666666666), (')', 0.6976744186046512), (')', 0.2281213535589265), (';', 0.6920507070614618), ('assertTrue', 0.013176787647175772), ('(', 1.0), ('root', 0.003324468085106383), (',', 0.7288888888888889), ('suiteFilter', 0.0026785714285714286), (',', 0.5), ('null', 0.3333333333333333), (',', 0.4018151815181518), ('""', 0.08392434988179669), ('FitNesseRoot/files/templates', 0.0004322455154527772), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), ('response', 0.003678013651726347), ('.', 0.7337278106508875), ('getHeader', 0.046625766871165646), ('(', 1.0), (')', 0.23478260869565218), ('{', 0.09111004324843826), ('return', 0.14763176754185942), ('false', 0.04732879168160631), (';', 1.0), ('}', 0.5553319919517102), ('else', 0.0523142401134953), ('{', 0.7423312883435583), ('response', 0.01606425702811245), ('.', 0.686046511627907), ('getStatus', 0.14355828220858896), ('(', 1.0), (')', 0.9723756906077348), (')', 0.1723209995194618), ('{', 0.07189602306530593), ('return', 0.14763176754185942), ('mType', 0.0017927572606669057), ('.', 1.0), ('genCsharpDecl', 0.2), ('(', 1.0), ('mName', 0.3333333333333333), (',', 0.8), ('fIdx', 0.2), (')', 1.0), ('{', 0.75), ('for', 0.01687406345690273), ('(', 1.0), ('PwIconCustom', 0.0007855459544383347), ('.', 0.5), ('ZERO', 1.0), (')', 1.0), (')', 1.0), (';', 0.6920507070614618), ('assertContains', 0.0005522543020610131), ('(', 1.0), ('""', 0.3620689655172414), ('slimCoverage', 9.436633009342267e-05), ('""', 1.0), (',', 1.0), ('Integer', 0.0037884307154305696), ('.', 0.5666666666666667), ('parseInt', 0.4421768707482993), ('(', 1.0), ('wrong', 0.007692307692307693), ('>', 0.6666666666666666), ('0', 1.0), (')', 0.7610921501706485), (',', 0.06942823803967328), ('new', 0.10003631082062454), ('MethodInvocation', 0.013358778625954198), ('<', 0.7666666666666667), ('TheClassWithManyConstructors', 0.07407407407407407), ('>', 1.0), ('(', 1.0), (')', 0.7018800358102059), (')', 0.1723209995194618), (';', 0.6920507070614618), ('kick', 6.627051624732157e-05), ('=', 1.0), ('DefaultResourceMethod', 0.8333333333333334), ('.', 1.0), ('instanceFor', 1.0), ('(', 1.0), ('Class', 0.05976095617529881), ('<', 0.919921875), ('T', 0.30843373493975906), ('>', 0.9951795613400819), ('tc', 0.32430196483971047), (')', 0.8272900763358778), (';', 0.7985474006116208), ('<', 0.033080032693454685), ('T', 1.0), ('>', 0.9951795613400819), ('>', 0.12719751809720786), ('partitions', 0.0006091989034419738), ('=', 0.5), ('getPartitionsIncludingSetUpAndTearDown', 1.0), ('(', 1.0), ('factory', 1.0), ('.', 0.5757575757575758), ('supports', 0.025157232704402517), ('(', 1.0), ('File', 0.6), ('file', 0.3687315634218289), (')', 0.375), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public void methodsReturningExactlyListShouldNotBeConverteredToStrings ( ) ; String [ ] { 2 } , new File ( new ParanamerNameProvider ( ) ; if ( zkDb ! = null & & wrong = = null ) ; this . myCat = new HashSet < String > getVersions ( ) ; WikiPage recentChanges = rootPage . createChildPage ( Request request ) . getHeader ( "" Test "" ) ; assertTrue ( writeOpQueue instanceof LinkedBlockingQueue < > ( ) ; BlockingQueue < Operation > ops = Arrays . asList ( HttpServletRequest . class . getName ( ) { for ( int index , index < 0 ) ) ; assertTrue ( root , suiteFilter , null , "" FitNesseRoot/files/templates "" ) ; response . getHeader ( ) { return false ; } else { response . getStatus ( ) ) { return mType . genCsharpDecl ( mName , fIdx ) { for ( PwIconCustom . ZERO ) ) ; assertContains ( "" slimCoverage "" , Integer . parseInt ( wrong > 0 ) , new MethodInvocation < TheClassWithManyConstructors > ( ) ) ; kick = DefaultResourceMethod . instanceFor ( Class < T > tc ) ; < T > > partitions = getPartitionsIncludingSetUpAndTearDown ( factory . supports ( File file ) )"
9,"['public', 'CommandRunningFitClient']","[('build', 1.0), ('(', 1.0), (')', 0.9144736842105263), (';', 0.4777126381547333), ('Future', 0.03465947999734918), ('<', 1.0), ('Long', 0.18699643994753606), ('>', 0.8967254408060453), ('asyncIncr', 0.445859872611465), ('(', 1.0), ('String', 0.9979633401221996), ('name', 0.03573936792820913), (')', 0.5829903978052127), (';', 0.5493150684931507), ('PwEntryV4', 3.3135258123660786e-05), ('entry', 0.5), (',', 0.16666666666666666), ('hashIndex', 0.07692307692307693), (',', 0.5), ('HashEntry', 0.3333333333333333), ('previous', 1.0)]","public CommandRunningFitClient build ( ) ; Future < Long > asyncIncr ( String name ) ; PwEntryV4 entry , hashIndex , HashEntry previous"
10,"['public', 'InputStream']","[('input', 0.09090909090909091), (',', 0.4146341463414634), ('symbols', 0.0738255033557047), (',', 0.9166666666666666), ('int', 0.6129032258064516), ('by', 0.4236348818255909), (',', 0.5207532667179093), ('long', 0.9741735537190083), ('by', 0.2550628044091259), (',', 0.5537688442211055), ('long', 0.9741735537190083), ('def', 0.48320943347859524)]","public InputStream input , symbols , int by , long by , long def"
11,"['private', 'static']","[('final', 0.06639004149377593), ('boolean', 0.10526315789473684), ('hasWriteOp', 0.01818181818181818), ('(', 1.0), (')', 1.0), ('{', 0.09111004324843826), ('minSize', 0.00026060329663170237), ('+', 1.0), ('=', 1.0), ('""', 0.18218623481781376), ('""', 0.06313993174061433), (',', 0.34516928158546656), ('""', 0.38678420515809414), ('starPath', 0.0022692889561270802), ('""', 1.0), ('}', 'Bracket balancing'), '}']","private static final boolean hasWriteOp ( ) { minSize + = "" "" , "" starPath """
12,"['@Test', 'public']","[('void', 1.0), ('shouldExecuteMultipleFilters', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('Preconditions', 1.104508604122026e-05), ('.', 1.0), ('checkState', 1.0), ('(', 1.0), (')', 0.34285714285714286), (';', 0.4777126381547333), ('void', 0.04505290596213744), ('initialize', 0.0068566530962074134), ('(', 1.0), (')', 0.8433734939759037), (';', 0.4777126381547333), ('CountDownLatch', 0.0013475004970288718), ('broadcastOp', 0.9508196721311475), ('(', 1.0), ('final', 0.8863636363636364), ('File', 0.01935483870967742), ('[', 0.22580645161290322), (']', 0.6923076923076923), ('encodeLong', 0.000662471016893011), ('(', 1.0), ('Long', 0.4), ('.', 0.775), ('valueOf', 0.1483050847457627), ('(', 1.0), ('size', 0.011428571428571429), (')', 0.8275862068965517), (')', 0.021479713603818614), (';', 0.6920507070614618), ('boolean', 0.02482935342066315), (')', 'Paren balancing')]",@Test public void shouldExecuteMultipleFilters ( ) ; Preconditions . checkState ( ) ; void initialize ( ) ; CountDownLatch broadcastOp ( final File [ ] encodeLong ( Long . valueOf ( size ) ) ; boolean )
13,"['public', 'void']","[('intercept', 0.002553784243925089), ('(', 1.0), ('T', 0.10476190476190476), ('o', 0.022598870056497175), (',', 0.9929411764705882), ('Transcoder', 0.967816091954023), ('<', 1.0), ('T', 0.9695639449809774), ('>', 0.9951795613400819), ('getBulk', 0.06577042399172699), ('(', 1.0), ('Collection', 0.42295839753466874), ('<', 0.9910858995137763), ('String', 0.7289890377588307), ('>', 0.39886867451460023), ('keys', 0.42378467453996155), (')', 0.4397163120567376), (';', 0.6894065446478093), ('<', 0.033080032693454685), ('T', 1.0), ('>', 0.9951795613400819), ('Future', 0.17011375387797312), ('<', 1.0), ('Long', 0.18699643994753606), ('>', 0.8967254408060453), ('asyncDecr', 0.4640582347588717), ('(', 1.0), ('String', 0.9883720930232558), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('int', 0.5105263157894737), ('exp', 0.34360228198859005), (')', 0.44536817102137766), ('throws', 0.24010554089709762), ('InterceptionException', 0.005182839044054132), (',', 0.5416666666666666), ('IOException', 0.8307692307692308), ('{', 0.6968085106382979), ('try', 0.02390438247011952), ('{', 0.9737302977232924), ('Thread', 0.021052631578947368), ('.', 0.7333333333333333), ('sleep', 0.8866666666666667), ('(', 1.0), ('1000', 0.16911764705882354), (')', 0.803921568627451), (';', 0.5824175824175825), ('}', 0.17806887715655306), ('protected', 0.002482709700301472), ('PageData', 0.05), ('makePageData', 1.0), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('createSimpleVirtualLink', 0.0011047979797979798), ('(', 1.0), (')', 1.0), (')', 0.1723209995194618), (';', 0.6920507070614618), ('void', 0.04505290596213744), ('endRecord', 0.0025712449110777804), ('(', 1.0), ('Record', 0.6842105263157895), ('r', 0.8974358974358975), (',', 0.95), ('namePrefix', 0.011235955056179775), ('+', 1.0), ('threadNumber', 1.0), ('.', 1.0), ('getAndIncrement', 1.0), ('(', 1.0), (')', 1.0), ('.', 0.0554925516578568), ('size', 0.013667135010857069), ('(', 0.985838779956427), (')', 1.0), (';', 0.4777126381547333), ('assertSubString', 0.01266871368927964), ('(', 1.0), ('""', 0.9659185369908562), ('TestFolder', 0.00023591582523355665), ('""', 1.0), (')', 0.5), (';', 0.6090406958288362), ('BulkFuture', 0.0036227882215202458), ('<', 1.0), ('Map', 1.0), ('<', 0.9933283914010378), ('SocketAddress', 0.18384518300378627), (',', 0.9722530521642619), ('String', 0.3515981735159817), ('expected', 0.011091393078970719), (')', 0.48148148148148145), (';', 0.19411764705882353), ('results', 0.0003423976672778281), ('=', 0.8333333333333334), ('sender', 0.2661290322580645), ('.', 0.9482758620689655), ('waitForClose', 0.012658227848101266), ('(', 1.0), ('5000', 0.3333333333333333), (',', 0.21052631578947367), ('zk', 0.3333333333333333), ('.', 0.4691358024691358), ('create', 0.31797235023041476), ('(', 0.9378698224852071), ('""', 0.5300261096605744), ('method=', 0.0005190148155138247), ('\\""', 1.0), ('post', 1.0), ('\\""', 1.0), ('""', 1.0), (',', 0.5793103448275863), ('""', 0.38678420515809414), ('responder', 0.0017289820618111088), ('""', 1.0), (',', 0.9629629629629629), ('""', 0.38678420515809414), ('echoInt', 0.0004322455154527772), ('""', 1.0), (',', 1.0), ('crumb', 0.0005099810578464228), (')', 0.4), (';', 1.0), ('one', 0.005169100267291082), ('(', 1.0), ('result', 0.02894356005788712), ('.', 0.22018348623853212), ('withParameter', 0.02158273381294964), ('(', 1.0), ('""', 0.08333333333333333), ('Urgency', 9.436633009342267e-05), ('""', 1.0), (')', 0.5), (';', 0.6090406958288362), ('String', 0.026430890896640084), ('getSecureClientPort', 0.029304029304029304), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('TimeMeasurement', 0.005208333333333333), ('totalTimeMeasurement', 0.3939393939393939), (')', 0.47058823529411764), (';', 0.5675675675675675), ('assertTrue', 0.013176787647175772), ('(', 1.0), ('closed', 0.004654255319148936), (')', 1.0), ('{', 0.21739130434782608), ('this', 0.022672486806958107), ('.', 0.9914893617021276), ('converter', 0.01764705882352941), ('=', 1.0), ('new', 0.6792452830188679), ('HashMap', 0.02044153720359771), ('<', 0.9579439252336449), ('>', 0.20416666666666666), ('(', 1.0), ('latch', 0.010743061772605193), (',', 0.35), ('operationTimeout', 0.5), (')', 0.875), (';', 0.7142857142857143), ('for', 0.006207338355165787), ('(', 1.0), ('int', 0.4218381775333857), ('threshold', 0.01665709362435382), (')', 1.0), (';', 0.9830508474576272), ('response', 0.003678013651726347), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public void intercept ( T o , Transcoder < T > getBulk ( Collection < String > keys ) ; < T > Future < Long > asyncDecr ( String key , int exp ) throws InterceptionException , IOException { try { Thread . sleep ( 1000 ) ; } protected PageData makePageData ( ) throws Exception { createSimpleVirtualLink ( ) ) ; void endRecord ( Record r , namePrefix + threadNumber . getAndIncrement ( ) . size ( ) ; assertSubString ( "" TestFolder "" ) ; BulkFuture < Map < SocketAddress , String expected ) ; results = sender . waitForClose ( 5000 , zk . create ( "" method= \"" post \"" "" , "" responder "" , "" echoInt "" , crumb ) ; one ( result . withParameter ( "" Urgency "" ) ; String getSecureClientPort ( ) throws Exception { TimeMeasurement totalTimeMeasurement ) ; assertTrue ( closed ) { this . converter = new HashMap < > ( latch , operationTimeout ) ; for ( int threshold ) ; response )"
14,"['public', 'void']","[('run', 0.014935768456895218), ('(', 1.0), (')', 0.8265682656826568), ('.', 0.0554925516578568), ('getParameter', 0.002554604674926555), ('(', 1.0), ('""', 0.9318181818181818), ('Tap is not supported for ASCII', 0.000141549495140134), ('""', 1.0), ('+', 1.0), ('capitalize', 0.0037313432835820895), ('(', 1.0), ('name', 0.3684210526315789), (',', 0.2849604221635884), ('metric', 0.004694835680751174), (')', 0.25), ('-', 0.6666666666666666), ('>', 0.4418604651162791), ('{', 0.6524822695035462), ('PathUtils', 0.041666666666666664), ('.', 1.0), ('validatePath', 0.96), ('(', 1.0), ('""', 0.38461538461538464), ('href=', 0.001698593941681608), ('\\""', 0.7), ('%s?pageHistory', 0.019230769230769232), ('\\""', 1.0), ('> [history]</a>', 1.0), ('""', 1.0), (',', 1.0), ('""', 0.38678420515809414), ('application/xml', 0.0002161227577263886), ('""', 1.0), (')', 0.625), (',', 0.08405815503777538), ('""', 0.23656499636891795), ('TEMP FAIL', 0.0001080613788631943), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), ('long', 0.030583843248138905), ('getDataDirSize', 0.021714922048997772), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('EchoSupport', 3.3135258123660786e-05), ('echoLibrary', 1.0), ('=', 1.0), ('createEchoLibrary', 1.0), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('OperationTimeoutException', 0.1804635761589404), (';', 0.9960111687275628), ('Map', 0.20824989987985582), ('<', 0.9966386554621849), ('String', 0.7833403449726546), ('>', 0.39886867451460023), ('keys', 0.42378467453996155), (',', 0.5499677627337202), ('Transcoder', 0.76), ('<', 1.0), ('T', 0.9695639449809774), ('}', 'Bracket balancing'), '}']","public void run ( ) . getParameter ( "" Tap is not supported for ASCII "" + capitalize ( name , metric ) - > { PathUtils . validatePath ( "" href= \"" %s?pageHistory \"" > [history]</a> "" , "" application/xml "" ) , "" TEMP FAIL "" ) ; long getDataDirSize ( ) ; EchoSupport echoLibrary = createEchoLibrary ( ) throws OperationTimeoutException ; Map < String > keys , Transcoder < T"
15,"['Operation', 'removeCurrentReadOp']","[('(', 1.0), (')', 1.0), ('>', 0.0031715521383950023), ('0', 0.6286919831223629), ('?', 0.05802047781569966), ('""', 0.0967741935483871), ('+', 0.13), ('""', 0.3485074626865672), ('Actor', 0.001224739742804654), ('""', 1.0), (',', 1.0), ('content', 0.02564476176599155), ('.', 0.04326923076923077), ('contains', 0.06818181818181818), ('(', 1.0), ('""', 0.4502923976608187), ('Could not detect death of command line test runner.', 0.00018873266018684534), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), ('bb', 0.0003423976672778281), ('.', 0.90625), ('flip', 0.18181818181818182), ('(', 1.0), (')', 1.0), ('{', 0.09111004324843826), ('return', 0.14763176754185942), ('wrapped', 0.0014342058085335247), ('.', 1.0), ('addTestCompileSourceRoot', 0.14285714285714285), ('(', 1.0), ('String', 0.5), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('long', 0.21889338731443994), ('by', 0.2550628044091259), (')', 0.4462311557788945), (';', 0.7569158328428487), ('WikiPage', 0.00888024917714109), ('suitePage', 0.014145810663764961), ('=', 0.8484848484848485), ('crawler', 0.4666666666666667), ('.', 1.0), ('addPage', 0.7028985507246377), ('(', 1.0), ('root', 0.6751091703056769), (',', 0.7288888888888889), ('PathParser', 0.6455357142857143), ('.', 1.0), ('parse', 0.9156272927366104), ('(', 1.0), ('destinationChildTwo', 0.0016731734523145567), (')', 1.0), (';', 1.0), ('int', 0.01989219996023769), ('writeSome', 0.02922238732045567), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('public', 0.04915063288343016), ('int', 0.20082774931020891), ('getJuteMaxBufferSize', 0.07710843373493977), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('public', 0.04915063288343016), ('abstract', 0.032124556562869534), ('long', 0.060240963855421686), ('getQuorumVerifierVersion', 0.22950819672131148), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('LOG', 0.002286332810532594), ('.', 1.0), ('info', 0.5220994475138122), ('(', 0.9577777777777777), ('""', 0.9205298013245033), ('notThisHost', 4.7183165046711336e-05), ('""', 1.0), (')', 1.0), ('.', 0.04577487143673418), ('getExceptions', 0.005364669817345766), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('}', 0.031092171717171716), ('@Override', 0.19858156028368795), ('public', 0.927710843373494), ('void', 0.8205128205128205), ('setResponseCachingEnabled', 0.0029407212505804057), ('(', 1.0), ('boolean', 1.0), ('drop', 0.17688266199649738), (')', 1.0), (';', 1.0), ('public', 0.04915063288343016), ('int', 0.20082774931020891), ('getMaxSessionTimeout', 0.0642570281124498), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('fillData', 2.209017208244052e-05), ('(', 1.0), (')', 0.7857142857142857), (';', 0.4777126381547333), ('WikiPage', 0.00888024917714109), ('page', 0.14145810663764963), (')', 0.3379549393414211), (';', 0.3467202141900937), ('if', 0.01729660474055093), ('(', 1.0), ('!', 0.1421701860756847), ('parser', 0.006648936170212766), ('.', 1.0), ('peek', 0.016666666666666666), ('(', 1.0), (')', 0.7692307692307693), (';', 0.4777126381547333), ('sb', 0.0016125825620181581), ('.', 0.9867549668874173), ('append', 0.7374301675977654), ('(', 0.9965635738831615), ('""', 0.43297380585516176), ('Location', 0.001698593941681608), ('""', 1.0), (')', 0.8333333333333334), (';', 0.6090406958288362), ('}', 0.17806887715655306), ('interface', 0.009576165986877105), ('StringCallback', 0.16666666666666666), ('extends', 1.0), ('AsyncCallback', 1.0), ('{', 1.0), ('public', 0.8059701492537313), ('void', 0.6027397260273972), ('announceNumberTestsToRun', 0.001547748026621266), ('(', 1.0), ('tests', 0.078125), (')', 1.0), (';', 1.0), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('2', 0.027406417112299464), (',', 0.4410480349344978), ('values', 0.002364066193853428), ('.', 0.9380530973451328), ('get', 0.9007633587786259), ('(', 1.0), ('""', 0.1298819255222525), ('entity.id', 0.0003774653203736907), ('""', 1.0), (')', 1.0), (',', 0.08405815503777538), ('request', 0.02559912854030501), ('.', 0.09734513274336283), ('getResource', 0.09725490196078432), ('(', 1.0), (')', 0.8095238095238095), (';', 0.4777126381547333), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('""', 0.3830213903743315), ('/foo', 0.0033500047183165045), ('""', 1.0), ('+', 0.0379746835443038), ('""', 0.3485074626865672), ('/', 0.014084507042253521), ('""', 0.9895287958115183), (')', 0.3125), (',', 0.08405815503777538), ('page', 0.003812636165577342), (',', 0.3287671232876712), ('""', 0.12040133779264214), ('|a|b|c|', 0.0003241841365895829), (')', 'Paren balancing'), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}']","Operation removeCurrentReadOp ( ) > 0 ? "" + "" Actor "" , content . contains ( "" Could not detect death of command line test runner. "" ) ; bb . flip ( ) { return wrapped . addTestCompileSourceRoot ( String key , long by ) ; WikiPage suitePage = crawler . addPage ( root , PathParser . parse ( destinationChildTwo ) ; int writeSome ( ) ; public int getJuteMaxBufferSize ( ) ; public abstract long getQuorumVerifierVersion ( ) ; LOG . info ( "" notThisHost "" ) . getExceptions ( ) throws Exception { } @Override public void setResponseCachingEnabled ( boolean drop ) ; public int getMaxSessionTimeout ( ) ; fillData ( ) ; WikiPage page ) ; if ( ! parser . peek ( ) ; sb . append ( "" Location "" ) ; } interface StringCallback extends AsyncCallback { public void announceNumberTestsToRun ( tests ) ; assertEquals ( 2 , values . get ( "" entity.id "" ) , request . getResource ( ) ; assertEquals ( "" /foo "" + "" / "" ) , page , "" |a|b|c| ) )"
16,"['public', 'void']","[('recreateSocketAddresses', 7.738740133106331e-05), ('(', 1.0), (')', 0.6666666666666666), (';', 0.4777126381547333), ('List', 0.007079900152422188), ('<', 0.9456681350954479), ('WikiPage', 0.12451923076923077), ('>', 0.9846153846153847), ('createDummyPageList', 0.0027397260273972603), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('try', 0.003976230974839294), ('{', 0.9706896551724138), ('zk', 0.031578947368421054), ('.', 0.7922077922077922), ('stat', 0.009216589861751152), (',', 0.19047619047619047), ('stat', 0.23529411764705882), ('.', 0.8), ('getMtime', 0.0787037037037037), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('stat', 0.0002319468068656255), ('=', 0.6206896551724138), ('(', 0.0784313725490196), ('(', 0.057567316620241414), ('0x7FFF', 0.0011049723756906078), ('&', 1.0), ('length', 1.0), (')', 1.0), (')', 0.07784431137724551), (';', 0.6920507070614618), ('this', 0.009366232962954782), ('.', 1.0), ('config', 0.013368983957219251), ('=', 0.4444444444444444), ('mockery', 0.21153846153846154), ('.', 1.0), ('checking', 0.1893028846153846), ('(', 1.0), ('new', 0.9824046920821115), ('MockWidgetRoot', 0.024398625429553265), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('return', 0.02244361483575957), ('html', 0.021837659662134322), (';', 0.3333333333333333), ('}', 1.0), ('public', 0.0813974108884554), ('void', 0.7639198218262806), (')', 'Paren balancing')]","public void recreateSocketAddresses ( ) ; List < WikiPage > createDummyPageList ( ) ; try { zk . stat , stat . getMtime ( ) ; stat = ( ( 0x7FFF & length ) ) ; this . config = mockery . checking ( new MockWidgetRoot ( ) ; return html ; } public void )"
17,"['boolean', 'getRequestStaleLatencyCheck']","[('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('this', 0.009366232962954782), ('.', 1.0), ('method', 0.034759358288770054), ('=', 0.4166666666666667), ('=', 0.025078369905956112), ('null', 0.518327605956472), ('|', 0.08193908193908193), ('|', 1.0), ('sslEngine', 0.003992015968063872), ('=', 1.0), ('=', 0.4), ('null', 0.518327605956472), ('&', 0.07550407550407551), ('&', 1.0), ('!', 0.1765601217656012), ('Character', 0.008620689655172414), ('.', 1.0), ('isDigit', 0.2982456140350877), ('(', 1.0), ('s', 0.2608695652173913), (')', 0.4393305439330544), (';', 0.5967741935483871), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('0', 0.07330659536541889), (',', 0.4376750700280112), ('0', 0.285363859362224), (',', 0.5541706615532119), ('pageDriver', 0.0024529844644317253), ('.', 1.0), ('countOfTagWithIdPrefix', 1.0), ('(', 1.0), ('""', 0.8333333333333334), (',', 0.0028781730678493914), ('testContext', 0.0037155762785953663), (')', 0.5384615384615384), (';', 0.9655172413793104), ('void', 0.04505290596213744), ('setContinuousTimeout', 0.006213841868437969), ('(', 1.0), ('boolean', 1.0), ('canBeReadOnly', 0.0017513134851138354), (')', 1.0), (';', 0.3333333333333333), ('<', 0.033080032693454685), ('T', 1.0), ('>', 0.9951795613400819), ('T', 0.0531540847983454), ('get', 0.40875912408759124), ('(', 1.0), ('String', 0.22434150772025432), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('Transcoder', 0.10701754385964912), ('<', 1.0), ('T', 0.9695639449809774), ('>', 0.9951795613400819), ('tc', 0.32430196483971047), (')', 0.8272900763358778), ('throws', 0.19533639143730888), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('context', 0.006944444444444444), ('.', 0.36363636363636365), ('htmlPageFactory', 0.08292079207920793), ('.', 0.8656716417910447), ('newPage', 0.8620689655172413), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('count', 0.0025252525252525255), ('=', 0.75), ('9', 0.017857142857142856), ('+', 0.3333333333333333), ('keys', 1.0), ('.', 1.0), ('length', 0.10526315789473684), (',', 0.05568181818181818), ('found', 0.05555555555555555), ('.', 0.6), ('size', 0.375), ('(', 0.985838779956427), (')', 1.0), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('RequestBuilder', 0.00015782828282828284), ('request', 1.0), ('=', 1.0), ('new', 0.6232686980609419), ('ComponentFactory', 0.0018689405443289336), ('(', 1.0), ('rootPath', 0.08333333333333333), ('.', 0.20833333333333334), ('getValue', 1.0), ('(', 1.0), ('""', 0.20408163265306123), ('b...', 4.7183165046711336e-05), ('""', 1.0), (',', 1.0), ('""', 0.38678420515809414), ('dir', 0.0022692889561270802), ('""', 1.0), (')', 0.6190476190476191), (';', 0.6090406958288362), ('<', 0.033080032693454685), ('T', 1.0), ('>', 0.9951795613400819), ('tc', 0.32430196483971047), (')', 0.8272900763358778), ('throws', 0.19533639143730888), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('TestRoot', 0.0029987373737373735), ('root', 1.0), ('=', 1.0), ('context', 0.05070422535211268), ('.', 0.9058823529411765), ('variableSource', 0.007425742574257425), (')', 1.0), (';', 0.4146341463414634), ('Node', 4.418034416488104e-05), ('elementWithText', 0.6), ('=', 1.0), ('mock', 1.0), ('(', 1.0), ('MethodInfo', 0.015135135135135135), ('.', 1.0), ('class', 1.0), (',', 0.31704361873990305), ('VRaptor2Config', 0.0019280205655526992), ('.', 1.0), ('class', 1.0), (')', 0.5668416801292407), (';', 0.683291770573566), ('Future', 0.03465947999734918), ('<', 1.0), ('Object', 0.034288926363125354), ('>', 0.9740680713128039), ('>', 0.32798833819241985), ('asyncGetBulk', 0.4069448674992385), ('(', 0.999251497005988), ('Transcoder', 0.19225037257824143), ('<', 1.0), ('T', 0.9695639449809774), ('>', 0.9951795613400819), ('>', 0.12719751809720786), ('asyncGets', 0.1209259823332318), ('(', 1.0), ('String', 0.9825870646766169), ('child', 0.0005462348809988295), (':', 0.6363636363636364), ('dir', 0.06666666666666667), ('.', 1.0), ('listFiles', 0.2564102564102564), ('(', 1.0), (')', 0.9166666666666666), ('{', 0.09111004324843826), ('for', 0.01687406345690273), ('(', 1.0), ('ZooKeeper', 0.003142183817753339), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","boolean getRequestStaleLatencyCheck ( ) ; this . method = = null | | sslEngine = = null & & ! Character . isDigit ( s ) ; assertEquals ( 0 , 0 , pageDriver . countOfTagWithIdPrefix ( "" , testContext ) ; void setContinuousTimeout ( boolean canBeReadOnly ) ; < T > T get ( String key , Transcoder < T > tc ) throws Exception { context . htmlPageFactory . newPage ( ) throws Exception { count = 9 + keys . length , found . size ( ) throws Exception { RequestBuilder request = new ComponentFactory ( rootPath . getValue ( "" b... "" , "" dir "" ) ; < T > tc ) throws Exception { TestRoot root = context . variableSource ) ; Node elementWithText = mock ( MethodInfo . class , VRaptor2Config . class ) ; Future < Object > > asyncGetBulk ( Transcoder < T > > asyncGets ( String child : dir . listFiles ( ) { for ( ZooKeeper ) ) )"
18,"['boolean', 'hasChildPage']","[('(', 1.0), ('""', 0.42028985507246375), ('ObsoletePage', 0.00018873266018684534), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('1', 0.06305704099821748), (')', 0.5583468395461912), (';', 0.450187265917603), ('verify', 0.004959243632507897), ('(', 1.0), ('mockX509ExtendedTrustManager', 0.023715415019762844), (',', 1.0), ('times', 0.5), ('(', 1.0), ('0', 0.13333333333333333), (')', 0.5217086834733894), (';', 0.2893815635939323), ('boolean', 0.02482935342066315), ('removeObserver', 0.12403100775193798), ('(', 1.0), ('ConnectionObserver', 0.9831081081081081), ('obs', 0.9982788296041308), (')', 0.9982847341337907), ('{', 0.00847457627118644), ('return', 0.14763176754185942), ('getPage', 0.0007171029042667623), ('(', 1.0), (')', 0.35909090909090907), (',', 0.04123017779913503), ('""', 0.23656499636891795), ('id', 0.00529500756429652), ('""', 1.0), (',', 0.7876106194690266), ('""', 0.38678420515809414), ('replaced line', 0.0001080613788631943), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), ('will', 0.006627051624732157), ('(', 1.0), ('returnValue', 0.972176759410802), ('(', 0.9983193277310924), ('""', 0.21227197346600332), ('1.0', 0.000141549495140134), ('""', 1.0), (',', 0.8571428571428571), ('new', 0.049249599300597406), ('Object', 0.14217557251908397), ('[', 0.8880597014925373), (']', 0.9389830508474576), ('{', 0.24677045379264656), ('new', 0.02953020134228188), ('DataProducerDirectory', 0.02702702702702703), ('(', 1.0), ('src', 0.75), (',', 0.4146341463414634), ('File', 0.16), ('.', 0.1415929203539823), ('createTempFile', 0.4864864864864865), ('(', 1.0), ('""', 0.9454545454545454), ('I messed up', 0.00018873266018684534), ('""', 1.0), (')', 1.0), (')', 0.23592152879182274), (';', 0.6920507070614618), ('}', 0.17806887715655306), ('else', 0.0523142401134953), ('if', 0.22699386503067484), ('(', 1.0), ('scanner', 0.009826468743466444), (')', 0.52), ('.', 0.2845528455284553), ('build', 0.008430195427257632), ('(', 1.0), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}']","boolean hasChildPage ( "" ObsoletePage "" ) ; assertEquals ( 1 ) ; verify ( mockX509ExtendedTrustManager , times ( 0 ) ; boolean removeObserver ( ConnectionObserver obs ) { return getPage ( ) , "" id "" , "" replaced line "" ) ; will ( returnValue ( "" 1.0 "" , new Object [ ] { new DataProducerDirectory ( src , File . createTempFile ( "" I messed up "" ) ) ; } else if ( scanner ) . build ( ) ) )"
19,"['public', 'boolean']","[('onCreateOptionsMenu', 0.01201923076923077), ('(', 1.0), ('Menu', 0.5), ('menu', 1.0), (')', 1.0), (';', 0.5), ('html', 0.00296008305904703), ('.', 0.9710144927536232), ('setPageTitle', 0.06382978723404255), ('(', 1.0), ('new', 0.8823529411764706), ('ClickHandler', 0.0003436426116838488), ('(', 1.0), (')', 'Paren balancing'), (')', 'Paren balancing')]",public boolean onCreateOptionsMenu ( Menu menu ) ; html . setPageTitle ( new ClickHandler ( ) )
20,"['private', 'void']","[('verify', 0.004507888805409466), ('(', 1.0), (')', 'Paren balancing')]",private void verify ( )
21,"['public', 'void']","[('testServerStats', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('public', 0.04915063288343016), ('long', 0.15648403626330312), ('getAvgRequestLatency', 0.016722408026755852), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('RequestPathMetricsCollector', 4.418034416488104e-05), ('.', 1.0), ('PathStatsQueue', 1.0), ('pathStatsQueue', 1.0), ('=', 1.0), ('requestPathMetricsCollector', 1.0), ('.', 1.0), ('registerRequest', 0.42105263157894735), ('(', 1.0), (')', 'Paren balancing')]",public void testServerStats ( ) ; public long getAvgRequestLatency ( ) ; RequestPathMetricsCollector . PathStatsQueue pathStatsQueue = requestPathMetricsCollector . registerRequest ( )
22,"['void', 'set']","[('(', 1.0), ('String', 0.4244604316546763), ('instanceName', 0.002419040187280531), (',', 0.6610169491525424), ('fileSupportName', 0.03896103896103896), ('(', 1.0), (')', 1.0), ('!', 0.001268620855358001), ('=', 1.0), ('null', 0.7410909090909091), ('?', 0.05834405834405834), ('ref', 0.0661764705882353), ('.', 1.0), ('get', 1.0), ('(', 1.0), ('1', 0.07311534968210717), (')', 0.5583468395461912), (')', 0.2644194756554307), (';', 0.6920507070614618), ('long', 0.030583843248138905), ('decr', 0.3516146993318486), ('(', 1.0), ('String', 0.9961180124223602), ('pageName', 0.005618415918845103), ('=', 0.28651685393258425), ('""', 0.40350877192982454), ('[]', 0.0017064846416382253), ('""', 1.0), (';', 0.5714285714285714), ('else', 0.005952380952380952), ('if', 0.5454545454545454), ('(', 1.0), ('commandLine', 0.01275350198620113), (')', 'Paren balancing'), (')', 'Paren balancing')]","void set ( String instanceName , fileSupportName ( ) ! = null ? ref . get ( 1 ) ) ; long decr ( String pageName = "" [] "" ; else if ( commandLine ) )"
23,"['public', 'void']","[('makeClassThatDoesntExist', 0.00015477480266212662), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('makeResultForDate', 4.418034416488104e-05), ('(', 1.0), ('""', 0.8), ('Exit-Code', 0.00018873266018684534), ('""', 1.0), (')', 0.25), (';', 0.6090406958288362), ('SASLStepOperation', 0.00032030749519538755), ('saslStep', 1.0), ('(', 1.0), ('String', 0.75), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('int', 0.5105263157894737), ('argsIndex', 0.00016299918500407498), (')', 1.0), ('{', 1.0), ('if', 0.09225356700762265), ('(', 1.0), ('message', 0.0014635166213673428), (',', 0.19230769230769232), ('Throwable', 0.2682926829268293), ('cause', 0.4036697247706422), (')', 0.96875), ('{', 0.46153846153846156), ('Request', 0.0014333181314743631), ('request', 0.5714285714285714), ('=', 0.07380073800738007), ('new', 0.6232686980609419), ('MockRequest', 0.01763812638710431), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('OperationTimeoutException', 0.1804635761589404), (';', 0.9960111687275628), ('Future', 0.15338406087304765), ('<', 1.0), ('Long', 0.18699643994753606), ('>', 0.8967254408060453), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public void makeClassThatDoesntExist ( ) ; makeResultForDate ( "" Exit-Code "" ) ; SASLStepOperation saslStep ( String key , int argsIndex ) { if ( message , Throwable cause ) { Request request = new MockRequest ( ) throws OperationTimeoutException ; Future < Long >"
24,"['private', 'static']","[('String', 0.2157676348547718), ('translateTo', 0.06694560669456066), ('(', 1.0), ('SourcePage', 0.24324324324324326), ('page', 0.8484848484848485), (',', 0.7142857142857143), ('""', 0.12040133779264214), ('query', 0.001837043440674303), ('""', 1.0), (')', 0.4117647058823529), ('[', 0.0026030093327407784), ('0', 0.6388888888888888), (']', 1.0), (',', 0.4085820895522388), ('8', 0.044444444444444446), (',', 0.22580645161290322), ('9', 0.4375), (',', 0.8333333333333334), ('values', 0.08695652173913043), ('.', 0.9380530973451328), ('get', 0.9007633587786259), ('(', 1.0), ('String', 0.22434150772025432), ('name', 0.03573936792820913), (',', 0.32647462277091904), ('final', 0.19248826291079812), ('int', 0.3832468495181616), ('clientPorts', 0.0035460992907801418), ('[', 1.0), ('id', 0.125), (']', 1.0), ('=', 0.3), ('replace', 0.005333333333333333), ('(', 1.0), ('String', 0.8125), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('long', 0.21889338731443994), ('by', 0.2550628044091259), (')', 0.4462311557788945), (';', 0.7569158328428487), ('votes', 0.00035344275331904834), ('.', 0.7272727272727273), ('put', 0.8275862068965517), ('(', 1.0), ('value', 0.0017905102954341987), (')', 0.41843971631205673), (';', 0.5893958076448829), ('long', 0.030583843248138905), ('incr', 0.34660356347438753), ('(', 1.0), ('String', 0.995279307631786), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('int', 0.5105263157894737), (')', 'Paren balancing'), (')', 'Paren balancing')]","private static String translateTo ( SourcePage page , "" query "" ) [ 0 ] , 8 , 9 , values . get ( String name , final int clientPorts [ id ] = replace ( String key , long by ) ; votes . put ( value ) ; long incr ( String key , int ) )"
25,"['int', 'getMaxSessionTimeout']","[('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('public', 0.04915063288343016), ('void', 0.38510051241623966), ('oneTableWithNestedPair', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('addPageDirectory', 0.0015782828282828283), ('(', 1.0), ('""', 1.0), ('Resources/updateList', 0.000141549495140134), ('""', 1.0), (',', 0.75), ('""', 0.38678420515809414), ('createTestSlimWithString', 0.0004322455154527772), ('""', 1.0), (',', 1.0), ('html', 0.026956141629025206), (')', 0.9545454545454546), ('{', 0.016706443914081145), ('super', 0.007948400547266922), ('.', 0.9223744292237442), ('onDetach', 0.002386634844868735), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), (';', 0.07471926288511374), ('String', 0.10474308300395258), ('filename', 0.004395604395604396), (',', 0.5211267605633803), ('FitNesseContext', 0.1044776119402985), ('context', 0.95), (',', 0.5346534653465347), ('request', 0.3860103626943005), (',', 0.13400758533501897), ('SampleFileUtility', 0.02359882005899705), ('.', 1.0), ('addFile', 0.11538461538461539), ('(', 1.0), ('new', 0.24489795918367346), ('ParanamerNameProvider', 0.0013745704467353953), ('(', 1.0), (')', 1.0), (')', 0.1723209995194618), (';', 0.6920507070614618), ('long', 0.030583843248138905), ('incr', 0.34660356347438753), ('(', 1.0), ('String', 0.995279307631786), ('prefix', 0.02091299258681233), ('=', 0.0410958904109589), ('""', 0.6666666666666666), ('testing', 0.0008532423208191126), ('""', 1.0), (';', 0.5), ('WikiPageUtil', 0.004629629629629629), ('.', 1.0), ('addPage', 0.8741573033707866), ('(', 1.0), ('root', 0.6751091703056769), (')', 0.22), (';', 0.5912596401028277), ('void', 0.04505290596213744), ('error', 0.004499678594386115), ('(', 1.0), ('""', 0.5862068965517241), ('GET /something HTTP/1.1', 0.000141549495140134), ('\\', 1.0), ('r', 1.0), ('\\', 0.9495798319327731), ('n', 0.8539823008849557), ('""', 0.959409594095941), (')', 0.32232105040237186), (';', 0.6090406958288362), ('}', 0.17806887715655306), ('act', 0.0005320092214931725), ('.', 1.0), ('startActivityForResult', 0.8333333333333334), ('(', 1.0), ('i', 1.0), ('.', 0.022304832713754646), (')', 'Paren balancing'), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}']","int getMaxSessionTimeout ( ) ; public void oneTableWithNestedPair ( ) throws Exception { addPageDirectory ( "" Resources/updateList "" , "" createTestSlimWithString "" , html ) { super . onDetach ( ) throws Exception ; String filename , FitNesseContext context , request , SampleFileUtility . addFile ( new ParanamerNameProvider ( ) ) ; long incr ( String prefix = "" testing "" ; WikiPageUtil . addPage ( root ) ; void error ( "" GET /something HTTP/1.1 \ r \ n "" ) ; } act . startActivityForResult ( i . ) )"
26,"['public', 'void']","[('functionCallWithOneArgument', 0.00030954960532425323), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('while', 0.0013033201528639907), ('(', 1.0), ('running', 0.06363636363636363), (')', 0.5), ('{', 1.0), ('return', 0.14763176754185942), ('paramName', 0.0007171029042667623), (';', 0.3333333333333333), ('}', 1.0), ('return', 0.1317609505231424), ('vec', 0.0011025358324145535), (';', 1.0)]",public void functionCallWithOneArgument ( ) ; while ( running ) { return paramName ; } return vec ;
27,"['public', 'void']","[('linkNameDifferent', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('""', 0.3830213903743315), ('request::', 9.436633009342267e-05), ('""', 1.0), ('+', 1.0), ('page', 0.0009950248756218905), ('.', 0.75), ('numberOfChildren', 0.008695652173913044), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('boolean', 0.02482935342066315), ('nb', 0.0004306632213608958), ('=', 1.0), ('n', 0.8), ('*', 0.07692307692307693), (')', 'Paren balancing')]","public void linkNameDifferent ( ) ; assertEquals ( "" request:: "" + page . numberOfChildren ( ) ; boolean nb = n * )"
28,"['protected', 'Object']","[('[', 0.2), (']', 0.9389830508474576), ('{', 0.24677045379264656), ('""', 0.45100671140939597), ('Prune', 0.009732360097323601), ('""', 1.0), (',', 0.3076923076923077), ('null', 0.01493515955121667), (',', 0.4018151815181518), ('null', 0.36997635933806144), (',', 0.4018151815181518), ('ElemValue', 0.0035460992907801418), ('}', 'Bracket balancing'), '}']","protected Object [ ] { "" Prune "" , null , null , ElemValue"
29,"['public', 'void']","[('resetAllConnectionStats', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('IOException', 0.1847106248200403), (',', 0.17965705378020266), ('InterceptionException', 0.06653620352250489), ('{', 0.47540983606557374), ('interceptorStack', 0.2037037037037037), ('.', 1.0), ('add', 0.903448275862069), ('(', 0.995049504950495), ('v2', 0.001153846153846154), (')', 0.5714285714285714), (';', 0.6), ('}', 0.17806887715655306), ('super', 0.00407873736478099), ('.', 1.0), ('doExecute', 0.002386634844868735), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('Future', 0.03465947999734918), ('<', 1.0), ('Long', 0.18699643994753606), ('>', 0.8967254408060453), ('(', 0.01364877161055505), ('new', 0.02954341987466428), ('PageTitle', 0.020618556701030927), ('(', 1.0), ('""', 0.5526315789473685), ('![', 0.00033028215532697935), ('\\', 1.0), ('nstuff', 1.0), ('\\', 1.0), ('n]!', 1.0), ('""', 0.8888888888888888), (',', 1.0), ('""', 0.38678420515809414), ('%p', 0.0023773503349902745), ('""', 1.0), (',', 1.0), ('""', 0.38678420515809414), ('testSlim', 0.0050788848065701315), ('""', 1.0), (',', 1.0), ('""', 0.38678420515809414), ('99', 0.0003241841365895829), ('""', 1.0), (';', 0.25), ('final', 0.041666666666666664), ('String', 0.16149068322981366), ('key', 0.38055322715842416), (',', 0.8474898881751131), ('int', 0.5105263157894737), ('by', 0.4236348818255909), (')', 0.47809377401998465), ('throws', 0.23660977045320777), ('IOException', 0.1847106248200403), ('{', 0.46141855027279816), ('ZipEntry', 0.0015936254980079682), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}']","public void resetAllConnectionStats ( ) throws IOException , InterceptionException { interceptorStack . add ( v2 ) ; } super . doExecute ( ) ; Future < Long > ( new PageTitle ( "" ![ \ nstuff \ n]! "" , "" %p "" , "" testSlim "" , "" 99 "" ; final String key , int by ) throws IOException { ZipEntry )"
30,"['public', 'void']","[('setMaxClientCnxnsPerHost', 0.004798018882525925), ('(', 1.0), ('int', 1.0), ('i', 0.1341183228029868), ('=', 0.9117647058823529), ('0', 0.7551789077212806), (')', 0.2639138240574506), (';', 0.2893815635939323), ('mockedComparer', 0.0002319468068656255), ('=', 0.25), ('mock', 1.0), ('(', 1.0), ('Evaluation', 0.003243243243243243), ('.', 1.0), ('class', 1.0), ('.', 0.10480613893376414), ('getDeclaredMethod', 0.2697495183044316), ('(', 1.0), ('""', 0.9808917197452229), ('submit', 0.0006133811456072474), ('""', 1.0), (',', 1.0), ('LocalDateTime', 0.00014570887367040654), ('.', 1.0), ('now', 0.5), ('(', 1.0), (')', 1.0), ('.', 0.0554925516578568), ('length', 0.005364669817345766), (',', 0.05568181818181818), ('actual', 0.037037037037037035), ('.', 0.7391304347826086), ('length', 0.08235294117647059), (')', 0.1375), (';', 0.5449101796407185), ('List', 0.007079900152422188), ('<', 0.9456681350954479), ('SlimTable', 0.009615384615384616), ('>', 1.0), ('clazz', 0.023255813953488372), (')', 0.47058823529411764), (';', 0.36666666666666664), ('int', 0.01989219996023769), ('getRequestThrottleStallTime', 0.02823179791976226), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('close', 9.940577437098235e-05), ('(', 1.0), (')', 0.9647266313932981), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('LazyInterceptorHandler', 0.0003156565656565657), ('handler', 1.0), ('=', 1.0), ('}', 'Bracket balancing'), '}']","public void setMaxClientCnxnsPerHost ( int i = 0 ) ; mockedComparer = mock ( Evaluation . class . getDeclaredMethod ( "" submit "" , LocalDateTime . now ( ) . length , actual . length ) ; List < SlimTable > clazz ) ; int getRequestThrottleStallTime ( ) ; close ( ) throws Exception { LazyInterceptorHandler handler ="
31,"['public', 'Object']","[('instantiate', 0.04926108374384237), ('(', 1.0), ('target', 0.24390243902439024), (',', 0.6346153846153846), ('Parameters', 0.15384615384615385), ('parameters', 0.625), (')', 0.5714285714285714), (';', 0.5), ('void', 0.04505290596213744), ('trace', 0.0006428112277694451), ('(', 1.0), ('Function0', 0.07142857142857142), ('<', 1.0), ('Throwable', 0.5), ('>', 1.0), ('{', 0.6), ('V', 0.041666666666666664), ('fetch', 1.0), ('(', 1.0), ('K', 0.3333333333333333), ('key', 1.0), (',', 0.3877551020408163), ('Transcoder', 0.10701754385964912), (')', 'Paren balancing'), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}']","public Object instantiate ( target , Parameters parameters ) ; void trace ( Function0 < Throwable > { V fetch ( K key , Transcoder ) )"
32,"['public', 'Double']","[('convert', 0.7777777777777778), ('(', 1.0), ('null', 0.10408921933085502), (')', 0.45076923076923076), ('{', 0.37463002114164906), ('throw', 0.02931787087106652), ('new', 0.9767932489451476), ('ParseError', 0.010582010582010581), ('(', 1.0), ('""', 1.0), ('1', 0.0016514107766348967), ('""', 0.9333333333333333), (',', 0.4642857142857143), ('""', 0.38678420515809414), ('EXISTS', 0.0001080613788631943), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), ('}', 0.17806887715655306), ('public', 0.0813974108884554), ('void', 0.7639198218262806), ('error', 0.00030954960532425323), ('(', 1.0), ('error', 0.019704433497536946), (')', 0.75), (';', 0.75), ('boolean', 0.02482935342066315), ('waitForQueues', 0.16106804478897502), ('(', 1.0), ('long', 1.0), ('timeout', 0.388861013547416), (',', 0.9872122762148338), ('TimeUnit', 0.9625468164794008), ('unit', 0.897196261682243), (')', 'Paren balancing')]","public Double convert ( null ) { throw new ParseError ( "" 1 "" , "" EXISTS "" ) ; } public void error ( error ) ; boolean waitForQueues ( long timeout , TimeUnit unit )"
33,"['public', 'void']","[('shouldSetMovedPermanentlyStatus', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('void', 0.04505290596213744), ('setTestStatusOnRow', 0.009213627598028712), ('(', 1.0), ('int', 0.9655172413793104), ('val', 0.0913268236645606), (')', 0.9968553459119497), (';', 0.969309462915601), ('getLogger', 7.731560228854182e-05), ('(', 1.0), (')', 0.9555555555555556), ('.', 0.0554925516578568), ('thenReturn', 0.0818750798313961), ('(', 1.0), ('null', 0.0483619344773791), (')', 0.45076923076923076), ('{', 0.37463002114164906), ('Object', 0.0036484461528438336), ('object', 0.008695652173913044), ('=', 0.21428571428571427), ('new', 0.5), ('AsmBasedTypeCreator', 0.0010512790561850252), ('(', 1.0), ('provider', 0.4444444444444444), ('.', 0.6083333333333333), ('stop', 0.039735099337748346), ('(', 1.0), (')', 0.9672131147540983), (';', 0.4777126381547333), ('assertFalse', 0.005390001988115487), ('(', 1.0), ('searcher', 0.10387323943661972), ('.', 0.9745762711864406), ('pageMatches', 0.9008264462809917), ('(', 1.0), ('page', 0.9487179487179487), (')', 0.44728079911209767), (';', 0.3467202141900937), ('xmlResultsFile', 9.940577437098235e-05), ('.', 0.6666666666666666), ('delete', 0.4482758620689655), ('(', 0.9652777777777778), ('String', 0.739568345323741), ('[', 0.014670308232539992), (']', 0.9407114624505929), ('{', 0.24677045379264656), ('""', 0.45100671140939597), ('arg0', 0.014598540145985401), ('""', 1.0), (',', 0.375), ('""', 0.38678420515809414), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public void shouldSetMovedPermanentlyStatus ( ) ; void setTestStatusOnRow ( int val ) ; getLogger ( ) . thenReturn ( null ) { Object object = new AsmBasedTypeCreator ( provider . stop ( ) ; assertFalse ( searcher . pageMatches ( page ) ; xmlResultsFile . delete ( String [ ] { "" arg0 "" , "" ) ) )"
34,"['private', 'void']","[('doSimpleRun', 0.004507888805409466), ('(', 1.0), ('simpleSlimDecisionTable', 0.1282051282051282), ('(', 1.0), (')', 1.0), ('{', 0.09111004324843826), ('result', 0.0043651052185810155), ('.', 0.6666666666666666), ('substring', 0.016786570743405275), ('(', 1.0), ('0', 0.3882978723404255), (',', 0.4376750700280112), ('0', 0.285363859362224), (',', 0.5541706615532119), ('callCounts', 0.001635322976287817), ('[', 1.0), ('0', 0.5555555555555556), (']', 1.0), (',', 0.4085820895522388), ('Stat', 0.012962962962962963), ('to', 0.015873015873015872), (')', 1.0), (';', 0.9746192893401016), ('long', 0.030583843248138905), ('getPacketsReceived', 0.004732739420935412), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('<', 0.033080032693454685), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}']","private void doSimpleRun ( simpleSlimDecisionTable ( ) { result . substring ( 0 , 0 , callCounts [ 0 ] , Stat to ) ; long getPacketsReceived ( ) ; < )"
35,"['public', 'void']","[('testComplete', 0.010602073982355673), ('(', 1.0), ('TestPage', 0.17582417582417584), ('testPage', 0.3310344827586207), (',', 0.390625), ('String', 0.072), ('.', 0.15150842945874002), ('format', 0.14682779456193354), ('(', 0.9970238095238095), ('""', 0.6512968299711815), ('GET /PageOne.PageTwo HTTP/1.1', 0.00023591582523355665), ('\\', 1.0), ('r', 1.0), ('\\', 0.9495798319327731), ('n', 0.8539823008849557), ('""', 0.959409594095941), ('+', 0.44176196526895384), ('CLIENT_PORT_QP1', 0.005472636815920398), (',', 0.8636363636363636), ('quorumCfgSection', 0.3783783783783784), (')', 0.6774193548387096), (';', 1.0), ('expectedEvents', 0.00012149594645342288), ('.', 1.0), ('add', 1.0), ('(', 0.995049504950495), ('new', 0.11653846153846154), ('ZKClientConfig', 0.0006872852233676976), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('q1', 0.00038657801144270914), ('.', 0.8857142857142857), ('shutdown', 0.24324324324324326), ('(', 0.9738562091503268), ('qb', 0.014492753623188406), ('.', 1.0), ('setUp', 0.12195121951219512), ('(', 1.0), (')', 0.9781746031746031), (';', 0.4777126381547333), ('singleInterfaceRegister', 0.0005743444741434536), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing')]","public void testComplete ( TestPage testPage , String . format ( "" GET /PageOne.PageTwo HTTP/1.1 \ r \ n "" + CLIENT_PORT_QP1 , quorumCfgSection ) ; expectedEvents . add ( new ZKClientConfig ( ) ; q1 . shutdown ( qb . setUp ( ) ; singleInterfaceRegister ) ) )"
36,"['Object', 'next']","[('(', 1.0), (')', 'Paren balancing')]",Object next ( )
37,"['public', 'static']","[('Symbol', 0.0031120331950207467), ('parse', 1.0), ('(', 1.0), (')', 'Paren balancing')]",public static Symbol parse ( )
38,"['public', 'void']","[('ReInit', 0.00030954960532425323), ('(', 1.0), ('stream', 0.14285714285714285), (',', 0.7297297297297297), ('bark', 0.5185185185185185), (')', 1.0), (';', 1.0), ('public', 0.04915063288343016), ('int', 0.20082774931020891), ('getConnectionTokenFillCount', 0.03132530120481928), ('(', 1.0), (')', 1.0), ('{', 0.09111004324843826), ('LOG', 0.017134666753534433), ('.', 1.0), ('warn', 0.07734806629834254), ('(', 0.945054945054945), ('SKIP_VALIDATION_INPUT_NULL', 0.017543859649122806), (')', 1.0), (';', 1.0), ('File', 0.0021648368640791713), ('inputFile', 0.00881057268722467), ('=', 1.0), ('FileUtil', 0.5), ('.', 1.0), ('createFile', 0.2931726907630522), ('(', 1.0), ('FileUtil', 0.01098901098901099), ('.', 1.0), ('createFile', 0.2931726907630522), ('(', 1.0), ('file', 0.07692307692307693), (')', 0.45320197044334976), ('throws', 0.21348314606741572), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('String', 0.07275883838383838), ('name', 0.025121555915721232), (',', 0.32647462277091904), ('Utils', 0.002347417840375587), ('.', 1.0), ('escapeHTML', 0.1891891891891892), ('(', 1.0), ('contents', 0.037037037037037035), (')', 0.3333333333333333), (';', 0.4479166666666667), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public void ReInit ( stream , bark ) ; public int getConnectionTokenFillCount ( ) { LOG . warn ( SKIP_VALIDATION_INPUT_NULL ) ; File inputFile = FileUtil . createFile ( FileUtil . createFile ( file ) throws Exception { String name , Utils . escapeHTML ( contents ) ; )"
39,"['public', 'void']","[('resetStatistics', 0.009518650363720786), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('response', 0.003678013651726347), ('.', 0.7337278106508875), ('getContentType', 0.025766871165644172), ('(', 1.0), (')', 1.0), ('.', 0.0554925516578568), ('parse', 0.012773023374632776), ('(', 1.0), ('""', 0.6748466257668712), ('name', 0.0038690195338303294), ('""', 1.0), (',', 0.6224489795918368), ('""', 0.38678420515809414), ('Reset Content', 0.0001080613788631943), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), ('Collection', 0.002661865735934083), ('<', 0.9877551020408163), ('String', 0.7289890377588307), (',', 0.6009784436630484), ('String', 0.18341388959552277), ('name', 0.024622892635314995), (',', 0.32647462277091904), ('Stat', 0.03051643192488263), ('stat', 0.9365079365079365), (',', 0.046511627906976744), ('this', 0.11764705882352941), ('.', 0.3543859649122807), ('fastFitServer', 0.0042780748663101605), ('.', 0.5), ('start', 1.0), ('(', 1.0), ('new', 0.0037735849056603774), ('File', 0.06769759450171821), ('(', 0.9505962521294719), ('""', 0.27060931899641577), ('Output of TestPage', 0.0013211286213079174), ('""', 1.0), (',', 0.43243243243243246), ('Locale', 0.0002914177473408131), ('.', 0.9), ('getDefault', 0.23809523809523808), ('(', 1.0), (')', 1.0), ('{', 0.09111004324843826), ('list', 0.0005212065932634047), ('(', 0.52), (')', 0.09720534629404617), (';', 0.4777126381547333), ('assertHtmlWithGreatGrandChildFilters', 2.209017208244052e-05), ('(', 1.0), ('renderHierarchicalFiltersTOCWidgetByVar', 0.5), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('handlers', 5.522543020610131e-05), ('.', 0.8), ('put', 1.0), ('(', 1.0), ('""', 0.5487914055505819), ('td', 0.0008964801358875154), ('""', 1.0), (',', 0.85), ('""', 0.38678420515809414), ('front page', 0.0004322455154527772), ('""', 1.0), (')', 1.0), (')', 0.23592152879182274), (';', 0.6920507070614618), ('public', 0.04915063288343016), ('long', 0.15648403626330312), ('getMaxWriteQueuePollTime', 0.06800445930880714), ('(', 1.0), (')', 1.0), ('{', 0.09111004324843826), ('return', 0.14763176754185942), ('StringUtils', 0.002151308712800287), ('.', 1.0), ('isNumeric', 0.017241379310344827), (')', 'Paren balancing'), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public void resetStatistics ( ) ; response . getContentType ( ) . parse ( "" name "" , "" Reset Content "" ) ; Collection < String , String name , Stat stat , this . fastFitServer . start ( new File ( "" Output of TestPage "" , Locale . getDefault ( ) { list ( ) ; assertHtmlWithGreatGrandChildFilters ( renderHierarchicalFiltersTOCWidgetByVar ( ) ; handlers . put ( "" td "" , "" front page "" ) ) ; public long getMaxWriteQueuePollTime ( ) { return StringUtils . isNumeric ) )"
40,"['public', 'void']","[('otherwise', 0.00030954960532425323), ('(', 1.0), ('new', 0.42857142857142855), ('SymbolType', 0.00859106529209622), ('[', 1.0), (']', 0.9836065573770492), (',', 0.02119907254057635), ('actual', 0.005555555555555556), ('.', 0.7391304347826086), ('version', 0.047058823529411764), ('=', 0.32142857142857145), ('=', 0.171875), ('Boolean', 0.000572737686139748), ('.', 1.0), ('class', 0.24489795918367346), (')', 0.5668416801292407), (';', 0.683291770573566), ('assertFalse', 0.005390001988115487), ('(', 1.0), ('data', 0.06690140845070422), ('.', 0.25475285171102663), ('hasAttribute', 0.19288389513108614), ('(', 1.0), ('PropertyVERSIONS', 0.012987012987012988), (')', 0.75), (')', 0.5), (';', 0.6920507070614618), ('abstract', 0.0028054518544699462), ('void', 0.6059602649006622), ('kill', 0.0219435736677116), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('void', 0.04505290596213744), ('kill', 0.004071137775873152), ('(', 1.0), (')', 1.0), ('.', 0.0554925516578568), ('use', 0.0016604930387022609), ('(', 1.0), ('MyView', 0.005917159763313609), ('.', 1.0), ('class', 1.0), (')', 0.5668416801292407), ('.', 0.04702529390808693), ('getVersion', 0.0008941116362242943), ('(', 1.0), ('String', 0.3617021276595745), ('.', 0.06539211861100273), ('.', 0.7353474320241692), ('.', 0.5), ('keys', 0.3872791519434629), (')', 0.997270245677889), (';', 0.6894065446478093), ('Map', 0.013497095142371159), ('<', 0.9966386554621849), ('String', 0.7833403449726546), (',', 0.6009784436630484), ('T', 0.35385398117527345), ('>', 0.6264626462646264), ('tc', 0.32430196483971047), (',', 0.17239185750636132), ('String', 0.9926605504587156), ('.', 0.15150842945874002), ('.', 0.7353474320241692), ('.', 0.5), ('fields', 0.0049469964664310955), ('(', 0.06666666666666667), (')', 1.0), (';', 0.4777126381547333), ('int', 0.01989219996023769), ('len', 0.004952947003467063), ('=', 0.38235294117647056), ('=', 0.14705882352941177), ('null', 0.518327605956472), (':', 0.014586014586014585), ('sv', 0.03508771929824561), ('.', 1.0), ('isZero', 0.25), ('(', 1.0), (')', 1.0), ('{', 0.09111004324843826), ('String', 0.03909049449475536), ('result', 0.041329011345218804), ('=', 0.8333333333333334), ('remotePeerBean', 0.004514672686230248), ('.', 1.0), ('getClientAddress', 1.0), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('OperationTimeoutException', 0.1804635761589404), (';', 0.9960111687275628), ('long', 0.2879455346415699), ('incr', 0.34660356347438753), ('(', 1.0), ('String', 0.995279307631786), ('[', 0.014670308232539992), (']', 0.9407114624505929), ('{', 0.24677045379264656), ('""', 0.45100671140939597), ('c', 0.004866180048661801), ('""', 1.0), (',', 0.6590909090909091), ('row2', 0.0004371266210112196), (')', 1.0), (';', 1.0), ('validIds', 4.418034416488104e-05), ('.', 1.0), ('add', 1.0), ('(', 0.995049504950495), ('new', 0.11653846153846154), ('LineToken', 0.0003436426116838488), ('(', 1.0), ('content', 1.0), (',', 0.3524590163934426), ('titles', 0.06779661016949153), (')', 1.0), ('{', 0.5), ('Descriptor', 0.0001954524724737768), ('descriptor', 1.0), (',', 0.22988505747126436), ('testSystem', 0.14), (')', 0.6842105263157895), (';', 0.5), ('}', 0.17806887715655306), ('private', 0.005852101436424898), ('native', 0.015151515151515152), ('int', 0.25), ('nEncryptUpdate', 0.3333333333333333), ('(', 1.0), ('long', 1.0), ('sessionId', 0.11590566984445559), (',', 0.47950819672131145), ('int', 0.31097560975609756), ('row', 0.04482477587612062), (',', 0.6459854014598541), ('assertions', 0.0049504950495049506), ('.', 0.5), ('addAll', 0.8208955223880597), ('(', 1.0), ('Collection', 0.0718232044198895), ('<', 0.9910858995137763), ('String', 0.7289890377588307), ('>', 0.39886867451460023), ('findBasePackages', 0.0005492996429552321), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('inSequence', 0.0012812299807815502), ('(', 1.0), ('sequence', 0.9224137931034483), (')', 0.9907407407407407), (';', 1.0), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('3', 0.01893939393939394), (')', 0.48034934497816595), (';', 0.3672316384180791), ('assertTrue', 0.013176787647175772), ('(', 1.0), ('onlyStartOffset', 0.0006648936170212766), ('.', 1.0), ('hasOffset', 1.0), ('(', 1.0), (')', 1.0), ('.', 0.0554925516578568), ('NODE_CHANGED_WATCHER', 0.00025546046749265553), ('.', 1.0), ('add', 1.0), ('(', 0.995049504950495), ('statement', 0.0019230769230769232), ('(', 0.4166666666666667), ('""', 1.0), ('LotsOfAs', 0.000141549495140134), ('""', 1.0), (')', 1.0), (',', 0.08405815503777538), ('""', 0.23656499636891795), ('AaSlimTest', 0.002593473092716663), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public void otherwise ( new SymbolType [ ] , actual . version = = Boolean . class ) ; assertFalse ( data . hasAttribute ( PropertyVERSIONS ) ) ; abstract void kill ( ) ; void kill ( ) . use ( MyView . class ) . getVersion ( String . . . keys ) ; Map < String , T > tc , String . . . fields ( ) ; int len = = null : sv . isZero ( ) { String result = remotePeerBean . getClientAddress ( ) throws OperationTimeoutException ; long incr ( String [ ] { "" c "" , row2 ) ; validIds . add ( new LineToken ( content , titles ) { Descriptor descriptor , testSystem ) ; } private native int nEncryptUpdate ( long sessionId , int row , assertions . addAll ( Collection < String > findBasePackages ( ) ; inSequence ( sequence ) ; assertEquals ( 3 ) ; assertTrue ( onlyStartOffset . hasOffset ( ) . NODE_CHANGED_WATCHER . add ( statement ( "" LotsOfAs "" ) , "" AaSlimTest ) ) ) )"
41,"['public', 'void']","[('falseActionFails', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('InterruptedException', 0.014036855744313273), (',', 0.38461538461538464), ('KeeperException', 0.48148148148148145), ('{', 0.3539325842696629), ('try', 0.11428571428571428), ('{', 0.9737302977232924), ('learner', 0.002631578947368421), ('.', 1.0), ('self', 0.6666666666666666), ('.', 0.7567567567567568), ('jmxLocalPeerBean', 0.08527131782945736), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public void falseActionFails ( ) throws InterruptedException , KeeperException { try { learner . self . jmxLocalPeerBean"
42,"['void', 'testOutputChunk']","[('(', 1.0), ('String', 0.6791044776119403), ('output', 0.012095200936402654), (')', 0.8333333333333334), ('throws', 0.31230283911671924), ('Exception', 0.5000719838756119), (';', 0.07471926288511374), ('String', 0.10474308300395258), ('tomorrow', 0.0018315018315018315), ('=', 1.0), ('SimpleResponse', 1.0), ('.', 1.0), ('makeStandardHttpDateFormat', 1.0), ('(', 1.0), (')', 1.0), (',', 0.04123017779913503), ('System', 0.005083514887436456), ('.', 1.0), ('out', 0.2277542372881356), ('.', 0.9348837209302325), ('println', 0.6353383458646616), ('(', 1.0), ('""', 0.7150997150997151), ('!define x {1]', 9.436633009342267e-05), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), ('void', 0.04505290596213744), ('setMaxBatchSize', 0.018641525605313906), ('(', 1.0), ('int', 1.0), ('size', 0.08788052843193567), ('(', 0.06133333333333333), (')', 1.0), (';', 0.4777126381547333), ('Assert', 0.006052707150588703), ('.', 1.0), ('assertEquals', 0.5963581183611533), ('(', 1.0), ('null', 0.00267379679144385), (')', 0.45076923076923076), (')', 0.09429175475687103), (';', 0.6920507070614618), ('asyncAddEntry', 1.104508604122026e-05), ('(', 1.0), ('byte', 0.25), ('[', 0.529126213592233), (']', 0.7630057803468208), ('{', 0.24677045379264656), ('""', 0.45100671140939597), ('Test', 0.0024330900243309003), ('""', 1.0), (')', 0.5384615384615384), (';', 0.6090406958288362), ('}', 'Bracket balancing'), '}']","void testOutputChunk ( String output ) throws Exception ; String tomorrow = SimpleResponse . makeStandardHttpDateFormat ( ) , System . out . println ( "" !define x {1] "" ) ; void setMaxBatchSize ( int size ( ) ; Assert . assertEquals ( null ) ) ; asyncAddEntry ( byte [ ] { "" Test "" ) ;"
43,"['WikiPage', 'addChildPage']","[('(', 1.0), ('String', 0.17424242424242425), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('Transcoder', 0.10701754385964912), ('<', 1.0), ('T', 0.9695639449809774), ('>', 0.9951795613400819), ('>', 0.12719751809720786), ('asyncGetBulk', 0.4069448674992385), ('(', 0.999251497005988), ('String', 0.19746646795827125), ('invokingString', 0.0010144362075692548), (')', 0.6153846153846154), (';', 1.0), ('variables', 0.0005412092160197928), ('.', 1.0), ('put', 0.828125), ('(', 1.0), ('""', 0.5487914055505819), ('a', 0.005756346135698783), ('""', 1.0), (')', 0.4391891891891892), (';', 0.6090406958288362), ('Map', 0.013497095142371159), ('<', 0.9966386554621849), ('SocketAddress', 0.18384518300378627), (',', 0.9722530521642619), ('String', 0.3515981735159817), ('pageType', 0.0013309671694764862), (')', 0.7857142857142857), ('throws', 0.65625), ('IOException', 0.1847106248200403), (';', 0.3589243959469992), ('void', 0.42702702702702705), ('setMaxBatchSize', 0.018641525605313906), ('(', 1.0), ('int', 1.0), ('col', 0.06921309592188397), (',', 0.9194139194139194), ('int', 0.8233333333333334), ('flags', 0.019233903830480847), (',', 0.9296875), ('byte', 0.1375), ('[', 0.9400630914826499), (']', 0.7630057803468208), ('{', 0.24677045379264656), ('HtmlPageTest', 0.0013422818791946308), ('.', 1.0), ('class', 1.0), (')', 0.5668416801292407), (';', 0.683291770573566), ('}', 0.17806887715655306), ('else', 0.0523142401134953), ('if', 0.22699386503067484), ('(', 1.0), ('c', 0.007317583106836713), ('&', 0.030534351145038167), ('0x3f', 1.0), (')', 1.0)]","WikiPage addChildPage ( String key , Transcoder < T > > asyncGetBulk ( String invokingString ) ; variables . put ( "" a "" ) ; Map < SocketAddress , String pageType ) throws IOException ; void setMaxBatchSize ( int col , int flags , byte [ ] { HtmlPageTest . class ) ; } else if ( c & 0x3f )"
44,"['private', 'String']","[('attemptGetFileContent', 0.005277044854881266), ('(', 1.0), ('filePath', 0.3333333333333333), (')', 1.0), ('throws', 0.5272727272727272), ('IOException', 0.1847106248200403), ('{', 0.46141855027279816), ('fileSystem', 0.00398406374501992), ('=', 0.21212121212121213), ('new', 1.0), ('TimeMeasurement', 0.006424483121130709), ('(', 1.0), (')', 0.8793103448275862), (';', 0.4777126381547333), ('for', 0.006207338355165787), ('(', 1.0), ('int', 0.4218381775333857), ('val', 0.0913268236645606), (')', 0.9968553459119497), (';', 0.969309462915601), ('<', 0.033080032693454685), ('T', 1.0), ('>', 0.9951795613400819), ('CASValue', 0.031644260599793174), ('<', 1.0), ('T', 0.49916943521594687), ('}', 'Bracket balancing'), '}']",private String attemptGetFileContent ( filePath ) throws IOException { fileSystem = new TimeMeasurement ( ) ; for ( int val ) ; < T > CASValue < T
45,"['public', 'synchronized']","[('void', 0.6790123456790124), ('removeSession', 0.010416666666666666), ('(', 1.0), ('long', 0.9130434782608695), ('sessionId', 0.11590566984445559), (',', 0.47950819672131145), ('Object', 0.3780487804878049), ('>', 0.49548387096774194), ('asyncGet', 0.0652332361516035), ('(', 1.0), ('String', 0.9551820728291317), ('[', 0.014670308232539992), (']', 0.9407114624505929), ('{', 0.24677045379264656), ('""', 0.45100671140939597), ('entity', 0.0267639902676399), ('""', 1.0), (',', 0.2222222222222222), ('new', 0.049249599300597406), ('ByteArrayOutputStream', 0.0019083969465648854), ('(', 1.0), (')', 0.9574468085106383), ('!', 0.001268620855358001), ('=', 1.0), ('null', 0.7410909090909091), (')', 0.5761475761475762), ('{', 0.37463002114164906), ('return', 0.14763176754185942), ('!', 0.013266403728935103), ('query', 0.020833333333333332), ('.', 1.0), ('setEndkeyDocID', 0.06060606060606061), ('(', 1.0), ('""', 1.0), ('s2', 4.7183165046711336e-05), ('""', 1.0), (';', 0.5), ('expect', 0.007275132275132275), ('(', 1.0), ('revisionController', 1.0), ('.', 0.5176470588235295), ('delete', 0.08955223880597014), ('(', 0.9652777777777778), ('String', 0.739568345323741), ('key', 0.5850175575497464), (')', 0.14608612895550796), (')', 0.023578363384188627), ('.', 0.06104983753603954), ('allTestingComplete', 0.0005109209349853111), ('(', 1.0), ('TimeMeasurement', 0.18478260869565216), ('totalTimeMeasurement', 0.5925925925925926), (')', 0.47058823529411764), (';', 0.5675675675675675), ('Future', 0.03465947999734918), ('<', 1.0), ('CASValue', 0.10792580101180438), ('<', 0.993127147766323), ('T', 0.49916943521594687), ('>', 0.9951795613400819), ('tc', 0.32430196483971047), (')', 0.8272900763358778), (';', 0.7985474006116208), ('mockery', 0.007444387991782456), ('.', 0.9985380116959064), ('assertIsSatisfied', 0.2932692307692308), ('(', 1.0), (')', 1.0), (')', 0.1723209995194618), (';', 0.6920507070614618), ('String', 0.026430890896640084), ('expected', 0.012087912087912088), (',', 0.12962962962962962), ('actualMap', 0.008849557522123894), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public synchronized void removeSession ( long sessionId , Object > asyncGet ( String [ ] { "" entity "" , new ByteArrayOutputStream ( ) ! = null ) { return ! query . setEndkeyDocID ( "" s2 "" ; expect ( revisionController . delete ( String key ) ) . allTestingComplete ( TimeMeasurement totalTimeMeasurement ) ; Future < CASValue < T > tc ) ; mockery . assertIsSatisfied ( ) ) ; String expected , actualMap"
46,"['public', 'void']","[('resetLatency', 0.00982819996904504), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('client', 0.0017009432503479202), ('.', 0.8994082840236687), ('set', 0.08482142857142858), ('(', 0.9844559585492227), ('String', 0.4244604316546763), ('lc', 7.803355442840422e-05), (',', 1.0), ('int', 1.0), ('exp', 0.34360228198859005), (')', 0.44536817102137766), ('throws', 0.24010554089709762), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('ClassLoader', 0.0012626262626262627), ('systemClassLoader', 0.2), ('=', 1.0), ('ClassLoader', 1.0), ('.', 1.0), ('getSystemClassLoader', 0.8888888888888888), ('(', 1.0), (')', 1.0), ('{', 0.09111004324843826), ('return', 0.14763176754185942), ('TestSuiteMaker', 0.006095374686267479), ('.', 1.0), ('makeSuite', 1.0), ('(', 1.0), ('""', 1.0), ('format', 0.0016042276115881854), ('""', 1.0), (',', 0.8235294117647058), ('classPath', 0.0005828354946816261), (')', 0.9642857142857143), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public void resetLatency ( ) ; client . set ( String lc , int exp ) throws Exception { ClassLoader systemClassLoader = ClassLoader . getSystemClassLoader ( ) { return TestSuiteMaker . makeSuite ( "" format "" , classPath )"
47,"['public', 'void']","[('setUp', 0.02832378888716917), ('(', 1.0), (')', 0.9781746031746031), (',', 0.04123017779913503), ('3', 0.002178649237472767), (',', 0.7421052631578947), ('4', 0.277992277992278), (',', 0.3333333333333333), ('10', 0.0625), (',', 0.4268292682926829), ('-', 0.017857142857142856), ('1', 0.8714285714285714), (',', 0.13916500994035785), ('translator', 0.002352941176470588), ('.', 1.0), ('getPage', 0.125), ('(', 1.0), ('context', 0.1318181818181818), (',', 0.5644171779141104), ('request', 0.3860103626943005), (')', 0.7686472819216182), (';', 0.5648218347232752), ('boolean', 0.02482935342066315), ('waitForQueues', 0.16106804478897502), ('(', 1.0), ('long', 1.0), ('delay', 0.14701455092824886), (')', 0.9898648648648649), (';', 0.9894894894894894), ('Future', 0.03465947999734918), ('<', 1.0), ('Boolean', 0.5025295109612141), ('>', 1.0), ('flush', 0.2646428571428571), ('(', 1.0), (')', 'Paren balancing')]","public void setUp ( ) , 3 , 4 , 10 , - 1 , translator . getPage ( context , request ) ; boolean waitForQueues ( long delay ) ; Future < Boolean > flush ( )"
48,"['public', 'static']","[('byte', 0.04564315352697095), ('[', 0.9411764705882353), ('0', 0.10074318744838975), (']', 1.0), ('.', 0.10820895522388059), ('getLastModificationTime', 0.01092896174863388), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('processor', 0.0008173363670502993), ('.', 0.8977272727272727), ('pendingRequests', 0.037037037037037035), ('.', 1.0), ('isEmpty', 0.4), ('(', 1.0), (')', 0.9235294117647059), (';', 0.4777126381547333), ('int', 0.01989219996023769), ('wo', 0.0009905894006934125), ('=', 1.0), ('0', 1.0), (';', 0.6786355475763016), ('i', 0.47447073474470736), ('+', 0.4702517162471396), ('+', 0.8926315789473684), (';', 0.14833501513622604), ('return', 0.12318840579710146), ('new', 0.11330861145447053)]",public static byte [ 0 ] . getLastModificationTime ( ) ; processor . pendingRequests . isEmpty ( ) ; int wo = 0 ; i + + ; return new
49,"['private', 'void']","[('assertContains', 0.002253944402704733), ('(', 1.0), ('result', 0.5862068965517241), ('.', 0.22018348623853212), ('isNothing', 0.05275779376498801), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('public', 0.04915063288343016), ('String', 0.06996452502956248), ('getSecureClientAddress', 0.12330316742081449), ('(', 1.0), (')', 1.0), (')', 0.1723209995194618), ('openNewFile', 0.00013729348771223285), ('(', 1.0), ('data', 0.75), (')', 0.6501901140684411), (';', 0.6805970149253732), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('Integer', 0.005570409982174688), ('.', 0.7777777777777778), ('valueOf', 0.10884353741496598), ('(', 1.0), ('gtmkResp', 0.011428571428571429), (')', 0.6666666666666666), (';', 1.0), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('""', 0.3830213903743315), ('viewLocation', 0.0009436633009342266), ('""', 1.0), (',', 1.0), ('new', 0.049249599300597406), ('String', 0.035305343511450385), ('[', 0.7513089005235603), (']', 0.9407114624505929), ('=', 0.03146737330241802), ('(', 0.17066666666666666), ('BaseWikiPage', 0.003714020427112349), (')', 0.7142857142857143), ('page2', 0.2), ('.', 1.0), ('getPageCrawler', 0.3), ('(', 1.0), (')', 0.9908256880733946), (';', 0.4777126381547333), ('cfg', 6.627051624732157e-05), ('.', 0.8333333333333334), ('getServerAddr', 0.030303030303030304), ('(', 1.0), (')', 1.0), (')', 0.1723209995194618), (';', 0.6920507070614618), ('instantiator', 8.836068832976209e-05), ('.', 1.0), ('intercept', 0.7272727272727273), ('(', 1.0), ('T', 0.10476190476190476), (')', 0.10734463276836158), ('op', 0.05263157894736842), (';', 0.5), ('while', 0.06666666666666667), ('(', 1.0), (')', 'Paren balancing'), (')', 'Paren balancing')]","private void assertContains ( result . isNothing ( ) ; public String getSecureClientAddress ( ) ) openNewFile ( data ) ; assertEquals ( Integer . valueOf ( gtmkResp ) ; assertEquals ( "" viewLocation "" , new String [ ] = ( BaseWikiPage ) page2 . getPageCrawler ( ) ; cfg . getServerAddr ( ) ) ; instantiator . intercept ( T ) op ; while ( ) )"
50,"['public', 'void']","[('doWork', 0.0002321622039931899), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('invokeResponderAndCheckSuccessStatus', 0.000254036978948066), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('assertHasRegexp', 0.0033245708984072984), ('(', 1.0), ('""', 0.9006410256410257), ('child content', 0.00033028215532697935), ('""', 0.8), (',', 0.3333333333333333), ('new', 0.049249599300597406), ('byte', 0.06631679389312978), ('[', 1.0), (']', 0.7630057803468208), ('{', 0.24677045379264656), ('""', 0.45100671140939597), ('SomePage', 0.004866180048661801), ('""', 1.0), ('}', 0.017857142857142856), ('\\', 0.04719101123595506), ('n', 1.0), ('""', 0.959409594095941), (')', 0.32232105040237186), (';', 0.6090406958288362), ('request', 0.007267666615122932), ('.', 0.8663663663663663), ('addInput', 0.24392156862745099), ('(', 1.0), ('""', 0.8364779874213837), ('suiteExecutionReport', 0.00070774747570067), ('""', 1.0), (',', 0.8), ('scanner', 0.0002185633105056098), (',', 0.6896551724137931), ('String', 0.05555555555555555), ('password', 0.01574977817213842), (',', 0.38961038961038963), ('bucketMonitor', 0.015873015873015872), ('.', 1.0), ('getHttpPass', 0.25), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('return', 0.032512626262626264), ('gets', 0.00035855145213338117), ('(', 1.0), ('String', 0.977924944812362), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('int', 0.5105263157894737), ('by', 0.4236348818255909), (')', 0.47809377401998465), (';', 0.7569158328428487), ('}', 0.17806887715655306), ('try', 0.020216350416740556), ('{', 0.9752066115702479), ('return', 0.09035087719298246), ('Scopes', 0.00035855145213338117), ('.', 1.0), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}']","public void doWork ( ) ; invokeResponderAndCheckSuccessStatus ( ) ; assertHasRegexp ( "" child content "" , new byte [ ] { "" SomePage "" } \ n "" ) ; request . addInput ( "" suiteExecutionReport "" , scanner , String password , bucketMonitor . getHttpPass ( ) throws Exception { return gets ( String key , int by ) ; } try { return Scopes . )"
51,"['public', 'void']","[('testNewEpochZxid', 0.00015477480266212662), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('Map', 0.013497095142371159), ('<', 0.9966386554621849), ('String', 0.7833403449726546), ('>', 0.39886867451460023), ('findPaths', 0.0005492996429552321), ('(', 1.0), ('Consumer', 0.2727272727272727), ('<', 1.0), ('String', 0.8947368421052632), (',', 0.6009784436630484), ('T', 0.35385398117527345), ('>', 0.6264626462646264), ('getBulk', 0.06577042399172699), ('(', 1.0), ('Iterator', 0.12480739599383667), ('<', 0.9372093023255814), ('MemcachedNode', 0.008077544426494346), ('>', 0.9859154929577465), ('nodes', 0.8714285714285714), (')', 0.9344262295081968), (';', 0.9338842975206612), ('<', 0.033080032693454685), ('T', 1.0), ('extends', 0.00457941672692215), ('View', 0.7631578947368421), ('>', 1.0), ('getViews', 0.1), ('(', 1.0), ('final', 1.0), ('String', 0.4845878136200717), ('[', 0.022632020117351215), (']', 0.9407114624505929), ('clone', 0.0003312355084465055), ('(', 1.0), (')', 0.3488372093023256), (';', 0.4777126381547333), ('if', 0.01729660474055093), ('(', 1.0), ('gameHasStarted', 0.000418147606104955), (')', 1.0), ('return', 1.0), ('makeBannedContentResponse', 0.002962962962962963), ('(', 1.0), ('context', 0.6666666666666666), (',', 0.5644171779141104), ('String', 0.042746113989637305), ('b', 0.00044365572315882877), (',', 0.3333333333333333), ('int', 0.2826086956521739), ('by', 0.4236348818255909), (',', 0.5207532667179093), ('long', 0.9741735537190083), ('by', 0.2550628044091259), (')', 0.4462311557788945), ('throws', 0.23660977045320777), ('IOException', 0.1847106248200403), (';', 0.3589243959469992), ('void', 0.42702702702702705), ('setRequestStaleLatencyCheck', 0.013284765373901865), ('(', 1.0), ('boolean', 1.0), ('shouldBeTheSame', 0.0070052539404553416), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing')]","public void testNewEpochZxid ( ) ; Map < String > findPaths ( Consumer < String , T > getBulk ( Iterator < MemcachedNode > nodes ) ; < T extends View > getViews ( final String [ ] clone ( ) ; if ( gameHasStarted ) return makeBannedContentResponse ( context , String b , int by , long by ) throws IOException ; void setRequestStaleLatencyCheck ( boolean shouldBeTheSame ) ) )"
52,"['public', 'void']","[('canHandleTheSingleCheckWhenProblematic', 0.00015477480266212662), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('IOException', 0.1847106248200403), (';', 0.3589243959469992), ('long', 0.07675675675675675), ('incr', 0.34660356347438753), ('(', 1.0), ('String', 0.995279307631786), ('value', 0.012797502926258291), (')', 'Paren balancing')]",public void canHandleTheSingleCheckWhenProblematic ( ) throws IOException ; long incr ( String value )
53,"['private', 'HtmlPage']","[('makeHtml', 0.9090909090909091), ('(', 1.0), ('FitNesseContext', 0.38461538461538464), ('context', 0.8857142857142857), (',', 0.5346534653465347), ('request', 0.3860103626943005), (')', 0.7686472819216182), ('.', 0.1865049279757392), ('get', 0.023502363009324307), ('(', 1.0), ('1', 0.07311534968210717), (')', 0.5583468395461912), (';', 0.450187265917603), ('simple', 5.522543020610131e-05), ('=', 1.0), ('method', 0.2), ('.', 0.425), ('invoke', 0.07216494845360824), ('(', 1.0), ('delegate', 0.031746031746031744), ('!', 0.28), ('=', 1.0), ('this', 0.002181818181818182), ('.', 0.8513513513513513), ('logicResult', 0.008556149732620321), ('=', 1.0), ('new', 0.7058823529411765), ('ExecutionLog', 0.0015185141922672584), ('(', 1.0), ('runner', 0.05555555555555555), ('.', 0.65), ('join', 0.005263157894736842), ('(', 1.0), (')', 0.6102941176470589), ('+', 0.008822681403171552), ('fixtureTable', 0.008368200836820083), (')', 1.0), (';', 0.6666666666666666), ('public', 0.04915063288343016), ('void', 0.38510051241623966), ('recoverComplete', 7.738740133106331e-05), ('(', 1.0), ('BKException', 0.4), ('.', 1.0), ('create', 0.3), ('(', 0.9378698224852071), ('""', 0.5300261096605744), (""The 'changesOut' or 'changesSave' attributes may only be used when there is a 'changesIn' specified."", 0.000141549495140134), ('""', 1.0), (')', 1.0), (')', 0.23592152879182274), (';', 0.6920507070614618), ('void', 0.04505290596213744), ('setChannel', 0.010284979644311121), ('(', 1.0), ('SocketChannel', 0.9807692307692307), ('ch', 0.4666666666666667), (',', 1.0), ('SelectionKey', 1.0), ('selectionKey', 0.9423076923076923), (')', 1.0), (';', 0.98), ('String', 0.026430890896640084), ('fullPathName', 0.01282051282051282), ('=', 0.8974358974358975), ('PathParser', 1.0), ('.', 1.0), ('parse', 0.9156272927366104), ('(', 1.0), ('resource', 0.03290574456218628), (',', 0.17735849056603772), ('String', 0.04597701149425287), ('>', 0.22870452528837623), ('joiningServers', 0.0013732491073880802), (',', 0.6), ('List', 0.3), ('<', 0.875886524822695), ('Symbol', 0.01730769230769231), ('>', 1.0), ('(', 0.34965034965034963), (')', 0.7018800358102059), ('.', 0.0554925516578568), ('hasChildPage', 0.00012773023374632777), ('(', 1.0), ('String', 0.42028985507246375), ('key', 0.5850175575497464), (')', 0.14608612895550796), (';', 0.710124826629681), ('when', 0.005964346462258941), ('(', 1.0), ('hostProvider', 0.008683068017366137), (',', 0.25), ('5000', 0.2727272727272727), (')', 0.6153846153846154), ('.', 0.08), ('toString', 0.0404904840975859), ('(', 1.0), (')', 0.8720666161998486), (';', 0.4777126381547333), ('one', 0.005169100267291082), ('(', 1.0), ('context', 0.06512301013024602), (',', 0.5644171779141104), ('WikiPagePath', 0.054404145077720206), ('pathRelativeToSibling', 0.2871287128712871), (')', 1.0), (';', 0.75), ('pageBuilder', 0.0006516600764319954), ('=', 0.3442622950819672), ('root', 0.5172413793103449), ('.', 0.9424242424242424), ('commit', 0.048417132216014895), ('(', 1.0), ('data', 0.5738498789346247), (')', 0.6501901140684411), (';', 0.6805970149253732), ('long', 0.030583843248138905), ('decr', 0.3516146993318486), ('(', 1.0), ('String', 0.9961180124223602), ('output', 0.012095200936402654), (')', 0.8333333333333334), (';', 0.3911671924290221), ('qt', 0.00032030749519538755), ('.', 1.0), ('evaluateReturnValues', 0.15), ('(', 1.0), ('Map', 0.35294117647058826), ('.', 0.2857142857142857), ('class', 0.12727272727272726), (')', 0.5668416801292407), (';', 0.683291770573566), ('htmlPage', 0.0012370496366166692), ('.', 1.0), ('put', 0.5526315789473685), ('(', 1.0), ('""', 0.5487914055505819), ('crst', 0.000566197980560536), ('""', 1.0), (')', 0.08333333333333333), (')', 0.23592152879182274), (';', 0.6920507070614618), ('public', 0.04915063288343016), ('void', 0.38510051241623966), ('read', 0.0006964866119795697), ('(', 1.0), (')', 0.31645569620253167), (')', 0.1723209995194618), (';', 0.6920507070614618), ('fail', 0.00018776646270074444), ('(', 1.0), ('originalValue', 0.023121387283236993), (')', 0.9230769230769231), (';', 0.18055555555555555), ('sender', 0.0008946519693388412), ('.', 0.8658536585365854), ('getSocket', 0.0189873417721519), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('PageCrawler', 0.0031565656565656565), ('crawler', 0.4838709677419355), ('=', 0.9333333333333333), ('context', 0.136), ('.', 0.9058823529411765), ('put', 0.05198019801980198), ('(', 1.0), ('""', 0.5487914055505819), (',', 0.0028781730678493914), ('html', 0.026956141629025206), (')', 0.9545454545454546), (';', 0.9570405727923628), ('testSystemStarted', 3.3135258123660786e-05), ('(', 1.0), ('TestSystem', 0.7395833333333334), ('testSystem', 0.8074534161490683), (')', 0.22818791946308725), ('{', 0.3269230769230769), ('testData', 6.515082415792559e-05), ('=', 0.8), ('new', 1.0), ('StoppedRecorder', 0.0009344702721644668), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('init', 0.00012149594645342288), ('(', 1.0), (')', 0.3), (';', 0.4777126381547333), ('public', 0.04915063288343016), ('int', 0.20082774931020891), ('getSyncLimit', 0.010441767068273093), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('assertTrue', 0.013176787647175772), ('(', 1.0), ('""', 0.20545212765957446), ('destination', 4.7183165046711336e-05), ('""', 1.0), (')', 1.0), (',', 0.08405815503777538), ('fullPath', 0.0005446623093681918), (',', 0.75), ('data', 0.42857142857142855), ('[', 0.027777777777777776), (']', 0.2708333333333333), ('table', 0.001987413050679033), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","private HtmlPage makeHtml ( FitNesseContext context , request ) . get ( 1 ) ; simple = method . invoke ( delegate ! = this . logicResult = new ExecutionLog ( runner . join ( ) + fixtureTable ) ; public void recoverComplete ( BKException . create ( "" The 'changesOut' or 'changesSave' attributes may only be used when there is a 'changesIn' specified. "" ) ) ; void setChannel ( SocketChannel ch , SelectionKey selectionKey ) ; String fullPathName = PathParser . parse ( resource , String > joiningServers , List < Symbol > ( ) . hasChildPage ( String key ) ; when ( hostProvider , 5000 ) . toString ( ) ; one ( context , WikiPagePath pathRelativeToSibling ) ; pageBuilder = root . commit ( data ) ; long decr ( String output ) ; qt . evaluateReturnValues ( Map . class ) ; htmlPage . put ( "" crst "" ) ) ; public void read ( ) ) ; fail ( originalValue ) ; sender . getSocket ( ) throws Exception { PageCrawler crawler = context . put ( "" , html ) ; testSystemStarted ( TestSystem testSystem ) { testData = new StoppedRecorder ( ) ; init ( ) ; public int getSyncLimit ( ) ; assertTrue ( "" destination "" ) , fullPath , data [ ] table"
54,"['public', 'void']","[('testPRequest', 0.0002321622039931899), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('""', 0.3830213903743315), ('!* title content *!', 4.7183165046711336e-05), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), (')', 0.0006074797322671143), ('unlockSemaphore', 0.01694915254237288), ('(', 1.0), ('semaphore', 0.3333333333333333), (')', 0.6), (';', 0.3333333333333333), ('return', 0.02244361483575957), ('request', 0.004944375772558714), ('.', 0.48)]","public void testPRequest ( ) ; assertEquals ( "" !* title content *! "" ) ; ) unlockSemaphore ( semaphore ) ; return request ."
55,"['public', 'void']","[('shouldThreatViewURIAsAjax', 0.00015477480266212662), ('(', 1.0), (')', 1.0), ('|', 0.0006343104276790005), ('|', 0.8791666666666667), ('value', 0.08383233532934131), ('.', 0.8333333333333334), ('add', 0.01834862385321101), ('(', 0.995049504950495), ('String', 0.1123076923076923), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('long', 0.21889338731443994), ('casId', 0.143809279671879), (',', 0.998220640569395), ('Object', 0.375), ('o', 0.14516129032258066), (')', 0.9812734082397003)]","public void shouldThreatViewURIAsAjax ( ) | | value . add ( String key , long casId , Object o )"
56,"['protected', 'String']","[('getTitle', 0.014492753623188406), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('CouldNotConnectException', 0.0005758710048949035), (',', 1.0), ('ClientNotSubscribedException', 0.375), (',', 1.0), ('ServiceDownException', 1.0), (';', 0.5), ('public', 1.0), ('int', 0.20082774931020891), ('getMinSessionTimeout', 0.0570281124497992), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('VRaptorRequestHolder', 0.00012149594645342288), ('.', 1.0)]","protected String getTitle ( ) throws CouldNotConnectException , ClientNotSubscribedException , ServiceDownException ; public int getMinSessionTimeout ( ) ; VRaptorRequestHolder ."
57,"['public', 'void']","[('shouldAcceptAResultWithASpecificWebMethod', 0.002476396842594026), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('SimpleResponse', 0.0017451235945128013), ('response', 0.9622641509433962), ('=', 0.9953917050691244), ('responder', 0.21452702702702703), ('.', 1.0), ('makeResponse', 0.6511111111111111), ('(', 1.0), ('context', 0.4743083003952569), ('.', 0.24539877300613497), ('getRootPagePath', 0.06064356435643564), ('(', 1.0), (')', 1.0), ('.', 0.0554925516578568), ('loadKeyStore', 0.0008941116362242943), ('(', 1.0), (')', 0.75), (';', 0.4777126381547333), ('config', 0.0002650820649892863), ('.', 0.9583333333333334), ('put', 0.19090909090909092), ('(', 1.0), ('key', 0.03401969561324977), (')', 0.43730886850152906), (';', 0.710124826629681), ('processor', 0.0008173363670502993), (')', 'Paren balancing')]",public void shouldAcceptAResultWithASpecificWebMethod ( ) ; SimpleResponse response = responder . makeResponse ( context . getRootPagePath ( ) . loadKeyStore ( ) ; config . put ( key ) ; processor )
58,"['public', 'Collection']","[('<', 0.9523809523809523), ('String', 0.7289890377588307), ('>', 0.39886867451460023), ('getVersions', 0.08294424608624004), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('0', 0.07330659536541889), (',', 0.4376750700280112), ('getTestSummary', 0.02698282910874898), ('(', 1.0), (')', 0.9938650306748467), (';', 0.4777126381547333), ('ExecutionResult', 7.731560228854182e-05), ('getExecutionResult', 0.5714285714285714), ('(', 1.0), (')', 0.6153846153846154), (')', 0.1723209995194618), (';', 0.6920507070614618), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('0', 0.07330659536541889), (',', 0.4376750700280112), ('0', 0.285363859362224), (',', 0.5541706615532119), ('1', 0.0580539656582175), (',', 0.5058275058275058), ('table', 0.00823529411764706), ('.', 0.8918918918918919), ('literalize', 0.05415162454873646), ('(', 1.0), ('originalValue', 0.4), (')', 0.9230769230769231), (';', 0.18055555555555555), ('assertThat', 0.010227749674169962), ('(', 1.0), ('result', 0.05856255545696539), (',', 0.3363914373088685), ('is', 0.12121212121212122), ('(', 0.9956663055254604), ('nullValue', 0.061946902654867256), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('<', 0.033080032693454685), ('T', 1.0), ('>', 0.9951795613400819), ('tc', 0.32430196483971047), (')', 0.8272900763358778), (';', 0.7985474006116208), ('void', 0.04505290596213744), ('registerChannel', 0.010284979644311121), ('(', 1.0), ('SocketChannel', 1.0), ('ch', 0.4666666666666667), (',', 1.0), ('SelectionKey', 1.0), ('selectionKey', 0.9423076923076923), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing')]","public Collection < String > getVersions ( ) ; assertEquals ( 0 , getTestSummary ( ) ; ExecutionResult getExecutionResult ( ) ) ; assertEquals ( 0 , 0 , 1 , table . literalize ( originalValue ) ; assertThat ( result , is ( nullValue ( ) ; < T > tc ) ; void registerChannel ( SocketChannel ch , SelectionKey selectionKey ) ) )"
59,"['void', 'movedPermanentlyTo']","[('(', 1.0), ('Class', 0.449438202247191), ('<', 0.919921875), ('?', 0.6746987951807228), ('>', 0.5993756503642039), ('type', 0.19013062409288825), (')', 0.45660377358490567), (';', 0.4223300970873786), ('(', 0.0003092624091541673), ('(', 0.7575757575757576), ('method', 0.0011049723756906078), (',', 0.4403292181069959), ('is', 0.20987654320987653), ('(', 0.9956663055254604), ('equalTo', 0.3667649950835792), ('(', 1.0), ('""', 0.24162679425837322), ('tabindex', 0.000141549495140134), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing')]","void movedPermanentlyTo ( Class < ? > type ) ; ( ( method , is ( equalTo ( "" tabindex ) ) ) )"
60,"['protected', 'void']","[('includeScenarioLibraries', 0.0016260162601626016), ('(', 1.0), (')', 0.5), (';', 0.4777126381547333), ('boolean', 0.02482935342066315), ('next', 0.012919896640826873), ('(', 1.0), ('method', 0.18466898954703834), (')', 'Paren balancing')]",protected void includeScenarioLibraries ( ) ; boolean next ( method )
61,"['public', 'String']","[('toString', 0.15497737556561086), ('(', 1.0), ('expectedNames', 0.005299015897047691), (')', 0.6428571428571429), (';', 0.09523809523809523), ('return', 0.02244361483575957), ('(', 0.027194066749072928), ('data', 0.014285714285714285), ('.', 0.25475285171102663), ('getProperties', 0.1891385767790262), ('(', 1.0), (')', 0.9943181818181818), (';', 0.4777126381547333), ('String', 0.026430890896640084), ('s', 0.0032967032967032967), (')', 0.7631578947368421), (';', 0.5967741935483871), ('Set', 0.0029711281450882504), ('<', 0.9829931972789115), ('String', 0.5802997858672377), (',', 0.6009784436630484), ('Object', 0.38667005850928515), ('ctx', 0.07774193548387097), (',', 0.5407407407407407), ('List', 0.23170731707317074), ('<', 0.875886524822695), ('WikiPage', 0.12451923076923077), ('>', 0.9846153846153847), ('callback', 0.11232876712328767), (',', 0.24561403508771928), ('ctx', 0.06666666666666667), (',', 0.3333333333333333)]","public String toString ( expectedNames ) ; return ( data . getProperties ( ) ; String s ) ; Set < String , Object ctx , List < WikiPage > callback , ctx ,"
62,"['public', 'void']","[('testErrorLogContentIsReplaced', 0.00015477480266212662), ('(', 1.0), (')', 1.0), ('.', 0.0554925516578568), ('append', 0.049687060927321496), ('(', 0.9965635738831615), ('long', 0.07473035439137134), ('cas', 0.1254390366281987), (',', 0.7270194986072424), ('String', 0.9157509157509157), ('>', 0.22870452528837623), ('listSaslMechanisms', 0.05904971161768745), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('QuorumUtil', 0.000946969696969697), ('qu', 1.0), ('=', 0.8), ('new', 1.0), ('Builder', 0.0011680878402055834), ('(', 1.0), (')', 0.8461538461538461), ('.', 0.0554925516578568), ('start', 0.008174734959764977), ('(', 1.0), (')', 0.8641509433962264), ('>', 0.0031715521383950023), ('0', 0.6286919831223629), (')', 0.7610921501706485), (',', 0.06942823803967328), ('""', 0.23656499636891795), ('content', 0.006051437216338881), ('""', 1.0), (',', 0.2625), ('parentDir', 0.0002185633105056098), ('}', 'Bracket balancing'), '}']","public void testErrorLogContentIsReplaced ( ) . append ( long cas , String > listSaslMechanisms ( ) throws Exception { QuorumUtil qu = new Builder ( ) . start ( ) > 0 ) , "" content "" , parentDir"
63,"['boolean', 'resolve']",[],boolean resolve
64,"['public', 'void']","[('testSystemStopped', 0.0030181086519114686), ('(', 1.0), ('TestSystem', 0.7857142857142857), ('testSystem', 0.8074534161490683), (',', 0.6778523489932886), ('Throwable', 0.19090909090909092), ('exception', 0.29357798165137616), (')', 1.0)]","public void testSystemStopped ( TestSystem testSystem , Throwable exception )"
65,"['protected', 'void']","[('processTable', 0.0032520325203252032), ('(', 1.0), ('table', 0.8), ('.', 0.3885350318471338), ('numberOfChildren', 0.021660649819494584), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('MetricCollector', 0.000298217323112947), ('getMetricCollector', 1.0), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('IOException', 0.1847106248200403), (',', 0.17965705378020266), ('PwManagerOutputException', 0.011741682974559686), ('{', 1.0), ('ByteArrayOutputStream', 0.4), ('out', 0.04878048780487805), ('=', 1.0), ('new', 0.5806451612903226), ('DefaultConverters', 0.00035042635206167504), ('(', 1.0), (')', 0.5), (';', 0.4777126381547333), ('}', 0.17806887715655306), ('catch', 0.058698350771413374), ('(', 1.0), ('IOException', 0.1731266149870801), ('e', 0.7792207792207793), (')', 0.9841269841269841), ('{', 0.5944055944055944), ('}', 0.05062219037070819), ('public', 0.32308904649330183), ('void', 0.7639198218262806), ('testTooShortPartialNotificationMessage', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('String', 0.07275883838383838), ('pageName', 0.02593192868719611), ('=', 0.28651685393258425), ('request', 0.19298245614035087), ('.', 0.9516129032258065), ('setResource', 0.2203921568627451), ('(', 1.0), ('""', 0.6028368794326241), ('message:<<COULD_NOT_INVOKE_CONSTRUCTOR', 0.000141549495140134), ('""', 1.0), ('+', 0.6666666666666666), ('topic', 0.0037313432835820895), ('.', 0.8666666666666667), ('toStringUtf8', 1.0), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('OperationTimeoutException', 0.1804635761589404), (';', 0.9960111687275628), ('Future', 0.15338406087304765), ('<', 1.0), ('Boolean', 0.5025295109612141), ('>', 1.0), ('flush', 0.2646428571428571), ('(', 1.0), (')', 0.5180288461538461), (';', 0.4777126381547333), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('0', 0.07330659536541889), (',', 0.4376750700280112), ('stat', 0.0482420278004906), ('.', 0.8), ('getVersion', 0.09722222222222222), ('(', 1.0), ('String', 0.3617021276595745), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('int', 0.5105263157894737), ('priority', 0.0004889975550122249), (')', 1.0), (';', 0.5833333333333334), ('singleInterfaceRegister', 0.0005743444741434536), ('(', 1.0), ('JstlLocalization', 0.034482758620689655), ('.', 1.0), ('class', 1.0), (')', 0.5668416801292407), (';', 0.683291770573566), ('long', 0.030583843248138905), ('decr', 0.3516146993318486), ('(', 1.0), ('String', 0.9961180124223602), ('value', 0.012797502926258291), (')', 0.382262996941896), ('-', 0.0012330456226880395), ('>', 0.4418604651162791), ('{', 0.6524822695035462), ('threeRequests', 0.025), ('.', 1.0), ('countDown', 1.0), ('(', 1.0), (')', 1.0), (')', 0.1723209995194618), (';', 0.6920507070614618), ('public', 0.04915063288343016), ('abstract', 0.032124556562869534), ('Map', 0.012048192771084338), ('<', 1.0), ('SocketAddress', 0.18384518300378627), (',', 0.9722530521642619), ('Map', 0.6484018264840182), ('<', 0.9927536231884058), ('String', 0.7833403449726546), ('>', 0.39886867451460023), ('result', 0.0035704476792090085), ('=', 0.8867924528301887), ('statementExecutor', 0.020316027088036117), ('.', 1.0), ('create', 0.28125), ('(', 0.9378698224852071), ('""', 0.5300261096605744), ('---', 0.001698593941681608), ('""', 0.7073170731707317), (',', 0.9655172413793104), ('html', 0.026956141629025206), (')', 0.9545454545454546), (';', 0.9570405727923628), ('assertSubString', 0.01266871368927964), ('(', 1.0), ('""', 0.9659185369908562), ('Object[]', 4.7183165046711336e-05), ('""', 1.0), (',', 1.0), ('new', 0.049249599300597406), ('String', 0.035305343511450385), ('(', 0.2486910994764398), ('expectedOutput', 0.07368421052631578), (',', 0.4666666666666667), ('from', 0.7142857142857143), (',', 1.0), ('until', 0.8333333333333334), (',', 1.0), ('(', 1.0), ('byte', 0.11969111969111969), ('[', 0.529126213592233), (']', 0.7630057803468208), ('convertedArgs', 0.001987413050679033), ('=', 1.0), ('convertArgs', 0.3333333333333333), ('(', 1.0), ('Method', 0.21428571428571427), ('.', 0.25), ('class', 1.0), (')', 0.5668416801292407), (';', 0.683291770573566), ('<', 0.033080032693454685), ('T', 1.0), ('>', 0.9951795613400819), ('Future', 0.17011375387797312), ('<', 1.0), ('Boolean', 0.5025295109612141), ('>', 1.0), ('set', 0.10392857142857143), ('(', 0.97), ('String', 0.4244604316546763), ('output', 0.012095200936402654), (')', 0.8333333333333334), (';', 0.3911671924290221), ('long', 0.030583843248138905), ('decr', 0.3516146993318486), ('(', 1.0), ('String', 0.9961180124223602), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('int', 0.5105263157894737), ('by', 0.4236348818255909), (',', 0.5207532667179093), ('long', 0.9741735537190083), ('def', 0.48320943347859524), (',', 0.4470338983050847), ('int', 0.9791183294663574), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","protected void processTable ( table . numberOfChildren ( ) ; MetricCollector getMetricCollector ( ) throws IOException , PwManagerOutputException { ByteArrayOutputStream out = new DefaultConverters ( ) ; } catch ( IOException e ) { } public void testTooShortPartialNotificationMessage ( ) throws Exception { String pageName = request . setResource ( "" message:<<COULD_NOT_INVOKE_CONSTRUCTOR "" + topic . toStringUtf8 ( ) throws OperationTimeoutException ; Future < Boolean > flush ( ) ; assertEquals ( 0 , stat . getVersion ( String key , int priority ) ; singleInterfaceRegister ( JstlLocalization . class ) ; long decr ( String value ) - > { threeRequests . countDown ( ) ) ; public abstract Map < SocketAddress , Map < String > result = statementExecutor . create ( "" --- "" , html ) ; assertSubString ( "" Object[] "" , new String ( expectedOutput , from , until , ( byte [ ] convertedArgs = convertArgs ( Method . class ) ; < T > Future < Boolean > set ( String output ) ; long decr ( String key , int by , long def , int ) ) ) ) ) )"
66,"['public', 'void']","[('testComplete', 0.010602073982355673), ('(', 1.0), ('page', 0.1575091575091575), (')', 0.44728079911209767), ('throws', 0.15261044176706828), ('CertificateException', 0.0005758710048949035), ('{', 1.0), ('x509ExtendedTrustManager', 1.0), ('.', 1.0), ('checkClientTrusted', 0.5), ('(', 1.0), ('certificateChain', 0.631578947368421), (',', 0.96), ('null', 1.0), (')', 0.5957095709570958), ('{', 0.37463002114164906), ('try', 0.02619063131148609), ('{', 0.9737302977232924), ('reader', 0.0017543859649122807), ('.', 0.6666666666666666), ('readLine', 0.34782608695652173), ('(', 1.0), (')', 0.9863013698630136), (',', 0.04123017779913503), ('new', 0.10003631082062454), ('ParentPageVariableSource', 0.00047709923664122136), ('(', 1.0), ('page', 0.6666666666666666), (')', 0.44728079911209767), ('throws', 0.15261044176706828), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('client', 0.004419191919191919), ('.', 0.7183098591549296), ('start', 0.07589285714285714), ('(', 1.0), (')', 0.8641509433962264), ('{', 0.09111004324843826), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public void testComplete ( page ) throws CertificateException { x509ExtendedTrustManager . checkClientTrusted ( certificateChain , null ) { try { reader . readLine ( ) , new ParentPageVariableSource ( page ) throws Exception { client . start ( ) {"
67,"['private', 'void']","[('outputHeader', 0.0007513148009015778), ('(', 1.0), ('mOS', 0.42857142857142855), (')', 1.0), (';', 1.0), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('""', 0.3830213903743315), ('c', 0.00141549495140134), ('""', 1.0), (',', 0.6590909090909091), ('expectation', 0.0008013988051872359), ('.', 0.9166666666666666), ('getCol', 0.08823529411764706), ('(', 1.0), (')', 1.0), ('!', 0.001268620855358001), ('=', 1.0), ('null', 0.7410909090909091), (';', 0.19305019305019305), ('Socket', 0.004418262150220913), ('s2', 0.14634146341463414), ('=', 1.0), ('new', 0.7272727272727273), ('AnnotatedGenericBeanDefinition', 0.0002336175680411167), ('(', 1.0), ('componentType', 1.0), (')', 0.4444444444444444), ('{', 0.5294117647058824), ('from', 0.00013030164831585118), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}']","private void outputHeader ( mOS ) ; assertEquals ( "" c "" , expectation . getCol ( ) ! = null ; Socket s2 = new AnnotatedGenericBeanDefinition ( componentType ) { from )"
68,"['public', 'void']","[('testStrings', 0.00015477480266212662), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('int', 0.01989219996023769), ('getMaxBatchSize', 0.04309063893016345), ('(', 1.0), (')', 1.0), ('instanceof', 0.00040365209034118213), ('BoldWidget', 0.07317073170731707)]",public void testStrings ( ) ; int getMaxBatchSize ( ) instanceof BoldWidget
69,"['WikiPage', 'getSiblingPage']","[('(', 1.0), ('WikiPage', 0.7073170731707317), ('page', 0.38839285714285715), (')', 0.3379549393414211), ('throws', 0.15261044176706828), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('File', 0.01672979797979798), ('file', 0.13592233009708737), ('=', 0.31), ('new', 0.7083333333333334), ('ScriptTable', 0.001985749328349492), ('(', 1.0), ('ts', 0.5238095238095238), ('.', 1.0), ('getTable', 0.8440366972477065), ('(', 1.0), ('0', 0.2894736842105263), (',', 0.4376750700280112), ('firstColon', 0.0024529844644317253), (')', 1.0), (',', 1.0), ('entry', 0.004175744371822803), ('.', 0.7936507936507936), ('uuid', 0.011299435028248588), (')', 0.8), ('}', 'Bracket balancing'), '}']","WikiPage getSiblingPage ( WikiPage page ) throws Exception { File file = new ScriptTable ( ts . getTable ( 0 , firstColon ) , entry . uuid )"
70,"['public', 'void']","[('setUp', 0.02832378888716917), ('(', 1.0), (')', 0.9781746031746031), (';', 0.4777126381547333), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('Integer', 0.005570409982174688), ('.', 0.7777777777777778), ('toString', 0.1326530612244898), ('(', 1.0), (')', 0.8720666161998486), (';', 0.4777126381547333), ('String', 0.026430890896640084), ('getVariable', 0.011721611721611722), ('(', 1.0), ('MORE_SUFFIX_TOC', 0.008547008547008548), (')', 1.0), (';', 1.0), ('Map', 0.013497095142371159), ('<', 0.9966386554621849), ('SocketAddress', 0.18384518300378627), (',', 0.9722530521642619), ('Map', 0.6484018264840182), ('<', 0.9927536231884058), ('String', 0.7833403449726546), ('>', 0.39886867451460023), ('getVersions', 0.08294424608624004), ('(', 1.0), (')', 1.0), ('.', 0.0554925516578568), ('makeResponse', 0.008557925661003959), ('(', 1.0), ('context', 0.4743083003952569), (',', 0.5644171779141104), ('XmlizerPageHandler', 0.0025906735751295338), ('handler', 1.0), (')', 1.0), ('.', 0.29411764705882354), ('getField', 0.0012773023374632775), ('(', 1.0), ('""', 0.8260869565217391), ('WhereUsed', 0.00023591582523355665), ('""', 1.0), (')', 0.5555555555555556), (';', 0.6090406958288362), ('response', 0.003678013651726347), ('.', 0.7337278106508875), ('getStatus', 0.14355828220858896), ('(', 1.0), (')', 0.9723756906077348), (',', 0.04123017779913503), ('VoidConverter', 0.0014524328249818446), ('.', 1.0), ('VOID_TAG', 0.9714285714285714), (')', 1.0), (',', 0.925), ('JMXEnv', 0.0036310820624546117), ('.', 1.0), ('tearDown', 0.12121212121212122), ('(', 1.0), (')', 1.0), (',', 0.04123017779913503), ('name', 0.002541757443718228), ('.', 0.06363636363636363), ('length', 0.2857142857142857), ('!', 0.02159090909090909), ('=', 1.0), ('null', 0.7410909090909091), ('&', 0.07550407550407551), ('&', 1.0), ('(', 0.1293759512937595), (')', 'Paren balancing')]","public void setUp ( ) ; assertEquals ( Integer . toString ( ) ; String getVariable ( MORE_SUFFIX_TOC ) ; Map < SocketAddress , Map < String > getVersions ( ) . makeResponse ( context , XmlizerPageHandler handler ) . getField ( "" WhereUsed "" ) ; response . getStatus ( ) , VoidConverter . VOID_TAG ) , JMXEnv . tearDown ( ) , name . length ! = null & & ( )"
71,"['private', 'String']","[('getResultsUsing', 0.005277044854881266), ('(', 1.0), ('String', 0.6666666666666666), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('Object', 0.022672064777327937), ('>', 0.49548387096774194), ('getBulk', 0.23615160349854228), ('(', 1.0), ('Iterator', 0.12480739599383667), ('<', 0.9372093023255814), ('String', 0.6381260096930533), ('>', 0.39886867451460023), ('getVersions', 0.08294424608624004), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('<', 0.033080032693454685), ('T', 1.0), ('>', 0.9951795613400819), ('gets', 0.02171664943123061), ('(', 1.0), ('String', 0.977924944812362), ('url', 0.007101053452984784), (')', 0.49714285714285716), (';', 0.7520661157024794), ('Map', 0.013497095142371159), ('<', 0.9966386554621849), ('String', 0.7833403449726546), (',', 0.6009784436630484), ('T', 0.35385398117527345), ('>', 0.6264626462646264), ('Future', 0.17011375387797312), ('<', 1.0), ('Map', 0.09331084879145587), ('<', 0.9933283914010378), ('SocketAddress', 0.18384518300378627), (',', 0.9722530521642619), ('String', 0.3515981735159817), ('>', 0.22870452528837623), ('prependChroot', 0.00027464982147761604), (')', 'Paren balancing'), (')', 'Paren balancing')]","private String getResultsUsing ( String key , Object > getBulk ( Iterator < String > getVersions ( ) ; < T > gets ( String url ) ; Map < String , T > Future < Map < SocketAddress , String > prependChroot ) )"
72,"['public', 'void']","[('testCanCreatePage', 0.00015477480266212662), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('assertThat', 0.010227749674169962), ('(', 1.0), ('validations', 0.018633540372670808), ('.', 1.0), ('getErrors', 0.509090909090909), ('(', 1.0), (')', 0.9111111111111111), (')', 0.1723209995194618), (';', 0.6920507070614618), ('public', 0.04915063288343016), ('int', 0.20082774931020891), ('getLastClientResponseSize', 0.06586345381526104), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('request', 0.007267666615122932), ('.', 0.8663663663663663), ('addInput', 0.24392156862745099), ('(', 1.0), ('""', 0.8364779874213837), ('p999_key2_test', 0.000141549495140134), ('""', 1.0), (')', 1.0)]","public void testCanCreatePage ( ) ; assertThat ( validations . getErrors ( ) ) ; public int getLastClientResponseSize ( ) ; request . addInput ( "" p999_key2_test "" )"
73,"['public', 'void']","[('testValidatePath_Null', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('Future', 0.03465947999734918), ('<', 1.0), ('Long', 0.18699643994753606), ('>', 0.8967254408060453), ('asyncIncr', 0.445859872611465), ('(', 1.0), ('String', 0.9979633401221996), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('int', 0.5105263157894737), (')', 'Paren balancing')]","public void testValidatePath_Null ( ) ; Future < Long > asyncIncr ( String key , int )"
74,"['public', 'void']","[('resetLatency', 0.00982819996904504), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('Future', 0.03465947999734918), ('<', 1.0), ('CASValue', 0.10792580101180438), ('<', 0.993127147766323), ('Object', 0.49916943521594687), ('>', 0.9740680713128039), ('getBulk', 0.23615160349854228), ('(', 1.0), ('Transcoder', 0.21802773497688752), ('<', 1.0), ('T', 0.9695639449809774), ('>', 0.9951795613400819), ('gets', 0.02171664943123061), ('(', 1.0), ('String', 0.977924944812362), (')', 'Paren balancing'), (')', 'Paren balancing')]",public void resetLatency ( ) ; Future < CASValue < Object > getBulk ( Transcoder < T > gets ( String ) )
75,"['public', 'void']","[('resetLatency', 0.00982819996904504), ('(', 1.0), (')', 1.0), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('assertScriptResults', 0.003945707070707071), ('(', 1.0), ('String', 0.1935483870967742), ('dirname', 0.0013265704252828716), (',', 0.7391304347826086), ('String', 0.85), ('user', 0.009538598047914819), (',', 0.7796610169491526), ('int', 0.6153846153846154), ('exp', 0.34360228198859005), (',', 0.5522565320665083), ('Object', 0.3482831114225648), ('o', 0.14516129032258066), (')', 0.9812734082397003), (';', 0.7678300455235205), ('WikiPage', 0.00888024917714109), ('findAncestorWithName', 0.03808487486398259), ('(', 1.0), ('String', 0.2972972972972973), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('Object', 0.022672064777327937), ('>', 0.49548387096774194), ('>', 0.32798833819241985), ('getStats', 0.17270788912579957), ('(', 1.0), (')', 0.5538461538461539), ('throws', 0.13210956271023547), ('IOException', 0.1847106248200403), ('{', 0.46141855027279816), ('return', 0.07808764940239044), ('openDatabase', 0.0014342058085335247), ('(', 1.0), ('inStream', 0.14893617021276595), (',', 1.0), ('password', 0.3888888888888889), (',', 0.5454545454545454), ('configParser', 0.015873015873015872), (')', 1.0), (';', 1.0), ('assertHasRegexp', 0.0033245708984072984), ('(', 1.0), ('""', 0.9006410256410257), ('jump', 0.000566197980560536), ('""', 1.0), (',', 1.0), ('""', 0.38678420515809414), ('1.0+prj+3~milestone+4', 0.0001080613788631943), ('""', 1.0), (',', 1.0), ('new', 0.049249599300597406), ('SlimRenderer', 0.0009541984732824427), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('}', 0.17806887715655306), ('else', 0.0523142401134953), ('{', 0.7423312883435583), ('conn', 0.008032128514056224), ('.', 0.5555555555555556), ('addOp', 0.10344827586206896), ('(', 1.0), ('key', 0.15492957746478872), (',', 0.4709480122324159), ('long', 0.21889338731443994), ('z', 0.0002563445270443476), (')', 1.0), (';', 0.16666666666666666), ('final', 0.007223486270958051), ('ResourceMethod', 0.018633540372670808), ('method', 0.6440677966101694), (')', 0.08823529411764706), (')', 0.3375796178343949), (';', 0.6920507070614618), ('public', 0.04915063288343016), ('void', 0.38510051241623966), ('timeSimple1_10', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('expectedColorizedTable', 0.0035650623885918), (',', 1.0), ('colorizedTable', 1.0), (')', 1.0), (';', 1.0), ('when', 0.005964346462258941), ('(', 1.0), ('container', 0.02894356005788712), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public void resetLatency ( ) throws Exception { assertScriptResults ( String dirname , String user , int exp , Object o ) ; WikiPage findAncestorWithName ( String key , Object > > getStats ( ) throws IOException { return openDatabase ( inStream , password , configParser ) ; assertHasRegexp ( "" jump "" , "" 1.0+prj+3~milestone+4 "" , new SlimRenderer ( ) ; } else { conn . addOp ( key , long z ) ; final ResourceMethod method ) ) ; public void timeSimple1_10 ( ) ; assertEquals ( expectedColorizedTable , colorizedTable ) ; when ( container )"
76,"['private', 'Map']","[('<', 0.9642857142857143), ('String', 0.7833403449726546), (',', 0.6009784436630484), ('String', 0.18341388959552277), ('label', 0.0024401064773735583), (',', 0.43478260869565216), ('File', 0.25), ('dest', 0.02654867256637168)]","private Map < String , String label , File dest"
77,"['public', 'static']","[('void', 0.32053941908713696), ('launchFitNesse', 0.007389162561576354), ('(', 1.0), ('Arguments', 0.4444444444444444), ('arguments', 0.7857142857142857), (',', 0.2), ('properties', 0.09090909090909091), ('.', 0.726027397260274), ('containsKey', 0.007782101167315175), ('(', 1.0), ('sid', 0.03125), (')', 0.7894736842105263), (';', 0.8118811881188119), ('return', 0.02244361483575957), ('pageName', 0.00041203131437989287), (';', 1.0), ('creator', 0.25), ('.', 1.0), ('pageAttributes', 0.03225806451612903), ('=', 1.0), ('attributes', 1.0), ('.', 0.3333333333333333), ('put', 0.8157894736842105), (')', 'Paren balancing')]","public static void launchFitNesse ( Arguments arguments , properties . containsKey ( sid ) ; return pageName ; creator . pageAttributes = attributes . put )"
78,"['public', 'void']","[('setup', 0.018650363720786257), ('(', 1.0), (')', 0.9959349593495935), ('.', 0.0554925516578568), ('thenReturn', 0.0818750798313961), ('(', 1.0), ('LearnerType', 0.0124804992199688), ('.', 1.0), ('PARTICIPANT', 0.88), (')', 0.9545454545454546), ('{', 0.09523809523809523), ('{', 0.02364974916932699), ('one', 0.5994397759103641), ('(', 1.0), ('route', 0.010130246020260492), (')', 0.5774647887323944), ('.', 0.4909090909090909), ('list', 0.0014050325712096053), ('(', 0.989247311827957), ('list', 0.20048602673147023), (',', 0.0687960687960688), ('6', 0.07692307692307693), (',', 0.9019607843137255), ('27', 0.11290322580645161), (',', 1.0), ('9', 1.0), (',', 0.8333333333333334), ('10', 0.30434782608695654), (',', 0.4268292682926829), ('match', 0.05357142857142857), ('.', 0.7586206896551724), ('matchScore', 0.02197802197802198), (',', 0.7142857142857143), ('.001', 0.9), (')', 1.0), (';', 1.0), ('container', 0.001988115487419647), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public void setup ( ) . thenReturn ( LearnerType . PARTICIPANT ) { { one ( route ) . list ( list , 6 , 27 , 9 , 10 , match . matchScore , .001 ) ; container"
79,"['public', 'void']","[('exceptionOccurred', 0.002553784243925089), ('(', 1.0), ('Throwable', 0.7857142857142857), ('t', 0.1827956989247312), (')', 0.8181818181818182), ('{', 0.4482758620689655), ('WikiImportProperty', 0.00013030164831585118), ('.', 0.5), ('createFrom', 0.5357142857142857), ('(', 1.0), ('pageData', 0.3333333333333333), (',', 0.10655737704918032), ('String', 0.11764705882352941), ('.', 0.15150842945874002), ('.', 0.7353474320241692), ('.', 0.5), ('.', 0.5), ('.', 0.5), ('.', 0.5), ('.', 0.5), ('.', 0.5), ('keys', 0.3872791519434629), (')', 0.997270245677889), (';', 0.6894065446478093), ('image', 0.00013254103249464314), ('}', 'Bracket balancing'), '}']","public void exceptionOccurred ( Throwable t ) { WikiImportProperty . createFrom ( pageData , String . . . . . . . . keys ) ; image"
80,"['private', 'SimpleFixture']",[],private SimpleFixture
81,"['public', 'void']","[('checkSession', 0.0010834236186348862), ('(', 1.0), ('long', 0.975), ('sessionId', 0.11590566984445559), (')', 0.5081967213114754), ('{', 0.11467889908256881), ('}', 0.05062219037070819), ('default', 0.02442868400315209), ('void', 1.0), ('registerMarkupSystems', 0.09302325581395349), ('(', 1.0), ('MarkUpSystems', 1.0), ('systems', 1.0), (')', 1.0), ('{', 1.0), ('if', 0.09225356700762265), ('(', 1.0), ('suites', 0.0002090738030524775), ('=', 1.0), ('new', 0.6153846153846154), ('FormattedExpression', 0.0004672351360822334), ('(', 1.0), ('body', 1.0), (')', 0.717391304347826), (')', 0.09615384615384616), (';', 0.6920507070614618), ('runner', 0.0010051028297510438), ('.', 0.9292929292929293), ('testComplete', 0.031578947368421054), ('(', 1.0), ('TestPage', 0.17582417582417584), ('testPage', 0.3310344827586207), (',', 0.390625), ('TestSummary', 0.184), ('testSummary', 0.9246575342465754), (')', 0.6804979253112033), (';', 0.4336917562724014), ('}', 0.17806887715655306), ('return', 0.1317609505231424), ('nodeList', 0.0011025358324145535), (';', 1.0)]","public void checkSession ( long sessionId ) { } default void registerMarkupSystems ( MarkUpSystems systems ) { if ( suites = new FormattedExpression ( body ) ) ; runner . testComplete ( TestPage testPage , TestSummary testSummary ) ; } return nodeList ;"
82,"['public', 'Index']","[('startMap', 0.5882352941176471), ('(', 1.0), ('TreeMap', 0.74), ('<', 0.5833333333333334), ('?', 0.9545454545454546), ('>', 0.5993756503642039), ('v', 0.11465892597968069), (',', 0.9634146341463414), ('String', 0.8838709677419355), ('tag', 0.07320319432120674), (')', 0.9582366589327146), ('throws', 0.806060606060606), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('update', 0.000946969696969697), ('.', 0.4444444444444444), ('doUpdate', 0.6153846153846154), ('(', 1.0), (')', 0.9545454545454546), ('{', 0.09111004324843826), ('increaseSourceCapacity', 6.515082415792559e-05), ('(', 1.0), ('sourceTop', 1.0), ('+', 0.5), ('1', 1.0), (')', 0.5064102564102564), (';', 0.450187265917603), ('Future', 0.03465947999734918), ('<', 1.0), ('Long', 0.18699643994753606), ('>', 0.8967254408060453), ('asyncIncr', 0.445859872611465), ('(', 1.0), ('String', 0.9979633401221996), ('prefix', 0.02091299258681233), (')', 0.9315068493150684), (';', 0.9644128113879004), ('addTestResult', 0.000298217323112947), ('(', 1.0), ('pageDirectory', 0.9310344827586207), (',', 0.9210526315789473), ('""', 0.8333333333333334), ('float: left; width: 150px;', 0.0006483682731791658), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), ('String', 0.026430890896640084), ('startOfXml', 0.0007326007326007326), ('=', 1.0), ('""', 1.0), ('org.apache.velocity.app.VelocityEngine', 0.0017064846416382253), ('""', 1.0), (';', 1.0), ('}', 0.1302910052910053), ('}', 0.2383401312289413), ('beans', 0.0022727272727272726), ('.', 1.0), ('removeAll', 0.6), ('(', 1.0), ('processor', 0.125), ('.', 0.6666666666666666), ('initThreads', 0.10185185185185185), ('(', 1.0), (')', 'Paren balancing'), (')', 'Paren balancing')]","public Index startMap ( TreeMap < ? > v , String tag ) throws Exception { update . doUpdate ( ) { increaseSourceCapacity ( sourceTop + 1 ) ; Future < Long > asyncIncr ( String prefix ) ; addTestResult ( pageDirectory , "" float: left; width: 150px; "" ) ; String startOfXml = "" org.apache.velocity.app.VelocityEngine "" ; } } beans . removeAll ( processor . initThreads ( ) )"
83,"['@Test', 'public']","[('void', 1.0), ('setMaxConcurrentDiffSyncs', 0.0003869370066553165), ('(', 1.0), ('int', 1.0), ('size', 0.08788052843193567), ('=', 0.088), ('itemCollection', 0.023809523809523808), ('.', 1.0), ('toArray', 0.5), ('(', 1.0), ('new', 0.7096774193548387), ('Expectations', 0.10893470790378007), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('ComponentFactory', 9.940577437098235e-05), ('<', 0.1111111111111111), ('?', 1.0), ('>', 0.5993756503642039), ('>', 0.12772133526850507), (')', 'Paren balancing'), (')', 'Paren balancing')]",@Test public void setMaxConcurrentDiffSyncs ( int size = itemCollection . toArray ( new Expectations ( ) ; ComponentFactory < ? > > ) )
84,"['private', 'Request']","[('createRequest', 0.4), ('(', 1.0), (')', 0.4375), ('{', 0.09111004324843826), ('{', 0.02364974916932699), ('one', 0.5994397759103641), ('(', 1.0), ('response', 0.03473227206946455), ('.', 0.22058823529411764), ('getContent', 0.294478527607362), ('(', 1.0), (')', 0.9714795008912656), (';', 0.4777126381547333), ('}', 0.17806887715655306), ('try', 0.020216350416740556), ('{', 0.9752066115702479), ('while', 0.02017543859649123), ('(', 1.0), ('i', 0.045454545454545456), (')', 0.5278810408921933), (',', 0.06293706293706294), ('timeString', 0.001270878721859114), (',', 1.0), ('summary', 0.875), ('.', 0.6046511627906976), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","private Request createRequest ( ) { { one ( response . getContent ( ) ; } try { while ( i ) , timeString , summary . )"
85,"['void', 'addExpectation']","[('(', 1.0), ('expectation', 0.2), ('.', 0.17647058823529413), ('createEvaluationMessage', 0.3235294117647059), ('(', 1.0), ('String', 0.7878787878787878), ('uri', 0.008427623878267655), ('=', 0.14925373134328357), ('new', 0.30434782608695654), ('CountDownLatch', 0.008293423665459643), ('(', 1.0), ('1', 0.8082191780821918), (',', 0.4359805510534846), ('tag', 0.00823529411764706), (')', 0.6666666666666666), ('throws', 0.806060606060606), (')', 'Paren balancing'), (')', 'Paren balancing')]","void addExpectation ( expectation . createEvaluationMessage ( String uri = new CountDownLatch ( 1 , tag ) throws ) )"
86,"['public', 'SortedSet']",[],public SortedSet
87,"['public', 'ParseSpecification']","[('provider', 0.25), ('(', 1.0), ('newProvider', 0.2), (')', 1.0), (';', 1.0), ('v', 0.0008946519693388412), ('.', 1.0), ('add', 0.8012820512820513), ('(', 0.995049504950495), ('T', 0.0003846153846153846), ('controller', 0.519774011299435), (')', 1.0), (';', 0.9563318777292577), ('long', 0.030583843248138905), ('decr', 0.3516146993318486)]",public ParseSpecification provider ( newProvider ) ; v . add ( T controller ) ; long decr
88,"['public', 'void']","[('testOutputChunk', 0.006732703915802507), ('(', 1.0), ('String', 0.6791044776119403), ('key', 0.5850175575497464), (',', 0.8474898881751131), ('T', 0.02456140350877193), ('>', 0.6264626462646264), ('Future', 0.17011375387797312), ('<', 1.0), ('Boolean', 0.5025295109612141), ('>', 1.0), ('flush', 0.2646428571428571), ('(', 1.0), (')', 0.5180288461538461), (')', 'Paren balancing')]","public void testOutputChunk ( String key , T > Future < Boolean > flush ( ) )"
89,"['long', 'createSession']","[('(', 1.0), ('int', 0.72), ('len', 0.002871912693854107), (')', 0.5147058823529411), ('throws', 0.2857142857142857), ('IOException', 0.1847106248200403), ('{', 0.46141855027279816), ('switch', 0.0007968127490039841), ('(', 1.0), ('resultCode', 0.012658227848101266), ('=', 0.6666666666666666), ('=', 1.0), ('null', 0.518327605956472), (')', 0.5761475761475762), (';', 0.3289640591966173), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('0', 0.07330659536541889), (')', 0.5217086834733894), (';', 0.2893815635939323), ('html', 0.00296008305904703), ('.', 0.9710144927536232), ('html', 0.1276595744680851), ('(', 1.0), (')', 0.8951612903225806), ('throws', 0.13210956271023547), ('Exception', 0.5000719838756119), (';', 0.07471926288511374), ('public', 0.5869565217391305), ('long', 0.15648403626330312), ('getLogDirSize', 0.12709030100334448), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('request', 0.007267666615122932), ('.', 0.8663663663663663), ('addInput', 0.24392156862745099), ('(', 1.0), ('PAGE_TYPE', 0.012578616352201259), (',', 1.0), ('""', 0.4), ('1', 0.004646639291117354), ('""', 0.9333333333333333), (')', 0.4166666666666667), (';', 0.6090406958288362), ('one', 0.005169100267291082), ('(', 1.0), ('container', 0.03907380607814761), (',', 0.25663716814159293), ('converters', 0.1111111111111111), (')', 0.39215686274509803), (';', 0.6888888888888889), ('saveFileWithUser', 5.522543020610131e-05), ('(', 1.0), ('""', 0.8333333333333334), ('Requets components to initialize:', 0.00018873266018684534), ('""', 1.0), ('+', 1.0), ('context', 0.002238805970149254), ('.', 1.0), ('toString', 0.0024752475247524753), ('(', 1.0), (')', 0.8720666161998486), (',', 0.04123017779913503), ('counts', 0.006717501815541031), ('.', 0.8615384615384616), ('wrong', 0.15178571428571427), ('+', 0.20481927710843373), ('""', 0.5), (';', 0.008266993263931415), ('zk1', 0.004629629629629629), ('.', 0.9), ('setData', 0.038461538461538464), ('(', 0.6585365853658537), ('path', 0.3103448275862069), ('.', 0.08980582524271845), ('addName', 0.07964601769911504), ('(', 1.0), ('newName', 0.08), (')', 0.38461538461538464), ('throws', 0.17647058823529413), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('WikiPage', 0.056818181818181816), ('superPage', 0.007009345794392523), ('=', 1.0), ('addPage', 0.75), ('(', 1.0), ('root', 0.6751091703056769), (',', 0.7288888888888889), ('PathParser', 0.6455357142857143), ('.', 1.0), ('parse', 0.9156272927366104), ('(', 1.0), (')', 0.02788622420524261), ('+', 0.008822681403171552), ('""', 0.7475592747559274), ('!|script|', 0.010410287813839559), ('\\', 1.0), ('n', 1.0), ('""', 0.959409594095941), (')', 0.32232105040237186), (';', 0.6090406958288362), ('if', 0.01729660474055093), ('(', 1.0), ('""', 0.014007944804515993), ('suite', 4.7183165046711336e-05), ('""', 1.0), (',', 0.75), ('testRunner', 0.00014570887367040654), (',', 0.6666666666666666), ('classPath', 0.19230769230769232), (')', 0.9642857142857143), (';', 0.6428571428571429), ('Future', 0.03465947999734918), ('<', 1.0), ('Boolean', 0.5025295109612141), ('>', 1.0), ('delete', 0.17464285714285716), ('(', 1.0), ('String', 0.739568345323741), ('uri', 0.008427623878267655), ('=', 0.14925373134328357), ('request', 0.13043478260869565), ('.', 0.9516129032258065), ('setResource', 0.2203921568627451), ('(', 1.0), ('""', 0.6028368794326241), ('decisionTable_id_4', 0.000566197980560536), ('""', 1.0), (',', 1.0), ('""', 0.38678420515809414), ('text/plain', 0.0012967365463583316), ('""', 1.0), (',', 0.8461538461538461), ('imageSrc', 7.285443683520327e-05), ('(', 1.0), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","long createSession ( int len ) throws IOException { switch ( resultCode = = null ) ; assertEquals ( 0 ) ; html . html ( ) throws Exception ; public long getLogDirSize ( ) ; request . addInput ( PAGE_TYPE , "" 1 "" ) ; one ( container , converters ) ; saveFileWithUser ( "" Requets components to initialize: "" + context . toString ( ) , counts . wrong + "" ; zk1 . setData ( path . addName ( newName ) throws Exception { WikiPage superPage = addPage ( root , PathParser . parse ( ) + "" !|script| \ n "" ) ; if ( "" suite "" , testRunner , classPath ) ; Future < Boolean > delete ( String uri = request . setResource ( "" decisionTable_id_4 "" , "" text/plain "" , imageSrc ( ) ) ) ) )"
90,"['public', 'void']","[('newTestStarted', 0.005494505494505495), ('(', 1.0), ('WikiTestPage', 0.15254237288135594), (')', 0.26851851851851855), ('testPage', 0.1724137931034483), (';', 0.4), ('currentTestTime', 0.5), ('=', 1.0), ('new', 1.0), ('EvaluatorWidget', 0.0008176614881439084), ('(', 1.0), ('widgetRoot', 0.9767441860465116), (',', 1.0), ('""', 1.0), ('on', 0.001837043440674303), ('""', 1.0), (')', 0.9444444444444444), (';', 0.6090406958288362), ('Map', 0.013497095142371159), ('<', 0.9966386554621849), ('String', 0.7833403449726546), ('>', 0.39886867451460023), ('(', 0.043943971436418566), (')', 0.7018800358102059), ('{', 0.09111004324843826), ('if', 0.09225356700762265), ('(', 1.0), ('page', 0.012544428183148652), (',', 0.31853496115427304), ('String', 0.16555183946488294), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}']","public void newTestStarted ( WikiTestPage ) testPage ; currentTestTime = new EvaluatorWidget ( widgetRoot , "" on "" ) ; Map < String > ( ) { if ( page , String )"
91,"['private', 'Map']","[('makeMap', 0.03571428571428571), ('(', 1.0), ('""', 0.75), ('Invocadndo', 4.7183165046711336e-05), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), ('Future', 0.03465947999734918), ('<', 1.0), ('Boolean', 0.5025295109612141), ('>', 1.0), ('touch', 0.09), ('(', 1.0), ('final', 0.9064748201438849), ('String', 0.4845878136200717), ('key', 0.38055322715842416), (')', 0.14608612895550796), ('{', 0.036061026352288486), ('if', 0.09225356700762265), ('(', 1.0), ('!', 0.1421701860756847), ('bean', 0.0026595744680851063), ('.', 1.0), ('isHidden', 0.23076923076923078), ('(', 1.0), (')', 1.0), ('{', 0.09111004324843826), ('testCounterSet', 0.00026060329663170237), ('.', 0.75), ('add', 0.5333333333333333), ('(', 0.995049504950495), ('setUp', 0.005), (')', 0.2765957446808511), (';', 1.0), ('multi', 1.104508604122026e-05), ('(', 1.0), ('zk', 0.5555555555555556), (',', 0.40425531914893614), ('cfg1', 0.009259259259259259), (',', 1.0), ('scheduler', 1.0), (')', 1.0), (';', 0.8), ('}', 0.17806887715655306), ('public', 0.0813974108884554), ('void', 0.7639198218262806), ('errorOccured', 0.0032502708559046588), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('makeHelpTextHtml', 1.104508604122026e-05), ('(', 1.0), ('pageData', 1.0), ('.', 0.2786885245901639), (')', 'Paren balancing'), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}']","private Map makeMap ( "" Invocadndo "" ) ; Future < Boolean > touch ( final String key ) { if ( ! bean . isHidden ( ) { testCounterSet . add ( setUp ) ; multi ( zk , cfg1 , scheduler ) ; } public void errorOccured ( ) ; makeHelpTextHtml ( pageData . ) )"
92,"['public', 'void']","[('setResponseCachingEnabled', 0.0029407212505804057), ('(', 1.0), ('boolean', 1.0), ('drop', 0.17688266199649738), (')', 1.0), (';', 1.0), ('assertEquals', 0.04091099869667985), ('(', 1.0), ('25', 0.00089126559714795), (',', 0.5), ('passFailBar', 0.75), ('.', 1.0), ('getFailUnits', 0.2857142857142857), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('if', 0.01729660474055093), ('(', 1.0), ('!', 0.1421701860756847), ('stop', 0.0026595744680851063), ('.', 0.5), ('get', 1.0), ('(', 1.0), ('String', 0.22434150772025432), ('path', 0.01779165040967616), ('=', 0.1702127659574468), ('directory', 0.010526315789473684), ('+', 1.0), ('""', 1.0), ('|$V|9|', 0.0009185548071034905), ('\\', 1.0), ('n', 1.0), ('""', 0.959409594095941), (')', 0.32232105040237186), (';', 0.6090406958288362), ('assertTrue', 0.013176787647175772), ('(', 1.0), ('crawler', 0.032579787234042555), ('.', 1.0), ('addPage', 0.7028985507246377), ('(', 1.0), ('root', 0.6751091703056769), (',', 0.7288888888888889), ('""', 0.06428571428571428), ('${= 2 + 2 =}', 0.0001080613788631943), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), ('comparer', 0.0006295699043495548), ('.', 0.9827586206896551), ('getResultContent', 0.038461538461538464), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('buffer', 0.0009609224855861628), ('.', 0.8977272727272727), ('append', 0.576530612244898), ('(', 0.9965635738831615), ('text', 0.0023112480739599386), ('.', 0.12903225806451613), ('getNodeValue', 0.017543859649122806), ('(', 1.0), (')', 1.0), (')', 0.1723209995194618), (';', 0.6920507070614618), ('assertHasRegexp', 0.0033245708984072984), ('(', 1.0), ('""', 0.9006410256410257), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing')]","public void setResponseCachingEnabled ( boolean drop ) ; assertEquals ( 25 , passFailBar . getFailUnits ( ) ; if ( ! stop . get ( String path = directory + "" |$V|9| \ n "" ) ; assertTrue ( crawler . addPage ( root , "" ${= 2 + 2 =} "" ) ; comparer . getResultContent ( ) ; buffer . append ( text . getNodeValue ( ) ) ; assertHasRegexp ( "" ) ) ) )"
93,"['public', 'void']","[('shouldUnescape', 7.738740133106331e-05), ('(', 1.0), (')', 1.0), ('.', 0.0554925516578568), ('map', 0.0014050325712096053), ('(', 1.0), ('key', 0.027777777777777776), (')', 0.43730886850152906), (';', 0.710124826629681), ('Route', 0.0004528485276900307), ('route', 0.9024390243902439), ('=', 0.7903225806451613), ('getRouteMatching', 0.3333333333333333), ('(', 1.0), ('routes', 1.0), (',', 0.8181818181818182), ('""', 0.8571428571428571), ('false', 0.002161227577263886), ('""', 1.0), (',', 0.2727272727272727), ('proxy', 0.00014570887367040654), (')', 0.25), ('throws', 0.5), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('serverList', 0.0004734848484848485), ('=', 1.0), ('TestConfig', 0.6666666666666666), ('.', 1.0), ('IPV4_ADDR', 0.6551724137931034), ('+', 0.8947368421052632), ('""', 1.0), ('through', 0.001224739742804654), ('""', 1.0), ('+', 1.0), ('params', 0.0004975124378109452), ('}', 'Bracket balancing'), '}']","public void shouldUnescape ( ) . map ( key ) ; Route route = getRouteMatching ( routes , "" false "" , proxy ) throws Exception { serverList = TestConfig . IPV4_ADDR + "" through "" + params"
94,"['public', 'Object']","[('intercept', 0.29064039408866993), ('(', 1.0), ('T', 0.10476190476190476), ('controller', 0.519774011299435), (')', 1.0), (';', 0.9563318777292577), ('byte', 0.0012480947226578894), ('[', 0.8169014084507042), (']', 0.7630057803468208), ('liBytes', 0.0009937065253395165), ('=', 1.0), ('new', 0.6666666666666666), ('ArrayList', 0.041934353463380446), ('<', 0.9570405727923628), ('String', 0.16875), (',', 0.6009784436630484), ('T', 0.35385398117527345), ('>', 0.6264626462646264), ('T', 0.0531540847983454), ('use', 0.016423357664233577), ('(', 1.0), (')', 'Paren balancing')]","public Object intercept ( T controller ) ; byte [ ] liBytes = new ArrayList < String , T > T use ( )"
95,"['public', 'void']","[('receivedStatus', 0.004643244079863798), ('(', 1.0), ('line', 0.05747126436781609), ('=', 0.1702127659574468), ('(', 0.017241379310344827), ('FileSystemPage', 0.022284122562674095), ('.', 0.11643835616438356), ('propertiesFilename', 0.25), (')', 1.0), (';', 1.0), ('assertSame', 0.0011486889482869073), ('(', 1.0), ('page', 0.031746031746031744), ('!', 0.005549389567147614), ('=', 1.0), ('null', 0.7410909090909091), ('?', 0.05834405834405834), ('new', 0.125), ('ImmediateFuture', 0.015873015873015872), ('(', 1.0), ('false', 0.2857142857142857), (')', 0.6802030456852792), (')', 0.23382045929018788), (')', 0.1159214681250286), (';', 0.6920507070614618), ('<', 0.033080032693454685), ('T', 1.0), ('>', 0.9951795613400819), ('tc', 0.32430196483971047), (',', 0.17239185750636132), ('String', 0.9926605504587156), ('tag', 0.07320319432120674), (',', 0.02320185614849188), ('byte', 0.14285714285714285), ('[', 0.9400630914826499), ('1', 0.008257638315441783), (']', 1.0), (',', 0.236), ('ZooDefs', 0.07407407407407407), ('.', 1.0), ('Ids', 0.5145631067961165), ('.', 1.0), ('OPEN_ACL_UNSAFE', 0.9233870967741935), (',', 0.9956331877729258), ('CreateMode', 0.9336283185840708), ('.', 0.9551020408163265), ('PERSISTENT', 0.7370517928286853), ('.', 0.020833333333333332), ('toFlag', 1.0), ('(', 1.0), (')', 1.0), (',', 0.04123017779913503), ('null', 0.015432098765432098), (',', 0.4018151815181518), ('Ids', 0.06264775413711583), ('.', 1.0), ('OPEN_ACL_UNSAFE', 0.9233870967741935), (',', 0.9956331877729258), ('CreateMode', 0.9336283185840708), ('.', 0.9551020408163265), ('EPHEMERAL', 0.099601593625498), (';', 0.07407407407407407), ('assertEquals', 1.0), ('(', 1.0), ('cm', 0.002005347593582888), ('.', 1.0), ('isEphemeral', 0.28125), ('(', 1.0), (')', 1.0), (')', 0.1723209995194618), (';', 0.6920507070614618), ('assertTrue', 0.013176787647175772), ('(', 1.0), ('version', 0.0013297872340425532), (',', 0.05172413793103448), ('Artifact', 0.13513513513513514), ('.', 1.0), ('SCOPE_TEST', 0.125), (')', 1.0)]","public void receivedStatus ( line = ( FileSystemPage . propertiesFilename ) ; assertSame ( page ! = null ? new ImmediateFuture ( false ) ) ) ; < T > tc , String tag , byte [ 1 ] , ZooDefs . Ids . OPEN_ACL_UNSAFE , CreateMode . PERSISTENT . toFlag ( ) , null , Ids . OPEN_ACL_UNSAFE , CreateMode . EPHEMERAL ; assertEquals ( cm . isEphemeral ( ) ) ; assertTrue ( version , Artifact . SCOPE_TEST )"
96,"['public', 'void']","[('testSystemStarted', 0.004875406283856988), ('(', 1.0), ('TestSystem', 0.7395833333333334), ('testSystem', 0.8074534161490683), (')', 0.22818791946308725), ('throws', 0.17307692307692307), ('Exception', 0.5000719838756119), ('{', 0.9247048661099914), ('return', 0.032512626262626264), ('new', 0.16242380781642166), ('TouchOperationImpl', 0.002320185614849188), ('(', 1.0), ('key', 0.6666666666666666), (')', 0.43730886850152906), (';', 0.710124826629681), ('Assert', 0.006052707150588703), ('.', 1.0), ('assertEquals', 0.5963581183611533), ('(', 1.0), ('""', 0.3830213903743315), ('>= 5.9', 0.000424648485420402), ('""', 1.0), (',', 1.0), ('importedPageOne', 0.00014570887367040654), ('.', 1.0), ('getChildPage', 0.42857142857142855), ('(', 1.0), ('String', 0.20994475138121546), ('desc', 0.0003901677721420211), (',', 0.6526315789473685), ('final', 0.5402298850574713), ('Label', 0.04744255003706449), ('start', 0.24175824175824176), (')', 0.3448275862068966), ('{', 0.40625), ('if', 0.09225356700762265), ('(', 1.0), ('to', 0.000418147606104955), ('=', 0.2), ('=', 0.07142857142857142), ('other', 0.022336769759450172), ('.', 0.9629629629629629), ('counter', 0.011494252873563218), ('+', 0.5), ('+', 1.0), (';', 0.14833501513622604), ('String', 0.028985507246376812), ('newContent', 0.004761904761904762), ('=', 1.0), ('(', 0.125), ('Button', 0.002785515320334262), (')', 0.75), ('findViewById', 1.0), ('(', 1.0), ('R', 0.9444444444444444), ('.', 1.0), ('id', 0.4155844155844156), ('.', 0.6989247311827957), ('entry_comment', 0.0958904109589041), (')', 0.5714285714285714), (',', 0.5), ('bean', 0.0009077705156136529), (')', 0.8333333333333334), (';', 0.7142857142857143), ('one', 0.005169100267291082), ('(', 1.0), ('method', 0.02170767004341534), ('(', 0.051440329218107), ('""', 0.7431192660550459), ('TestPage.ScenarioLibrary', 9.436633009342267e-05), ('""', 1.0), (',', 1.0), ('""', 0.38678420515809414), ('create page', 0.0002161227577263886), ('""', 1.0), (')', 1.0), (';', 0.6090406958288362), ('assert', 0.000717930592679317), ('op', 0.09333333333333334), ('!', 0.8333333333333334), ('=', 1.0), ('EPHEMERAL_CNT', 0.0014545454545454545), (')', 1.0), ('{', 0.6666666666666666), ('if', 0.09225356700762265), ('(', 1.0), ('op', 0.002717959439682208), (',', 0.07042253521126761), (')', 'Paren balancing'), (')', 'Paren balancing'), ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}', ('}', 'Bracket balancing'), '}']","public void testSystemStarted ( TestSystem testSystem ) throws Exception { return new TouchOperationImpl ( key ) ; Assert . assertEquals ( "" >= 5.9 "" , importedPageOne . getChildPage ( String desc , final Label start ) { if ( to = = other . counter + + ; String newContent = ( Button ) findViewById ( R . id . entry_comment ) , bean ) ; one ( method ( "" TestPage.ScenarioLibrary "" , "" create page "" ) ; assert op ! = EPHEMERAL_CNT ) { if ( op , ) )"
97,"['public', 'static']","[('HtmlTag', 0.01867219917012448), ('makeBreadCrumbsWithCurrentPageNotLinked', 0.047619047619047616), ('(', 1.0), ('trail', 0.2222222222222222), (',', 0.3684210526315789), ('""', 0.5), ('content', 0.006051437216338881), ('""', 1.0), (')', 0.7125), (';', 0.6090406958288362), ('allowParametersCreation', 6.627051624732157e-05), ('(', 1.0), ('method', 1.0), (',', 0.4403292181069959), ('errors', 0.01763668430335097), (',', 0.5822784810126582), ('bundle', 0.5), (')', 1.0), ('{', 0.3244444444444444), ('return', 0.14763176754185942), ('disgraceMethodName', 0.00035855145213338117), ('(', 1.0), ('""', 0.42857142857142855), ('/my/base/*.jar', 0.000141549495140134), ('""', 1.0), (',', 1.0), ('TokenType', 0.001675652047209675), ('.', 0.9444444444444444), ('Style', 0.21739130434782608), (',', 1.0), ('true', 0.4838709677419355), (',', 0.28874734607218683), ('configs', 0.044), (')', 1.0), (';', 1.0), ('}', 0.17806887715655306), ('lastValue', 0.0003546728143287817), ('.', 1.0), ('put', 0.6666666666666666)]","public static HtmlTag makeBreadCrumbsWithCurrentPageNotLinked ( trail , "" content "" ) ; allowParametersCreation ( method , errors , bundle ) { return disgraceMethodName ( "" /my/base/*.jar "" , TokenType . Style , true , configs ) ; } lastValue . put"
98,"['public', 'TargetResult']",[],public TargetResult
99,"['private', 'String']","[('convert', 0.005277044854881266), ('(', 1.0), ('""', 0.45724907063197023), ('/clients/{client.id}', 0.000283098990280268), ('""', 1.0), (',', 0.375), ('fixtureNames', 0.0004371266210112196), ('.', 1.0), ('get', 0.5454545454545454), ('(', 1.0), ('String', 0.22434150772025432), (')', 0.013265704252828716), ('request', 0.27956989247311825), ('.', 0.9714285714285714), ('setAttribute', 0.005490196078431373), ('(', 1.0), ('""', 0.38636363636363635), ('child one', 0.00018873266018684534), ('""', 1.0), (')', 0.7142857142857143), (';', 0.6090406958288362), ('this', 0.009366232962954782), ('.', 1.0), ('builder', 0.0032085561497326204), ('=', 0.6), ('new', 0.8695652173913043), ('SyncBasicHttpParams', 0.00011680878402055835), ('(', 1.0), (')', 1.0), (';', 0.4777126381547333), ('response', 0.003678013651726347), ('.', 0.7337278106508875), ('getStatus', 0.14355828220858896), ('(', 1.0), ('File', 0.0055248618784530384), ('parentDir', 0.011799410029498525), (',', 0.5), ('FileTxnSnapLog', 0.3333333333333333), ('.', 1.0), ('class', 0.5), (',', 0.31704361873990305), ('capacity', 0.002570694087403599), (')', 1.0), (';', 1.0), ('return', 0.02244361483575957), ('table', 0.002472187886279357), ('.', 0.6153846153846154), ('add', 0.05776173285198556), ('(', 0.995049504950495), ('new', 0.11653846153846154), ('TarEntry', 0.0006872852233676976), ('(', 1.0), ('""', 0.3), ('fightWith', 0.00018873266018684534), ('""', 1.0), (',', 1.0), (')', 'Paren balancing'), (')', 'Paren balancing'), (')', 'Paren balancing')]","private String convert ( "" /clients/{client.id} "" , fixtureNames . get ( String ) request . setAttribute ( "" child one "" ) ; this . builder = new SyncBasicHttpParams ( ) ; response . getStatus ( File parentDir , FileTxnSnapLog . class , capacity ) ; return table . add ( new TarEntry ( "" fightWith "" , ) ) )"
100,"['void', 'add']","[('(', 1.0), ('new', 0.11653846153846154), ('String', 0.07216494845360824), ('(', 0.2486910994764398), ('zk', 0.21052631578947367), (',', 0.40425531914893614), ('States', 0.09259259259259259), ('.', 0.8888888888888888), ('CONNECTING', 0.1388888888888889), (')', 0.8), (';', 1.0), ('int', 0.01989219996023769), ('countCreated', 0.0009905894006934125), ('=', 1.0), ('createNodes', 1.0), ('(', 1.0), ('zk', 0.8461538461538461), (')', 0.22340425531914893), ('.', 0.15555555555555556), ('getPath', 0.002554604674926555), ('(', 1.0), (')', 0.926829268292683), (')', 'Paren balancing')]","void add ( new String ( zk , States . CONNECTING ) ; int countCreated = createNodes ( zk ) . getPath ( ) )"
