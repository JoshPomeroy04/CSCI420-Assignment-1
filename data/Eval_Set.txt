public PagesByTestSystem partition(Function<List<WikiPage>, ? extends PagesByTestSystem> factory, List<WikiPage> pages, int partitionCount, int partitionIndex) { List<List<WikiPage>> partitionedTests = getPartitionsWithOnlyTests(partitionCount, factory.apply(pages)); List<WikiPage> selectedPartition = partitionedTests.get(partitionIndex); return factory.apply(selectedPartition); }
public String equals() { if (value.equals(expected)) return expected;
public void appendToCell(int col, int row, Response response) { appendToCell(col, row, response.toHtml()); }
public void canGetRedirectResponse() throws Exception { makeResponse(); final String body = response.getContent(); Assert.assertEquals("", body); Assert.assertEquals(response.getStatus(), 303); }
long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(String mechs[], CallbackHandler cbh) throws OperationException; }
public static Collection<Object[]> data() throws Exception { String baseZnode = Base.createBaseZNode(); return Arrays.asList(new Object[][] { {baseZnode, baseZnode, ClientResponse.Status.NO_CONTENT },
public void prepareToExecute() { } public List<Object> executeStatements(List<Object> statements) { List<Object> result = new ArrayList<Object>(); for (Object statement : statements) if (!executor.stopHasBeenRequested()) result.add(executeStatement(statement)); return result; } public Object executeStatement(Object statement) { return new Statement(asStatementList(statement), methodNameTranslator).execute(executor); } public void finalizeExecution() { if (executor.stopHasBeenRequested()) executor.reset(); } } private class LoggingExecutive extends Executive { public void prepareToExecute() { verboseMessage("!1 Instructions"); } public Object executeStatement(Object statement) { List<Object> statementList = asStatementList(statement); verboseMessage(statementList + "\n"); Object retVal = super.executeStatement(statement); verboseMessage(retVal); verboseMessage("------"); return retVal; } } public List<Object> execute(List<Object> statements) { Executive e = verbose ? new LoggingExecutive() : new Executive(); e.prepareToExecute(); List<Object> result = e.executeStatements(statements); e.finalizeExecution(); return result; } private List<Object> asStatementList(Object statement) { return ListUtility.uncheckedCast(Object.class, statement); } private void verboseMessage(Object message) { if (verbose) System.out.println(message); } }
@Test public void testGetShortTemplateNames() { List<String> pathList = new ArrayList<String>(); pathList.add(REGULAR_PARENT_PATH); pathList.add(ROOT_PARENT_PATH); Map<String, String> pathMap = TemplateUtil.getShortTemplateNames(pathList); assertEquals(REGULAR_PARENT_PATH, pathMap.get("LibraryParent._.TemplateOne")); assertEquals(ROOT_PARENT_PATH, pathMap.get("._.TemplateFromRoot")); }
private String replaceLiterals(TextWidget textWidget, String cellText) { cellText = removeUnprocessedLiterals(cellText); return cellText; }
public void shouldBeAbleToConvertIntegerNumbers(){ assertThat((BigDecimal) converter.convert("2.3", BigDecimal.class), is(equalTo(new BigDecimal("2.3")))); }
private byte[] addr2Bytes(String addr) { byte[] b = v4addr2Bytes(addr);
void testOutputChunk(String output) throws IOException; void testComplete(TestSummary testSummary) throws IOException; void testSystemStopped(TestSystem testSystem, ExecutionLog executionLog, Throwable cause ); void testAssertionVerified(Assertion assertion, TestResult testResult); void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); }
public String toString() { return new StringBuilder().append(Arrays.toString(args)).append(method.getName()).toString(); }
public boolean isJunitFormat() { return Format.JUNIT.contentType.equals(contentType); }
public Integer convert(String value, Class<? extends Integer> type) { if (value == null || value.equals("")) { return null; } try { return Integer.valueOf(value);
public void canProvideAllApplicationScopedComponents() { Class<?>[] components = new Class[]{ServletContext.class, UrlToResourceTranslator.class, ResourceRegistry.class, TypeCreator.class, InterceptorRegistry.class, MethodLookupBuilder.class, PathResolver.class, ParameterNameProvider.class, Converters.class, EmptyElementsRemoval.class}; checkAvailabilityFor(true, components); mockery.assertIsSatisfied(); }
public boolean shouldIgnoreException(String resultKey, String resultString) { return executeInstructions.contains(resultKey); }
@Test public void scansIncludes() { ParserTestHelper.assertScansTokenType("!include name", "Include", true); }
protected void createSlimService() throws Exception { runner = new CommandRunner("ruby /Users/unclebob/projects/RubySlim/lib/run_ruby_slim.rb 8099", ""); runner.start(); }
public String genJavaHashCode(String fname) { return " ret = Arrays.toString("+fname+").hashCode();\n"; }
public void testReferencesOnPageOne_5() throws Exception { checkChangesOnPageOne("Stuff ^PageTwo Stuff\n", "Stuff ^PageTwo Stuff\n"); }
public void shouldInvokePrimitiveConverter() throws OgnlException { mockery.checking(new Expectations() { { one(converters).to(int.class, null); will(returnValue(converter)); one(converter).convert("2", int.class, bundle); will(returnValue(2)); } }); Map context = Ognl.createDefaultContext(myCat); Ognl.setTypeConverter(context, controller); Ognl.setValue("length", context, myCat, "2"); assertThat(myCat.length, is(equalTo(2))); mockery.assertIsSatisfied(); }
protected void setUp() throws Exception { super.setUp(); tc = new LongTranscoder(); }
void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
private HtmlTag makeScriptButtons() { TagGroup scripts = new TagGroup(); includeJavaScriptFile("/files/javascript/SpreadsheetTranslator.js", scripts); includeJavaScriptFile("/files/javascript/spreadsheetSupport.js", scripts); includeJavaScriptFile("/files/javascript/WikiFormatter.js", scripts); includeJavaScriptFile("/files/javascript/wikiFormatterSupport.js", scripts); includeJavaScriptFile("/files/javascript/fitnesse.js", scripts); return scripts; }
public void testPageRedirection() throws Exception { WikiPage pageOne = crawler.addPage(root, PathParser.parse("OneOne"), "Content"); crawler.addPage(pageOne, PathParser.parse("TwoOne")); Response response = doRename("OneOne.TwoOne", "ReName"); assertNotNull(response); assertEquals(303, response.getStatus()); assertEquals("OneOne.ReName", response.getHeader("Location")); }
private void writeProperties(final OutputStream OutputStream) throws IOException { BufferedWriter awriter; awriter = new BufferedWriter(new OutputStreamWriter(OutputStream, "8859_1")); awriter.write("#FitNesse properties"); awriter.newLine(); Set<Object> objects = rootProperties.keySet(); Object[] keys = objects.toArray(new Object[objects.size()]); Arrays.sort(keys); for (Enumeration<Object> enumeration = rootProperties.keys(); enumeration .hasMoreElements();) { String key = (String) enumeration.nextElement(); String val = (String) rootProperties.get(key); awriter.write(key + "=" + val); awriter.newLine(); } awriter.flush(); }
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException { if (result.used()) { return; } result.use(Results.page()).forward(methodResult.getValue()); }
public Maybe<Symbol> parse(Parser parser) { Scanner scanner = parser.getScanner(); Symbol result = scanner.getCurrent(); scanner.moveNext(); if (!scanner.isType(SymbolType.Whitespace)) return Symbol.Nothing; return new Maybe<Symbol>(result.add(parser.parseToNewline(getPage()))); }
public void shouldBeAbleToConvertArrayOfPrimitive() { MatcherAssert.assertThat(converter.extractTypeDefinition(int[].class), Matchers.is(Matchers.equalTo("[I"))); }
public StatsOperation keyStats(String key, StatsOperation.Callback cb) { return new KeyStatsOperationImpl(key, cb); }
public void deleteAll() { init(); databases.clear(); keyfiles.clear(); savePrefs(); }
public void convertingANonAnnotatedConverterEndsUpComplaining() { converters.register(WrongConverter.class); }
public void testStartsSearchingAtWebInfClasses() { final DirScanner scanner = mockery.mock(DirScanner.class); final ServletContext context = mockery.mock(ServletContext.class); final String myPath = "myPath"; final ResourceRegistry registry = mockery.mock(ResourceRegistry.class); final InterceptorRegistry interceptorRegistry = mockery.mock(InterceptorRegistry.class); mockery.checking(new Expectations() { { one(context).getRealPath(""); will(returnValue(myPath)); one(scanner).scan(new File(new File(myPath), "WEB-INF/classes")); will(returnValue(new ArrayList<Resource>()));
public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof WikiPage)) return false; try { return getPageCrawler().getFullPath().equals(((WikiPage) o).getPageCrawler().getFullPath());
public void testModifications() throws Exception { ConnectionObserver testObserver = new ConnectionObserver() { public void connectionLost(SocketAddress sa) {
Op withChroot(String path) { return new GetChildren(path); }
protected void setUp() throws Exception { super.setUp(); ServerConfiguration conf = new ServerConfiguration(); ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(); TopicManager tm = new TrivialOwnAllTopicManager(conf, executor); dm = new StubDeliveryManager(); PersistenceManager pm = LocalDBPersistenceManager.instance(); sm = new StubSubscriptionManager(tm, pm, conf, executor); sh = new SubscribeHandler(tm, dm, pm, sm, conf); channel = new WriteRecordingChannel(); subscriberId = ByteString.copyFromUtf8("subId"); subRequestPrototype = SubscribeRequest.newBuilder().setSubscriberId(subscriberId).build(); pubSubRequestPrototype = PubSubRequest.newBuilder().setProtocolVersion(ProtocolVersion.VERSION_ONE).setType( OperationType.SUBSCRIBE).setTxnId(0).setTopic(topic).setSubscribeRequest(subRequestPrototype).build(); ush = new UnsubscribeHandler(tm, conf, sm, dm); }
private static TypeAdapter makeAdapterForRegexMethod(String name, Fixture fixture, Matcher matcher) { Method method = getMethod(name, fixture, matcher); if (method == null) throw new NoSuchMethodFitFailureException(name); return TypeAdapter.on(fixture, method, true); }
private static String allowString(String prefix, Boolean allow) { if (allow == null) { return "";
public void substitute(int col, int row, String contents) { Cell cell = rows.get(row).getColumn(col);
private void exceptions() { for (String key : keys) { buffer.append(String.format("<a name=\"%s\"/><b>%s</b>", key, key));
private void verifyQuorumMembers(QuorumPeerTestBase.MainThread mt) { Set<String> expectedConfigs = new HashSet<>(); for (String config : serverAddress.values()) { expectedConfigs.add(config.substring(config.indexOf('=') + 1)); } verifyQuorumMembers(mt, expectedConfigs); }
public void deleteTestHistoryOlderThanDays(File resultsDirectory, int days) { new HistoryPurger(resultsDirectory, days).deleteTestHistoryOlderThanDays(); }
int getRowCount(); int getColumnCountInRow(int rowIndex); String toString(); String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); void appendCellToRow(int row, Table table); }
protected ObjectName makeObjectName(String path, ZKMBeanInfo bean) throws MalformedObjectNameException { if (path == null) { return null; } StringBuilder beanName = new StringBuilder(DOMAIN + ":"); int counter = 0; counter = tokenize(beanName, path, counter); tokenize(beanName, bean.getName(), counter); beanName.deleteCharAt(beanName.length() - 1); try { return new ObjectName(beanName.toString());
public static void UndoUpdateEntry(PwEntry old, PwEntry backup) {
CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public String toString() { StringBuffer buffer = new StringBuffer(); buffer.append("--- Request Start ---\n"); buffer.append("Request URI: ").append(requestURI).append('\n'); buffer.append("Resource: ").append(resource).append('\n'); buffer.append("Query String: ").append(queryString).append('\n'); buffer.append("Hearders: (" + headers.size() + ")\n"); addMap(headers, buffer); buffer.append("Form Inputs: (" + inputs.size() + ")\n"); addMap(inputs, buffer); buffer.append("Entity Body: \n"); buffer.append(entityBody).append('\n'); buffer.append("--- End Request ---\n"); return buffer.toString(); }
public void testGetPort(boolean useSecureClient) throws Exception { init(useSecureClient); serverSideSocket.getPort(); assertFalse(serverSideSocket.isModeKnown()); }
public final void transitionWriteItem() { Operation op=removeCurrentWriteOp(); assert op != null : "There is no write item to transition"; assert op.getState() == Operation.State.READING; getLogger().debug("Transitioning %s to read", op); readQ.add(op); }
void incrementPassedTestsCount(); void incrementFailedTestsCount(); void incrementErroredTestsCount(); void incrementIgnoredTestsCount(); void increment(ExecutionResult testSummary); void increment(TestSummary testSummary); TestPage getPageToTest(); void setCurrentScriptClass(Class<? extends ScriptTable> currentScriptClass); Class<? extends ScriptTable> getCurrentScriptClass(); void setCurrentScriptActor(String currentScriptActor); String getCurrentScriptActor(); }
public void doCell(Fixture fixture, Parse cell) { try {
Collection<VersionInfo> getVersions(); WikiPage getVersion(String versionName); String getHtml(); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage(); }
public String executionStatus(ExecutionLog log) throws Exception { return log.executionStatusHtml(); }
private void assertCounts(Element counts, String right, String wrong, String ignores, String exceptions) throws Exception { assertEquals(right, XmlUtil.getTextValue(counts, "right")); assertEquals(wrong, XmlUtil.getTextValue(counts, "wrong")); assertEquals(ignores, XmlUtil.getTextValue(counts, "ignores")); assertEquals(exceptions, XmlUtil.getTextValue(counts, "exceptions")); }
public void testAbsoluteModeIsMutuallyExclusive() throws Exception { path = PathParser.parse("<MyPage"); assertTrue(path.isBackwardSearchPath()); path.makeAbsolute(); assertFalse(path.isBackwardSearchPath()); }
public void startTimeout(long milliseconds) { mTimer = new Timer(); mTimer.schedule(new TimeoutTask(), milliseconds); }
public void run() { for(int i = 0; i < 1000; i++) { zk3.create("/mytestfoo", null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL, new AsyncCallback.StringCallback() {
private WikiPage makeChildPage(File path, String childName, FileSystemPage page) { for (WikiPageFactory factory : wikiPageFactories) { if (factory.supports(path)) { return factory.makePage(path, childName, page, variableSource); } }
public void testClientCanonicalizationToIp() throws IOException, InterruptedException { SaslServerPrincipal.WrapperInetSocketAddress addr = mock(SaslServerPrincipal.WrapperInetSocketAddress.class); SaslServerPrincipal.WrapperInetAddress ia = mock(SaslServerPrincipal.WrapperInetAddress.class); when(addr.getHostName()).thenReturn("zookeeper.apache.org"); when(addr.getAddress()).thenReturn(ia); when(ia.getCanonicalHostName()).thenReturn("127.0.0.1"); when(ia.getHostAddress()).thenReturn("127.0.0.1"); ZKClientConfig conf = new ZKClientConfig(); String principal = SaslServerPrincipal.getServerPrincipal(addr, conf); Assert.assertEquals("The computed principal does appear to have falled back to the original host name", "zookeeper/zookeeper.apache.org", principal);
public void start(ServletContext context) { registerBundledComponents(getContainers()); this.container.addComponent(context); getContainers().init(); Scanner scanner = new ReflectionsScanner(context); container.getComponent(ComponentRegistrar.class).registerFrom(scanner); container.getComponent(ResourceRegistrar.class).registerFrom(scanner); container.getComponent(InterceptorRegistrar.class).registerFrom(scanner); container.getComponent(ConverterRegistrar.class).registerFrom(scanner); container.getComponent(ComponentFactoryRegistrar.class).registerFrom(scanner); container.start(); }
public void operationFinished(Object ctx, final T resultOfOperation) { new Thread(new Runnable() { @Override
public DERObject toASN1Object() { ASN1EncodableVector v = new ASN1EncodableVector(); v.add(version); if (originatorInfo != null) { v.add(new DERTaggedObject(false, 0, originatorInfo)); } v.add(recipientInfos); v.add(macAlgorithm); if (digestAlgorithm != null) { v.add(new DERTaggedObject(false, 1, digestAlgorithm)); } v.add(encapsulatedContentInfo); if (authAttrs != null) { v.add(new DERTaggedObject(false, 2, authAttrs)); } v.add(mac); if (unauthAttrs != null) { v.add(new DERTaggedObject(false, 3, unauthAttrs)); } return new BERSequence(v); }
private void checkNodes(ZooKeeper zk, int start, int count) throws Exception { LOG.info("Validating nodes {} thru {}", start, (start + count)); for (int i = start; i < start + count; i++) { Assert.assertNotNull(zk.exists("/foo" + i, false)); LOG.error("Exists zxid:{}", Long.toHexString(zk.exists("/foo" + i, false).getCzxid())); } Assert.assertNull(zk.exists("/foo" + (start + count), false)); }
public void shouldFoundASetter() throws Exception { final House aSimpleJavaBeans = new House(); final List<Method> methodsOfHouseClass = Arrays.asList(House.class.getMethods()); Method foundMethod = ReflectionBasedNullHandler.findSetter(aSimpleJavaBeans, "Mouse", Mouse.class, context); assertThat(methodsOfHouseClass, hasItem(foundMethod)); assertThat(foundMethod.toGenericString(), startsWith("public void ")); assertThat(foundMethod.getName(), is(startsWith("setMouse"))); }
public void testPrependWithoutCAS() throws Exception { final String key = "prepend.key"; assertTrue(client.set(key, 5, "test").get()); OperationFuture<Boolean> op = client.prepend(key, "es"); assertTrue(op.get()); assert op.getStatus().isSuccess(); assertEquals("estest", client.get(key)); }
VersionInfo addDirectory(final FileVersion filePath) throws IOException;  void rename(FileVersion fileVersion, File originalFile) throws IOException;  void delete(FileVersion... files); }
public void testACLDigestHashHiding_OnlyAdmin() {
protected void execute() { WikiPage parentOfPageToRename = oldRefactoredPage.getParent(); movePage(oldRefactoredPage, parentOfPageToRename, newName); }
protected void performExecution() throws Exception { SuiteContentsFinder suiteTestFinder = new SuiteContentsFinder(page, root, getSuiteFilter()); MultipleTestsRunner runner = new MultipleTestsRunner(suiteTestFinder.getAllPagesToRunForThisSuite(), context, page, formatter); runner.executeTestPages(); }
List<WikiPage> getChildren(); String getName(); PageData getData(); PageDataRead readPageData(); PageData getDataVersion(String versionName); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage();
private void parseContent() { if (syntaxTree == null) { syntaxTree = Parser.make(parsingPage, content).parse();
public abstract void include(String result);  public abstract void include(String key, Object value); }
public static void destroyTestContext() { FileUtil.deleteFileSystemDirectory(FitNesseUtil.base); }
public static String gray(String string) { return BaseFixture.gray(string); }
private WikiPageProperty getSymbolicLinkProperty(PageData data) throws Exception { WikiPageProperties properties = data.getProperties(); WikiPageProperty symLinkProperty = properties.getProperty(SymbolicPage.PROPERTY_NAME); if(symLinkProperty == null) symLinkProperty = properties.set(SymbolicPage.PROPERTY_NAME); return symLinkProperty; }
protected void includeSetUps(StringBuilder decoratedContent) { includeSetUp(getSetUp(), decoratedContent); }
public Object instantiate(Target<?> target, Parameters parameters) { if (!parameters.hasRelatedTo(target)) { return null; } return delegateInstantiator.instantiate(target, parameters); }
public void testMultiLine() throws Exception { PreformattedWidget widget = new PreformattedWidget(new MockWidgetRoot(), "{{{\npreformatted text\n}}}"); assertEquals("<pre>\npreformatted text\n</pre>", widget.render()); }
public Optional<String> findVariable(String name) { if(urlParams != null && urlParams.containsKey(name)) { return Optional.ofNullable(urlParams.get(name)); } return systemVariables.findVariable(name); }
public void onException(boolean showWarningMessage) { if (showWarningMessage) { onException(R.string.biometric_error);
public void testVersions() throws Exception { PageData data = page1.getData(); data.setContent("version 1"); page1.commit(data); data.setContent("version 2"); page1.commit(data); Collection<VersionInfo> versions = page1.getVersions(); assertEquals(3, versions.size()); }
public void worksWithBasicRegexEvaluation() throws SecurityException, NoSuchMethodException { rules.add(new Rules() {{ routeFor("/clients*").with(HttpMethod.POST).is(MyControl.class).unknownMethod();; }}); assertThat(rules.parse("/clientsWhatever", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method("unknownMethod")))); mockery.assertIsSatisfied(); }
public static void includeInto(PageData pageData) { includeInto(pageData, false); }
public void testLoadKeyStoreWithWrongPassword( X509KeyType caKeyType, X509KeyType certKeyType, String keyPassword, Integer paramIndex) throws Exception { init(caKeyType, certKeyType, keyPassword, paramIndex); assertThrows(Exception.class, () -> { String path = x509TestContext.getKeyStoreFile(KeyStoreFileType.JKS).getAbsolutePath();
protected void revalidateSession(ServerCnxn cnxn, long sessionId, int sessionTimeout) throws IOException { boolean rc = sessionTracker.touchSession(sessionId, sessionTimeout); if (LOG.isTraceEnabled()) { ZooTrace.logTraceMessage(LOG,ZooTrace.SESSION_TRACE_MASK, "Session 0x" + Long.toHexString(sessionId) + " is valid: " + rc); } finishSessionInit(cnxn, rc); }
public void setup() { mockery = new Mockery(); registry = mockery.mock(Router.class); scanner = mockery.mock(Scanner.class); this.registrar = new ResourceRegistrar(registry); }
public boolean serializeZxidDigest(OutputArchive oa) throws IOException { if (!ZooKeeperServer.isDigestEnabled()) { return false; } ZxidDigest zxidDigest = lastProcessedZxidDigest; if (zxidDigest == null) {
void shutdown();  void removeSession(long sessionId); void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException; }
public void add(String... filePaths) throws RevisionControlException { for (String fileName : filePaths) { File file = new File(fileName);
public void testComplete(WikiTestPage testPage, TestSummary testSummary) throws IOException { latestTestTime.stop(); super.testComplete(testPage, testSummary); processTestResults(getRelativeName(testPage), testSummary); }
public void testSystemStopped(TestSystem testSystem, ExecutionLog executionLog, Throwable throwable) { log.add(testSystem.getName(), executionLog); }
void commit() throws IOException;  long getTxnLogSyncElapsedTime();  void setTotalLogSize(long size);  long getTotalLogSize();  interface TxnIterator extends Closeable {  TxnHeader getHeader();  Record getTxn();  boolean next() throws IOException;  long getStorageSize() throws IOException; } }
public List<SymbolType> getSymbolTypes() throws PluginException { return allConfigured(ConfigurationParameter.SYMBOL_TYPES); }
public long getAvgRequestLatency();  public long getMaxRequestLatency();  public long getPacketsReceived();  public long getPacketsSent();  public long getOutstandingRequests();  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency(); }
static void updateAndLaunch(Arguments arguments, FitNesseContext context, FitNesse fitnesse) throws Exception { if (!arguments.isOmittingUpdates()) fitnesse.applyUpdates(); if (!arguments.isInstallOnly()) { boolean started = fitnesse.start();
public String toString() { String prefix = ""; if (mode == ABSOLUTE) prefix = "."; else if (mode == SUB_PAGE) prefix = ">"; else if (mode == BACKWARD_SEARCH) prefix = "<"; return "(" + prefix + StringUtil.join(names, ".") + ")"; }
protected PwEntry populateNewEntry(PwEntry entry) { PwEntry newEntry; if (entry != null) { newEntry = mEntry.clone(true); } else { newEntry = entry; } Date now = Calendar.getInstance().getTime(); newEntry.setLastAccessTime(now); newEntry.setLastModificationTime(now); PwDatabase db = App.getDB().pm; newEntry.setTitle(Util.getEditText(this, R.id.entry_title), db); newEntry.setUrl(Util.getEditText(this, R.id.entry_url), db); newEntry.setUsername(Util.getEditText(this, R.id.entry_user_name), db); newEntry.setNotes(Util.getEditText(this, R.id.entry_comment), db); newEntry.setPassword(Util.getEditText(this, R.id.entry_password), db); return newEntry; }
public List<Object> query() { List<Object> table = new ArrayList<>(); for (String lineContent : lines) { List<Object> line = new ArrayList<>(); String[] words = lineContent.split(","); for (int i = 0; i < words.length; i++) { String word = words[i]; line.add(Arrays.asList(Integer.toString(i+1), word)); } table.add(line); } return table; }
GetsOperation gets(String key, GetsOperation.Callback callback);  GetOperation get(Collection<String> value, GetOperation.Callback cb);  MutatatorOperation mutate(Mutator m, String key, int by, long def, int exp, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb); }
public void setup() { this.mockery = new Mockery(); count = 0; }
long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
String getCellContents(int columnIndex, int rowIndex); void appendToCell(int col, int row, String message); int getRowCount(); int getColumnCountInRow(int rowIndex); String toString(); String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); void appendCellToRow(int row, Table table); }
public void testCheckInvalidAcls() throws Exception { final ZooKeeper zk = createClient(); ZooKeeperMain zkMain = new ZooKeeperMain(zk); String cmdstring = "create -s -e /node data ip:scheme:gggsd";
protected List<SlimAssertion> startActor(int row, String cellContents, int classNameColumn) { List<SlimAssertion> assertions = new ArrayList<>(); String className = Disgracer.disgraceClassName(cellContents); assertions.add(constructInstance(getTableType() + "Actor", className, classNameColumn, row)); getArgumentsStartingAt(classNameColumn + 1, table.getColumnCountInRow(row) - 1, row, assertions); return assertions; }
public void reconnecting() { throw new UnsupportedOperationException(); }
Operation removeCurrentWriteOp();  boolean hasReadOp();  boolean hasWriteOp();  void addOp(Operation op);  void insertOp(Operation o);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
public void testFileSizeGreaterThanPosition() { Assert.assertEquals("file should be padded to 40 KB", 40 * KB, FilePadding.calculateFileSizeWithPadding(31 * KB, 10 * KB, 10 * KB));
protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) { beanFactory.registerSingleton(ServletContext.class.getName(), getServletContext()); beanFactory.ignoreDependencyType(ServletContext.class); registerApplicationScopedComponentsOn(beanFactory); registerRequestScopedComponentsOn(beanFactory); new ComponentScanner(beanFactory, container).scan(basePackages); AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory); AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(beanFactory); registerCustomInjectionProcessor(beanFactory); }
public void testNull() { Assert.assertEquals("html", mimeTypeToFormat.getFormat(null)); }
public static byte[] writeLongBuf(long val) { byte[] buf = new byte[8]; writeLong(val, buf, 0); return buf; }
public void testSingleObserver() throws IOException{ ClientBase.setupTestEnv(); final int CLIENT_PORT_QP1 = PortAssignment.unique(); final int CLIENT_PORT_QP2 = PortAssignment.unique(); String quorumCfgSection = "server.1=127.0.0.1:" + (CLIENT_PORT_QP1) + ":" + (CLIENT_PORT_QP2) + "\npeerType=observer"; MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection); q1.start(); Assert.assertFalse("Observer shouldn't come up", ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT_QP1, CONNECTION_TIMEOUT)); q1.shutdown(); }
public void shouldSupportPathsWithDotsAndAsterisks() throws SecurityException, NoSuchMethodException { builder = new RouteBuilder(proxifier, typeFinder, "/my/{abc.def*}"); Method method = AbcResource.class.getDeclaredMethods()[0]; builder.is(AbcResource.class, method); Route route = builder.build(); assertTrue(route.canHandle("/my/troublesome/uri")); }
public void start() throws AdminServerException { try { server.start(); } catch (Exception e) {
public void testPad() throws Exception { File tmpDir = ClientBase.createTmpDir(); FileTxnLog txnLog = new FileTxnLog(tmpDir); TxnHeader txnHeader = new TxnHeader(0xabcd, 0x123, 0x123, System.currentTimeMillis(), OpCode.create); Record txn = new CreateTxn("/Test", new byte[0], null, false); txnLog.append(txnHeader, txn); FileInputStream in = new FileInputStream(tmpDir.getPath() + "/log." + Long.toHexString(txnHeader.getZxid())); BinaryInputArchive ia = BinaryInputArchive.getArchive(in); FileHeader header = new FileHeader(); header.deserialize(ia, "fileheader"); LOG.info("Expected header :" + header.getMagic() + " Received : " + FileTxnLog.TXNLOG_MAGIC); Assert.assertTrue("Missing magic number ", header.getMagic() == FileTxnLog.TXNLOG_MAGIC);
protected Object executeInternal(CallExecutor executor) throws SlimException { return executor.call(this.instanceName, this.methodName, this.args); }
private Description descriptionFor(TestPage test) { return Description.createTestDescription(mainClass, new WikiPagePath(test.getSourcePage()).toString()); }
private void ballAfterFirstStrike() { if(bowlingScorer.lastRollWasStrike()) {
public void intercept(InterceptorStack invocation, ResourceMethod method, Object resourceInstance) throws InterceptionException { Class<?> type = method.getResource().getType(); Object instance = container.instanceFor(type); invocation.next(method, instance); }
private HtmlTag makeRadioButton(String group, String attribute, String guiName) { HtmlTag checkbox = HtmlUtil.makeInputTag("radio", group); checkbox.addAttribute("value", attribute); checkbox.tail = " - " + guiName; return checkbox; }
public void shouldNotContainScenarioLibrarySectionIfThereAreNone() throws Exception { WikiPage slimTestPage = addPage("SlimTest", "!define TEST_SYSTEM {slim}\n"); TestPage testPage = new TestPage(slimTestPage); SetupTeardownAndLibraryIncluder.includeInto(testPage); String html = testPage.getDecoratedData().getHtml(); assertNotSubString("Scenario Libraries", html); }
public ExtJSJson exclude(String... names) { for (int i = 0; i < names.length; i++) { names[i] = "data." + names[i]; } serializer.exclude(names); return this; }
String[] getEphemeralNodes();  long getPacketsReceived();  long getPacketsSent();  long getOutstandingRequests();  int getSessionTimeout();  void terminateSession();  void terminateConnection();  long getMinLatency();  long getAvgLatency();  long getMaxLatency();  String getLastOperation();  String getLastCxid();  String getLastZxid();  String getLastResponseTime();  long getLastLatency();  void resetCounters(); }
public void start() { super.start(); LOG.info("ZK Server {} started", this); started.complete(null); }
public void canHandleComposedUrlIfNonRootContext() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(RequestInfo.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getContextPath(); will(returnValue("/custom_context")); one(request).getRequestURI(); will(returnValue("/custom_context/products/1")); one(request).getMethod(); will(returnValue("GET")); one(router).parse("/products/1", HttpMethod.GET,webRequest); will(returnValue(expected)); one(request).getParameter("_method"); will(returnValue(null)); }}); ResourceMethod resource = translator.translate(info); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied();
public void testVariableInLiteralCell() throws Exception { WidgetRoot root = new MockWidgetRoot(); root.addVariable("X", "abc"); table = new TableWidget(root, ""); row = new TableRowWidget(table, "", true); TableCellWidget cell = new TableCellWidget(row, "''${X}''", true); assertSubString("''abc''", cell.render()); }
public boolean isSuccessfullyStarted() { for (TestSystem testSystem : testSystems.values()) if (testSystem.isSuccessfullyStarted() == false) return false; return true; }
Object aroundSlimInvoke(FixtureInteraction interaction, Method method, Object... arguments) throws Throwable; }
private Matcher<List<Route>> hasRouteMatching(final String uri) { return new TypeSafeMatcher<List<Route>>() {
public BigDecimal convert(String value, Class<? extends BigDecimal> type, ResourceBundle bundle) { if (isNullOrEmpty(value)) { return null; } try { final Locale locale = localization.getLocale();
public void canHandleComposedUrlIfPlainRootContext() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(RequestInfo.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getContextPath(); will(returnValue("")); one(request).getRequestURI(); will(returnValue("/products/1")); one(request).getMethod(); will(returnValue("GET")); one(router).parse("/products/1", HttpMethod.GET,webRequest); will(returnValue(expected)); one(request).getParameter("_method"); will(returnValue(null)); }}); ResourceMethod resource = translator.translate(info); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied();
public <T> BasicSerializer from(T object) { response.setContentType("application/xml"); try { BasicSerializer serializer = new DefaultXmlSerializer(null, response.getWriter(), restfulie, config).from(object);
public void testLeaderBehind() throws Exception { testConversation(new LeaderConversation() { public void converseWithLeader(InputArchive ia, OutputArchive oa)
public void shouldAddInterceptorsInOrder() throws InterceptionException, IOException { final Sequence sequence = mockery.sequence("executionSequence"); mockery.checking(new Expectations() { { one(stack).add(ResourceLookupInterceptor.class); inSequence(sequence); one(stack).add(FlashInterceptor.class); inSequence(sequence); one(stack).add(InterceptorListPriorToExecutionExtractor.class); inSequence(sequence); one(stack).add(MultipartInterceptor.class); inSequence(sequence); one(stack).add(instantiator); inSequence(sequence); one(stack).add(ParametersInstantiatorInterceptor.class); inSequence(sequence); one(stack).add(ExecuteMethodInterceptor.class); inSequence(sequence); one(stack).add(OutjectResult.class); inSequence(sequence); one(stack).add(DownloadInterceptor.class); inSequence(sequence); one(stack).add(ForwardToDefaultViewInterceptor.class); inSequence(sequence); one(stack).next(null, null); inSequence(sequence); } }); execution.execute(); mockery.assertIsSatisfied(); }
protected void createSessionTracker() { sessionTracker = new SessionTrackerImpl(this, zkDb.getSessionWithTimeOuts(), tickTime, 1);
public void testWikiPageFactoryCreation() throws Exception { testProperties.setProperty(ConfigurationParameter.WIKI_PAGE_FACTORIES.getKey(), FooWikiPageFactory.class.getName()); FileSystemPageFactory wikiPageFactory = mock(FileSystemPageFactory.class); loader.loadWikiPageFactories(wikiPageFactory); verify(wikiPageFactory).registerWikiPageFactory(any(FooWikiPageFactory.class)); }
public void convertArgs_should_return_a_converted_object_when_value_is_a_string() { String value = ""; Class<?> clazz = String.class; Object current = convertSingleValue(value, clazz); assertNull(value, current); }
public void testLinkage() throws Exception { assertSame(pageOne, symPage.getRealPage()); }
public static void tearDown() { try { if (cc != null) { cc.close(); } } catch (IOException e) { LOG.warn("Unexpected, ignoring", e); } cc = null; try { if (cs != null) { cs.stop(); } } catch (IOException e) { LOG.warn("Unexpected, ignoring", e); } cs = null; }
public void findable() { } } @Test public void ignoresNonPublicMethod() { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.ignorableStatic.logic", HttpMethod.POST), is(nullValue())); mockery.assertIsSatisfied(); } @Test public void ignoresStaticMethod() { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.ignorableProtected.logic", HttpMethod.POST), is(nullValue())); mockery.assertIsSatisfied(); } @Test public void returnsNullIfNothingFound() { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.unfindable.logic", HttpMethod.POST), is(nullValue())); mockery.assertIsSatisfied(); } @Test public void returnsTheCorrectDefaultResourceMethodIfFound() throws SecurityException, NoSuchMethodException { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.findable.logic", HttpMethod.POST), is(VRaptorMatchers.resourceMethod(MyResource.class.getMethod("findable")))); mockery.assertIsSatisfied(); } }
public void testLsrNonexistantZnodeCommand() throws Exception { final ZooKeeper zk = createClient(); ZooKeeperMain zkMain = new ZooKeeperMain(zk); zkMain.executeLine("create /b"); zkMain.executeLine("create /b/c"); LsCommand cmd = new LsCommand(); cmd.setZk(zk); cmd.parse("ls -R /b/c/d".split(" ")); try { runCommandExpect(cmd, new ArrayList<>());
public void evaluateReturnValues(Map<String, Object> returnValues) { } }
public void testTheWatchIsOnlyOnCBAndCAllowed() throws IOException, InterruptedException, KeeperException { execRound(roundTheWatchIsOnlyOnCBAndCAllowed); }
public void testACLDigestHashHiding_UserCanRead() {
public void should_decorate_suite_tear_down() { noExplicitTestSystem(); when(sourcePage.getName()).thenReturn("SuiteTearDown"); when(sourcePage.hasProperty("Test")).thenReturn(false); slimTableDefaultColoring.handleParsedSymbol(table, variableSource); verify(table).getChildren(); }
public void operationFinished(Object ctx, Void resultOfOperation) { } };  public static Callback<Void> nop() { return nop; }  public static <T> Callback<T> logger(final Logger logger, final Level successLevel, final Level failureLevel, final Object successMsg, final Object failureMsg, final Callback<T> cont) { return new Callback<T>() { @Override public void operationFailed(Object ctx, PubSubException exception) { logger.log(failureLevel, failureMsg, exception); if (cont != null) cont.operationFailed(ctx, exception); } @Override public void operationFinished(Object ctx, T resultOfOperation) { logger.log(successLevel, successMsg); if (cont != null) cont.operationFinished(ctx, resultOfOperation); } }; }  public static Callback<Void> logger(Logger logger, Level successLevel, Level failureLevel, Object successMsg, Object failureMsg) { return logger(logger, successLevel, failureLevel, successMsg, failureMsg, nop()); }  public static <T> Callback<Void> curry(final Callback<T> cb, final T result) { return new Callback<Void>() { @Override public void operationFailed(Object ctx, PubSubException exception) { cb.operationFailed(ctx, exception); } @Override public void operationFinished(Object ctx, Void resultOfOperation) { cb.operationFinished(ctx, result); } }; } }
abstract void encode(DEROutputStream out) throws IOException; public String toString() { return "[" + tagNo + "]" + obj; } }
public void tearDown() throws Exception { } public void testPageNotFound() throws Exception { String result = getResultFor("MissingPage"); assertSubString("MissingPage was not found", result); } public void testOneTest() throws Exception { String result = getResultFor("SuitePage.TestPassing"); assertEquals("0000000000", result.substring(0, 10)); assertSubString("PassFixture", result); } public void testSuite() throws Exception { String result = getResultFor("SuitePage"); assertEquals("0000000000", result.substring(0, 10)); assertSubString("PassFixture", result); assertSubString("FailFixture", result); assertSubString("ErrorFixture", result); assertSubString("IgnoreFixture", result); assertNotSubString("some page", result); } public void testRelativePageNamesIncluded() throws Exception { String result = getResultFor("SuitePage"); assertNotSubString("SuitePage", result); assertSubString("TestPassing", result); assertSubString("TestFailing", result); assertSubString("TestError", result); assertSubString("TestIgnore", result); } public void testPageThatIsNoATest() throws Exception { String result = getResultFor("SuitePage.SomePage"); assertSubString("SomePage is neither a Test page nor a Suite page.", result); } private String getResultFor(String name) throws Exception { return getResultFor(name, false); } private String getResultFor(String name, boolean addPaths) throws Exception { request.setResource(name); if (addPaths) request.addInput("includePaths", "blah"); response = responder.makeResponse(context, request); sender = new MockResponseSender(); sender.doSending(response); String result = sender.sentData(); return result; } public void testWithClasspathOnSuite() throws Exception { String result = getResultFor("SuitePage", true); assertTrue(result.startsWith("00000000000000000007classes")); } public void testWithClasspathOnTestInSuite() throws Exception { WikiPageUtil.addPage(suite, PathParser.parse("TestPage"), "!path jar.jar\n!path /some/dir/with/.class/files\n!|fitnesse.testutil.IgnoreFixture|\n"); String result = getResultFor("SuitePage.TestPage", true); assertSubString("classes", result); assertSubString("jar.jar", result); assertSubString("/some/dir/with/.class/files", result); } }
public static void main(String[] args) throws IOException, InterruptedException { if (args.length < 1 || !(args[0].equals("client") || args[0].equals("bookie"))) { usage(); return; } String newArgs[] = new String[args.length - 1]; System.arraycopy(args, 1, newArgs, 0, newArgs.length); if (args[0].equals("bookie")) { BookieServer.main(newArgs);
public void shouldObeyPriorityOfRoutes() throws Exception { Route first = mock(Route.class); Route second = mock(Route.class); ResourceMethod method2 = second.resourceMethod(request, "second"); router.add(second); router.add(first); when(first.getPriority()).thenReturn(Path.HIGH); when(second.getPriority()).thenReturn(Path.LOW); EnumSet<HttpMethod> get = EnumSet.of(HttpMethod.GET); when(first.allowedMethods()).thenReturn(get); when(second.allowedMethods()).thenReturn(get); when(first.canHandle(anyString())).thenReturn(false); when(second.canHandle(anyString())).thenReturn(true); ResourceMethod found = router.parse("anything", HttpMethod.GET, request); assertThat(found, is(method2)); }
public static void assertCounts(Counts expected, Counts actual) { TestCase.assertEquals(expected.wrong, actual.wrong); TestCase.assertEquals(expected.exceptions, actual.exceptions); TestCase.assertEquals(expected.ignores, actual.ignores); TestCase.assertEquals(expected.right, actual.right); }
CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
private void compileScript(File scriptDir, File destFile, Set<String> classpath) throws Exception { JavaCommand jcmd = getScalaCommand(); jcmd.addArgs("-classpath", JavaCommand .toMultiPath(new ArrayList<String>(classpath))); jcmd.addArgs("-d", scriptDir.getAbsolutePath()); jcmd.addArgs("-sourcepath", scriptDir.getAbsolutePath()); jcmd.addArgs(destFile.getAbsolutePath()); jcmd.run(displayCmd); }
public Object invoke(Object[] args) throws Exception { return method.invoke(subject, args); }
public Record toRequestRecord() { return new GetDataRequest(getPath(), false); }
public void testIncompleteMessageAfterException() throws Exception { TimeMeasurement timeMeasurement = new TimeMeasurement(); formatter.setExecutionLogAndTrackingId("2", new CompositeExecutionLog(root.addChildPage("ErrorLogs"))); formatter.announceNumberTestsToRun(1); formatter.newTestStarted(page, timeMeasurement.start()); pageBuffer.setLength(0); formatter.errorOccured();
public String dumpEphemerals() { Set<Long> keys = ephemerals.keySet(); StringBuilder sb = new StringBuilder("Sessions with Ephemerals (" + keys.size() + "):\n"); for (long k : keys) { sb.append("0x" + Long.toHexString(k)); sb.append(":\n"); HashSet<String> tmp = ephemerals.get(k); synchronized (tmp) { for (String path : tmp) { sb.append("\t" + path + "\n"); } } } return sb.toString(); }
public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); }
private List<OpResult> multi(ZooKeeper zk, Iterable<Op> ops) throws KeeperException, InterruptedException { if (useAsync) { final MultiResult res = new MultiResult();
public void addDataPoint(String key, long value) { getCounterForKey(key).addDataPoint(value); }
private void doSimpleRun(String fixtureTable) throws Exception { doSimpleRunWithTags(fixtureTable, null); }
public void shutdown() { try { ss.close(); closeAll(); thread.interrupt(); thread.join(); if (login != null) { login.shutdown(); } } catch (InterruptedException e) { LOG.warn("Ignoring interrupted exception during shutdown", e); } catch (Exception e) { LOG.warn("Ignoring unexpected exception during shutdown", e); } try { selector.close(); } catch (IOException e) { LOG.warn("Selector closing", e); } if (zkServer != null) { zkServer.shutdown();
public List<Token> nextTokens(TokenType[] tokenTypes) { ArrayList<Token> tokens = new ArrayList<Token>(); for (TokenType type: tokenTypes) { moveNext(); if (!isType(type)) return new ArrayList<Token>(); tokens.add(getCurrent()); } return tokens; }
public void clear() { standardIconMap.clear(); customIconMap.clear(); }
protected VersionInfo makeVersion(PageData current) { VersionInfo version = makeVersionInfo(current); versions.put(version.getName(), new PageData(current)); return version; }
public void testCreateAsync() throws KeeperException, InterruptedException { AsyncCallback.Create2Callback callback = (rc, path, ctx, name, stat) -> {
private boolean isJava(String command) { return command.toLowerCase().contains("java"); }
public void shouldInvokePrimitiveConverter() throws OgnlException { mockery.checking(new Expectations() { { one(converters).to(int.class, null); will(returnValue(converter)); one(converter).convert("2", int.class); will(returnValue(2)); } }); Map context = Ognl.createDefaultContext(myCat); Ognl.setTypeConverter(context, controller); Ognl.setValue("length", context, myCat, "2"); assertThat(myCat.length, is(equalTo(2))); mockery.assertIsSatisfied(); }
public String getQuorumAddress();  public String getElectionAddress();  public String getClientAddress();  public String getLearnerType(); }
public void fixtureChainingWithAssignmentFromFactory() throws Exception { statements.add(list("id1", "callAndAssign", "v", "testSlim", "createTestSlimWithString", "test string")); statements.add(list("m2", "make", "chainedTestSlim", "$v")); statements.add(list("id2", "call", "chainedTestSlim", "getStringArg")); respondsWith(list( list("id1", (Object) "TestSlim: 0, test string"),
public void shouldUseTheDefaulJvmtLocale() throws ParseException { mockery.checking(new Expectations() { { one(request).getAttribute("javax.servlet.jsp.jstl.fmt.locale.request"); will(returnValue(null)); one(request).getSession(); will(returnValue(session)); one(session).getAttribute("javax.servlet.jsp.jstl.fmt.locale.session"); will(returnValue(null)); one(context).getAttribute("javax.servlet.jsp.jstl.fmt.locale.application"); will(returnValue(null)); one(context).getInitParameter("javax.servlet.jsp.jstl.fmt.locale"); will(returnValue(null)); one(request).getLocale(); will(returnValue(null)); } }); assertThat(Locale.getDefault(), is(equalTo(converter.getLocale()))); mockery.assertIsSatisfied(); }
public void testSerializeLastProcessedZxid_Enabled() throws Exception { testSerializeLastProcessedZxid(true, true); }
public void testQuota() throws IOException, InterruptedException, KeeperException { final ZooKeeper zk = createClient(); final String path = "/a/b/v";
public void shouldTranslateNullToZero() { assertThat((Integer) converter.convert(null, int.class), is(equalTo(0))); }
private synchronized void initSSL(ChannelPipeline pipeline) throws SSLContextException { if (sslContext == null || sslEngine == null) { sslContext = new ClientX509Util().createSSLContext(clientConfig); sslEngine = sslContext.createSSLEngine(host,port); sslEngine.setUseClientMode(true); } pipeline.addLast("ssl", new SslHandler(sslEngine)); LOG.info("SSL handler added for channel: {}", pipeline.channel()); }
public void read(InputStream input) throws Exception { } public boolean finished() { return false; } } private final State READLINE_STATE = new State() { public void read(InputStream input) throws Exception { int b = input.read(); if(b == -1) { changeState(FINAL_STATE); eof = true; } else { bytesConsumed++; if(b == '\n') changeState(FINAL_STATE); else if(b != '\r') output.write((byte) b); } } }; private final State READCOUNT_STATE = new State() { public void read(InputStream input) throws Exception { byte[] bytes = new byte[readGoal - readStatus]; int bytesRead = input.read(bytes); if(bytesRead < 0) { changeState(FINAL_STATE); eof = true; } else { bytesConsumed += bytesRead; readStatus += bytesRead; output.write(bytes, 0, bytesRead); } } public boolean finished() { return readStatus >= readGoal; } }; private final State READUPTO_STATE = new State() { public void read(InputStream input) throws Exception { int b = input.read(); if(b == -1) { changeState(FINAL_STATE); eof = true; } else { bytesConsumed++; if(b == boundary[matchingBoundaryIndex]) { matchedBoundaryBytes[matchingBoundaryIndex++] = (byte) b; if(matchingBoundaryIndex >= boundaryLength) changeState(FINAL_STATE); } else if(matchingBoundaryIndex == 0) output.write((byte) b); else { output.write(matchedBoundaryBytes, 0, matchingBoundaryIndex); matchingBoundaryIndex = 0; if(b == boundary[matchingBoundaryIndex]) matchedBoundaryBytes[matchingBoundaryIndex++] = (byte) b; else output.write((byte) b); } } } }; private final State FINAL_STATE = new State() { public boolean finished() { return true; } }; }
public WikiPage makePage(File path, String pageName, BaseWikiPage parent, VariableSource variableSource) { return new ExternalSuitePage(path, pageName, parent, fileSystem, variableSource); }
String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); void appendCellToRow(int row, Table table); void setTestStatusOnRow(int row, boolean testStatus); void setName(String tableName); }
<T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by, long def, int exp); Future<Long> asyncIncr(String key, int by, long def, int exp); Future<Long> asyncDecr(String key, long by, long def, int exp); Future<Long> asyncDecr(String key, int by, long def, int exp); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Long> asyncIncr(String key, long by, long def); Future<Long> asyncIncr(String key, int by, long def); Future<Long> asyncDecr(String key, long by, long def); Future<Long> asyncDecr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); CountDownLatch broadcastOp(final BroadcastOpFactory of); CountDownLatch broadcastOp(final BroadcastOpFactory of, Collection<MemcachedNode> nodes);  Set<String> listSaslMechanisms(); }
public void compress(Writer out, int linebreakpos) throws IOException { Pattern p; Matcher m; String css; StringBuffer sb; int startIndex, endIndex;
ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(StoreType t, String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  SASLMechsOperation saslMechs(OperationCallback cb);  SASLAuthOperation saslAuth(String[] mech, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  SASLStepOperation saslStep(String[] mech, byte[] challenge, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  Collection<Operation> clone(KeyedOperation op);  TapOperation tapBackfill(String id, long date, OperationCallback cb);  TapOperation tapCustom(String id, RequestMessage message, OperationCallback cb);  TapOperation tapAck(TapOpcode opcode, int opaque, OperationCallback cb);  TapOperation tapDump(String id, OperationCallback cb); }
public static String makeNormalWikiPageContent(PageData pageData) throws Exception { SetupTeardownIncluder.includeInto(pageData); return makePageHtmlWithHeaderAndFooter(pageData); }
private String reportToXml(TestExecutionReport report) throws Exception { StringWriter writer = new StringWriter(); report.toXml(writer, VelocityFactory.getVelocityEngine()); writer.close(); return writer.toString(); }
public Response makeResponse(FitNesseContext context, Request request) throws Exception { SimpleResponse response = new SimpleResponse(); resource = request.getResource(); WikiPage page = getWikiPageFromContext(context, request.getResource()); if (page == null) return new NotFoundResponder().makeResponse(context, request); String html = makeHtml(context, request, page); response.setContent(html); response.setMaxAge(0); return response; }
public void commandShouldAllowPortToBeSet() throws Exception { Arguments args = new Arguments("-c", "someCommand", "-p", "666"); assertNotNull(args); assertEquals(666, args.getPort()); }
public void shouldConvertToZeroWhenEmpty() { assertThat((Byte) converter.convert("", byte.class, errors, bundle), is(equalTo((byte) 0))); }
public static X509Certificate newSelfSignedCACert( X500Name subject, KeyPair keyPair, long expirationMillis) throws IOException, OperatorCreationException, GeneralSecurityException { Date now = new Date(); X509v3CertificateBuilder builder = initCertBuilder( subject,
public void testGetStatsSizes() throws Exception { if (TestConfig.isMembase() || TestConfig.isCouchbase() || isMoxi()) { return; }
public void testShouldUseZipFileRevisionControllerAsDefault() throws Exception { factory.loadProperties(); RevisionController defaultRevisionController = factory.loadRevisionController(); assertEquals(ZipFileRevisionController.class, defaultRevisionController.getClass()); }
public void pressCallsRightFunction() throws Exception { Parse table = doTableOf( row("start", "fit.testFxtr.TestActionFixture") + row("press", "button")); assertTrue(actionFixture().buttonPressed); }
public int read( byte[] b, int off, int len ) throws IOException { int length = super.read(b, off, len); for (int i = 0; i < length; i++) { add(b[off + i] & 0xFF); } return length; }
public void testUseOfGracefulNamingForMethods() throws Throwable { checkForMethodBinding("intMethod()", true); checkForMethodBinding("int Method?", true); checkForMethodBinding("int method?", true); checkForMethodBinding("intmethod?", false); checkForMethodBinding("Intmethod?", false); checkForMethodBinding("IntMethod?", false); }
private void insertPagesOfThisGroup(LinkedList<TestPage> pageGroup) { for (TestPage page : pageGroup) pageList.add(page);
public static boolean isReconfigEnabled() { return reconfigEnabled; }
public void reset() { super.reset(); H0 = 0x67452301; H1 = 0xefcdab89; H2 = 0x98badcfe; H3 = 0x10325476; H4 = 0xc3d2e1f0; xOff = 0; for (int i = 0; i != X.length; i++) {
private String makeLinkToExistingWikiPage(String qualifiedName) { StringBuffer html = new StringBuffer(); html.append("<a href=\""); html.append(qualifiedName).append("\">"); html.append(Utils.escapeText(getText())).append("</a>"); return html.toString(); }
public void testSetReqs() throws Exception { final String path = "/set_test"; zk.create(path, new byte[1], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); testRequests(new ClientOp() { @Override
public void dontReconnect() throws Exception { java.lang.reflect.Field f = cnxn.getClass().getDeclaredField("closing"); f.setAccessible(true); f.setBoolean(cnxn, true); }
public void stop() { stopped = true;
private LinkedList<String> getPasswordFileLines() throws IOException { LinkedList<String> lines = new LinkedList<>(); if (passwordFile.exists()) lines = FileUtil.getFileLines(passwordFile); return lines; }
private void testSystemStarted(TestSystem testSystem) { testSystemListener.testSystemStarted(testSystem); }
public void testGetBulkWithCallback() throws Exception { final int items = 1000; List<String> keysList = new ArrayList<String>(items); for (int i = 0; i < items; i++) { assertTrue(client.set("getBulkWithCallback" + i, 0, "content").get()); keysList.add("getBulkWithCallback" + i); } BulkFuture<Map<String, Object>> asyncGetBulk = client.asyncGetBulk(keysList); final CountDownLatch latch = new CountDownLatch(1); asyncGetBulk.addListener(new BulkGetCompletionListener() { @Override public void onComplete(BulkGetFuture<?> f) throws Exception { assertEquals(items, f.get().size()); assertTrue(f.getStatus().isSuccess()); assertTrue(f.isDone()); assertFalse(f.isCancelled()); latch.countDown(); } }); assertTrue(latch.await(2, TimeUnit.SECONDS)); }
public void testNoExtraLineBreakInHtml() throws Exception { WikiPage root = InMemoryPage.makeRoot("RooT"); PageData data = root.getData(); String content = "!define SOME_VARIABLE {Variable #1}\n!define ANOTHER_VARIABLE {Variable #2}"; data.setContent(content); assertSubString("SOME_VARIABLE=Variable #1</span>" + HtmlElement.endl + "<br/>" + HtmlElement.endl + "<span", data.getHtml()); assertNotSubString("SOME_VARIABLE=Variable #1</span><br/><br/><span", data.getHtml()); }
public void testParse_whenFindHeadings_expectHeadingSymbol() {
public boolean canProvide(Target<?> target) { return container.canProvide(target.getClassType()); }
private Thread makeParsingThread() { return new Thread(new Runnable() { @Override
private static void removeDuplicate(List<String> lines, String resource) { for (ListIterator<String> iterator = lines.listIterator(); iterator.hasNext();) { String s = iterator.next();
public Map<String, Object> invokeAndGetResponse(List<Instruction> statements) throws IOException { if (statements.isEmpty()) return Collections.emptyMap(); String instructions = SlimSerializer.serialize(new SlimListBuilder(slimServerVersion).toList(statements)); SlimStreamReader.sendSlimMessage(writer, instructions); String results = reader.getSlimMessage(); List<Object> resultList = SlimDeserializer.deserialize(results); return resultToMap(resultList); }
public void kill() throws Exception { if(process != null) {
public long lastModified(File file) { return file.exists() ? file.lastModified() : Clock.currentTimeInMillis(); }
public void writeSummary_WritesSummaryOfTestExecutions() throws Exception{ TimeMeasurement timeMeasurement = new TimeMeasurement().start(); jf.testComplete(buildNestedTestPage(), new TestSummary(5,6,7,8), timeMeasurement.stop()); WikiPageDummy secondPage=new WikiPageDummy("SecondPage", null); secondPage.setParent(new WikiPageDummy("root", null)); jf.testComplete(new TestPage(secondPage), new TestSummary(11,12,13,14), timeMeasurement.stop()); jf.writeSummary("SummaryPageName"); String expectedOutput = new StringBuffer() .append(JavaFormatter.TestResultsSummaryTable.SUMMARY_HEADER) .append(new JavaFormatter.TestResultsSummaryTableRow(nestedPageName, new TestSummary(5,6,7,8)).toString()) .append(new JavaFormatter.TestResultsSummaryTableRow("SecondPage", new TestSummary(11,12,13,14)).toString()) .append(JavaFormatter.TestResultsSummaryTable.SUMMARY_FOOTER) .toString(); verify(mockResultsRepository).open("SummaryPageName"); verify(mockResultsRepository, times(1)).write(expectedOutput); }
public void testDeleteFuture() throws Exception { assertNull(client.get("test1")); client.set("test1", 5, "test1value"); assertEquals("test1value", client.get("test1")); Future<Boolean> f=client.delete("test1"); assertNull(client.get("test1")); assertTrue("Deletion didn't return true", f.get()); assertFalse("Second deletion returned true", client.delete("test1").get());
protected TestResult trueResult(String actual, String expected) { return TestResult.fail(expected); }
public Response makeResponse(FitNesseContext context, Request request) throws Exception { resource = request.getResource(); this.context = context; crawler = context.root.getPageCrawler(); page = crawler.getPage(context.root, PathParser.parse(resource)); if (page == null) return new NotFoundResponder().makeResponse(context, request); response = new SimpleResponse(); if (request.hasInput("removal")) removeSymbolicLink(request, page); else if (request.hasInput("rename")) renameSymbolicLink(request, page); else addSymbolicLink(request, page); return response; }
public String genJavaReadWrapper(String fname, String tag, boolean decl) { StringBuilder ret = new StringBuilder(""); if (decl) { ret.append(" " + getJavaFQName() + " " + fname + ";\n"); } ret.append(" " + fname + "= new " + getJavaFQName() + "();\n"); ret.append(" a_.readRecord(" + fname + ",\"" + tag + "\");\n"); return ret.toString(); }
public boolean addGlobalSession(long id, int to) {
@Test public void translatesVariables() throws Exception { WikiPage pageOne = new TestRoot().makePage("PageOne", "!define x {y}"); ParserTest.assertTranslatesTo(pageOne, "${x}", "y"); ParserTest.assertTranslatesTo(pageOne, "${z}", "<span class=\"meta\">undefined variable: z</span>"); }
public WikiPage makePage(File path, String pageName, WikiPage parent, VariableSource variableSource) { return new ExternalSuitePage(path, pageName, parent, fileSystem, variableSource); }
public String toString() { return "{ state:" + state + " leaderOffer:" + getLeaderOffer() + " zooKeeper:" + zooKeeper + " hostName:" + getHostName() + " listeners:" + listeners
int getColumnCountInRow(int rowIndex); String toString(); String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); void appendCellToRow(int row, Table table); }
protected Description describeChild(WikiPage child) { return Description.createTestDescription(suiteClass, child.getPageCrawler().getFullPath().toString()); }
private static void serializeConnectResponse(final ConnectResponse response, OutputArchive outputArchive, boolean withReadonly) throws IOException { if (withReadonly) { serializeConnectResponseWithReadonly(response, outputArchive);
void permanentlyRedirectTo(String uri);  <T> T permanentlyRedirectTo(Class<T> controller);  <T> T permanentlyRedirectTo(T controller); }
public void canRedirectWhenLogicMethodIsNotAnnotatedWithHttpMethods() throws Exception { mockery.checking(new Expectations() { { one(response).sendRedirect(with(any(String.class))); ignoring(anything()); } }); logicResult.redirectTo(MyComponent.class).base(); }
abstract void bark(int times); abstract void bark(String phrase); abstract void eat(List<String> portions); abstract void dropDead(int[] positions); abstract void recurse(DogAlike[] dogs); abstract void jump(long times); abstract void dig(double amount); }
public Deserializer deserializerFor(String contentType, Container container) { if (!deserializers.containsKey(contentType)) { throw new VRaptorException("There is no deserializer for the content type " + contentType); } return container.instanceFor(deserializers.get(contentType)); }
private void ensureXmlResultFileDoesNotExist(TestSummary counts) throws IOException { String resultsFileName = String.format("%s/TestPage/20081205011900_%d_%d_%d_%d.xml", context.getTestHistoryDirectory(), counts.getRight(), counts.getWrong(), counts.getIgnores(), counts.getExceptions()); xmlResultsFile = new File(resultsFileName); if (xmlResultsFile.exists()) FileUtil.deleteFile(xmlResultsFile);
public void newTestStarted(WikiTestPage test, TimeMeasurement timeMeasurement) throws IOException; public void testOutputChunk(String output) throws IOException; public void testAssertionVerified(Assertion assertion, TestResult testResult); public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); public void testComplete(WikiTestPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws IOException; public void errorOccurred(Throwable cause); }
GetOperation get(String key, GetOperation.Callback callback);  GetsOperation gets(String key, GetsOperation.Callback callback);  GetOperation get(Collection<String> value, GetOperation.Callback cb);  MutatatorOperation mutate(Mutator m, String key, int by, long def, int exp, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(String key, long casId, int flags, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb); }
public void describeTo(Description description) { description.appendText("a list of routes matching " + uri);
public static void setup() { System.setProperty(ZKAuditProvider.AUDIT_ENABLE, "true");
public void testResponseWithMatchesWillReturnPageList() throws Exception { MockRequest request = setupRequest(); request.addInput(PAGE_TYPE_ATTRIBUTE, TEST.toString()); String content = invokeResponder(request); String[] titles = { "Page", TEST.toString(), "PageOne"}; assertOutputHasRowWithLink(content, titles); request.addInput("Suites", "filter1"); content = invokeResponder(request); assertHasRegexp("Found 1 result for your search", content); String[] titles1 = { "Page", TEST.toString(), "Tags", "PageOne" }; assertOutputHasRowWithLink(content, titles1); assertOutputHasRowWithLabels("filter1,filter2"); }
public void testDeleteRecursiveInSyncMode() throws Exception { int batchSize = 0; testDeleteRecursiveInSyncAsyncMode(batchSize); }
public void resetAllConnectionStats() {
public void shouldForwardToDefaultViewWithAlias() throws Exception { serialization.from(new Object(), "Abc"); verify(pageResult).forwardTo(); }
public void testSystemStopped(TestSystem testSystem, Throwable cause) { super.testSystemStopped(testSystem, cause); if (cause != null) { suiteExecutionReport.tallyPageCounts(ExecutionResult.ERROR); } if (testHistoryFormatter != null) { try {
public void testExplore() { assertEquals("<table>", simpleTable.tag); assertEquals("<tr>", simpleTable.parts.tag); assertEquals("<td>", simpleTable.parts.parts.tag); assertEquals("a", simpleTable.parts.parts.body); assertEquals("<tr>", simpleTable.parts.more.tag); assertEquals("<td>", simpleTable.parts.more.parts.tag); assertEquals("b", simpleTable.parts.more.parts.body); }
public void testReadCurrentEpochFromAcceptedEpochTmpFile() throws Exception { startServers(); writeSomeData(); restartServers(); writeSomeData(); MainThread firstServer = servers.mt[0];
public void translatesAliases() throws Exception { WikiPage page = new TestRoot().makePage("PageOne"); ParserTest.assertTranslatesTo(page, "[[tag][link]]", link("tag", "link")); ParserTest.assertTranslatesTo(page, "[[tag][PageOne]]", link("tag", "PageOne")); ParserTest.assertTranslatesTo(page, "[[''tag''][PageOne]]", link("<i>tag</i>" + HtmlElement.endl, "PageOne")); ParserTest.assertTranslatesTo(page, "[[you're it][PageOne]]", link("you're it", "PageOne")); ParserTest.assertTranslatesTo(page, "[[PageOne][IgnoredPage]]", link("PageOne", "PageOne")); }
private void clear() { aclKeyMap.clear(); longKeyMap.clear(); referenceCounter.clear(); }
public void start(ServletContext context) { } public void stop() { } } @Test public void shouldDeferToContainerIfStaticFile() throws IOException, ServletException { VRaptor raptor = new VRaptor(); final HttpServletRequest request = mockery.mock(HttpServletRequest.class); final HttpServletResponse response = mockery.mock(HttpServletResponse.class); final StaticContentHandler handler = mockery.mock(StaticContentHandler.class); final FilterChain chain = mockery.mock(FilterChain.class); mockery.checking(new Expectations() { { one(handler).requestingStaticFile(request); will(returnValue(true)); one(handler).deferProcessingToContainer(chain, request, response); } }); raptor.init(new DoNothingProvider(), handler); raptor.doFilter(request, response, chain); mockery.assertIsSatisfied(); } }
public String startsWith() { if (value.startsWith(expected)) return expected;
public boolean canHandle(Class<?> type, Method method) { return type.equals(this.resourceMethod.getResource().getType()) && method.equals(this.resourceMethod.getMethod()); }
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { if (!run) { run = true; resourcesHolder.registerAllOn(resourceRegistry); } return bean; }
protected synchronized void saveContent(String content) throws Exception { if (content == null) return; String separator = System.getProperty("line.separator"); if (content.endsWith("|")) content += separator; content = content.replaceAll("\r\n", separator); File output = new File(getFileSystemPath() + contentFilename); OutputStreamWriter writer = null; try { writer = new OutputStreamWriter(new FileOutputStream(output), "UTF-8");
public void evaluateExpectation(Map<String, Object> returnValues) { Object returnValue = returnValues.get(instructionTag); String evaluationMessage; if (returnValue == null) { String originalContent = table.getCellContents(col, row); evaluationMessage = originalContent + " " + ignore("Test not run").toHtml(); returnValues.put(instructionTag, "Test not run"); } else { String value; value = returnValue.toString(); String originalContent = table.getCellContents(col, row); evaluationMessage = evaluationMessage(value, originalContent); } if (evaluationMessage != null) table.setCell(col, row, evaluationMessage);
<T> T movedPermanentlyTo(Class<T> controller);  void unsupportedMediaType(String errorMessage);  void notAcceptable(); }
public static byte decodeByte(byte[] in) { assert in.length <= 1 : "Too long for a byte"; byte rv=0; if(in.length == 1) { rv=in[0]; } return rv; }
public int sendResponse(ReplyHeader header, Record record, String tag) { if (controller.shouldSendResponse()) { try { return super.sendResponse(header, record, tag); } catch (IOException ex) { LOG.warn("IO Exception occurred", ex); } } else { LOG.warn("Controller is configured to NOT sending response back to client."); } return -1; }
public void shouldThrowIllegalArgumentExceptionWhenProvidersWasNotFound() throws Exception { BasicConfiguration configSpy = spy(config); when(context.getInitParameter(BasicConfiguration.CONTAINER_PROVIDER)).thenReturn(null); doReturn(false).when(configSpy).classExists(anyString()); try { configSpy.getProvider();
private void removeOrphans(WikiPage context) throws Exception { for(Iterator iterator = orphans.iterator(); iterator.hasNext();) {
private void compare() { if (typeAdapter.equals(expected, result)) { right(cell);
public void setSymbol() throws Exception { buildInstructionsFor("|$V=|function|arg|\n"); List<Object> expectedInstructions = list( list("scriptTable_id_0", "callAndAssign", "V", "scriptTableActor", "function", "arg") ); assertEquals(expectedInstructions, instructions); }
private void writeProperties(final OutputStream OutputStream) throws IOException { BufferedWriter awriter; awriter = new BufferedWriter(new OutputStreamWriter(OutputStream, "8859_1")); awriter.write("#FitNesse properties"); awriter.newLine(); Object[] keys = (Object[]) rootProperties.keySet().toArray(new Object[0]); Arrays.sort(keys); for (Enumeration<Object> enumeration = rootProperties.keys(); enumeration .hasMoreElements();) { String key = (String) enumeration.nextElement(); String val = (String) rootProperties.get(key); awriter.write(key + "=" + val); awriter.newLine(); } awriter.flush(); }
public void testBasics() throws Exception { CommandRunner runner = new CommandRunner("java -cp ./classes fitnesse.testutil.Echo", "echo this!"); runner.run(); assertHasRegexp("echo this!", runner.getOutput()); assertEquals("", runner.getError()); assertEquals(false, runner.hasExceptions()); assertEquals(0, runner.getExitCode()); }
public void compareShouldGetReportFileHtmlAndSetResultContentWithPassIfTheFilesWereTheSame() throws Exception { HistoryComparer comparer = new HistoryComparer(); FileUtil.createFile("TestFolder/FirstFile", firstContent); FileUtil.createFile("TestFolder/SecondFile", firstContent); boolean worked = comparer.compare("TestFolder/FirstFile", "TestFolder/SecondFile"); assertTrue(worked); String expectedResult = "pass"; assertEquals(expectedResult, HistoryComparer.resultContent[0]); }
public WikiPage addChildPage(String name) throws Exception { return null; }
public void addPathToRootLeaves() { this.pathTrie.addPath("node1"); this.pathTrie.addPath("node1/node2"); this.pathTrie.addPath("node1/node3"); assertTrue(this.pathTrie.existsNode("/node1")); assertTrue(this.pathTrie.existsNode("/node1/node2")); assertTrue(this.pathTrie.existsNode("/node1/node3")); }
public void htmlTableAndTextDoesNotQualify() { assertFalse(qualifiesAsHtml("<table><tr><td>blah etc.</td></tr></table>And extra text")); }
public void testPageMatchesQueryWithIncludedSetUps() throws Exception { Map<String, Boolean> attributes = new HashMap<String, Boolean>(); attributes.put("SetUp", true); List<PageType> pageTypes = Arrays.asList(TEST, STATIC, SUITE); searcher = generateSearcherByPageTypesAndSearchAttributes(pageTypes, attributes); setPageProperty(page, TEST.toString(), "true"); assertFalse(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SetUp")); assertTrue(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("TearDown")); assertFalse(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SuiteSetUp")); assertTrue(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SuiteTearDown")); assertFalse(searcher.pageMatches(page)); }
String processAllTablesOnPage(PageData pageData) throws Exception { tableScanner = scanTheTables(pageData); allTables = createSlimTables(tableScanner); testResults = pageData; boolean runAllTablesAtOnce = false; String htmlResults = ""; if (runAllTablesAtOnce || (allTables.size() == 0) ) { htmlResults = processTablesAndGetHtml(allTables, START_OF_TEST, END_OF_TEST); } else { List<SlimTable> oneTableList = new ArrayList<SlimTable>(1); for (int index = 0; index < allTables.size(); index++) { SlimTable theTable = allTables.get(index); SlimTable startWithTable = (index == 0) ? START_OF_TEST : theTable; SlimTable nextTable = (index + 1 < allTables.size()) ? allTables.get(index + 1) : END_OF_TEST; oneTableList.add(theTable); htmlResults += processTablesAndGetHtml(oneTableList, startWithTable, nextTable); oneTableList.clear(); } } return htmlResults; }
public static Object callParseMethod(Class type, String s) throws Exception { Method parseMethod = type.getMethod("parse", new Class[]{ String.class }); Object o = parseMethod.invoke(null, new Object[]{ s }); return o; }
public boolean isUpgradingSession(long sessionId) { return upgradingSessions != null && upgradingSessions.containsKey(sessionId); }
public static KeeperException create(int code) { switch (code) { case Code.SystemError:
public AbstractInsnNode clone(final Map labels) { return new LineNumberNode(line, clone(start, labels)); }
private static FitNesseContext loadContext(Arguments arguments) throws Exception { Builder builder = new Builder(); ComponentFactory componentFactory = new ComponentFactory(arguments.getRootPath());
public void setInitLimit(int initLimit);  public void setSyncLimit(int syncLimit);  public boolean isSslQuorum();  public boolean isPortUnification(); }
public void testTimingShouldAppearInSummary() throws Exception { TimeMeasurement totalTimeMeasurement = newConstantElapsedTimeMeasurement(987).start(); formatter.announceNumberTestsToRun(1); formatter.newTestStarted(page); clock.elapse(600); formatter.testComplete(page, new TestSummary(1, 2, 3, 4)); formatter.allTestingComplete(totalTimeMeasurement.stop()); assertSubString("<strong>Assertions:</strong> 1 right, 2 wrong, 3 ignored, 4 exceptions (0.600 seconds)", pageBuffer.toString()); }
public void testExponent() throws Exception { EvaluatorWidget eval = new EvaluatorWidget(widgetRoot, "${=%d: 3^3 =}"); assertEquals("27", eval.render()); }
public static String getPathSeparator(PageData pageData) throws Exception { String separator = pageData.getVariable(PageData.PATH_SEPARATOR); if (separator == null) separator = (String) System.getProperties().get("path.separator"); return separator; }
public void shouldTraverseTables() { String buffer = "|script: table|\n|ensure|I'm there|\n"; assertEquals(asList("Table:|script: table|\n" + "|ensure|I'm there|\n",
public static FitNesseContext makeTestContext(WikiPage root, String rootPath, String rootDirectoryName, int port, Authenticator authenticator) { Builder builder = new Builder(); builder.root = root; builder.rootPath = rootPath; builder.rootDirectoryName = rootDirectoryName; builder.port = port; builder.authenticator = authenticator; FitNesseContext context = builder.createFitNesseContext();
private String removeTrailingPathSeparator(String classpath) { return classpath.substring(0, classpath.length() - 1); }
void latch_await(){ try { latch.await(10000, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { Assert.fail("unexpected interrupt"); } Assert.assertSame(0L, latch.getCount()); }
public void testFindReferencingPagesNotReferenced() throws Exception { WhereUsedPageFinder whereUsed = new WhereUsedPageFinder(pageThree, this); whereUsed.search(root); assertEquals(0, hits.size()); }
private void initializeSignProperties() { if (!signPackage) { return; } if (key != null && keyring != null && passphrase != null) { return; } Map<String, String> properties = readPropertiesFromActiveProfiles(signCfgPrefix, KEY, KEYRING, PASSPHRASE); key = lookupIfEmpty(key, properties, KEY); keyring = lookupIfEmpty(keyring, properties, KEYRING); passphrase = decrypt(lookupIfEmpty(passphrase, properties, PASSPHRASE)); if (keyring == null) { try {
private OgnlContext createOgnlContextFor(Parameter param, Object root, ResourceBundle bundle) { OgnlContext context = createOgnlContext(root); context.setTraceEvaluations(true); context.put("rootType", param.type); context.put("removal", removal); VRaptorConvertersAdapter adapter = new VRaptorConvertersAdapter(converters, bundle); Ognl.setTypeConverter(context, adapter); return context; }
private static void waitForReconnectDelayHelper(long delayValueMs) { if (delayValueMs > 0) { long randomDelay = (long) (delayValueMs * Math.random());
protected void close() throws Exception { response.add(HtmlUtil.getHtmlOfInheritedPage("PageFooter", page)); response.add(formatter.tail()); response.closeChunks(); response.addTrailingHeader("Exit-Code", String.valueOf(client.commandRunner.getExitCode())); response.closeTrailer(); response.close(); }
public void run() {
public void canProvideAllApplicationScopedComponents() { Class<?>[] components = new Class[]{UrlToResourceTranslator.class, ResourceRegistry.class, DirScanner.class, ResourceLocator.class, TypeCreator.class, InterceptorRegistry.class, PathResolver.class, ParameterNameProvider.class}; checkAvailabilityFor(true, components); mockery.assertIsSatisfied(); }
public boolean truncateLog(long zxid) throws IOException {
public MutatatorOperation mutate(Mutator m, String key, int by, OperationCallback cb) {
public void testHtmlForNormalLinkRegraced() throws Exception { WikiPage page = addPage(root, "PageOne"); WikiWordWidget widget = new WikiWordWidget(new WidgetRoot(page), "Wiki42Word"); assertEquals("Wiki42Word<a href=\"Wiki42Word?edit\">?</a>", widget.render()); page = addPage(root, "Wiki42Word"); WidgetRoot root = new WidgetRoot(page); root.addVariable(WikiWordWidget.REGRACE_LINK, "true"); widget = new WikiWordWidget(root, "Wiki42Word"); assertEquals("<a href=\"Wiki42Word\">Wiki 42 Word</a>", widget.render()); }
public static String generateHtml(String state, String titleText, String bodyText) { return generateHtml(state, titleText, bodyText, Collections.<String>emptySet()); }
public void usage() { System.err.println("Usage: java fitnesse.Shutdown [-hpc]"); System.err.println("\t-h <hostname> {localhost}"); System.err.println("\t-p <port number> {" + FitNesseContext.DEFAULT_PORT + "}"); System.err.println("\t-c <username> <password> Supply user credentials. Use when FitNesse has authentication activated."); System.exit(-1); }
private void surroundGroupsOfTestPagesWithRespectiveSetUpAndTearDowns() throws Exception { Map<String, LinkedList<WikiPage>> pageSetUpTearDownGroups = new HashMap<String, LinkedList<WikiPage>>(); createPageSetUpTearDownGroups(pageSetUpTearDownGroups); testPageList.clear(); reinsertPagesViaSetUpTearDownGroups(pageSetUpTearDownGroups); }
public void name(Parse cells) throws Exception {
public Serializer exclude(String... arg0) { return serializer.exclude(arg0); }
void makeHeaders(StringBuffer text) { for (Entry<String, String> entry: headers.entrySet()) { text.append(entry.getKey()).append(": ").append(entry.getValue()).append(CRLF);
public void addMailingList(MailingList mailingList) { wrapped.addMailingList(mailingList); }
protected String cssClassFor(TestSystemBase.TestSummary testSummary) { if(testSummary.wrong > 0) return "fail";
public void testSlimHelperLibraryIsStoredInSlimExecutor() throws Exception { Object helperLibrary = caller.getInstance(SLIM_HELPER_LIBRARY_INSTANCE_NAME); assertTrue(helperLibrary instanceof SlimHelperLibrary); }
public void testNullFactoryConstructor() throws Exception { try { client =
protected void realGetOwner(ByteString topic, boolean shouldClaim, Callback<HedwigSocketAddress> cb, Object ctx) { if (shouldError) { cb.operationFailed(ctx, new PubSubException.ServiceDownException("Asked to fail")); return; } if (topics.contains(topic)
public static File createFile(String path, InputStream content) { String[] names = path.split("/"); if (names.length == 1) return createFile(new File(path), content);
public DefaultXmlSerializer from(String prefix, Collection collection) { this.prefixTag= prefix; this.analyzing = collection; return this; }
public void testTarFileSet() throws Exception { project.executeTarget("tarfileset"); File deb = new File("target/test-classes/test.deb"); assertTrue("package not build", deb.exists()); ArchiveWalker.walkData(deb, (entry, content) -> { assertTrue("prefix: " + entry.getName(), entry.getName().startsWith("./foo/"));
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); pageBuilder = root.getPageCrawler(); request = new MockRequest(); responder = responderInstance(); context = FitNesseUtil.makeTestContext(root); }
public void closedRightIntervalComparison() throws Exception { assertExpectationMessage(" 2.1 < _ <= 5.9", "4.3", "!style_pass(!<2.1<4.3<=5.9>!)"); assertExpectationMessage(" 2.1 < _ <= 5.9", "2.1", "!style_fail(!<2.1<2.1<=5.9>!)"); assertExpectationMessage(" 2.1 < _ <= 5.9", "5.9", "!style_pass(!<2.1<5.9<=5.9>!)"); assertExpectationMessage(" 2.1 < _ <= 5.9", "8.3", "!style_fail(!<2.1<8.3<=5.9>!)"); }
public Object executeStatement(Object statement) { Instruction instruction = InstructionFactory.createInstruction(asStatementList(statement), methodNameTranslator); InstructionResult result = instruction.execute(executor); Object resultObject; if (result.hasResult() || result.hasError()) { resultObject = result.getResult(); } else { resultObject = null; } return asList(instruction.getId(), resultObject); }
public void historyDirectoryWithOneEmptyPageDirectoryShouldShowNoPages() throws Exception { addPageDirectory("SomePage"); history.readHistoryDirectory(resultsDirectory); assertEquals(0, history.getPageNames().size()); assertFalse(history.getPageNames().contains("SomePage")); }
private int methodArity(Method method) { return method.getGenericParameterTypes().length; }
protected BaseFormatter newJunitFormatter() { JunitReFormatter xmlFormatter = new JunitReFormatter(context, page, response.getWriter(), getSuiteHistoryFormatter()); return xmlFormatter; }
protected boolean isEmpty(Iterable<MatchedResult> iterable) { return !iterable.iterator().hasNext(); }
private WebAppBootstrap scannerFor(BasicConfiguration config) { logger.info("Dynamic WebAppBootstrap found.");
private static boolean isAndroid() { String vendorUrl = System.getProperty("java.vendor.url", ""); return vendorUrl.toLowerCase().contains("android"); }
void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap();  public long getLocalSessionCount(); }
void addEnsemble(long startEntryId, ArrayList<InetSocketAddress> ensemble) { assert ensembles.isEmpty() || startEntryId >= ensembles.lastKey(); ensembles.put(startEntryId, ensemble); currentEnsemble = ensemble; }
synchronized boolean finish() { LOG.debug("Calling finish for " + sid); if(!running){  return running; } running = false; closeSocket(sock); this.interrupt(); if (recvWorker != null) { recvWorker.finish(); } LOG.debug("Removing entry from senderWorkerMap sid=" + sid); senderWorkerMap.remove(sid, this); threadCnt.decrementAndGet(); return running; }
public void bark() { } public void bark(int times) { } public void bark(String phrase) { } public void dropDead(int[] positions) { } public void eat(List<String> portions) { } public void recurse(DogAlike[] dogs) { } public void jump(long times) { } public void dig(double amount) { } public void dig(float amount) { } }
public Object clone() { PwEntryV3 newEntry = (PwEntryV3) super.clone(); if (password != null) { int passLen = password.length; password = new byte[passLen]; System.arraycopy(password, 0, newEntry.password, 0, passLen); } newEntry.tCreation = (PwDate) tCreation.clone(); newEntry.tLastMod = (PwDate) tLastMod.clone(); newEntry.tLastAccess = (PwDate) tLastAccess.clone(); newEntry.tExpire = (PwDate) tExpire.clone(); newEntry.binaryDesc = binaryDesc; if ( binaryData != null ) { int descLen = binaryData.length; newEntry.binaryData = new byte[descLen]; System.arraycopy(binaryData, 0, newEntry.binaryData, 0, descLen); } newEntry.parent = parent; return newEntry; }
public void endSync() { int newCount; synchronized (countSyncObject) { syncInProgress--; newCount = syncInProgress; countSyncObject.notify(); } if (newCount < 0) { String errorMsg = "endSync() called incorrectly; current sync count is " + newCount;
WikiPage getPage(WikiPagePath path); WikiPage getPage(WikiPagePath path, PageCrawlerDeadEndStrategy deadEndStrategy); boolean pageExists(WikiPagePath path); WikiPagePath getFullPathOfChild(WikiPagePath childPath); WikiPagePath getFullPath(); String getRelativeName(WikiPage page);
public Artifact replaceWithActiveArtifact(Artifact arg0) { return wrapped.replaceWithActiveArtifact(arg0); }
static void populateCommandMap() { commandMap.put("connect", "host:port"); commandMap.put("close",""); commandMap.put("create", "[-s] [-e] path data acl"); commandMap.put("delete","path [version]"); commandMap.put("set","path data [version]"); commandMap.put("get","path [watch]"); commandMap.put("ls","path [watch]"); commandMap.put("getAcl","path"); commandMap.put("setAcl","path acl"); commandMap.put("stat","path [watch]"); commandMap.put("sync","path"); commandMap.put("setquota","-n|-b val path"); commandMap.put("listquota","path"); commandMap.put("delquota","[-n|-b] path"); commandMap.put("history",""); commandMap.put("redo","cmdno"); commandMap.put("printwatches", "on|off"); commandMap.put("quit",""); commandMap.put("addauth", "scheme auth"); }
String getStartTime();  long getMinRequestLatency();  double getAvgRequestLatency();  long getMaxRequestLatency();  long getPacketsReceived();  long getPacketsSent();  long getFsyncThresholdExceedCount();  long getOutstandingRequests();  int getTickTime();  void setTickTime(int tickTime);  int getMaxClientCnxnsPerHost();  void setMaxClientCnxnsPerHost(int max);  int getMinSessionTimeout();  void setMinSessionTimeout(int min);  int getMaxSessionTimeout();  void setMaxSessionTimeout(int max); boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public static String getTextValue(Element element, String name) throws Exception { Element namedElement = getElementByTagName(element, name); return getElementText(namedElement); }
public void evaluateExpectation(Map<String, Object> returnValues) { TestSummary counts = scriptTable.getTestSummary(); SlimTable parent = scriptTable.getParent(); ExecutionResult testStatus = ExecutionResult.getExecutionResult(counts); parent.getTable().setTestStatusOnRow(getRow(), testStatus); parent.getTestSummary().add(scriptTable.getTestSummary()); }
protected void ignore(int col, int row, String value) { String content = ignore(value); table.setCell(col, row, content); }
public DeleteOperation delete(String key, long cas, DeleteOperation.Callback cb) { throw new UnsupportedOperationException("Delete with CAS is not supported " + "for ASCII protocol");
private UUID ReadUuid(XmlPullParser xpp) throws IOException, XmlPullParserException { String encoded = ReadString(xpp); if (encoded == null || encoded.length() == 0 ) { return PwDatabaseV4.UUID_ZERO; } byte[] buf = Base64.decode(encoded, Base64.NO_WRAP); return Types.bytestoUUID(buf); }
public void process(WatchedEvent event) { LOG.info("<<<EVENT>>> " + clientId + " - WatchedEvent: " + event);
<T> Future<Boolean> prepend(String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); Future<CASResponse> asyncCAS(String key, long casId, int exp, Object value); <T> CASResponse cas(String key, long casId, int exp, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); CASResponse cas(String key, long casId, int exp, Object value); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void setup() { mockery = new Mockery(); registry = mockery.mock(ComponentRegistry.class); this.acceptor = new StereotypedClassAcceptor(registry); }
public static String makeSnapshotName(long zxid) { return FileSnap.SNAPSHOT_FILE_PREFIX + "." + Long.toHexString(zxid) + SnapStream.getStreamMode().getFileExtension();
public void testRenameSiblingOfRoot() throws Exception { WikiPage source = crawler.addPage(root, PathParser.parse("SourcePage"), "gunk TargetPage gunk"); WikiPage target = crawler.addPage(root, PathParser.parse("TargetPage")); renamer.renameReferences(target, "RenamedPage"); String updatedSourceContent = source.getData().getContent(); assertEquals("gunk RenamedPage gunk", updatedSourceContent); }
public void onException(boolean showMessage) { if (showMessage) { onException(R.string.fingerprint_error);
public void shutdownWatcher() { dataWatches.shutdown(); childWatches.shutdown(); }
public void evaluatesLowercaseLink() { TestRoot root = new TestRoot(); WikiPage parent = root.makePage("parent", "[[tag][other_page]]"); WikiPage page1 = root.makePage(parent, "page", "[[tag][other_page]]"); root.makePage(parent, "other_page", "hi"); ParserTestHelper.assertTranslatesTo(page1, link("tag", "parent.other_page")); }
public void testValues() { addDataPoints(); Map<String, Object> values = testCounterSet.values(); assertEquals("There should be 18 values in the set", 18, values.size()); assertEquals("avg_key1_test should =499.5", 999D / 2, values.get("avg_key1_test")); assertEquals("min_key1_test should =0", 0L, values.get("min_key1_test")); assertEquals("max_key1_test should =999", 999L, values.get("max_key1_test")); assertEquals("cnt_key1_test should =1000", 1000L, values.get("cnt_key1_test")); assertEquals("sum_key1_test should =999*500", 999 * 500L, values.get("sum_key1_test")); assertEquals("p50_key1_test should have p50=500", 500L, values.get("p50_key1_test")); assertEquals("p95_key1_test should have p95=950", 950L, values.get("p95_key1_test")); assertEquals("p99_key1_test should have p99=990", 990L, values.get("p99_key1_test")); assertEquals("p999_key1_test should have p999=999", 999L, values.get("p999_key1_test")); assertEquals("avg_key2_test should =3.5", 1000 + 999D / 2, values.get("avg_key2_test")); assertEquals("min_key2_test should =2", 1000L, values.get("min_key2_test")); assertEquals("max_key2_test should =5", 1999L, values.get("max_key2_test")); assertEquals("cnt_key2_test should =4", 1000L, values.get("cnt_key2_test")); assertEquals("sum_key2_test should =14", 2999 * 500L, values.get("sum_key2_test")); assertEquals("p50_key2_test should have p50=1500", 1500L, values.get("p50_key2_test")); assertEquals("p95_key2_test should have p95=1950", 1950L, values.get("p95_key2_test")); assertEquals("p99_key2_test should have p99=1990", 1990L, values.get("p99_key2_test")); assertEquals("p999_key2_test should have p999=1999", 1999L, values.get("p999_key2_test")); }
Transcoder<Object> getTranscoder(); Future<Boolean> append(long cas, String key, Object val); <T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) throws OperationTimeoutException; CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
public Update create(String source, File destination) { return new ReplacingFileUpdate(source, destination); }
public void tearDown() throws Exception { } public void testStandardTags() throws Exception { assertTrue("bad doctype for page: " + html, html.startsWith("<!DOCTYPE html>")); assertSubString("<html>", html); assertHasRegexp("</html>", html); } public void testHead() throws Exception { assertSubString("<head>", html); assertSubString("</head>", html); assertSubString("<title>FitNesse</title>", html); assertSubString("<link", html); assertSubString("rel=\"stylesheet\"", html); assertSubString("type=\"text/css\"", html); assertSubString("href=\"/files/css/fitnesse.css\"", html); assertSubString("src=\"/files/javascript/fitnesse.js\"", html); } public void testIncludesBody() throws Exception { assertSubString("<body>", html); assertSubString("</body>", html); } public void testIncludesHeading() throws Exception { assertSubString("<header>", html); } public void testMainBar() throws Exception { assertSubString("<article>", html); String mainHtml = page.html(); assertSubString("<header>", mainHtml); assertSubString("<article>", mainHtml); } public void testSidebar() throws Exception { assertSubString("<nav>", html); } public void testBreadCrumbsWithCurrentPageLinked() throws Exception { String trail = "TstPg1.TstPg2.TstPg3.TstPg4"; page.setPageTitle(new PageTitle(PathParser.parse(trail))); String breadcrumbs = page.html(); assertSubString("<a href=\"/TstPg1\">TstPg1</a>", breadcrumbs); assertSubString("<a href=\"/TstPg1.TstPg2\">TstPg2</a>", breadcrumbs); assertSubString("<a href=\"/TstPg1.TstPg2.TstPg3\">TstPg3</a>", breadcrumbs); assertSubString("<a href=\"/TstPg1.TstPg2.TstPg3.TstPg4\">TstPg4</a>", breadcrumbs); } public void testBreadCrumbsWithCurrentPageNotLinked() throws Exception { String trail = "TstPg1.TstPg2.TstPg3.TstPg4"; page.setPageTitle(new PageTitle(PathParser.parse(trail)).notLinked()); String breadcrumbs = page.html(); assertSubString("<a href=\"/TstPg1\">TstPg1</a>", breadcrumbs); assertSubString("<a href=\"/TstPg1.TstPg2\">TstPg2</a>", breadcrumbs); assertSubString("<a href=\"/TstPg1.TstPg2.TstPg3\">TstPg3</a>", breadcrumbs); assertHasRegexp("<h1>\\s*TstPg4\\s*</h1>", breadcrumbs); } public void testBreadCrumbsWithPageType() throws Exception { String trail = "TstPg1.TstPg2.TstPg3.TstPg4"; page.setPageTitle(new PageTitle("Some Type", PathParser.parse(trail))); String breadcrumbs = page.html(); assertSubString("<a href=\"/TstPg1.TstPg2.TstPg3.TstPg4\">TstPg4</a>", breadcrumbs); } }
public void process(WatchedEvent event) { triggered = true; }
public void testResponse() throws Exception { MockRequest request = new MockRequest(); request.setResource("PageOne"); WhereUsedResponder responder = new WhereUsedResponder(); Response response = responder.makeResponse(FitNesseUtil.makeTestContext(root), request); MockResponseSender sender = new MockResponseSender(); response.sendTo(sender); String content = sender.sentData(); assertEquals(200, response.getStatus()); assertHasRegexp("Where Used", content); assertHasRegexp("PageOne", content); assertHasRegexp("PageTwo", content); assertHasRegexp("PageTwo\\.ChildPage", content); }
public int score(int frame) { int score = 0; int roll = 0; for(int f = 0; f < frame; f++) { if(strike(roll)) { score += 10 + nextTwoBallsForStrike(roll); roll++; } else if(spare(roll)) { score += 10 + nextBallForSpare(roll); roll += 2; } else { score += ballsInFrame(roll); roll += 2; } } return score; }
public void portStartsAtSlimPortVariable() throws Exception { WikiPage pageWithSlimPortDefined = crawler.addPage(root, PathParser.parse("PageWithSlimPortDefined"), "!define SLIM_PORT {9000}\n"); for (int i = 1; i < 15; i++) { SlimTestSystem.SlimDescriptor descriptor = new SlimTestSystem.SlimDescriptor(TestSystem.getDescriptor(pageWithSlimPortDefined, false));
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); crawler = root.getPageCrawler(); crawler.addPage(root, PathParser.parse("PageOne"), "has PageOne content"); crawler.addPage(root, PathParser.parse("PageOne.PageOneChild"), "PageChild is a child of PageOne"); pageTwo = crawler.addPage(root, PathParser.parse("PageTwo"), "PageTwo has a bit of content too\n^PageOneChild"); PageData data = pageTwo.getData(); data.setAttribute(WikiPageProperties.VIRTUAL_WIKI_ATTRIBUTE, "http://localhost:" + FitNesseUtil.PORT + "/PageOne"); pageTwo.commit(data); hits.clear(); }
public void compress(Writer out, int linebreak, boolean munge, boolean warn, boolean preserveAllSemiColons, boolean preserveStringLiterals) throws IOException { this.munge = munge; this.warn = warn; this.tokens = processStringLiterals(this.srctokens, !preserveStringLiterals); buildSymbolTree(); mungeSymboltree(); StringBuffer sb = printSymbolTree(linebreak, preserveAllSemiColons); out.write(sb.toString()); }
public void subtractOneWeek() throws Exception { assertRenders("!today -7", "28 Nov, 1952"); }
@Test public void childAbsolutePath() { assertChildPage("<a href=\"../TestParent/TestSibling.html\">link</a>", "!-<a href=\".TestParent.TestSibling\">link</a>-!"); }
public void testResponse() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("PageOne")); PageData data = page.getData(); data.setContent("some content"); WikiPageProperties properties = data.getProperties(); properties.set("Test", "true"); properties.set(WikiPageProperties.VIRTUAL_WIKI_ATTRIBUTE, "http://www.fitnesse.org"); page.commit(data); MockRequest request = new MockRequest(); request.setResource("PageOne"); Responder responder = new PropertiesResponder(); SimpleResponse response = (SimpleResponse) responder.makeResponse(new FitNesseContext(root), request); assertEquals("max-age=0", response.getHeader("Cache-Control")); String content = response.getContent(); assertSubString("PageOne", content); assertSubString("value=\"http://www.fitnesse.org\"", content); assertDoesntHaveRegexp("textarea name=\"extensionXml\"", content); assertHasRegexp("<input.*value=\"Save Properties\".*>", content); assertHasRegexp("<input.*value=\"saveProperties\"", content); for (String attribute : new String[]{"Test", "Search", "Edit", "Properties", "Versions", "Refactor", "WhereUsed", "RecentChanges"}) assertCheckboxChecked(attribute, content); for (String attribute : new String[]{"Suite", "Prune", WikiPage.SECURE_READ, WikiPage.SECURE_WRITE, WikiPage.SECURE_TEST}) assertCheckboxNotChecked(content, attribute);
@Test public void translatesCollapsible() { CollapsibleToken.resetId(); ParserTest.assertTranslates("!* Some title\n content \n*!", sectionWithClass("collapsable")); CollapsibleToken.resetId(); ParserTest.assertTranslates("!*> Some title\n content \n*!", sectionWithClass("hidden")); ParserTest.assertTranslates("!**\n**!", "!**<br/>" + HtmlElement.endl + "**!"); }
public void LoadData(Context ctx, String filename, String password, String keyfile, boolean debug) throws InvalidCipherTextException, IOException, InvalidKeyFileException, FileNotFoundException { FileInputStream fis; fis = new FileInputStream(filename); LoadData(ctx, fis, password, keyfile, debug); mFilename = filename; }
byte[] readBuffer(String tag) throws IOException; void readRecord(Record r, String tag) throws IOException; void startRecord(String tag) throws IOException; void endRecord(String tag) throws IOException; Index startVector(String tag) throws IOException; void endVector(String tag) throws IOException; Index startMap(String tag) throws IOException; void endMap(String tag) throws IOException; }
public void testSetACLOK(ServerState serverState, boolean checkEnabled) throws Exception { setUp(serverState, checkEnabled); zkClient.create(PARENT_PATH, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, null); zkClientB.setACL(PARENT_PATH, Ids.READ_ACL_UNSAFE, -1); assertEquals(0, connectedServer.getInProcess(), "OutstandingRequests not decremented"); }
public void failure(Parse cell, String message) { wrong(cell); cell.addToBody(label(message)); }
public void oneRowThatPassesUnchanged() throws Exception { assertTableResults("|2|4|\n", list(
public String toString() { return "AuthRequest{" + "permission=" + permission
private static boolean establishDirectory(File path) { return path.exists() || path.mkdir(); }
public Maybe<String> render(Scanner scanner) { String body = new Translator().translate(scanner, terminator.getType()); if (scanner.isEnd()) return Maybe.noString; return new Maybe<String>(HtmlUtil.makeSpanTag(getContent(), body).html()); }
public abstract boolean isAuthenticated(String username, String password); public String toString() { return getClass().getName(); } }
<T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void multipleUpload() throws Exception { interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator); final List<FileItem> elements = new ArrayList<FileItem>(); elements.add(new MockFileItem("myfile0[]", "foo.txt", "foo".getBytes())); elements.add(new MockFileItem("myfile0[]", "foo.txt", "bar".getBytes())); when(request.getContentType()).thenReturn("multipart/form-data"); when(request.getMethod()).thenReturn("POST"); when(mockUpload.parseRequest(request)).thenReturn(elements); interceptor.intercept(stack, method, instance); System.out.println(parameters.getParameterMap()); verify(parameters).setParameter("myfile0[0]", "myfile0[0]"); verify(parameters).setParameter("myfile0[1]", "myfile0[1]"); verify(request).setAttribute(eq("myfile0[0]"), any(UploadedFile.class)); verify(request).setAttribute(eq("myfile0[1]"), any(UploadedFile.class)); }
public void tableFixtureHasNoDoTableFunction() throws Exception { getResultsForPageContents("!|Table:fitnesse.slim.test.TestSlim|\n" + "|a|b|\n"); assertTestResultsContain("Method doTable[1] not found in fitnesse.slim.test.TestSlim."); }
public void shouldRegisterComponentsAnnotatedWithAnyStereotypedAnnotations() { mockery.checking(new Expectations() { { one(scanner).getTypesWithMetaAnnotation(Stereotype.class); will(returnValue(Arrays.asList(ComponentAnnotated.class, ResourceAnnotated.class))); one(registry).register(ComponentAnnotated.class, ComponentAnnotated.class); one(registry).register(ResourceAnnotated.class, ResourceAnnotated.class); } }); registrar.registerFrom(scanner); mockery.assertIsSatisfied(); }
public void processRequest(Request request) throws RequestProcessorException { try { this.waitingProcessRequestBeingCalled.countDown(); LOG.info("Sleeping {} ms for request {}", DEFAULT_DELAY, request); Thread.sleep(DEFAULT_DELAY); } catch (InterruptedException e) {  } nextProcessor.processRequest(request); }
public void bind(SocketAddress bindpoint) throws IOException { getSocketAllowUnknownMode().bind(bindpoint); }
private Set<String> setupConsoleClasspaths(final VersionNumber scalaVersion) throws Exception { final Set<String> classpath = new HashSet<>(); addToClasspath(this.resolveJLine(scalaVersion, this.fallbackJLine(scalaVersion)), classpath, true); return classpath; }
public void initialize() { prepareBuffer(key, cas, EMPTY_BYTES, when); }
public void testTearDownUncollapsed() throws Exception { ParentWidget widgetRoot = new WidgetRoot(root); widgetRoot.addVariable(IncludeWidget.COLLAPSE_TEARDOWN, "false"); IncludeWidget widget = new IncludeWidget(widgetRoot, "!include -teardown SomePage"); assertSubString("Tear Down: ", widget.render()); assertSubString("class=\"teardown\"", widget.render()); assertSubString("class=\"collapsable\"", widget.render()); }
protected File getAnalysisCacheFile() throws Exception { return testAnalysisCacheFile.getAbsoluteFile(); }
public void process(WatchedEvent event) {
WikiPage getParent();  boolean isRoot();  WikiPage addChildPage(String name); boolean hasChildPage(String name); WikiPage getChildPage(String name);  @Deprecated void removeChildPage(String name);  void remove();  List<WikiPage> getChildren(); String getName(); PageData getData();  Collection<VersionInfo> getVersions(); WikiPage getVersion(String versionName); String getHtml();  VersionInfo commit(PageData data); PageCrawler getPageCrawler(); String getVariable(String name); }
Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by); long decr(String key, int by); long incr(String key, int by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void testConstruction() throws Throwable { assertEquals(Binding.QueryBinding.class, Binding.create(fixture, "intMethod()").getClass()); assertEquals(Binding.QueryBinding.class, Binding.create(fixture, "intMethod?").getClass()); assertEquals(Binding.QueryBinding.class, Binding.create(fixture, "intMethod!").getClass()); assertEquals(Binding.SetBinding.class, Binding.create(fixture, "intField").getClass()); assertEquals(Binding.RecallBinding.class, Binding.create(fixture, "intField=").getClass()); assertEquals(Binding.SaveBinding.class, Binding.create(fixture, "=intMethod()").getClass()); assertEquals(Binding.SaveBinding.class, Binding.create(fixture, "=intField").getClass()); }
private void setCredentials(Request request, byte[] inputToken) throws GSSException, UnsupportedEncodingException {  GSSContext gssContext = manager.createContext(serverCreds); byte[] replyTokenBytes = gssContext.acceptSecContext(inputToken, 0, inputToken.length); String replyToken = replyTokenBytes == null ? null : new String(Base64.encode(replyTokenBytes), FileUtil.CHARENCODING); if (!gssContext.isEstablished()) request.setCredentials(null, replyToken);
public boolean stringStartsWith(String it, String starts) { return it.startsWith(HtmlUtil.escapeHTML(starts)); }
public Response existsZNode(@PathParam("path") String path, @Context UriInfo ui) throws InterruptedException, KeeperException { Stat stat = zk.exists(path, false); if (stat == null) { throwNotFound(path, ui); } return Response.status(Response.Status.OK).build(); }
public void addJvmArgs(String... args1) { if(args1 != null) { for(String arg : args1) {
public void visit(AliasLinkWidget widget) throws Exception { } @SuppressWarnings("unchecked") public void processPage(WikiPage currentPage) throws Exception { this.currentPage = currentPage; String content = currentPage.getData().getContent(); WidgetBuilder referenceWidgetBuilder = new WidgetBuilder(new Class[]{PreProcessorLiteralWidget.class, WikiWordWidget.class, PreformattedWidget.class}); ParentWidget widgetRoot = new WidgetRoot(content, currentPage, referenceWidgetBuilder); widgetRoot.acceptVisitor(this); } public List<WikiPage> search(WikiPage page) throws Exception { hits.clear(); subjectPage.getPageCrawler().traverse(page, this); return hits; } }
public void testZooKeeperWithCustomHostProvider() throws IOException, InterruptedException { final int CLIENT_PORT = PortAssignment.unique(); final HostProvider specialHostProvider = new SpecialHostProvider(); int expectedCounter = 3; counter.set(expectedCounter); ZooKeeper zkDefaults = new ZooKeeper("127.0.0.1:" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT, this, false); ZooKeeper zkSpecial = new ZooKeeper( "127.0.0.1:" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT, this, false, specialHostProvider); assertTrue(counter.get() == expectedCounter); zkDefaults.updateServerList("127.0.0.1:" + PortAssignment.unique()); assertTrue(counter.get() == expectedCounter); zkSpecial.updateServerList("127.0.0.1:" + PortAssignment.unique()); expectedCounter--; assertTrue(counter.get() == expectedCounter); }
public static Test suite() { return TestSuiteMaker.makeSuite("socketservice", new Class[] { SocketServiceTest.class
<T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void parseWidget() throws Exception { parse("![\nbody\n]!", "", "", "body"); parse("![:\nbody\n]!", ":", "", "body"); parse("![: first\nbody\n]!", ":", "first", "body"); parse("![ first\nbody\n]!", "", "first", "body"); parse("![: first\nsecond\nthird\nfourth\n]!", ":", "first", "second\nthird\nfourth"); }
public void testSuiteSetUpSummaryWithoutTestResults() throws Exception { testSuiteMetaTestSummaryWithoutTestResults("SuiteSetUp"); }
public void realmIsStrippedIfRequested() throws Exception { properties.setProperty("NegotiateAuthenticator.stripRealm", "true"); String userName = "username@realm"; String password = "password"; String encodedPassword = base64Encode(password); GSSContext gssContext = makeMockGssContext(userName, password); when(gssContext.isEstablished()).thenReturn(true); MockRequest request = new MockRequest(); doNegotiation(request); assertEquals("username", request.getAuthorizationUsername()); assertEquals(encodedPassword, request.getAuthorizationPassword()); }
public void prepareToExecute() { } public List<Object> executeStatements(List<Object> statements) { List<Object> result = new ArrayList<Object>(); for (Object statement : statements) if (!executor.stopHasBeenRequested()) result.add(executeStatement(statement)); return result; } public Object executeStatement(Object statement) { return Statement.Factory.createStatement(asStatementList(statement), methodNameTranslator).execute(executor); } public void finalizeExecution() { if (executor.stopHasBeenRequested()) executor.reset(); } } private class LoggingExecutive extends Executive { public void prepareToExecute() { verboseMessage("!1 Instructions"); } public Object executeStatement(Object statement) { List<Object> statementList = asStatementList(statement); verboseMessage(statementList + "\n"); Object retVal = super.executeStatement(statement); verboseMessage(retVal); verboseMessage("------"); return retVal; } } public List<Object> execute(List<Object> statements) { Executive e = verbose ? new LoggingExecutive() : new Executive(); e.prepareToExecute(); List<Object> result = e.executeStatements(statements); e.finalizeExecution(); return result; } private List<Object> asStatementList(Object statement) { return ListUtility.uncheckedCast(Object.class, statement); } private void verboseMessage(Object message) { if (verbose) System.out.println(message); } }
public void noId(@Load NoIdEntity entity) { } } private Stubber fail() { return doThrow(new AssertionError()); } }
public void usesDisgracedClassNames() throws Exception { makeDecisionTableAndBuildInstructions( "|DT:slim test|\n" + "|x|\n" + "|y|\n" ); Instruction makeInstruction = new MakeInstruction("decisionTable_id_0", "decisionTable_id", "SlimTest"); assertEquals(makeInstruction, instructions.get(0)); }
protected void onListItemClick(ListView l, View v, int position, long id) { super.onListItemClick(l, v, position, id); new AsyncTask<Integer, Void, Void>() { String fileName;
private void print(String message) { if(!testing) System.out.print(message);
public void testResponse() throws Exception { MockRequest request = new MockRequest(); request.setResource("PageOne"); WhereUsedResponder responder = new WhereUsedResponder(); Response response = responder.makeResponse(new FitNesseContext(root), request); MockResponseSender sender = new MockResponseSender(); response.sendTo(sender); String content = sender.sentData(); assertEquals(200, response.getStatus()); assertHasRegexp("Where Used", content); assertHasRegexp(">PageOne<", content); assertHasRegexp(">PageTwo<", content); assertHasRegexp(">PageTwo\\.ChildPage<", content); }
public void literalText() { assertParsesWithOffset( "Some !-literal text-!",
public Response makeErrorResponse(FitNesseContext context, Request request) throws Exception { SimpleResponse response = new SimpleResponse(400); HtmlPage html = context.htmlPageFactory.newPage(); HtmlUtil.addTitles(html, "Error Occured"); if (message != null) html.main.add(makeErrorMessage()); response.setContent(html.html()); return response; }
public void testReadWriteIntZero() { testReadWriteInt((byte) 0); }
protected int addKey(String k) { Integer rv=rkeys.get(k); if(rv == null) { rv=generateOpaque(); keys.put(rv, k); bkeys.put(rv, KeyUtil.getKeyBytes(k)); rkeys.put(k, rv); } return rv; }
public void testNotificationMessageWithInvalidConfigLength() throws Exception {  startMockServer(1); byte requestBytes[] = new byte[48 + CONFIG_BYTES_LENGTH]; ByteBuffer requestBuffer = ByteBuffer.wrap(requestBytes); requestBuffer.clear(); requestBuffer.putInt(ServerState.LOOKING.ordinal());
public void setup() { this.mockery =new Mockery(); this.request = mockery.mock(HttpServletRequest.class); this.session = mockery.mock(HttpSession.class); this.context= mockery.mock(ServletContext.class); final RequestInfo webRequest = new RequestInfo(context, request, null); this.converter = new LocaleBasedCalendarConverter(webRequest); this.errors = new ArrayList<ValidationMessage>(); this.bundle = ResourceBundle.getBundle("messages"); }
public WikiPage getRoot(WikiPage page) throws Exception; public void traverse(WikiPage root, FitNesseTraversalListener pageCrawlerTest) throws Exception; }
public void addsAPrefixToMethodsWhenTheControllerIsAnnotatedWithPath() throws Exception { ResourceMethod method = router.parse("/prefix/withoutPath", HttpMethod.POST, request); assertThat(method.getMethod(), is(equalTo(PathAnnotatedController.class.getMethod("withoutPath")))); mockery.assertIsSatisfied(); }
private String contentsWithPages(String name1, String name2, String nested) { return "<div class=\"contents\">" + HtmlElement.endl +
public void shouldReturnNullIfNotFound() throws SecurityException, NoSuchMethodException { final ResourceClass resource = mockery.resource(NonVRaptorComponent.class); this.router.register(resource); assertThat(router.parse("/NonVRaptorComponent/name", HttpMethod.POST, request), is(nullValue())); mockery.assertIsSatisfied(); }
public void cleanupTestDir() throws IOException { ClientBase.recursiveDelete(testDir); }
public <T extends View> T or(Class<T> view) { return result.use(view); }
public void processResult(int rc, String path, Object ctx, String name) { pending.decrementAndGet(); counter.incrementAndGet(); if (rc != 0) { errors.incrementAndGet(); } if (counter.get() == 16200) { sem.release();
public List doTable(List<List<String>> table) { Game g = new Game(); List rollResults = list("","","","","","","","","","","","","","","","","","","","",""); List scoreResults = list("","","","","","","","","","","","","","","","","","","","",""); rollBalls(table, g); evaluateScores(g, table.get(1), scoreResults); return list(rollResults, scoreResults); }
private String exceptionList(Map<String, String> exceptions) { StringBuffer exceptionList = new StringBuffer(); Set<String> keys = exceptions.keySet(); if (keys.size() > 0) { exceptionList.append("!3 !style_fail(Exceptions)\n"); } for (String key : keys) { exceptionList.append("!anchor " + key + "\n"); exceptionList.append("!* " + key + "\n"); exceptionList.append("{{{ " + exceptions.get(key) + "}}}\n*!\n\n"); } if (keys.size() > 0) exceptionList.append("----\n"); return exceptionList.toString(); }
public boolean isDebugEnabled() { return (l4jLogger.isDebugEnabled()); }
public void translatesAliases() throws Exception { TestSourcePage page = new TestSourcePage().withTarget("PageOne"); ParserTestHelper.assertTranslatesTo(page, "[[tag][#anchor]]", link("tag", "#anchor")); ParserTestHelper.assertTranslatesTo(page, "[[tag][PageOne]]", link("tag", "PageOne")); ParserTestHelper.assertTranslatesTo(page, "[[''tag''][PageOne]]", link("<i>tag</i>", "PageOne")); ParserTestHelper.assertTranslatesTo(page, "[[you're it][PageOne]]", link("you're it", "PageOne")); ParserTestHelper.assertTranslatesTo(page, "[[PageOne][IgnoredPage]]", link("PageOne", "PageOne")); ParserTestHelper.assertTranslatesTo(page, "[[tag][PageOne?edit]]", link("tag", "PageOne?edit")); ParserTestHelper.assertTranslatesTo(page, "[[tag][http://files/myfile]]", link("tag", "files/myfile")); ParserTestHelper.assertTranslatesTo(page, "[[tag][http://example.com/myfile]]", link("tag", "http://example.com/myfile")); }
public String toHtml(Translator translator, Symbol symbol) { String option = symbol.childAt(0).getContent(); String title = translator.translate(symbol.childAt(1)); String body = translator.translate(symbol.childAt(2)); return option.equals(CollapsibleRule.InvisibleState) ? makeInvisibleSection(body)
void traverse(WikiPage root, FitNesseTraversalListener pageCrawlerTest) throws Exception; WikiPage getSiblingPage(WikiPage page, WikiPagePath pathRelativeToSibling) throws Exception; }
public void submitLearnerRequest(Request si) { zk.submitLearnerRequest(si); }
public void register(ZKMBeanInfo bean, ZKMBeanInfo parent) { assert bean != null; String path = null; if (parent != null) { path = mapBean2Path.get(parent); assert path != null; } path = makeFullPath(path, parent); mapBean2Path.put(bean, path); mapName2Bean.put(bean.getName(), bean); if(bean.isHidden()) return; MBeanServer mbs = ManagementFactory.getPlatformMBeanServer(); ObjectName oname = makeObjectName(path, bean); try { mbs.registerMBean(bean, oname);
NodeLocator createLocator(List<MemcachedNode> nodes);  OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon();  boolean useNagleAlgorithm();  Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode();  Transcoder<Object> getDefaultTranscoder();  boolean shouldOptimize();  int getReadBufSize();  public HashAlgorithm getHashAlg(); }
public void and(List<Message> errors) { this.errors.addAll(errors); }
boolean addWatch(String path, Watcher watcher);  default boolean addWatch(String path, Watcher watcher, WatcherMode watcherMode) { if (watcherMode == WatcherMode.DEFAULT_WATCHER_MODE) { return addWatch(path, watcher); } throw new UnsupportedOperationException();
static public void copyStat(Stat from, Stat to) { to.setAversion(from.getAversion()); to.setCtime(from.getCtime()); to.setCversion(from.getCversion()); to.setCzxid(from.getCzxid()); to.setMtime(from.getMtime()); to.setMzxid(from.getMzxid()); to.setVersion(from.getVersion()); to.setEphemeralOwner(from.getEphemeralOwner()); to.setDataLength(from.getDataLength()); to.setNumChildren(from.getNumChildren()); }
public String contentForRevision(int n) { List<VersionInfo> versions = new ArrayList<VersionInfo>(lastUsedPage.getVersions()); WikiPage page = lastUsedPage.getVersion(versions.get(versions.size() - 1 - n).getName()); return page.getData().getContent(); }
public void usingWindowsLikeSeparators() throws Exception { DefaultUploadedFile file = new DefaultUploadedFile(CONTENT, "C:\\a\\windows\\path\\file.txt", "text/plain"); assertThat(file.getFileName(), is("file.txt")); assertThat(file.getCompleteFileName(), is("C:\\a\\windows\\path\\file.txt")); assertThat(file.toString(), Matchers.containsString(file.getFileName())); }
public void rejectWithFunctionCall() throws Exception { buildInstructionsFor("|reject|function|arg|\n"); List<CallInstruction> expectedInstructions = list( new CallInstruction("scriptTable_id_0", "scriptTableActor", "function", new Object[]{"arg"}) ); assertEquals(expectedInstructions, instructions); }
protected void includePage(WikiPage wikiPage, boolean collapse, StringBuilder newPageContent) { if (wikiPage == null) return; String pagePathName = getPathNameForPage(wikiPage); String content = wikiPage.readOnlyData().getContent(); newPageContent .append("\n!*")
public static ResponseParser performHttpRequest(String hostname, int hostPort, RequestBuilder builder) throws IOException { Socket socket = new Socket(hostname, hostPort); OutputStream socketOut = socket.getOutputStream(); InputStream socketIn = socket.getInputStream(); builder.send(socketOut); socketOut.flush(); try { return new ResponseParser(socketIn);
public void initialize(ClientCnxn cnxn) throws SaslException { if (saslClient == null) { saslState = SaslState.FAILED; throw new SaslException("saslClient failed to initialize properly: it's null."); } if (saslState == SaslState.INITIAL) { if (saslClient.hasInitialResponse()) {
public void notifyDataSetInvalidated() { super.notifyDataSetInvalidated(); filter(); sort(); }
public Maybe<Symbol> parse(Parser parser) { Scanner scanner = parser.getScanner(); Symbol current = scanner.getCurrent(); scanner.moveNext(); if (!scanner.isType(SymbolType.Text)) return Symbol.Nothing; return new Maybe<Symbol>(current.add(scanner.getCurrent())); }
public void execute() throws IOException, InterceptionException { interceptorStack.add(ResourceLookupInterceptor.class); interceptorStack.add(URLParameterExtractorInterceptor.class); interceptorStack.add(InterceptorListPriorToExecutionExtractor.class); interceptorStack.add(instantiator); interceptorStack.add(ExecuteMethodInterceptor.class); interceptorStack.next(null, null); }
public static void main(String[] args) throws Exception { System.out.println("***************************************"); System.out.println("THIS TEST RUNNER HAS BEEN DEPRECATED!!!"); System.out.println("Use fitnesse.runner.TestRunner instead."); System.out.println("***************************************"); TestRunner runner = new TestRunner(); int exitCode = runner.run(args); System.exit(exitCode); }
public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) { if(rc != BKException.Code.OK) fail("Return code is not OK: " + rc); ls = seq; synchronized (sync) { sync.value = true;
synchronized boolean finish() { running = false; this.interrupt(); return running; }
public void is(Class<?> type, Method method) { this.strategy = new FixedMethodStrategy(originalUri, type, method, this.supportedMethods, new DefaultParametersControl(originalUri)); logger.debug(originalUri + " --> " + type.getName() + "." + method); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root"); crawler = root.getPageCrawler();
public void shouldOnlyUseTheBestMatchForTheFirstTable() throws Exception { comparer.tableMatches.add(new HistoryComparer.MatchedPair(1, 1, 1.0)); comparer.saveMatchIfBest(1,2,1.1); assertEquals(1.1, comparer.tableMatches.get(0).matchScore, .01); }
public void testValues() { addDataPoints(); Map<String, Object> values = testCounterSet.values(); assertEquals(18, values.size(), "There should be 18 values in the set"); assertEquals(999D / 2, values.get("avg_key1_test"), "avg_key1_test should =499.5"); assertEquals(0L, values.get("min_key1_test"), "min_key1_test should =0"); assertEquals(999L, values.get("max_key1_test"), "max_key1_test should =999"); assertEquals(1000L, values.get("cnt_key1_test"), "cnt_key1_test should =1000"); assertEquals(999 * 500L, values.get("sum_key1_test"), "sum_key1_test should =999*500"); assertEquals(500L, values.get("p50_key1_test"), "p50_key1_test should have p50=500"); assertEquals(950L, values.get("p95_key1_test"), "p95_key1_test should have p95=950"); assertEquals(990L, values.get("p99_key1_test"), "p99_key1_test should have p99=990"); assertEquals(999L, values.get("p999_key1_test"), "p999_key1_test should have p999=999"); assertEquals(1000 + 999D / 2, values.get("avg_key2_test"), "avg_key2_test should =3.5"); assertEquals(1000L, values.get("min_key2_test"), "min_key2_test should =2"); assertEquals(1999L, values.get("max_key2_test"), "max_key2_test should =5"); assertEquals(1000L, values.get("cnt_key2_test"), "cnt_key2_test should =4"); assertEquals(2999 * 500L, values.get("sum_key2_test"), "sum_key2_test should =14"); assertEquals(1500L, values.get("p50_key2_test"), "p50_key2_test should have p50=1500"); assertEquals(1950L, values.get("p95_key2_test"), "p95_key2_test should have p95=1950"); assertEquals(1990L, values.get("p99_key2_test"), "p99_key2_test should have p99=1990"); assertEquals(1999L, values.get("p999_key2_test"), "p999_key2_test should have p999=1999"); }
public void testMakeResponseImportingNonRootPage() throws Exception { responder.remoteHostname = "blah"; MockRequest request = makeRequest(baseUrl + "PageOne"); Response response = responder.makeResponse(new FitNesseContext(localRoot), request); String content = new MockResponseSender(response).sentData(); assertNotNull(pageTwo.getChildPage("ChildOne")); assertSubString("href=\"PageTwo.ChildOne\"", content); assertSubString(">ChildOne<", content); }
private void shutdown(int idx) throws IOException { qu.shutdown(idx); }
public void setup() { this.converter = new DoubleConverter(); this.bundle = ResourceBundle.getBundle("messages"); }
public void testMakeFormTag() { HtmlTag formTag = HtmlUtil.makeFormTag("method", "action"); assertSubString("method", formTag.getAttribute("method")); assertSubString("action", formTag.getAttribute("action")); }
String toString(); String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); String getCellResult(int col,int row); void appendChildTable(int row, Table table); void setTestStatusOnRow(int row, boolean testStatus); void setName(String tableName); }
public void tableWithExpression() throws Exception { getResultsForPageContents( "!|DT:fitnesse.slim.test.TestSlim|\n" + "|string|getStringArg?|\n" + "|${=3+4=}|7|\n" ); TableScanner ts = getScannedResults(); Table dt = ts.getTable(0); assertEquals("<span class=\"pass\">7</span>", dt.getCellContents(1, 2)); }
public static File createFile(String path, InputStream content) { String names[] = path.split("/"); if (names.length == 1) return createFile(new File(path), content);
public void testTitleSearch() throws Exception { searcher = new Searcher("one", root); hits.clear(); searcher.searchTitles(this); Collections.sort(hits, new Comparer()); assertEquals(2, hits.size()); assertEquals("PageOne", ((WikiPage) hits.get(0)).getName()); assertEquals("PageOneChild", ((WikiPage) hits.get(1)).getName()); }
public static void kill(String host, int port) { try { byte[] reqBytes = new byte[4];
private void requestParameterIs(ResourceMethod method, String paramName, String... values) { String methodName = paramName.replaceAll("[\\.\\[].*", ""); when(request.getParameterValues(paramName)).thenReturn(values); String[] values1 = { paramName }; when(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(values1))); when(nameProvider.parameterNamesFor(method.getMethod())).thenReturn(new String[]{methodName}); when(request.getParameterMap()).thenReturn(Collections.singletonMap(paramName, values));
public final void endElement( final String ns, final String localName, final String qName) throws SAXException { ident -= 2; try { if (openElement) {
public Response makeResponse(FitNesseContext context, Request request) throws Exception { SimpleResponse response = new SimpleResponse(); resource = request.getResource(); String filename = request.getInput("filename"); response.setContent(makeDirectoryListingPage(resource, filename, context, request)); return response; }
public void setup() { this.mockery = new VRaptorMockery(); this.params = mockery.mock(MethodInfo.class); this.parametersProvider = mockery.mock(ParametersProvider.class); this.validator = mockery.mock(Validator.class); this.localization = mockery.localization(); this.instantiator = new ParametersInstantiatorInterceptor(parametersProvider, params, validator, localization); }
public void produceFile( final DataConsumer consumer, final File file, final String fileName ) throws IOException { TarArchiveEntry fileEntry = Producers.defaultFileEntryWithName(fileName); fileEntry.setSize(file.length()); fileEntry = map(fileEntry); try { Producers.produceInputStreamWithEntry(consumer, new FileInputStream(file), fileEntry);
public <T> CASValue<T> gets(String key, Transcoder<T> tc) { try { return asyncGets(key, tc).get(operationTimeout, TimeUnit.MILLISECONDS);
public void testUndecodeableSerialized() throws Exception { CachedData cd=new CachedData(SerializingTranscoder.SERIALIZED, tu.encodeInt(Integer.MAX_VALUE)); assertNull(tc.decode(cd)); }
public void add(final String key, final long delta) { try { inner.labels(key).inc(delta);
private static int wikiWordLength(String candidate) { if (candidate.length() < 3) return 0; if (!isUpperCaseLetter(candidate, 0)) return 0; if (!isDigit(candidate, 1) && !isLowerCaseLetter(candidate, 1)) return 0; int lastUpperCaseLetter = 0; int i; for (i = 2; i < candidate.length(); i++) { if (isCharacter(candidate, '_', i)) return 0; if (isUpperCaseLetter(candidate, i)) { if (i == lastUpperCaseLetter + 1) return 0; lastUpperCaseLetter = i; } else if (!isDigit(candidate, i) && !isLetter(candidate, i) ) break; } if (lastUpperCaseLetter > 0 && i > 2) return i; return 0; }
public void testTemplateListPopulates() throws Exception { WikiPageUtil.addPage(root, PathParser.parse("TemplateLibrary"), "template library"); WikiPageUtil.addPage(root, PathParser.parse("TemplateLibrary.TemplateOne"), "template 1"); WikiPageUtil.addPage(root, PathParser.parse("TemplateLibrary.TemplateTwo"), "template 2"); WikiPageUtil.addPage(root, PathParser.parse("ChildPage"), "child content with <html>"); request.setResource("ChildPage"); SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); assertEquals(200, response.getStatus()); String body = response.getContent(); assertSubString("<html>", body); assertSubString("<form", body); assertSubString("method=\"post\"", body); assertSubString("name=\"responder\"", body); assertSubString("name=\"" + EditResponder.HELP_TEXT + "\"", body); assertSubString("select id=\"" + EditResponder.TEMPLATE_MAP + "\"", body); assertSubString("option value=\"" + ".TemplateLibrary.TemplateOne" + "\"", body); assertSubString("option value=\"" + ".TemplateLibrary.TemplateTwo" + "\"", body); assertSubString("type=\"submit\"", body); assertSubString("textarea class=\"wikitext no_wrap mousetrap\"", body); }
public void testReadWriteSyncSingleClient() throws IOException { try {
public void addQuorumVerifier(QuorumVerifier qv) { qvAcksetPairs.add(new QuorumVerifierAcksetPair(qv, new HashSet<Long>(qv.getVotingMembers().size())));
void addToken(int token) { if (!(0 <= token && token <= Token.LAST_TOKEN)) throw new IllegalArgumentException(); append((char)token); }
public int compare(MatchedPair match1, MatchedPair match2) { if (match1.matchScore > match2.matchScore) return -1;
public static void registerParseDelegate(Class<?> type, Class<?> parseDelegate) { try { PARSE_DELEGATES.put(type, new DelegateClassAdapter(parseDelegate));
public void setup() { this.mockery = new Mockery(); final HttpServletRequest webRequest = mockery.mock(HttpServletRequest.class); final HttpServletResponse webResponse = mockery.mock(HttpServletResponse.class); final VRaptorRequest request = new VRaptorRequest(null, webRequest, webResponse); this.container = new PicoBasedContainer(null, request, new DefaultResourceRegistry()); }
public int readInt() throws IOException { byte[] b = new byte[4]; readFully(b, 0, 4); return (((b[0] & 0xff) << 24) | ((b[1] & 0xff) << 16) | ((b[2] & 0xff) << 8) | (b[3] & 0xff)); }
public boolean exec() throws KeeperException, InterruptedException { String path = args[1]; boolean watch = cl.hasOption("w"); List<String> children = zk.getChildren(path, watch); out.println(children); return watch; }
protected WikiPage loadPage(FitNesseContext context, String pageName) { WikiPage page; if (RecentChanges.RECENT_CHANGES.equals(pageName)) { page = context.recentChanges.toWikiPage(context.root); } else { WikiPagePath path = PathParser.parse(pageName); PageCrawler crawler = context.root.getPageCrawler(); page = crawler.getPage(context.root, path); } return page; }
public void appendToCell(int col, int row, Response response) { appendToCell(col, row, response.toHtml()); updateResponse(col, row, response); }
public static int hashForFlags(int i) {
public void submitRequest(Request si) { if (restoreLatch != null) { try { LOG.info("Blocking request submission while restore is in progress"); restoreLatch.await(); } catch (final InterruptedException e) { LOG.warn("Unexpected interruption", e); } } enqueueRequest(si); }
public int hashCode() { return getType() + getPath().hashCode() + version; }
public static ClassLoader loadPlugins(String rootPath) throws Exception { File pluginsDirectory = new File(rootPath, "plugins"); URL[] urls = urlsForPlugins(pluginsDirectory); ClassLoader newCL = new URLClassLoader(urls, Thread.currentThread().getContextClassLoader());
public void halt() throws InterruptedException{ for(BookieHandle bh: bhMap.values()){ bh.shutdown(); } zk.close(); }
public void setup() { this.mockery = new Mockery(); this.builder = mockery.mock(MethodLookupBuilder.class); final HttpServletRequest webRequest = mockery.mock(HttpServletRequest.class); final HttpServletResponse webResponse = mockery.mock(HttpServletResponse.class); final VRaptorRequest request = new VRaptorRequest(null, webRequest, webResponse); this.container = new PicoBasedContainer(null, request, new DefaultResourceRegistry(builder)); }
public void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException { rules.add(new Rules() {{ routeFor("/clients/add").with(HttpMethod.POST).is(MyControl.class).add(null); }}); assertThat(rules.parse("/clients/add", HttpMethod.POST), is(VRaptorMatchers.resourceMethod(method("add")))); }
public static byte[] hashSha256(byte[] data) { return hashSha256(data, 0, data.length); }
public List<Assertion> getAssertions() throws SyntaxError { if (table.getRowCount() < 2) throw new SyntaxError("Query tables must have at least two rows."); assignColumns(); Assertion make = constructFixture(getFixtureName()); Assertion ti = makeAssertion(callFunction(getTableName(), "table", tableAsList()), new SilentReturnExpectation(0, 0)); Assertion qi = makeAssertion(callFunction(getTableName(), "query"), new QueryTableExpectation()); tableInstruction = ti.getInstruction().getId(); queryId = qi.getInstruction().getId();
public void testQuerySetGroupWithLevel() throws Exception { Query query = new Query(); query.setReduce(true); View view = client.getView(DESIGN_DOC_W_REDUCE, VIEW_NAME_W_REDUCE); HttpFuture<ViewResponse> future = client.asyncQuery(view, query.setGroup(true, 1)); ViewResponse response = future.get(); assert response != null : future.getStatus(); }
public void testABunchOfCancelledOperations() throws Exception { Collection<Future<?>> futures=new ArrayList<Future<?>>(); for(int i=0; i<1000; i++) { futures.add(client.set("x", 5, "xval")); futures.add(client.asyncGet("x")); } Future<Boolean> sf=client.set("x", 5, "myxval"); Future<Object> gf=client.asyncGet("x"); for(Future<?> f : futures) { f.cancel(true); } assertTrue(sf.get()); assertEquals("myxval", gf.get()); }
String genCsharpWriteMethod(String fname, String tag) { return " a_.Write"+mMethodSuffix+"("+capitalize(fname)+",\""+tag+"\");\n"; }
public void cleanup() { if (!stopped) { LOG.error("Exception thrown by downstream processor,"
public void shouldRegisterClasses() throws Exception { URL url = File.createTempFile("vraptor", "test").getParentFile().toURI().toURL(); when(resolver.findWebInfClassesLocation()).thenReturn(url); Collection<String> components = asList(ResourceA.class.getName(), ResourceB.class.getName()); Class<WebAppBootstrap> generated = generator.generate(components, resolver); WebAppBootstrap instance = generated.newInstance(); instance.configure(registry); verify(registry).deepRegister(ResourceA.class); verify(registry).deepRegister(ResourceB.class); }
public void shouldValidateParameters() throws Exception { final ResourceMethod method = mockery.methodFor(Component.class, "method"); mockery.checking(new Expectations() {{ Object[] values = new Object[]{new Object()}; one(parametersProvider).getParametersFor(method, errors, bundle); will(doAll(addErrorsToList("error1"),returnValue(values))); one(validator).add(errors); one(stack).next(method, null); one(params).setParameters(new Object[]{null}); Map<String, String> params = new HashMap<String, String>(); params.put("param1.id", "value1"); params.put("param2.id", "value2"); one(request).getParameterMap();will(returnValue(params)); allowing(request).getAttribute("param1");will(returnValue("originalValue1")); allowing(request).getAttribute("param2");will(returnValue(null)); allowing(request).setAttribute(with(equal("param2")), with(any(RequestOutjectMap.class))); }}); instantiator.intercept(stack, method, null); mockery.assertIsSatisfied(); }
public KeyStore loadTrustStore() throws IOException, GeneralSecurityException { KeyStore ts = KeyStore.getInstance(JKS_KEY_STORE_TYPE); InputStream inputStream = null; try { inputStream = new FileInputStream(new File(trustStorePath));
public void testValidatePath_DoublePeriod() { assertThrows(IllegalArgumentException.class, () -> { PathUtils.validatePath("/double/../period");
public State checkout(String... filePaths) throws RevisionControlException; public State delete(String... filePaths) throws RevisionControlException; public State revert(String... filePaths) throws RevisionControlException; public State checkState(String... filePaths) throws RevisionControlException; public State update(String... filePaths) throws RevisionControlException; public PageData getRevisionData(FileSystemPage page, String label) throws Exception; public Collection<VersionInfo> history(FileSystemPage page) throws Exception; public VersionInfo makeVersion(FileSystemPage page, PageData data) throws Exception; public void removeVersion(FileSystemPage page, String versionName) throws Exception; public State getState(String state); public void prune(FileSystemPage page) throws Exception; public State execute(RevisionControlOperation operation, String... filePaths) throws RevisionControlException; public boolean isExternalReversionControlEnabled(); }
public void testIfAcceptsDownload() throws Exception { mockery.checking(new Expectations() {{ one(resourceMethod).getMethod(); will(returnValue(FakeResource.class.getMethod("download"))); }}); Assert.assertTrue("Nao aceitou Download", interceptor.accepts(resourceMethod)); mockery.assertIsSatisfied(); }
public void setup() throws Exception { this.mockery = new Mockery(); this.context = mockery.mock(ServletContext.class, "servlet context"); mockery.checking(new Expectations() {{ allowing(context).getInitParameter(BasicConfiguration.BASE_PACKAGES_PARAMETER_NAME); will(returnValue("br.com.caelum.vraptor.ioc.fixture")); allowing(context).getRealPath("/WEB-INF/classes"); will(returnValue(getClassDir())); allowing(context).getClassLoader(); will(returnValue(new URLClassLoader(new URL[] {ScannotationComponentScannerTest.class.getResource("/test-fixture.jar")}, Thread.currentThread().getContextClassLoader()))); allowing(context).getInitParameter(BasicConfiguration.ENCODING); allowing(context).getInitParameter(BasicConfiguration.SCANNING_PARAM); will(returnValue("enabled")); }}); configureExpectations(); provider = getProvider(); provider.start(context); }
public boolean shouldInstantiate(Class type) { return type.isAnnotationPresent(Path.class); }
public final void begin(final String element, final Attributes attrs) { int maxStack = Integer.parseInt(attrs.getValue("maxStack")); int maxLocals = Integer.parseInt(attrs.getValue("maxLocals")); getCodeVisitor().visitMaxs(maxStack, maxLocals); }
public void testRoot() throws Exception { path = makePath("root"); assertEquals(WikiPagePath.ROOT, path.getFirst()); assertTrue(path.getRest().isEmpty()); }
private SuiteHtmlFormatter createCustomFormatter() throws Exception { SuiteHtmlFormatter formatter = new SuiteHtmlFormatter(context) { @Override protected void writeData(String output) throws Exception { buffer.append(output); } @Override protected HtmlPage buildHtml(String pageType) throws Exception { return htmlPage; } }; return formatter; }
public boolean hasOption(String optionName) { Option option = possibleOptions.get(optionName); if (option == null) return false; return option.active; }
synchronized private SaslClient createSaslClient(final String servicePrincipal, final String loginContext) throws LoginException { try { if (login == null) {
public static List<Object> list(Object... objects) { return Arrays.asList(objects); }
public abstract Date getDateArg(); public abstract Zork getZork(); public abstract Integer getIntegerObjectArg(); public abstract double getDoubleObjectArg(); public abstract char getCharArg(); }
public void execute(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException { Interceptor interceptor = Interceptor.class.cast(container.instanceFor(type)); if(interceptor==null) { throw new InterceptionException("Unable to instantiate interceptor for " + type.getName() + ": the container returned null."); } interceptor.intercept(stack, method, resourceInstance); }
public OperationImpl removeCurrentWriteOp() { OperationImpl rv=getOp; if(rv == null) { rv=writeQ.remove(); } else { getOp=null; } return rv; }
String getPath(); String getFullPath(); String getContent(); boolean targetExists(String wikiWordPath); String makeFullPathOfTarget(String wikiWordPath); String findParentPath(String targetName); Maybe<SourcePage> findIncludedPage(String pageName); Collection<SourcePage> getChildren(); boolean hasProperty(String propertyKey); String getProperty(String propertyKey); }
public void fromString_should_return_an_empty_list_when_value_represent_an_empty_list() { String value = "[]"; List<Integer> current = converter.fromString(value); assertEquals(0, current.size()); }
BaseFormatter newXmlFormatter() { SuiteXmlReformatter xmlFormatter = new SuiteXmlReformatter(context, page, response.getWriter(), getSuiteHistoryFormatter()); if (includeHtml) xmlFormatter.includeHtml(); if (!isMultipleTestsRun()) xmlFormatter.includeInstructions(); return xmlFormatter; }
private boolean meetsSetUpTearDownConditions(WikiPage page) throws Exception { if (attributes.containsKey("SetUp") && attributes.containsKey("TearDown")) { Boolean setupWanted = attributes.get("SetUp"); Boolean teardownWanted = attributes.get("TearDown"); if (setupWanted && teardownWanted) { return isSetUpPage(page) || isTearDownPage(page); } return isSetUpPage(page) == setupWanted && isTearDownPage(page) == teardownWanted; } if (attributes.containsKey("SetUp")) { return isSetUpPage(page) == attributes.get("SetUp"); } if (attributes.containsKey("TearDown")) { return isTearDownPage(page) == attributes.get("TearDown"); } return true; }
private void catalogLocalTree(WikiPage page) { contextPath = page.getPageCrawler().getFullPath(page); pageCatalog = new HashSet<WikiPagePath>(); page.getPageCrawler().traverse(page, this); WikiPagePath relativePathOfContext = contextPath.subtractFromFront(contextPath); pageCatalog.remove(relativePathOfContext); }
public static void close(OutputStream output) { if (output != null) { try {
public void testMakeNavigationPropertiesHtml() throws Exception { WikiPage page = root.addChildPage("SomePage"); PageData data = page.getData(); String html = new PropertiesResponder().makeNavigationCheckboxesHtml(data).html(); assertSubString("<div style=\"float: left; width: 180px;\">Navigation:", html); assertSubString("<input type=\"checkbox\" name=\"Files\" checked=\"true\"/> - Files", html); assertSubString("<input type=\"checkbox\" name=\"RecentChanges\" checked=\"true\"/> - RecentChanges", html); assertSubString("<input type=\"checkbox\" name=\"Search\" checked=\"true\"/> - Search", html); }
public static void writeParse(File report, Parse parse) throws UnsupportedEncodingException, FileNotFoundException { PrintWriter output = new PrintWriter(new OutputStreamWriter(new FileOutputStream(report), ASCII_ENCODING)); parse.print(output); output.close(); }
public String toTarget(Translator translator, Symbol symbol) {
public void shouldRecoverIfKerberosNotAvailableForSomeTime() throws Exception { login = new TestableKerberosLogin(); login.startThreadIfNeeded(); assertTicketRefreshHappenedUntil(Duration.ofSeconds(15)); stopMiniKdc();
public void operationComplete(ChannelFuture future) throws Exception { if (!future.isSuccess()) { logger.error("Unable to make subscriber Channel readable in startDelivery call for topic: "
public void shouldExecuteInterceptorIfItAcceptsMethod() throws Exception { when(interceptor.accepts(method)).thenReturn(true); handler.execute(stack, method, null); verify(interceptor).intercept(stack, method, null); verify(stack, never()).next(method, null); }
public boolean isHelpAppended() { return isVarHelpShown || isHelpShown; }
public synchronized void timeOut() { timedout = true; synchronized (clones) { Iterator<Operation> i = clones.iterator(); while(i.hasNext()) { i.next().timeOut(); } } callback.receivedStatus(TIMED_OUT); callback.complete(); }
public void testMisconfiguration() throws Exception { System.clearProperty(clientX509Util.getSslAuthProviderProperty()); System.clearProperty(clientX509Util.getSslKeystoreLocationProperty()); System.clearProperty(clientX509Util.getSslKeystorePasswdProperty()); System.clearProperty(clientX509Util.getSslTruststoreLocationProperty()); System.clearProperty(clientX509Util.getSslTruststorePasswdProperty()); CountdownWatcher watcher = new CountdownWatcher(); new TestableZooKeeper(hostPort, CONNECTION_TIMEOUT, watcher); assertFalse(watcher.clientConnected.await(1000, TimeUnit.MILLISECONDS), "Missing SSL configuration should not result in successful connection"); }
public static boolean equalsDefaultfile(Uri left, String right) { if (left == null || right == null) { return false; } left = parseDefaultFile(left); Uri uriRight = parseDefaultFile(right); return left.equals(uriRight); }
private void loadFile(File file) throws FileNotFoundException, IOException { FileReader fileReader = new FileReader(file); BufferedReader reader = new BufferedReader(fileReader); while (true) { String line = reader.readLine(); if (line == null) { break; } if (line.contains("<converter>")) { line = line.substring(line.indexOf("<converter>") + 11, line.lastIndexOf("</converter>")); logger.info("Vraptor 2 converter found - remember to migrate to vraptor3 : " + line); this.converters.add(line); } } fileReader.close(); reader.close(); }
public static Collection formatters() throws Exception { WikiPage root = InMemoryPage.makeRoot("RooT"); FitNesseContext context = FitNesseUtil.makeTestContext(root); ChunkedResponse response = mock(ChunkedResponse.class); WikiPageDummy page = new WikiPageDummy("testPage", "testContent"); XmlFormatter.WriterFactory writerFactory = mock(XmlFormatter.WriterFactory.class); TestTextFormatter testTextFormatter = new TestTextFormatter(response); XmlFormatter xmlFormatter = new XmlFormatter(context, page, writerFactory) { @Override protected void writeResults() throws Exception { } }; TestHtmlFormatter testHtmlFormatter = new TestHtmlFormatter(context, page, mock(HtmlPageFactory.class)) { @Override protected void writeData(String output) throws Exception { } }; PageHistoryFormatter pageHistoryFormatter = new PageHistoryFormatter(context, page, writerFactory) { protected void writeResults() throws Exception { }; }; return Arrays.asList(new Object[][]{ {testTextFormatter},
public void whenNoParameterPatternsAreGivenShouldMatchAnything() throws Exception { ParametersControl control = new DefaultParametersControl("/any/{aParameter}/what", Collections.<String,String>emptyMap(), converters); assertTrue(control.matches("/any/ICanPutAnythingInHere/what")); }
String genCsharpHashCode(String fname) { return " ret = (" + capitalize(fname) + ")?0:1;\n"; }
public void testGeneral() {
public void testAllOnes() throws Exception { rollMany(20,1); assertEquals(20, g.score(10)); }
public void containsMessageShouldReturnTrueWhenExpectedMessageWithParamsExists() { Message message = mock(Message.class); when(message.getMessage()).thenReturn(MessageFormat.format(bundle.getString("required_field"), "name")); when(validator.getErrors()).thenReturn(Arrays.asList(message)); assertTrue(validator.containsMessage("required_field", "name")); }
public void beginTable() { if (whichMethodsFail.contains("beginTable") || totalDisaster.equalsIgnoreCase(whichMethodsFail))
public int readUnsignedShort(final int index) { byte[] b = this.b; return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF); }
long getDbId() throws IOException;  void commit() throws IOException;  void close() throws IOException;  public interface TxnIterator {  TxnHeader getHeader();  Record getTxn();  boolean next() throws IOException;  void close() throws IOException;  long getStorageSize() throws IOException; } }
public void setOOBInline(boolean on) throws SocketException { getSocketAllowUnknownMode().setOOBInline(on); }
public void testLoggingDataCreation() throws Exception { MockRequest request = new MockRequest(); SimpleResponse response = new SimpleResponse(200); MockSocket socket = new MockSocket("something"); socket.setHost("1.2.3.4"); request.setRequestLine("GET / HTTP/1.1"); response.setContent("abc"); LogData data = FitNesseExpediter.makeLogData(socket, request, response); assertEquals("1.2.3.4", data.host); assertNotNull(data.time); assertEquals("GET / HTTP/1.1", data.requestLine); assertEquals(200, data.status); assertEquals(3, data.size); }
public void multipleReplacements() throws Exception { crawler.addPage(somePage, PathParser.parse("ChildPage"), "this page has something too."); String content = getResponseContentUsingSearchReplaceString("something", "replacedthing"); assertThat(content, containsString("SomePage")); assertThat(content, containsString("ChildPage")); }
public void testForceSyncDefaultEnabled() { File file = new File("foo.10027c6de"); FileTxnLog log = new FileTxnLog(file); Assert.assertTrue(log.isForceSync()); }
public void shouldReadAComponentDefaultName() { assertThat(Info.getComponentName(DefaultComponent.class), is(equalTo("DefaultComponent"))); }
public ZooKeeperAdmin buildAdmin() throws IOException { return new ZooKeeperAdmin(toOptions()); }
protected void doCommit(PageData data) throws Exception { this.data = data; }
public void shouldComplainAboutInvalidNumber() { converter.convert("---", int.class); }
String getClientPort();  String getVersion();  String getStartTime();  long getMinRequestLatency();  double getAvgRequestLatency();  long getMaxRequestLatency();  long getPacketsReceived();  long getPacketsSent();  long getFsyncThresholdExceedCount();  long getOutstandingRequests();  int getTickTime();  void setTickTime(int tickTime);  int getMaxClientCnxnsPerHost();  void setMaxClientCnxnsPerHost(int max);  int getMinSessionTimeout();  void setMinSessionTimeout(int min);  int getMaxSessionTimeout();  void setMaxSessionTimeout(int max); boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public Map<String, Object> values() { Map<String, Object> m = new LinkedHashMap<String, Object>(); m.put(name, this.get()); return m; }
MemcachedNode getPrimary(String k);  Iterator<MemcachedNode> getSequence(String k);  Collection<MemcachedNode> getAll();  NodeLocator getReadonlyCopy(); }
private boolean isErrorLogsPage() { WikiPagePath pagePath = wikiPage.getPageCrawler().getFullPath(); return ExecutionLog.ErrorLogName.equals(pagePath.getFirst()); }
public void setup() throws Exception { expected = new TestExecutionReport(); makeHeader(); context = FitNesseUtil.makeTestContext(InMemoryPage.makeRoot("RooT")); }
public void add(String testSystemName, ExecutionLog executionLog) { logs.put(testSystemName, executionLog); }
public void canProvideComponentsInTheClasspath() throws Exception { checkAvailabilityFor( false,
private int f4( int x, int y, int z) { return (x & z) | (y & ~z); }
protected void evaluateTables(List<SlimAssertion> assertions, Map<String, Object> instructionResults) throws SlimCommunicationException { boolean IgnoreTestTable = false; for (SlimAssertion a : assertions) { final String key = a.getInstruction().getId();
public static boolean isHubSubscriber(ByteString subscriberId) { return subscriberId.toStringUtf8().startsWith(HUB_SUBSCRIBER_PREFIX); }
public CommandResponse run(ZooKeeperServer zkServer, Map<String, String> kwargs) { CommandResponse response = initializeResponse(); zkServer.serverStats().reset(); return response; }
public Maybe<Symbol> parse(Symbol current, Parser parser) { Symbol tag = parser.parseToIgnoreFirst(SymbolType.CloseBracket); if (!parser.isMoveNext(SymbolType.OpenBracket)) return Symbol.nothing; Symbol link = parser.parseToIgnoreFirstWithSymbols(SymbolType.CloseBracket, SymbolProvider.aliasLinkProvider); if (!parser.isMoveNext(SymbolType.CloseBracket)) return Symbol.nothing; return new Maybe<Symbol>(current.add(tag).add(link)); }
void checking(Validations rules);  void validate(Object object, Class<?>... groups);  void validateProperties(Object object, String... properties);  void validateProperty(Object object, String property, Class<?>... groups); <T extends View> T onErrorUse(Class<T> view); void addAll(Collection<? extends Message> message); void add(Message message); List<Message> getErrors(); boolean hasErrors();  <T> T onErrorForwardTo(Class<T> controller);  <T> T onErrorForwardTo(T controller);  <T> T onErrorRedirectTo(Class<T> controller);  <T> T onErrorRedirectTo(T controller);  <T> T onErrorUsePageOf(Class<T> controller);  <T> T onErrorUsePageOf(T controller);  void onErrorSendBadRequest(); }
boolean isBaselineDecisionTable() { String useFirstDataRowForEmpty = null; useFirstDataRowForEmpty = this.getTestContext().getPageToTest().getVariable("SLIM_DT_BASELINE"); return ((useFirstDataRowForEmpty != null && !useFirstDataRowForEmpty.isEmpty()) || baselineDecisionTable);
public void shouldRegisterInterceptorsFromInterceptorSequenceOnBothInterceptorAndComponentRegistrys() throws Exception { handler.handle(MySequence.class); verify(interceptorRegistry).register(InterceptorA.class, InterceptorB.class); verify(componentRegistry).deepRegister(InterceptorA.class); verify(componentRegistry).deepRegister(InterceptorB.class); }
public void portRotates() throws Exception { for (int i = 1; i < 15; i++) { SlimTestSystem.SlimDescriptor descriptor = new SlimTestSystem.SlimDescriptor(TestSystem.getDescriptor(root, false));
public Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) { if (!acceptsHttpGet(method)) { throw new IllegalArgumentException( "Your logic method must accept HTTP GET method if you want to redirect to it"); } try { String path = request.getContextPath();
private boolean isScalaDistroArtifact(Artifact artifact) { if (_version.major == 2 || _version.major == 3) { return _scalaOrganization.equalsIgnoreCase(artifact.getGroupId())
public void testRegexp() throws Exception { assertMatch("|a|\n"); assertMatch("|a|b|\n"); assertMatch("|a|b|\n|c|\n"); assertMatch("|a|\n|b|\n|c|\n"); assertNoMatch("|abc\n|\n"); assertMatch("|a|\r"); assertMatch("|a|b|\r"); assertMatch("|a|b|\r|c|\r"); assertMatch("|a|\r|b|\r|c|\r"); assertNoMatch("|abc\r|\r"); assertMatch("|a|\r\n"); assertMatch("|a|b|\r\n"); assertMatch("|a|b|\r\n|c|\r\n"); assertMatch("|a|\r\n|b|\r\n|c|\r\n"); assertNoMatch("|abc\r\n|\r\n"); }
public Object set(String instanceName, String variableName, String value) { new FieldAccessor(instanceName, variableName).set(value); return null; }
Result include(Object value); <T extends View> T use(Class<T> view);  Result on(Class<? extends Exception> exception);  boolean used();  Map<String, Object> included();  void forwardTo(String uri);  void redirectTo(String uri);  <T> T forwardTo(Class<T> controller);  <T> T redirectTo(Class<T> controller);  <T> T of(Class<T> controller);  <T> T redirectTo(T controller);  <T> T forwardTo(T controller);  <T> T of(T controller);  void nothing();  void notFound();  void permanentlyRedirectTo(String uri);  <T> T permanentlyRedirectTo(Class<T> controller);  <T> T permanentlyRedirectTo(T controller); }
public void testCreateTmpDirectory() throws Exception { String prefix = "abc"; String suffix = "def"; File dir = FileUtils.createTempDirectory(prefix, suffix); assertTrue(dir.isDirectory()); assertTrue(dir.getName().startsWith(prefix)); assertTrue(dir.getName().endsWith(suffix)); FileUtils.dirDeleterThread.start(); FileUtils.dirDeleterThread.join(); assertFalse(dir.exists()); }
public void canUseSingleCommandToCreateSymbolicLink() throws Exception {
boolean isTimedOut(); void cancel(); void timeOut(); OperationException getException(); void handleResponse(HttpResponse response); }
private void throwExceptionOnError(String tag) throws IOException { if (stream.checkError()) { throw new IOException("Error serializing "+tag);
public Phrase parse(Scanner scanner, SymbolType terminator) { return parse(scanner, new SymbolType[] {terminator}); }
Set<Watcher> triggerWatch(String path, int type) { return triggerWatch(path, type, null); }
private static byte[] transformMasterKey( byte[] pKeySeed, byte[] pKey, int rounds ) throws IOException { FinalKey key = FinalKeyFactory.createFinalKey(); return key.transformMasterKey(pKeySeed, pKey, rounds); }
public Parse last() { return more == null ? this : more.last(); }
protected void tearDown() throws Exception { LOG.info("tearDown starting"); for (int i = 0; i < zkClients.length; i++) { zkClients[i].close(); } qu.shutdownAll(); }
private File makeFileToCreate(String filename, String resource) { File file = new File(makeFullFilename(resource, filename)); int prefix = 1;
long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void BarGraphResultsAreInReverseChronologicalOrder() throws Exception { String apr17Fail = "20090417123103_0_1_0_0"; String apr18Pass = "20090418123103_1_0_0_0"; BarGraph barGraph = makeBarGraph(new String[]{apr17Fail, apr18Pass}); assertEquals("+-", barGraph.testString()); }
public void tearDown() throws Exception { } public void testEmpty() throws Exception { assertEquals("<sillytag/>" + endl, tag.html()); } public void testWithText() throws Exception { tag.add("some text"); assertEquals("<sillytag>some text</sillytag>" + endl, tag.html()); } public void testEmbeddedTag() throws Exception { tag.add(new HtmlTag("innertag")); String expected = "<sillytag>" + endl + "\t<innertag/>" + endl + "</sillytag>" + endl; assertEquals(expected, tag.html()); } public void testAttribute() throws Exception { tag.addAttribute("key", "value"); assertEquals("<sillytag key=\"value\"/>" + endl, tag.html()); } public void testCombination() throws Exception { tag.addAttribute("mykey", "myValue"); HtmlTag inner = new HtmlTag("inner"); inner.add(new HtmlTag("beforetext")); inner.add("inner text"); inner.add(new HtmlTag("aftertext")); tag.add(inner); String expected = "<sillytag mykey=\"myValue\">" + endl + "\t<inner>" + endl + "\t\t<beforetext/>" + endl + "inner text" + endl + "\t\t<aftertext/>" + endl + "\t</inner>" + endl + "</sillytag>" + endl; assertEquals(expected, tag.html()); } public void testNoEndTabWithoutChildrenTags() throws Exception { HtmlTag subtag = new HtmlTag("subtag"); subtag.add("content"); tag.add(subtag); String expected = "<sillytag>" + endl + "\t<subtag>content</subtag>" + endl + "</sillytag>" + endl; assertEquals(expected, tag.html()); } public void testTwoChildren() throws Exception { tag.add(new HtmlTag("tag1")); tag.add(new HtmlTag("tag2")); String expected = "<sillytag>" + endl + "\t<tag1/>" + endl + "\t<tag2/>" + endl + "</sillytag>" + endl; assertEquals(expected, tag.html()); } public void testUse() throws Exception { tag.add("original"); tag.use("new"); assertEquals("<sillytag>new</sillytag>" + endl, tag.html()); } }
public SignatureVisitor visitInterfaceBound() { v.visitInterfaceBound(); return this; }
private void fillData() {
public String mapType(final String type) { if (type == null) { return null; } return mapType(Type.getObjectType(type)).getInternalName(); }
private VersionInfo makeVersion() { final PageData data = getData(); return makeVersion(data); }
private String readContentEntry(ZipFile zipFile, ZipEntry contentEntry) throws IOException, Exception { String content; StreamReader reader = null; try { InputStream contentIS = zipFile.getInputStream(contentEntry);
public void shouldIncludePathWithNonWikiWordFollowedByNewLines() { String result = ParserTestHelper.translateTo(makePageThatIncludesPageFromNonWikiWordPath("\n" + "\n" + "\n" + " ")); assertContains(result, "class=\"collapsible\""); assertContains(result, "<a href=\"FrontPage.Tests.non_wiki_word\">"); assertContains(result, "Hello world!"); }
public void testGetSize() throws Exception { for (int i=1; i<=6; i++) { HeaderWidget widget = new HeaderWidget(new MockWidgetRoot(), "!"+i+" text \n");
public void testResponseForNonColumnFixture() throws Exception { crawler.addPage(root, PathParser.parse("ChildPage"), "child content with <html>"); request.setResource("ChildPage"); request.addInput("fixture", "fitnesse.FitNesse"); request.addInput("text", "child content with <html>\nmore text.\n"); response = (SimpleResponse) responder.makeResponse(new FitNesseContext(root), request); assertEquals(200, response.getStatus()); String body = response.getContent(); assertTrue(body.indexOf("<html>") != -1); assertTrue(body.indexOf("<form") != -1); assertTrue(body.indexOf("method=\"post\"") != -1); assertTrue(body.indexOf("child content with &lt;html&gt;") != -1); assertTrue(body.indexOf("name=\"saveId\"") != -1); assertMatches("child content with &lt;html&gt;.*more text..*!-fitnesse.FitNesse-!|", body); }
public void testStringSplit() { final String s1 = " a , b , "; assertEquals(Arrays.asList("a", "b"), StringUtils.split(s1, ",")); assertEquals(Collections.emptyList(), StringUtils.split("", ",")); final String s3 = "1, , 2"; assertEquals(Arrays.asList("1", "2"), StringUtils.split(s3, ",")); }
public <T> OperationFuture<Boolean> touch(final String key, final int exp, final Transcoder<T> tc) { final CountDownLatch latch=new CountDownLatch(1); final OperationFuture<Boolean> rv=new OperationFuture<Boolean>(latch, operationTimeout); Operation op=opFact.touch(key, exp, new OperationCallback() { public void receivedStatus(OperationStatus status) { rv.set(status.isSuccess(), status); } public void complete() { latch.countDown(); }}); rv.setOperation(op); addOp(key, op); return rv; }
public void testPreAllocSizeSmallerThanTxnData() throws IOException { File logDir = ClientBase.createTmpDir(); FileTxnLog fileTxnLog = new FileTxnLog(logDir);
public void testIntConversion() {
public void testIsSingleWikiWord() throws Exception { assertTrue(WikiWordWidget.isSingleWikiWord("WikiWord")); assertFalse(WikiWordWidget.isSingleWikiWord("notWikiWord")); assertFalse(WikiWordWidget.isSingleWikiWord("NotSingle.WikiWord")); }
private boolean hasPendingOperations(QueueAttachment qa) { assert Thread.holdsLock(qa) : "Not locking qa"; Operation nextOp=qa.ops.peek(); while(nextOp != null && nextOp.isCancelled()) { getLogger().info("Removing cancelled operation: %s", nextOp); qa.ops.remove(); nextOp=qa.ops.peek(); } return nextOp != null; }
public void testJsonResponse() throws Exception { WikiPage page = WikiPageUtil.addPage(root, PathParser.parse("PageOne")); PageData data = page.getData(); WikiPageProperty properties = data.getProperties(); properties.set(PageType.TEST.toString(), "true"); page.commit(data); MockRequest request = new MockRequest(); request.setResource("PageOne"); request.addInput("format", "json"); Responder responder = new PropertiesResponder(); SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); assertEquals("application/json", response.getContentType()); String jsonText = response.getContent(); JSONObject jsonObject = new JSONObject(jsonText); assertTrue(jsonObject.getBoolean("Test")); assertTrue(jsonObject.getBoolean("Search")); assertTrue(jsonObject.getBoolean("Edit")); assertTrue(jsonObject.getBoolean("Properties")); assertTrue(jsonObject.getBoolean("Versions")); assertTrue(jsonObject.getBoolean("Refactor")); assertTrue(jsonObject.getBoolean("WhereUsed")); assertTrue(jsonObject.getBoolean("RecentChanges")); assertTrue(jsonObject.getBoolean("Files")); assertFalse(jsonObject.has("Help")); assertFalse(jsonObject.getBoolean("Suite")); assertFalse(jsonObject.getBoolean("Prune")); assertFalse(jsonObject.getBoolean(PageData.PropertySECURE_READ)); assertFalse(jsonObject.getBoolean(PageData.PropertySECURE_WRITE)); assertFalse(jsonObject.getBoolean(PageData.PropertySECURE_TEST)); }
public void config() { this.mockery = new Mockery(); this.method = mockery.mock(ResourceMethod.class); this.resource = mockery.mock(ResourceClass.class); this.config = mockery.mock(Config.class); this.request = mockery.mock(HttpServletRequest.class); this.info =mockery.mock(MethodInfo.class); mockery.checking(new Expectations() { { one(config).getViewPattern(); will(returnValue("/$component/$logic.$result.jsp")); } }); this.resolver = new VRaptor2PathResolver(config, request, info); }
public void build(Translator translator, Symbol symbol, HtmlTag tag) { tag.add(prefix + translator.translate(symbol.childAt(index))); }
private Response alreadyExistsResponse(FitNesseContext context, Request request) throws Exception { return new ErrorResponder("Child page already exists", 409).makeResponse(context, request); }
long getOutstandingRequests();  int getTickTime();  void setTickTime(int tickTime);  int getMaxClientCnxnsPerHost();  void setMaxClientCnxnsPerHost(int max);  int getMinSessionTimeout();  void setMinSessionTimeout(int min);  int getMaxSessionTimeout();  void setMaxSessionTimeout(int max); boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  void resetNonMTLSConnCount();  void resetAuthFailedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public long getFsyncThresholdExceedCount();  public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); }
public void testCnxManager() throws Exception { CnxManagerThread thread = new CnxManagerThread(); thread.start(); QuorumPeer peer = new QuorumPeer(peers, tmpdir[1], tmpdir[1], port[1], 3, 1, 2, 2, 2); QuorumCnxManager cnxManager = new QuorumCnxManager(peer); QuorumCnxManager.Listener listener = cnxManager.listener; if(listener != null){ listener.start(); } else { LOG.error("Null listener when initializing cnx manager"); } cnxManager.toSend(new Long(0), createMsg(ServerState.LOOKING.ordinal(), 1, -1, 1)); Message m = null; int numRetries = 1; while((m == null) && (numRetries++ <= THRESHOLD)){ m = cnxManager.recvQueue.poll(3000, TimeUnit.MILLISECONDS); if(m == null) cnxManager.connectAll(); } assertTrue("Exceeded number of retries", numRetries <= THRESHOLD); thread.join(5000); if (thread.isAlive()) { fail("Thread didn't join");
public void testFailOnMissingSrcDefaultFileMissing() throws IOException { try { data.setSrc(missingFile);
public void compress(Writer out, int linebreak, boolean munge, boolean verbose, boolean preserveAllSemiColons, boolean preserveStringLiterals) throws IOException { this.munge = munge; this.verbose = verbose; processStringLiterals(this.tokens, !preserveStringLiterals); optimizeObjectMemberAccess(this.tokens); buildSymbolTree(); mungeSymboltree(); StringBuffer sb = printSymbolTree(linebreak, preserveAllSemiColons); out.write(sb.toString()); }
private Collection<Object> normalizeList(Object obj) { Collection<Object> list; if (hasDefaultConverter()) { list = new ArrayList<Object>((Collection<?>)obj); } else { list = (Collection<Object>) obj; } elementTypes = findElementTypes(list); for (Class<?> type : elementTypes) { excludeNonPrimitiveFields(type); } return list; }
private TestExecutionReport readTestExecutionReport(String filePath) throws IOException, SAXException, InvalidReportException { return new TestExecutionReport(new File(filePath)); }
public void rateLimitLog(String newMsg, String value) { long now = Time.currentElapsedTime(); if (newMsg.equals(msg)) { ++count;
void validate() throws KeeperException { PathUtils.validatePath(path); }
public void simpleNameWithUnnamedArgument() throws Exception { makeTables( "!|scenario|f|a||b|\n" + "|function|@a||@b|\n" + "\n" + "!|script|\n" + "|f|1||2|\n" ); List<CallInstruction> expectedInstructions = list( new CallInstruction("scriptTable_id_0/scriptTable_s_id_0", "scriptTableActor", "function", new Object[]{"1", "2"}) ); assertEquals(expectedInstructions, instructions); }
private List<WikiPage> makeTestPageList() { SuiteContentsFinder finder = new SuiteContentsFinder(suite, null, root); return finder.getAllPagesToRunForThisSuite(); }
public void writeSummary(String suiteName) throws IOException { resultsRepository.open(suiteName); resultsRepository.write(new TestResultsSummaryTable(visitedTestPages, testSummaries).toString()); resultsRepository.close(); }
public void testSine() throws Exception { assertEquals("1.8509", new EvaluatorWidget(widgetRoot, "${=%5.4f: 1 + sin 45 =}").render()); }
private static boolean deleteInBatch(ZooKeeper zk, List<String> tree, int batchSize) throws InterruptedException { int rateLimit = 10; List<Op> ops = new ArrayList<>(); BatchedDeleteCbContext context = new BatchedDeleteCbContext(rateLimit); MultiCallback cb = (rc, path, ctx, opResults) -> { ((BatchedDeleteCbContext)ctx).sem.release(); if (rc != Code.OK.intValue()) { ((BatchedDeleteCbContext)ctx).success.set(false); } };
public PageData getDataVersion(String versionName) throws Exception { return revisioner.getRevisionData(this, versionName); }
protected void onResume() { super.onResume(); if ( KeePass.db.gDirty.get(mGroup) != null ) { KeePass.db.gDirty.remove(mGroup);
private void cleanup() { if (sockKey != null) { SocketChannel sock = (SocketChannel) sockKey.channel(); sockKey.cancel(); try { sock.socket().shutdownInput(); } catch (IOException e2) { } try { sock.socket().shutdownOutput(); } catch (IOException e2) { } try { sock.socket().close(); } catch (IOException e1) { } try { sock.close(); } catch (IOException e1) { } } try { Thread.sleep(100); } catch (InterruptedException e1) { e1.printStackTrace(); } sockKey = null; synchronized (pendingQueue) { for (Packet p : pendingQueue) {
public static void main(String[] args) { System.out.println(Arrays.toString("client.favoriteColors[1]".split("[\\]\\.]"))); }
public void setUp() throws Exception { testData = new WikiImporterTest(); testData.createRemoteRoot(); testData.createLocalRoot(); FitNesseUtil.startFitnesse(testData.remoteRoot); baseUrl = "http://localhost:" + FitNesseUtil.port + "/"; createResponder(); }
Collection<SourcePage> getAncestors(); Collection<SourcePage> getChildren(); boolean hasProperty(String propertyKey); String getProperty(String propertyKey); }
public String toWikiText() { StringBuffer wikiText = new StringBuffer(); for (WikiWidget widget : widgetRoot.getChildren()) appendWidgetText(wikiText, widget); return wikiText.toString(); }
public void HtmlFileIsExternalSuitePageChild() throws Exception { fileSystem.makeFile("./somepath/ExternalSuite/myfile.html", "stuff"); ExternalSuitePage page = (ExternalSuitePage) rootPage.addChildPage("ExternalSuite"); WikiPage child = page.getNormalChildren().get(0); assertEquals(ExternalTestPage.class, child.getClass()); assertEquals("MyfilE", child.getName()); }
private void handleWrites(SelectionKey sk, QueueAttachment qa) throws IOException { qa.fillWriteBuffer(optimizeGets); boolean canWriteMore=qa.toWrite > 0; while(canWriteMore) { int wrote=qa.channel.write(qa.wbuf);
public Result pass(String message) { return super.fail(message); }
public SSLSocket createSSLSocket() throws X509Exception, IOException { SSLSocket sslSocket = (SSLSocket) getDefaultSSLContext().getSocketFactory().createSocket(); configureSSLSocket(sslSocket); sslSocket.setUseClientMode(true); return sslSocket; }
private NodeList makeNodeList(PageData pageData) { String html;ParsedPage parsedPage = pageData.getParsedPage(); html = parsedPage.toHtml(); Parser parser = new Parser(new Lexer(new Page(html))); try { return parser.parse(null);
public void testCommentBeforeLineAndEndOfLine() throws ParseException, NoSuchFieldException, IllegalAccessException { String juteStr = "module org.apache.zookeeper.data {\n" + " /**\n" + " * information explicitly stored by the server persistently\n" + " */ \n" + " class StatPersisted {\n" + " // created zxid\n" + " long czxid; // created zxid comment2\n" + " /* last modified zxid */\n" + " long mzxid; // last modified zxid comment2\n" + " /* created */\n" + " long ctime; // created comment2\n" + " /* last modified */\n" + " /* last modified */\n" + " long mtime; // last modified comment2\n" + " // version comment\n " + " int version; /* version comment1 */ /* version\n comment2 */\n" + " /** child version */\n" + " /** child version */\n" + " int cversion; /** child version */ // child version\n" + " // acl version\n" + " // acl version\n" + " // acl version\n" + " int aversion; // acl version\n" + " // ephemeralOwner comment\n" + " long ephemeralOwner; /* A multi-line end of line comment. */ /* Another multi-line end of line comment. */ /* Yet another\n" + "end of line comment. */ /* Comment belong to new field */\n" + " // pzxid comment\n" + " long pzxid; /* A multi-line end of line comment. */ /* Another multi-line end of line comment. */ /* Yet another\n" + "end of line comment. */ /* Comment belong to new field */\n" + " }\n" + "}"; try (StringReader stringReader = new StringReader(juteStr)) { Rcc parser = new Rcc(stringReader);
private void parseTable() throws SyntaxError { validateHeader(); parameterized = determineParameterized(); name = getScenarioName(); getScenarioArguments(); setParameterMatchingPattern(); getTestContext().addScenario(name, this); }
public void routes() { routeFor("/clients/add").with(HttpMethod.GET).is(MyControl.class).add(null); }
public void shouldLoadEntityUsingOtherIdName() throws Exception { when(provider.parameterNamesFor(methodOtherIdName.getMethod())).thenReturn(new String[] {"entity"}); when(request.getParameter("entity.otherIdName")).thenReturn("456"); EntityOtherIdName expectedEntity = new EntityOtherIdName(); when(session.get(EntityOtherIdName.class, 456L)).thenReturn(expectedEntity); when(session.getSessionFactory()).thenReturn(sessionFactory); when(sessionFactory.getClassMetadata(any(Class.class))).thenReturn(classMetadata); when(classMetadata.getIdentifierPropertyName()).thenReturn("otherIdName"); when(classMetadata.getIdentifierType()).thenReturn(type); when(type.getReturnedClass()).thenReturn(Long.class); interceptor.intercept(stack, methodOtherIdName, instance); verify(request).setAttribute("entity", expectedEntity); verify(stack).next(methodOtherIdName, instance); }
public void testMakeNavigationPropertiesHtml() throws Exception { WikiPage page = root.addChildPage("SomePage"); PageData data = page.getData(); String html = new PropertiesResponder().makeNavigationCheckboxesHtml(data).html(); assertSubString("<div style=\"float: left; width: 150px;\">Navigation:", html); assertSubString("<input type=\"checkbox\" name=\"Files\" checked=\"true\"/> - Files", html); assertSubString("<input type=\"checkbox\" name=\"RecentChanges\" checked=\"true\"/> - RecentChanges", html); assertSubString("<input type=\"checkbox\" name=\"Search\" checked=\"true\"/> - Search", html); assertSubString("<input type=\"checkbox\" name=\"Prune\"/> - Prune", html); }
default void initialize() { }  void logAuditEvent(AuditEvent auditEvent); }
public void testUTF8String() throws Exception { String s1="\u2013\u00f3\u2013\u00a5\u2014\u00c4\u2013\u221e\u2013" + "\u2264\u2014\u00c5\u2014\u00c7\u2013\u2264\u2014\u00c9\u2013" + "\u03c0, \u2013\u00ba\u2013\u220f\u2014\u00c4."; CachedData cd=tc.encode(s1); assertEquals(getStringFlags(), cd.getFlags()); assertEquals(s1, tc.decode(cd)); }
public PwGroupV3 newGroup(String name, PwGroupV3 parent) {
public void testDontRenameFrontPage() throws Exception { String frontPageName = "FrontPage"; crawler.addPage(root, PathParser.parse(frontPageName), "Content"); Response response = doRename(frontPageName, "ReNamed", true); assertNotNull(response); assertSubString("Cannot rename", getResponseContent(response)); }
public final TestSystem create(Descriptor descriptor, TestSystemListener testSystemListener) throws IOException { SlimCommandRunningClient slimClient = new SlimClientBuilder(descriptor).build(); HtmlSlimTestSystem testSystem = new HtmlSlimTestSystem(descriptor.getTestSystemName(), slimClient, testSystemListener); return testSystem; }
public void removeChildPage(final String name) { super.removeChildPage(name); String pathToDelete = getFileSystemPath() + "/" + name; fileSystem.delete(pathToDelete); }
BlockingQueue<Operation> createReadOperationQueue();  BlockingQueue<Operation> createWriteOperationQueue();  NodeLocator createLocator(List<MemcachedNode> nodes);  OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon();  boolean useNagleAlgorithm();  Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode();  Transcoder<Object> getDefaultTranscoder();  boolean shouldOptimize();  int getReadBufSize();  public HashAlgorithm getHashAlg();  long getMaxReconnectDelay(); }
public void saveDefaultConnectionFile(Properties props) throws IOException; }
public void removeChildPage(String name) throws Exception; public List<WikiPage> getChildren() throws Exception; public String getName() throws Exception; public PageData getData() throws Exception; public PageData getDataVersion(String versionName) throws Exception; public VersionInfo commit(PageData data) throws Exception; public PageCrawler getPageCrawler();
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root"); assertions = new ArrayList<>(); ScenarioTable.setDefaultChildClass(ScriptTable.class); }
private void setUpData() throws Exception { ClientBase.setupTestEnv(); QuorumPeerConfig.setStandaloneEnabled(false); QuorumPeerConfig.setReconfigEnabled(true); peers = new MainThread[NUM_SERVERS]; zkHandles = new ZooKeeper[NUM_SERVERS]; zkAdminHandles = new ZooKeeperAdmin[NUM_SERVERS]; clientPorts = new int[NUM_SERVERS]; serverStrings = buildServerStrings(); reconfigServers = new ArrayList<String>(); System.setProperty("zookeeper.DigestAuthenticationProvider.superDigest", "super:D/InIHSb7yEEbrWz8b9l71RjZJU="); }
public Optional<String> findVariable(String key) { String value; if (key.equals("RUNNING_PAGE_NAME")) value = page.getName(); else if (key.equals("RUNNING_PAGE_PATH")) value = page.getFullPath().parentPath().toString(); else return Optional.empty(); return Optional.of(value); }
protected void parse( final InputStream pInput ) throws IOException, ParseException { final BufferedReader br = new BufferedReader(new InputStreamReader(pInput, "UTF-8")); StringBuilder buffer = new StringBuilder(); String field = null; int linenr = 0; while (true) { final String line = br.readLine(); if (line == null) { if (buffer.length() > 0) {
public void setUp() throws Exception { ProxyPage.cacheTime = 0; root = InMemoryPage.makeRoot("RooT"); crawler = root.getPageCrawler(); page1Path = PathParser.parse("PageOne"); original = crawler.addPage(root, page1Path, "page one content"); child1 = crawler.addPage(original, PathParser.parse("ChildOne"), "child one"); crawler.addPage(original, PathParser.parse("ChildTwo"), "child two"); PageData data = original.getData(); data.setAttribute("Attr1"); original.commit(data); FitNesseUtil.startFitnesse(root); proxy = new ProxyPage(original); proxy.setHostPort("localhost", FitNesseUtil.PORT); }
<T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by, long def, int exp); Future<Long> asyncIncr(String key, int by, long def, int exp); Future<Long> asyncDecr(String key, long by, long def, int exp); Future<Long> asyncDecr(String key, int by, long def, int exp); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Long> asyncIncr(String key, long by, long def); Future<Long> asyncIncr(String key, int by, long def); Future<Long> asyncDecr(String key, long by, long def); Future<Long> asyncDecr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); CountDownLatch broadcastOp(final BroadcastOpFactory of); CountDownLatch broadcastOp(final BroadcastOpFactory of, Collection<MemcachedNode> nodes);  Set<String> listSaslMechanisms(); }
private void insertTearDownForThisGroup(String setUpAndTearDownGroupKey) { String tearDownPath = setUpAndTearDownGroupKey.split(",")[1]; WikiPage tearDownPage = root.getPageCrawler().getPage(PathParser.parse(tearDownPath)); if (tearDownPage != null) pageList.add(tearDownPage);
public int size() { final long c = count.get(); if (c > values.length()) { return values.length(); } return (int) c; }
<T extends View> T onErrorUse(Class<T> view); void addAll(Collection<? extends Message> message); void add(Message message); boolean hasErrors();  <T> T onErrorForwardTo(Class<T> controller);  <T> T onErrorForwardTo(T controller);  <T> T onErrorRedirectTo(Class<T> controller);  <T> T onErrorRedirectTo(T controller);  <T> T onErrorUsePageOf(Class<T> controller);  <T> T onErrorUsePageOf(T controller);  void onErrorSendBadRequest(); }
void makeDirectory(File path) throws IOException; boolean exists(File file); String[] list(File path); String getContent(File file) throws IOException; InputStream getInputStream(File file) throws IOException; void delete(File path) throws IOException; long lastModified(File file); void rename(File file, File originalFile) throws IOException; boolean isDirectory(File file); }
public void sendWriteRequest() throws Exception { ByteArrayOutputStream boas = new ByteArrayOutputStream(); BinaryOutputArchive boa = BinaryOutputArchive.getArchive(boas); CreateRequest createReq = new CreateRequest("/session" + Long.toHexString(sessionId) + "-" + (++nodeId), new byte[0], Ids.OPEN_ACL_UNSAFE, 1); createReq.serialize(boa, "request"); ByteBuffer bb = ByteBuffer.wrap(boas.toByteArray()); Request req = new Request(null, sessionId, ++cxid, OpCode.create, bb, new ArrayList<Id>()); zks.getFirstProcessor().processRequest(req);
public byte[] createSaslToken() throws SaslException { saslState = SaslState.INTERMEDIATE; return createSaslToken(saslToken); }
public Transaction delete(final String path, int version) { ops.add(Op.delete(path, version)); return this; }
public Void execute(final RequestInfo request, int counter) { return provider.provideForRequest(request, new Execution<Void>() {
public String getLockFileName(WikiPage test) throws Exception { PageData data = test.getData(); return "FitNesseRoot/files/testProgress/" + data.getVariable("PAGE_PATH") + "." + data.getVariable("PAGE_NAME") + ".lock"; }
private String makeRightColumn() { TagGroup html = new TagGroup(); html.add(addFiles(FileUtil.getDirectoryListing(requestedDirectory))); html.add(HtmlUtil.HR.html()); html.add(makeUploadForm()); html.add(makeDirectoryForm()); return html.html(); }
public void exceptionsAreRecordedCorrectly() throws Exception{ xmlTestListener.newTestStarted(null, 0); xmlTestListener.recordTestResult("testName", new TestSummary(1,2,0,1), 100); Assert.assertEquals(readContents(new File(xmlOutputDir,"TEST-testName.xml")), "<testsuite errors=\"1\" skipped=\"0\" tests=\"1\" time=\"0.1\" failures=\"0\" name=\"testName\"><properties></properties><testcase classname=\"testName\" time=\"0.1\" name=\"testName\"><failure type=\"java.lang.AssertionError\" message=\" exceptions: 1 wrong: 2\"></failure></testcase></testsuite>");
String getContentType(); void output(CommandResponse response, PrintWriter pw); }
public void testOperationStatusString() { String s=String.valueOf(OperationImpl.STATUS_OK); assertEquals("{OperationStatus success=true: OK}", s); }
protected InstructionResult executeInternal(InstructionExecutor executor) throws SlimException { Object result; if (symbolName.isPresent()) { result = executor.callAndAssign(symbolName.get(), instanceName, methodName, args); } else { result = executor.call(this.instanceName, this.methodName, this.args); } return new InstructionResult(getId(), result); }
String formatLogLine(LogData data) { StringBuffer line = new StringBuffer(); line.append(data.host).append(" - "); line.append(data.username == null ? "-" : data.username); line.append(" [").append(format(makeLogFormat(), data.time)).append("] "); line.append('"').append(data.requestLine).append("\" "); line.append(data.status).append(" "); line.append(data.size); return line.toString(); }
public void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException { rules.add(new Rules() {{ when("/clients/add").invoke(MyControl.class).add(null); }}); assertThat(rules.parse("/clients/add", HttpMethod.POST), is(VRaptorMatchers.resourceMethod(method("add",Dog.class)))); }
InputStream getInputStream(File file) throws IOException; void delete(File path); long lastModified(File file); }
public TokenMatch makeMatch(TokenType type, ScanString input) { if (input.startsLine() & input.startsWith(delimiter)) { Token token; try { token = tokenClass.newInstance(); } catch (InstantiationException e) { throw new IllegalArgumentException(e); } catch (IllegalAccessException e) { throw new IllegalArgumentException(e); } token.setType(type); return new TokenMatch(token, delimiter.length()); } return TokenMatch.noMatch; }
public ResponseParser getResponse(URL url) throws Exception { String resource = url.getPath() + "?" + url.getQuery(); RequestBuilder request = new RequestBuilder(resource); int port = url.getPort() == -1 ? 80 : url.getPort(); String host = url.getHost(); Socket socket = null; OutputStream output = null; InputStream input = null; try { socket = new Socket(host, port);
public void testExceptionInMethod() throws Exception { final String[][] table = { {"fitnesse.fixtures.ColumnFixtureTestFixture"}, {"input", "exception?"}, {"1", "true"} }; Parse page = FixtureTest.executeFixture(table); String colTwoResult = page.at(0, 2, 1).body; assertTrue(colTwoResult.indexOf("I thowed up") != -1); }
public void testQuerySetInclusiveEnd() throws Exception { Query query = new Query(); View view = client.getView(DESIGN_DOC_W_REDUCE, VIEW_NAME_W_REDUCE); ViewFuture future = client.query(view, query.setInclusiveEnd(true)); ViewResponseWithDocs response = future.get(); assert response != null : future.getStatus(); }
public void testThatSpecialCharsAreNotEscapedTwice() throws Exception { WikiPage page = new WikiPageDummy("Name", "<b>", null); String html = page.getHtml(); assertEquals("&lt;b&gt;", html); }
public void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException { final Route route = mockery.mock(Route.class); mockery.checking(new Expectations() {{ one(route).matches("/clients/add", HttpMethod.POST, request); will(returnValue(method)); one(route).getResource(); will(returnValue(null)); }}); router.add(route); ResourceMethod found = router.parse("/clients/add", HttpMethod.POST, request); assertThat(found, is(equalTo(method))); mockery.assertIsSatisfied(); }
protected T makeSlimTableAndBuildInstructions(String pageContents) throws Exception { tableUnderTest = createSlimTable(pageContents); tableUnderTest.appendInstructions(instructions); return tableUnderTest; }
public void testShouldReturnInvalidWikiPageMessageIfWikiPageDoesNotExistOnFileSystem() throws Exception { final String inMemoryPageName = "InMemoryPage"; root.addChildPage(inMemoryPageName); request.setResource(inMemoryPageName); invokeResponderAndCheckResponseContains("The page " + inMemoryPageName + " doesn't support '" + revisionControlOperation + "' operation."); }
long getMinRequestLatency();  double getAvgRequestLatency();  long getMaxRequestLatency();  long getPacketsReceived();  long getPacketsSent();  long getFsyncThresholdExceedCount();  long getOutstandingRequests();  int getTickTime();  void setTickTime(int tickTime);  int getMaxClientCnxnsPerHost();  void setMaxClientCnxnsPerHost(int max);  int getMinSessionTimeout();  void setMinSessionTimeout(int min);  int getMaxSessionTimeout();  void setMaxSessionTimeout(int max); boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size); }
public void matchWithDifferentKeywordShow() { pageFinder = pageFinder("|show|methodWithNoParam|"); pageFinder.search(root); hits.assertPagesFound(pageOne.getName(), childPage2.getName()); }
BlockingQueue<Operation> createOperationQueue();  BlockingQueue<Operation> createReadOperationQueue();  BlockingQueue<Operation> createWriteOperationQueue();  NodeLocator createLocator(List<MemcachedNode> nodes);  OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon();  boolean useNagleAlgorithm();  Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode();  Transcoder<Object> getDefaultTranscoder(); }
private void setupMockWithEmptyReturnValue() throws Exception { when(delegate.search(any(WikiPage.class))).thenReturn( new ArrayList<WikiPage>());
private ServerControl.TestServer lookupServer(Channel c, String name) { HashMap<String, ServerControl.TestServer> map = serverMap.get(c); return map.get(name); }
public void BraceFormatHtml() throws Exception { StyleWidget widget = new StyleWidget.BraceFormat(new MockWidgetRoot(), "!style_myStyle{wow zap}"); assertEquals("<span class=\"myStyle\">wow zap</span>", widget.render()); }
public void loadPool(Pool pool, String sPool) throws ParseException { try { JSONObject poolJO = new JSONObject(sPool);
String getName(); PageData getData(); ReadOnlyPageData readOnlyData(); Collection<VersionInfo> getVersions(); PageData getDataVersion(String versionName); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage(); }
private void prepareRequest(String pageName) { request.setResource(pageName); request.addInput(EditResponder.SAVE_ID, "12345"); request.addInput(EditResponder.CONTENT_INPUT_NAME, "some new content"); request.addInput(EditResponder.TICKET_ID, "" + SaveRecorder.newTicket()); }
public String toString() { StringBuffer sb = new StringBuffer(); sb.append("Children of trienode: "); synchronized(children) { for (String str: children.keySet()) { sb.append(" " + str); } } return sb.toString(); }
public SymbolType closeType() { return this == OpenBrace ? CloseBrace : this == OpenBracket ? CloseBracket
public void shouldUseCollectionConverterWhenItExists() { String expectedResult = "[\"testing\"]"; List<JsonSerializer> adapters = new ArrayList<JsonSerializer>(); adapters.add(new CollectionSerializer()); GsonJSONSerialization serialization = new GsonJSONSerialization(response, extractor, initializer, new DefaultJsonSerializers(adapters, context)); serialization.withoutRoot().from(new MyCollection()).serialize(); assertThat(result(), is(equalTo(expectedResult))); }
abstract void cleanup();  abstract void packetAdded();  abstract void onClosing();  abstract void saslCompleted();  abstract void connectionPrimed();  abstract void doTransport(int waitTimeOut, List<Packet> pendingQueue, ClientCnxn cnxn) throws IOException, InterruptedException;  abstract void testableCloseSocket() throws IOException;  abstract void close();  abstract void sendPacket(Packet p) throws IOException; }
@Test public void scansCenters() { ParserTest.assertScans("!c some text\n", "CenterLine=!c,Whitespace= ,Text=some,Whitespace= ,Text=text,Newline=\n"); ParserTest.assertScans("!C more text\n", "CenterLine=!C,Whitespace= ,Text=more,Whitespace= ,Text=text,Newline=\n"); ParserTest.assertScans("!ctext\n", "CenterLine=!c,Text=text,Newline=\n"); ParserTest.assertScans("!c text\n", "CenterLine=!c,Whitespace= ,Text=text,Newline=\n"); ParserTest.assertScans(" !c text\n", "Whitespace= ,CenterLine=!c,Whitespace= ,Text=text,Newline=\n"); ParserTest.assertScans("!c text", "CenterLine=!c,Whitespace= ,Text=text"); }
int getElectionType();  String getElectionAddress();  String getClientAddress();  String getLearnerType();  long getConfigVersion();  String getQuorumSystemInfo();  boolean isPartOfEnsemble();  boolean isLeader(); }
private ScriptTable makeScriptTable(String tableText, boolean localized) throws Exception { WikiPageUtil.setPageContents(root, tableText); TableScanner ts = new HtmlTableScanner(root.getHtml()); Table t = ts.getTable(0); SlimTestContextImpl testContext = new SlimTestContextImpl(new WikiTestPage(root)); return (ScriptTable) slimTableFactory.makeSlimTable(t, "id", testContext); }
void encode( DEROutputStream out) throws IOException { out.writeEncoded(OCTET_STRING, string); }
public void makesWikiWordWithTrailingText() { TokenMatch match = makeMatch("HiMom's"); assertEquals(SymbolType.WikiWord, match.getToken().getType()); assertEquals("HiMom", match.getToken().getContent()); assertEquals(5, match.getMatchLength()); }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof ErrorResult)) { return false; } ErrorResult other = (ErrorResult) o; return getType() == other.getType() && err == other.getErr(); }
public static FitNesseContext makeTestContext(WikiPage root, int port, Authenticator authenticator) { return makeTestContext(root, createTemporaryFolder(), FitNesseUtil.base, port, authenticator); }
boolean validGame(); boolean gameOver(); boolean isGameOver(); void roll(int pins); int score(int frame); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); PageData data = root.getData(); root.commit(data); suite = WikiPageUtil.addPage(root, PathParser.parse("SuitePageName"), "The is the test suite\n"); testPage = addTestPage(suite, "TestOne", "My test and has some content"); }
protected Object[] convertArgs(Method method, Object[] args) { Type[] argumentParameterTypes = method.getGenericParameterTypes(); return ConverterSupport.convertArgs(args, argumentParameterTypes); }
public String html(int depth) throws Exception { StringBuffer buffer = new StringBuffer(); for (Iterator<HtmlElement> iterator = childTags.iterator(); iterator.hasNext();) { HtmlElement element = iterator.next(); if (element instanceof HtmlTag) buffer.append(((HtmlTag) element).html(depth)); else buffer.append(element.html()); } return buffer.toString(); }
public boolean start() { try { if (context.port > 0) { theService = new SocketService(context.port, new FitNesseServer(context)); } return true; } catch (BindException e) { printBadPortMessage(context.port); } catch (Exception e) { e.printStackTrace(); } return false; }
private HtmlTag makeBaseTag() { base = new HtmlTag("base"); return base; }
public void testSingle() throws Exception { List<InetSocketAddress> addrs= AddrUtil.getAddresses("www.google.com:80"); assertEquals(1, addrs.size()); assertEquals("www.google.com", addrs.get(0).getHostName()); assertEquals(80, addrs.get(0).getPort()); }
public void initContainer() { container = new SpringBasedContainer("br.com.caelum.vraptor.ioc.spring"); container.start(null); }
public void testWatchSummary() throws IOException, InterruptedException { testCommand("watch_summary", new Field("num_connections", Integer.class),
public static List<String> getFileLines(File file) throws IOException { return Files.readAllLines(file.toPath(), Charset.defaultCharset()); }
public void register(Class<? extends ComponentFactory> componentFactoryClass) { Class<?> targetType = componentFactoryIntrospector.targetTypeForComponentFactory(componentFactoryClass); if (componentFactoryClass.isAnnotationPresent(ApplicationScoped.class)) { logger.debug("Registering a ComponentFactory for {} in app scope", targetType.getName());
private HtmlTag makeLastModifiedTag() throws Exception { HtmlTag tag = HtmlUtil.makeDivTag("right"); String username = pageData.getAttribute(WikiPage.LAST_MODIFYING_USER); if(username == null || "".equals(username)) tag.use("Last modified anonymously"); else tag.use("Last modified by " + username); return tag; }
public void testOrderWithDifferentPrefixIncludingSessionId() throws Exception { String[] names = { "x-242681582799028564-0000000002", "x-170623981976748329-0000000003", "x-98566387950223723-0000000001" }; ZNodeName zname; final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream() .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList()); final Iterator<ZNodeName> it = nodeNames.iterator(); zname = it.next(); Assert.assertEquals("x-98566387950223723-0000000001", zname.getName()); Assert.assertEquals("x-98566387950223723", zname.getPrefix()); Assert.assertEquals(Integer.valueOf(1), zname.getSequence().get()); zname = it.next(); Assert.assertEquals("x-242681582799028564-0000000002", zname.getName()); Assert.assertEquals("x-242681582799028564", zname.getPrefix()); Assert.assertEquals(Integer.valueOf(2), zname.getSequence().get()); zname = it.next(); Assert.assertEquals("x-170623981976748329-0000000003", zname.getName()); Assert.assertEquals("x-170623981976748329", zname.getPrefix()); Assert.assertEquals(Integer.valueOf(3), zname.getSequence().get()); }
public String genCsharpConstructorSet(String fname) { return mType.genCsharpConstructorSet(mName, fname); }
void pageImported(WikiPage localPage); void pageImportError(WikiPage localPage, Exception e); }
public String runTestsAndGenerateHtml(PageData pageData) throws Exception { initializeTest(); String html = processAllTablesOnPage(pageData); testComplete(testSummary); return html; }
int addRow(List<String> list); void addColumnToRow(int row, String content); void appendChildTable(int row, Table table); void updateContent(int row, TestResult testResult); void updateContent(int col, int row, TestResult testResult); void updateContent(int col, int row, ExceptionResult exceptionResult); Table asTemplate(CellContentSubstitution substitution) throws SyntaxError;
public void testWithoutAutoCreateDataLogDir() throws Exception { ClientBase.setupTestEnv(); System.setProperty(FileTxnSnapLog.ZOOKEEPER_DATADIR_AUTOCREATE, "false"); final int CLIENT_PORT = 3181; MainThread main = new MainThread(CLIENT_PORT, false); String args[] = new String[1]; args[0] = main.confFile.toString(); main.start(); Assert.assertFalse("waiting for server being up", ClientBase .waitForServerUp("127.0.0.1:" + CLIENT_PORT,
protected void parse(InputStream input) throws IOException, ParseException { final BufferedReader br = new BufferedReader(new InputStreamReader(input, "UTF-8")); StringBuilder buffer = new StringBuilder(); String field = null; int linenr = 0; while (true) { final String line = br.readLine(); if (line == null) { if (buffer.length() > 0) {
public void processRequest(Request request) {
public void incrementCversion(String path, long zxid) throws KeeperException.NoNodeException { if (path.endsWith("/")) { path = path.substring(0, path.length() - 1); } DataNode node = nodes.get(path); if (node == null) { throw new KeeperException.NoNodeException(path); } synchronized (node) { node.stat.setCversion(node.stat.getCversion() + 1);
MemcachedNode getPrimary(String k);  Iterator<MemcachedNode> getSequence(String k);  Collection<MemcachedNode> getAll();  NodeLocator getReadonlyCopy();  public void updateLocator(final List<MemcachedNode> nodes, final Config conf); }
public void setParentForVariables(WikiPage parent); public WikiPage addChildPage(String name) throws Exception; public boolean hasChildPage(String name) throws Exception; public WikiPage getChildPage(String name) throws Exception; public void removeChildPage(String name) throws Exception; public List<WikiPage> getChildren() throws Exception; public String getName(); public PageData getData() throws Exception; public PageData getDataVersion(String versionName) throws Exception; public VersionInfo commit(PageData data) throws Exception; public PageCrawler getPageCrawler(); public WikiPage getHeaderPage() throws Exception; public WikiPage getFooterPage() throws Exception;
public Set<StereotypedClass> allResources() {
private boolean isUpperCaseLetter(String candidate, int offset) { return candidate.charAt(offset) >= 'A' && candidate.charAt(offset) <= 'Z'; }
protected abstract long currentClockTimeInMillis() ; protected Date currentClockDate() { return new Date(currentClockTimeInMillis()); } public static long currentTimeInMillis() { return instance.currentClockTimeInMillis(); } public static Date currentDate() { return instance.currentClockDate(); } public static void restoreDefaultClock() { Clock.instance = SYSTEM_CLOCK; } } class SystemClock extends Clock { @Override protected long currentClockTimeInMillis() { return System.currentTimeMillis(); } }
@Test public void scansHorizontalRules() { ParserTestHelper.assertScansTokenType("----", "HorizontalRule", true); ParserTestHelper.assertScansTokenType("------", "HorizontalRule", true); }
private void testKeyfile(String dbAsset, String keyAsset, String password) throws Exception { Context ctx = getContext(); File sdcard = Environment.getExternalStorageDirectory(); String keyPath = ctx.getFilesDir().getAbsolutePath() + "/key"; TestUtil.extractKey(ctx, keyAsset, keyPath); AssetManager am = ctx.getAssets(); InputStream is = am.open(dbAsset, AssetManager.ACCESS_STREAMING); ImporterV3 importer = new ImporterV3(); importer.openDatabase(is, password, TestUtil.getKeyFileInputStream(ctx, keyPath)); is.close(); }
public void operationFailed(Object ctx, PubSubException exception) { failureException = new RuntimeException(exception); ((Semaphore) ctx).release(); }
private SlimTestResult simpleComparisonMessage(boolean pass) { String message = String.format("%s%s", actual, expected.trim().replaceAll("( )+", " ")); message = replaceSymbolsWithFullExpansion(message); return pass ? SlimTestResult.pass(message) : SlimTestResult.fail(message);
public void shouldUseTheSameConverterOnFurtherRequests() { mockery.checking(new Expectations(){{ one(container).instanceFor(converter.getClass()); will(returnValue(converter)); }}); assertSame(converters.to(CachedConvertersTest.class), converters.to(CachedConvertersTest.class)); mockery.assertIsSatisfied(); }
private void parseOutFormat(String expr) { Matcher match = formatParser.matcher(expr); if(match.find()) {
public void testOutputChunk(String output) throws IOException; public void testComplete(TestSummary testSummary) throws IOException; public void exceptionOccurred(Throwable e); public void testAssertionVerified(Assertion assertion, TestResult testResult); public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); }
void appendChildTable(int row, Table table); void setTestStatusOnRow(int row, ExecutionResult testStatus); void setName(String tableName); void setCell(int col, int row, Response response); void appendToCell(int col, int row, Response response); }
public void testMakeActionsWithSuiteButtonWhenNameEndsWithSuite() { String pageName = "NothingsSuite"; String html = getActionsHtml(pageName); verifyDefaultLinks(html, pageName); assertSubString("<a class=\"nav-link text-secondary\" href=\"" + pageName + "?suite\" accesskey=\"t\">Suite</a>", html); }
public Maybe<String> findVariable(String name) { Maybe<String> result = new PageVariableSource(page, namedPage).findVariable(name); if (!result.isNothing()) return result; result = new ApplicationVariableSource(variableSource).findVariable(name); if (!result.isNothing()) return result; result = new UserVariableSource(variableSource).findVariable(name); if (!result.isNothing()) return result; result = new ParentPageVariableSource(page, cache).findVariable(name); if (!result.isNothing()) return result; return variableSource != null ? variableSource.findVariable(name) : Maybe.noString; }
public void add(String key, long value) { } public void reset() { } public abstract Map<String, Object> values(); }
private boolean isChildOf(WikiPage childPage, WikiPage parentPage) { String childPath = PathParser.render(childPage.getPageCrawler().getFullPath()); String parentPath = PathParser.render(parentPage.getPageCrawler().getFullPath()); return childPath.startsWith(parentPath); }
Map<String, Class<? extends SlimTable>> getSlimTables() throws PluginException; Map<String, CustomComparator> getCustomComparators() throws PluginException; Map<String, TestSystemFactory> getTestSystemFactories() throws PluginException; void setComponentFactory(ComponentFactory componentFactory); }
boolean isRoot();  WikiPage addChildPage(String name); boolean hasChildPage(String name); WikiPage getChildPage(String name);  @Deprecated void removeChildPage(String name);  void remove();  List<WikiPage> getChildren(); String getName(); PageData getData();  Collection<VersionInfo> getVersions(); WikiPage getVersion(String versionName); String getHtml();  VersionInfo commit(PageData data); PageCrawler getPageCrawler(); String getVariable(String name); }
public Maybe<Symbol> parse(Symbol current, Parser parser) { if (!isStartOfLine(parser) && !isStartOfCell(parser)) return Symbol.nothing; Symbol next = parser.moveNext(1); if (!next.isType(SymbolType.Whitespace)) return Symbol.nothing; String level = current.getContent().substring(1,2); if (ScanString.isDigits(level)) current.putProperty(Level, level); return new Maybe<Symbol>(current.add(parser.parseToEnd(SymbolType.Newline))); }
boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(String mechs[], CallbackHandler cbh) throws OperationException; }
private String readWholeResponse() throws Exception { StringBuffer buffer = new StringBuffer(); String block = readFromFitServer(); ; while (block.length() > 0) { buffer.append(block); block = readFromFitServer(); } String response = buffer.toString(); return response; }
public void testGetChild() throws Exception { WikiPage childPage = pageBuilder.addPage(pageTwo, PathParser.parse("ChildPage"), "child page"); WikiPage page = symPage.getChildPage("ChildPage"); assertNotNull(page); assertEquals(SymbolicPage.class, page.getClass()); SymbolicPage symChild = (SymbolicPage) page; assertEquals(childPage, symChild.getRealPage()); }
private HtmlSlimTestSystem createHtmlSlimTestSystem(Descriptor descriptor) throws IOException { SlimCommandRunningClient slimClient = new SlimClientBuilder(descriptor) .withFastTest(fastTest) .withManualStart(manualStart) .withRemoteDebug(remoteDebug) .build(); HtmlSlimTestSystem testSystem = new HtmlSlimTestSystem(descriptor.getTestSystemName(), slimClient, testSystemListener); return testSystem; }
public void testCommandPatternJavaWithDebug() throws Exception { String pageText = "!define TEST_SYSTEM {slim}\n"; WikiPage page = makeTestPage(pageText); WikiPageDescriptor descriptor = new WikiPageDescriptor(page, false, true, ""); MockClientBuilder clientBuilder = new MockClientBuilder(descriptor); String sep = System.getProperty("path.separator"); String prefix = join(clientBuilder.getCommandPattern()); assertTrue(prefix.contains("java")); assertTrue(prefix.contains(" -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -cp \"fitnesse.jar" + sep + "%p\" %m")); }
private MultipleTestsRunner createTestRunner(List<WikiPage> pages, FitNesseContext context) { final PagesByTestSystem pagesByTestSystem = new PagesByTestSystem(pages, context.root); MultipleTestsRunner runner = new MultipleTestsRunner(pagesByTestSystem, context.testSystemFactory, context.variableSource); runner.setRunInProcess(debugMode); return runner; }
public void testMissingPageDoesNotGetCreated() throws Exception { request.setResource("MissingPage"); responder.makeResponse(FitNesseUtil.makeTestContext(root), request); assertFalse(root.hasChildPage("MissingPage")); }
public void oneFunctionCallToShowThatLaterImportsTakePrecedence() throws Exception { statements.add(0, Arrays.asList("i2", "import", getTestClassPath() + ".testSlimInThisPackageShouldNotBeTheOneUsed")); statements.add(Arrays.asList("id", "call", "testSlim", "returnString")); expectedResults.add(0, Arrays.asList("i2", "OK")); respondsWith(Arrays.asList(Arrays.asList("id", "string"))); }
public Float convert(String value, Class<? extends Float> type, ResourceBundle bundle) { if (isNullOrEmpty(value)) { return null; } try { return Float.valueOf(value);
public void shouldForwardToTheRightDefaultValue() throws Exception { Result result = mock(Result.class); PageResult pageResult = new DefaultPageResult(request, response, methodInfo, resolver, proxifier); when(result.use(PageResult.class)).thenReturn(pageResult); when(container.instanceFor(TheComponent.class)).thenReturn(new TheComponent(result)); when(resolver.pathFor(argThat(sameMethodAs(TheComponent.class.getDeclaredMethod("method"))))).thenReturn("controlled!"); when(request.getRequestDispatcher(anyString())).thenThrow(new AssertionError("should have called with the right method!")); doReturn(dispatcher).when(request).getRequestDispatcher("controlled!"); methodInfo.setResourceMethod(DefaultResourceMethod.instanceFor(MyComponent.class, MyComponent.class.getDeclaredMethod("base"))); logicResult.forwardTo(TheComponent.class).method(); }
public void testGetInputStream(boolean useSecureClient) throws Exception { init(useSecureClient); serverSideSocket.getInputStream(); assertFalse(serverSideSocket.isModeKnown()); }
public void wrongNumberOfColumns() throws Exception { makeDecisionTableAndBuildInstructions( "|DT:fixture|argument|\n" +
public void writeHead(String pageType) throws Exception { htmlPage = buildHtml(pageType); htmlPage.main.use(HtmlPage.BreakPoint); htmlPage.divide(); writeData(htmlPage.preDivision + makeSummaryPlaceHolder().html()); if (xmlFormatter != null) xmlFormatter.writeHead(pageType);
private String getInstructionsFromClient() throws IOException { int instructionLength = Integer.parseInt(reader.read(6)); reader.read(1); String instructions = reader.read(instructionLength); return instructions; }
public void shouldThrowExceptionWhenAnUnsupportedEncodingExceptionOccurs() throws Exception { EncodingInterceptor interceptor = new EncodingInterceptor(request, response); doThrow(new UnsupportedEncodingException()).when(request).setCharacterEncoding(anyString()); interceptor.intercept(stack, method, resourceInstance); }
public void enableLocalSessions(boolean flag) { LOG.info("Local sessions " + (flag ? "enabled" : "disabled")); localSessionsEnabled = flag; }
String getTitle(); String getText();
protected Class<SubsetQueryTable> queryTableClass() { return SubsetQueryTable.class; }
public Response makeResponse(FitNesseContext context, Request request) throws FileNotFoundException { InputStreamResponse response = new InputStreamResponse(); determineLastModifiedInfo(); if (isNotModified(request)) return createNotModifiedResponse(); else { response.setBody(requestedFile); setContentType(requestedFile, response); response.setLastModifiedHeader(lastModifiedDateString); } return response; }
KeeperException.Code handleAuthentication(ServerCnxn cnxn, byte authData[]);  boolean matches(String id, String aclExpr);  boolean isAuthenticated();  boolean isValid(String id); }
public void shouldRegisterInterceptorsOnRegistry() throws Exception { mockery.checking(new Expectations() { { one(interceptorRegistry).register(InterceptorA.class); } }); handler.handle(InterceptorA.class); mockery.assertIsSatisfied(); }
private double compareCellsInRow(int row) { double score = 0; int table1Cols = table1.getColumnCountInRow(row); int table2Cols = table2.getColumnCountInRow(row); int minNumberOfCols = Math.min(table1Cols, table2Cols); for (int col = 0; col < minNumberOfCols; col++) score += calculateScoreForCell(row, col); score = score / (table1Cols + table2Cols); return score; }
public List<Message> validate(Object bean, Class<?>... groups) { if (bean == null) { logger.warn(SKIP_VALIDATION_INPUT_NULL); return emptyList(); } final Set<ConstraintViolation<Object>> violations = validator.validate(bean, groups); logger.debug(VIOLATIONS_AT_BEAN, violations.size(), bean); return getMessages(violations); }
private Responder makeErrorMessageResponder(String message) throws Exception { return new ErrorResponder("Cannot rename " + makeLink(qualifiedName) + " to " + newName + "<br/>" + message); }
private void insertSetUpTearDownPageGroup(String setUpAndTearDownGroupKey, LinkedList<WikiPage> pageGroup) throws Exception { insertSetUpForThisGroup(setUpAndTearDownGroupKey); insertPagesOfThisGroup(pageGroup); insertTearDownForThisGroup(setUpAndTearDownGroupKey); }
private static FileItemFactory createFactoryForDiskBasedFileItems(File temporaryDirectory) {
public T execute(RequestInfo request, final int counter) { return provider.provideForRequest(request, new Execution<T>() { public T insideRequest(Container secondContainer) {
public void waitsForNewValue() { final ConcurrentBoolean waitFlag = new ConcurrentBoolean(); final ConcurrentBoolean resultFlag = new ConcurrentBoolean(); Thread waitingThread = new Thread(new Runnable() { public void run() { waitFlag.waitFor(true); resultFlag.set(true); } }); waitingThread.start(); waitFlag.set(true); resultFlag.waitFor(true); assertTrue(resultFlag.isTrue()); }
public void reportLatency(long latency) { sum.addAndGet(latency); int bucketIndex; if (latency >= numBuckets) { bucketIndex = (int) numBuckets - 1; } else { bucketIndex = (int) latency; } latencyBuckets[bucketIndex].incrementAndGet(); }
private String msgAtLeastOneTest(String pageName, TestSummary summary) { return MessageFormat.format("at least one test executed in {0}\n{1}", pageName, summary.toString());
Result evaluationMessage(String actual, String expected) { this.actual = actual; this.expected = expected; Result evaluationMessage; if (isExceptionMessage(actual)) evaluationMessage = new PlainResult(expected, makeExeptionMessage(actual)); else evaluationMessage = createEvaluationMessage(actual, expected); this.evaluationMessage = evaluationMessage; return evaluationMessage; }
public void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException { router.add(new Routes() { { routeFor("/clients/add").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null); } }); assertThat(router.parse("/clients/add", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method( "add", Dog.class)))); assertThat(router.parse("/clients/add", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method( "add", Dog.class)))); mockery.assertIsSatisfied(); }
public void openIntervalComparison() throws Exception { assertExpectationMessage(" 2.1 < _ < 5.9", "4.3", "!style_pass(!<2.1<4.3<5.9>!)"); assertExpectationMessage(" 2.1 < _ < 5.9", "2.1", "!style_fail(!<2.1<2.1<5.9>!)"); assertExpectationMessage(" 2.1 < _ < 5.9", "8.3", "!style_fail(!<2.1<8.3<5.9>!)"); }
public void send(PubSubResponse response, DeliveryCallback callback); public void close(); }
void validateSession(ServerCnxn cnxn, long clientId, int timeout) throws IOException, InterruptedException { ByteArrayOutputStream baos = new ByteArrayOutputStream(); DataOutputStream dos = new DataOutputStream(baos); dos.writeLong(clientId); dos.writeInt(timeout); dos.close(); QuorumPacket qp = new QuorumPacket(Leader.REVALIDATE, -1, baos .toByteArray(), null); pendingRevalidations.put(clientId, cnxn); ZooLog.logTextTraceMessage("To validate session " + Long.toHexString(clientId), ZooLog.SESSION_TRACE_MASK); writePacket(qp); }
public NameEntry createExcludesFile() { return task.createExcludesFile(); }
public Response expected(String actual, String expected) { return failMessage(actual, String.format("expected [%s]", expected)); }
public void manyInputsAndRows() throws Exception { makeTables( "!|scenario|login|user name|password|password|pin|pin|\n" + "|login|@userName|with password|@password|and pin|@pin|\n" + "\n" + "!|script|\n" + "|login|bob|password|xyzzy|pin|7734|\n" + "|login|bill|password|yabba|pin|8892|\n" ); List<Object> expectedInstructions = list( list("scriptTable_id_0/scriptTable_s_id_0", "call", "scriptTableActor", "loginWithPasswordAndPin", "bob", "xyzzy", "7734"), list("scriptTable_id_1/scriptTable_s_id_0", "call", "scriptTableActor", "loginWithPasswordAndPin", "bill", "yabba", "8892") ); assertEquals(expectedInstructions, instructions); }
private String testResultsToWikiText(PageData pageData, TableScanner tableScanner) throws Exception { String wikiText = tableScanner.toWikiText() + "!* Standard Output\n\n" + slimRunner.getOutput() + "*!\n" + "!* Standard Error\n\n" + slimRunner.getError() + "*!\n"; return wikiText; }
public Map<String, Object> values() { Map<String, Object> m = new LinkedHashMap<>(); for (Map.Entry<String, AvgMinMaxPercentileCounter> entry : counters.entrySet()) { m.putAll(entry.getValue().values()); } return m; }
protected ZKWatchManager defaultWatchManager() { myWatchManager = new MyWatchManager(getClientConfig().getBoolean(ZKClientConfig.DISABLE_AUTO_WATCH_RESET)); return myWatchManager; }
private void timeoutCopyToClipboard(String label, String text) { timeoutCopyToClipboard(label, text, false); }
public void haveContentFilter() throws Exception { testProperties.setProperty(ConfigurationParameter.CONTENT_FILTER.getKey(), TestContentFilter.class.getName()); ContentFilter filter = loader.loadContentFilter(); assertNotNull(filter); assertEquals(TestContentFilter.class, filter.getClass()); }
public Object convert(String value) { if (value == null || value.equals("")) { return null; } Class<? extends Enum> enumType = (Class<? extends Enum>) type; if (Character.isDigit(value.charAt(0))) { return resolveByOrdinal(value, enumType);
public void createSessionTracker() { sessionTracker = new LearnerSessionTracker(this, getZKDatabase().getSessionWithTimeOuts(), self.getId());
void shutdown();  void removeSession(long sessionId);  boolean isTrackingSession(long sessionId);  void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap();  long getLocalSessionCount(); boolean isLocalSessionsEnabled(); }
default List<Id> handleAuthentication(HttpServletRequest request, byte[] authData) { return new ArrayList<>(); }
public void kill() throws IOException { if (slimRunner != null) slimRunner.kill(); if (reader != null) reader.close(); if (writer != null) writer.close(); if (client != null) client.close();
public void scriptWithActor() throws Exception { buildInstructionsForWholeTable("|script|Bob|\n"); List<Object> expectedInstructions = list( list("scriptTable_id_0", "make", "scriptTableActor", "Bob") ); assertEquals(expectedInstructions, instructions); }
void setLastModificationTime(Date date); Date getCreationTime(); void setCreationTime(Date date); Date getLastAccessTime(); void setLastAccessTime(Date date); Date getExpiryTime(); void setExpiryTime(Date date); boolean expires(); void setExpires(boolean exp); long getUsageCount(); void setUsageCount(long count); Date getLocationChanged(); void setLocationChanged(Date date); }
public final String makeHttpHeaders() { if (!withHttpHeaders) return ""; if (status != 304) { addContentHeaders(); } StringBuffer text = new StringBuffer(); if (!Format.TEXT.contentType.equals(contentType)) { text.append("HTTP/1.1 ").append(status).append(" ").append( getReasonPhrase()).append(CRLF); makeHeaders(text); text.append(CRLF); } return text.toString(); }
Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public static long initializeNextSession(long id) { long nextSid; nextSid = (Time.currentElapsedTime() << 24) >>> 8; nextSid = nextSid | (id << 56); if (nextSid == EphemeralType.CONTAINER_EPHEMERAL_OWNER) { ++nextSid;
public void waitForClose(long timeoutMillis) { if (!closed.waitFor(true, timeoutMillis)) throw new RuntimeException("MockResponseSender could not be closed");
public void matchesScenarioWithMostArguments() throws Exception { SlimTestContextImpl testContext = new SlimTestContextImpl(); WikiPageUtil.setPageContents(root, "" + "!|scenario|Login user|name|\n" + "|should not get here|\n" + "\n" + "!|scenario|Login user|name|with password|password|\n" + "|login|@name|with|@password|\n" + "\n" + "!|script|\n" + "|Login user Bob with password xyzzy|\n"); TableScanner ts = new HtmlTableScanner(root.getHtml()); ScenarioTable st1 = new ScenarioTable(ts.getTable(0), "s1_id", testContext); ScenarioTable st2 = new ScenarioTable(ts.getTable(1), "s2_id", testContext); script = new ScriptTable(ts.getTable(2), "id", testContext); assertions.addAll(st1.getAssertions()); assertions.addAll(st2.getAssertions()); assertions.addAll(script.getAssertions()); List<CallInstruction> expectedInstructions = asList(new CallInstruction("scriptTable_id_0/scriptTable_s2_id_0", "scriptTableActor", "loginWith", new Object[]{"Bob", "xyzzy"})); assertEquals(expectedInstructions, instructions()); }
public void connectionLost(SocketAddress sa) {
public void testStandalone() throws Exception { ClientBase.setupTestEnv(); final int CLIENT_PORT = PortAssignment.unique(); ZooKeeperServerMainTest.MainThread main = new ZooKeeperServerMainTest.MainThread(CLIENT_PORT, false, null); main.start(); Assert.assertTrue("waiting for server being up", ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT)); queryAdminServer(JettyAdminServer.DEFAULT_PORT); main.shutdown(); Assert.assertTrue("waiting for server down", ClientBase.waitForServerDown("127.0.0.1:" + CLIENT_PORT,
protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); if (resultCode == KeePass.EXIT_LOCK) { setResult(KeePass.EXIT_LOCK); finish(); } KeePass.db.clear(); }
protected String read(File input) throws IOException { char chars[] = new char[(int)(input.length())]; FileReader in = new FileReader(input); in.read(chars); in.close(); return new String(chars); }
public <T> boolean that(String reason, T actual, Matcher<? super T> matcher) { if (!matcher.matches(actual)) { if (reason != null) { errors.add(reason); } else { Description description = new StringDescription(); description.appendDescriptionOf(matcher); errors.add(description.toString()); } return false; } return true; }
public void shouldConvertToZeroWhenNull() { assertThat(((Character) converter.convert(null, char.class, bundle)).charValue(), is(equalTo('\u0000'))); }
void runTests(TestPage pageToTest) throws IOException, InterruptedException;  boolean isSuccessfullyStarted();  void addTestSystemListener(TestSystemListener listener); }
boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public void setupForAuth() { throw new UnsupportedOperationException(); }
private MultiOperationRecord generateMultiTransaction(Iterable<Op> ops) {
public void doCell(Fixture fixture, Parse cell) throws Exception { String symbolName = cell.text(); String value = (String) Fixture.getSymbol(symbolName); if(value == null) fixture.exception(cell, new FitFailureException("No such symbol: " + symbolName));
private Map<Object, Object> castMap(final Object object) { if (object == null) { return new HashMap<Object, Object>(); } if (object instanceof Map<?,?>) { return (Map<Object, Object>) object ; } if (object instanceof String) { return new HashMap<Object, Object>() { @Override public String toString() { return object.toString(); } }; } throw new IllegalStateException("Some request parameter has the same name as a request attribute. " + "It shouldn't happen, please report this bug.");
public void shouldRemovePreviouslyRegisteredComponentIfRegisteringAgainInAnotherScope() { provider.register(Base.class, MyFirstImplementation.class); provider.register(Base.class,AppImplementation.class); Container container = provider.provideRequestContainer(webRequest); Base instance = container.instanceFor(Base.class); assertThat(instance.getClass(), is(typeCompatibleWith(AppImplementation.class))); }
String findParentPath(String targetName); Maybe<SourcePage> findIncludedPage(String pageName); Collection<SourcePage> getAncestors(); Collection<SourcePage> getChildren(); boolean hasProperty(String propertyKey); String getProperty(String propertyKey); }
public void setUp() throws Exception { System.setProperty("readonlymode.enabled", "true"); }
int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
private void performHostVerification( InetAddress inetAddress, X509Certificate certificate ) throws CertificateException { String hostAddress = ""; String hostName = ""; try { hostAddress = inetAddress.getHostAddress();
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException { for (Class<? extends Interceptor> type : Iterables.reverse(registry.all())) { stack.addAsNext(type); } stack.next(method, resourceInstance); }
public String formatExceptionResult() { if (exceptionResult.hasMessage()) { return String.format("%s <span class=\"%s\">%s</span>",
public boolean isNotUnderRevisionControl() { return true; }
public void next(ResourceMethod method, Object resourceInstance) throws IOException { if(nextInterceptor==interceptors.size()) { return; } InterceptorHandler handler = interceptors.get(nextInterceptor++); handler.execute(this, method, resourceInstance); }
public int getTickTime();  public int getMaxClientCnxnsPerHost();  public int getMinSessionTimeout();  public int getMaxSessionTimeout();  public int getInitLimit();  public int getSyncLimit();  public int getTick();  public String getState();  public String getQuorumAddress();  public int getElectionType();  public String getElectionAddress();  public String getClientAddress();  public String getLearnerType();  public long getConfigVersion();  public String getQuorumSystemInfo();  public boolean isPartOfEnsemble();  public boolean isLeader(); }
public void acceptOutputFirst(String output) throws Exception; public void testComplete(TestSummary testSummary) throws Exception; public void exceptionOccurred(Throwable e); }
protected Resource[] findAllClassPathResources(String location) throws IOException { logger.debug("XXXXXXX finding all " + location); return new Resource[]{new UrlResource(webinfClassesDirectory)}; }
public void registerTestSystemFactories(final TestSystemFactoryRegistry registrar) throws PluginException { forEachNamedObject(ConfigurationParameter.TEST_SYSTEMS, new KeyRegistrar<TestSystemFactory>() { @Override public void register(String key, Class<TestSystemFactory> clazz) {
ResourceAndMethodLookup lookupFor(Resource r);  String urlFor(Class<?> type, Method method, Object ...params); }
public void create() { factory = getAnnotationConfiguration().configure().buildSessionFactory(); }
abstract long getLastProposed();  abstract int getCurrentTick();  abstract int syncTimeout();  abstract int getTickOfNextAckDeadline();  abstract int getTickOfInitialAckDeadline();  abstract long getAndDecrementFollowerCounter();  abstract void processAck(long sid, long zxid, SocketAddress localSocketAddress);  abstract void touch(long sess, int to);  abstract void revalidateSession(QuorumPacket qp, LearnerHandler learnerHandler) throws IOException;  abstract void submitLearnerRequest(Request si);  abstract long startForwarding(LearnerHandler learnerHandler, long lastSeenZxid);  abstract long getQuorumVerifierVersion();  abstract String getPeerInfo(long sid);  abstract byte[] getQuorumVerifierBytes(); abstract QuorumAuthServer getQuorumAuthServer();  abstract void registerLearnerHandlerBean(LearnerHandler learnerHandler, Socket socket);  abstract void unregisterLearnerHandlerBean(LearnerHandler learnerHandler); }
public void helperWillFailTestsIfNoTestsAreExecuted() throws Exception{ try{ helper.assertSuitePasses("FitNesse.SuiteAcceptanceTests.SuiteSlimTests", "nonExistingFilter", null); } catch (AssertionError ae){ assertTrue(ae.getMessage().startsWith("at least one test")); } JavaFormatter formatter = JavaFormatter.getInstance("FitNesse.SuiteAcceptanceTests.SuiteSlimTests"); assertEquals(new HashSet<String>(), new HashSet<String>(formatter.getTestsExecuted()));
int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); }
public void shouldStripCarriageReturns() throws Exception { assertEquals("\n", StringUtil.stripCarriageReturns("\n")); assertEquals("\n", StringUtil.stripCarriageReturns("\n\r")); assertEquals("\n", StringUtil.stripCarriageReturns("\n\r\r\r\r\r")); assertEquals("\n", StringUtil.stripCarriageReturns("\r\n")); assertEquals("\n\n", StringUtil.stripCarriageReturns("\r\n\r\n\r\r\r")); assertEquals("This\nis\na\nset\nof\nlines.\n", StringUtil.stripCarriageReturns("This\n\ris\r\na\nset\r\n\rof\nlines.\n\r"));
public void makeDirectory(String path) throws IOException { if (!new File(path).mkdirs()) { throw new IOException("make directory failed: " + path);
public void testEmptySuitesForm() throws Exception { getContentFromSimplePropertiesPage(); assertSubString("Suites", content); assertSubString("<input type=\"text\" id=\"Suites\" name=\"Suites\" value=\"\"/>", content); }
public void registerCustomComponents(PicoContainer container, Scanner scanner) { container.getComponent(ResourceRegistrar.class).registerFrom(scanner); container.getComponent(InterceptorRegistrar.class).registerFrom(scanner); container.getComponent(ConverterRegistrar.class).registerFrom(scanner); container.getComponent(ComponentFactoryRegistrar.class).registerFrom(scanner); }
public void shouldSetMethodNotAllowedStatus() throws Exception { status.methodNotAllowed(EnumSet.of(HttpMethod.GET, HttpMethod.POST)); verify(response).setStatus(405); verify(response).addHeader("Allow", "GET, POST"); }
private void makeAttributeSelectionHtml(HtmlTag table, String propertyType, String[] attributes, List<String> selected) throws Exception { HtmlTag row = new HtmlTag("tr"); HtmlTag selection = new HtmlTag("select"); selection.addAttribute("name", propertyType); selection.addAttribute("id", propertyType); selection.addAttribute("multiple", "multiple"); selection.addAttribute("size", Integer.toString(attributes.length)); for (String attributeName : attributes) { HtmlTag option = new HtmlTag("option"); if (DON_T_CARE.equals(attributeName)) { option.addAttribute("value", IGNORED); } if (selected.contains(attributeName)) { option.addAttribute("selected", "selected"); } option.add(attributeName); selection.add(option); } row.add(makeRowCell(selection)); table.add(row); }
ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(StoreType t, String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  SASLMechsOperation saslMechs(OperationCallback cb);  SASLAuthOperation saslAuth(String[] mech, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  SASLStepOperation saslStep(String[] mech, byte[] challenge, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  Collection<Operation> clone(KeyedOperation op);  TapOperation tapBackfill(String id, long date, OperationCallback cb);  TapOperation tapCustom(String id, RequestMessage message, OperationCallback cb);  TapOperation tapAck(TapOpcode opcode, int opaque, OperationCallback cb);  TapOperation tapDump(String id, OperationCallback cb); }
public void NewParser() throws Exception { long start = System.currentTimeMillis(); String result = ParserTest.translateToHtml(new TestRoot().makePage("NewTest"), pageContent); System.out.println(System.currentTimeMillis() - start);
private void close(TxnIterator itr) { if (itr != null) { try {
public void shouldObeyPriorityOfRoutes() throws Exception { final Route first = mockery.mock(Route.class, "first"); final Route second = mockery.mock(Route.class, "second"); final Route third = mockery.mock(Route.class, "third"); final Sequence handle = mockery.sequence("invocation"); final Sequence allowed = mockery.sequence("allowed"); mockery.checking(new Expectations() { { allowing(first).getPriority(); will(returnValue(Path.HIGH)); allowing(second).getPriority(); will(returnValue(Path.DEFAULT)); allowing(third).getPriority(); will(returnValue(Path.LOW)); allowing(first).canHandle(with(any(String.class))); will(returnValue(false)); inSequence(handle); allowing(second).canHandle(with(any(String.class))); will(returnValue(false)); inSequence(handle); allowing(third).canHandle(with(any(String.class))); will(returnValue(true)); inSequence(handle); EnumSet<HttpMethod> get = EnumSet.of(HttpMethod.GET); allowing(first).allowedMethods(); will(returnValue(get)); inSequence(allowed); allowing(second).allowedMethods(); will(returnValue(get)); inSequence(allowed); allowing(third).allowedMethods(); will(returnValue(get)); inSequence(allowed); ignoring(anything()); } }); router.add(third); router.add(first); router.add(second); router.parse("anything", HttpMethod.GET, request); mockery.assertIsSatisfied(); }
public void html() throws Exception { StyleWidget widget = new StyleWidget(new MockWidgetRoot(), "!style_myStyle(wow zap)"); assertEquals("<span class=\"myStyle\">wow zap</span>", widget.render()); }
public void testClearSign() throws Exception { final InputStream ring = getClass().getClassLoader().getResourceAsStream("org/vafer/gpg/secring.gpg"); assertNotNull(ring); String input = "TEST1\n-TEST2 \n \nTEST3\n"; final String expectedOutputStr = "-----BEGIN PGP SIGNED MESSAGE-----\n" + "Hash: SHA1\n" + "\n" + "TEST1\n" + "- -TEST2\n" + "\n" + "TEST3\n" + "-----BEGIN PGP SIGNATURE-----\n" + "Version: BCPG v1.50\n" + "\n" + "iEYEARECABAFAkax1rgJEHM9pIAuB02PAABIJgCghFmoCJCZ0CGiqgVLGGPd/Yh5\n" + "FQQAnRVqvI2ij45JQSHYJBblZ0Vv2meN\n" + "=aAAT\n" + "-----END PGP SIGNATURE-----\n"; final byte[] expectedOutput = expectedOutputStr.getBytes("UTF-8"); final ByteArrayOutputStream os = new ByteArrayOutputStream(); PGPSigner signer = new PGPSigner(ring, "2E074D8F", "test"); signer.clearSign(input, os); final byte[] output = fixCRLF(os.toByteArray()); final int from = expectedOutputStr.indexOf("iEYEAREC"); final int until = expectedOutputStr.indexOf("=aAAT") + 5; Arrays.fill(output, from, until, (byte) '?'); Arrays.fill(expectedOutput, from, until, (byte) '?'); assertEquals(new String(expectedOutput), new String(output)); }
public void testHtmlAtTopLevelPage() throws Exception { crawler.addPage(root, PathParser.parse("TestPage")); WidgetRoot wroot = new WidgetRoot(new PagePointer(root, PathParser.parse("TestPage"))); AliasLinkWidget w = new AliasLinkWidget(wroot, "[[tag][TestPage]]"); String html = w.render(); assertEquals("<a href=\"TestPage\">tag</a>", html); }
public static String send4LetterWord(String hp, String cmd) throws IOException { String split[] = hp.split(":"); String host = split[0]; int port = Integer.parseInt(split[1]); Socket sock = new Socket(host, port); BufferedReader reader = null; try { OutputStream outstream = sock.getOutputStream();
public void testSetUpAndTearDown() throws Exception { WikiPage setUp = WikiPageUtil.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = WikiPageUtil.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); ArrayList<WikiTestPage> testPages = MakeTestPageList(); surrounder.surroundGroupsOfTestPagesWithRespectiveSetUpAndTearDowns(testPages); assertEquals(3, testPages.size()); assertEquals(setUp, testPages.get(0).getSourcePage()); assertEquals(testPage, testPages.get(1).getSourcePage()); assertEquals(tearDown, testPages.get(2).getSourcePage()); }
public void testLoadChildrenWhenPageIsDeletedManualy() throws Exception { WikiPage page = WikiPageUtil.addPage(root, PathParser.parse("TestPage")); page.getChildren(); FileUtil.deleteFileSystemDirectory(((FileSystemPage) page).getFileSystemPath()); try { page.getChildren();
void transitionWriteItem();  Operation getCurrentReadOp();  Operation removeCurrentReadOp();  Operation getCurrentWriteOp();  Operation removeCurrentWriteOp();  boolean hasReadOp();  boolean hasWriteOp();  void addOp(Operation op);  void insertOp(Operation o);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  boolean isAuthenticated();  long lastReadDelta();  void completedRead();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); MemcachedConnection getConnection(); void setConnection(MemcachedConnection connection); }
public void actionPerformed(ActionEvent e) { int result = fileChooser .showOpenDialog(ZooInspectorNodeViewersDialog.this); if (result == JFileChooser.APPROVE_OPTION) { try {
private LevelState assertLevelState( String input, LevelState previous, Level expectedLevel, String expectedUntilContains) throws Exception { LevelState back = LogProcessorUtils.levelStateOf(input, previous); assertEquals(expectedLevel, back.level); assertEquals(expectedUntilContains, back.untilContains); return back; }
public Integer convert(String value, Class type, List<ValidationMessage> errors, ResourceBundle bundle) { return null; }
public Date convert(String value, Class<? extends Date> type, List<ValidationMessage> errors, ResourceBundle bundle) { if (value == null || value.equals("")) { return null; } Locale locale = jstlWrapper.findLocale(request); if (locale == null) { locale = Locale.getDefault(); } DateFormat format = DateFormat.getDateInstance(DateFormat.SHORT, locale); try { return format.parse(value);
public boolean equals(Object object) { if (!(object instanceof ImageNameGraphic)) return false;
Summary getSummary(String name, DetailLevel detailLevel);  SummarySet getSummarySet(String name, DetailLevel detailLevel); }
private void createSymbolicLink(String symbolicLinkName, String pageOneName) throws Exception { final String pageTwoName = "PageTwo"; final WikiPage pageOne = root.addChildPage(pageOneName); root.addChildPage(pageTwoName); final PageData data = pageOne.getData(); final WikiPageProperties properties = data.getProperties(); final WikiPageProperty symLinks = getSymLinkProperty(properties); symLinks.set(symbolicLinkName, pageTwoName); pageOne.commit(data); }
public static KeyStoreFileType fromPropertyValue(String propertyValue) { if (propertyValue == null || propertyValue.length() == 0) { return null; } return KeyStoreFileType.valueOf(propertyValue.toUpperCase()); }
public String toHtml() { if (secondResponse != null) { return response.toHtml() + secondResponse.toHtml(); } else if (response != null) { return contents + " " + response.toHtml(); } return contents; }
public void setUp() throws Exception { xmlizer = new PageXmlizer(); root = InMemoryPage.makeRoot("RooT"); crawler = root.getPageCrawler(); }
public void produce( DataConsumer receiver ) throws IOException { boolean hasDestDir = !Utils.isNullOrEmpty(destDir); for (String fileName : files) { File f = new File(fileName);
public void ignoresGetters() { final ResourceClass resource = mockery.resource(MyResource.class); List<Route> rules = parser.rulesFor(resource); assertThat(rules, not(hasRouteMatching("/MyResource.getValue.logic"))); mockery.assertIsSatisfied(); }
public void doesLoadVersionResourceFile() { FitNesseVersion version = new FitNesseVersion(); assertTrue(version.toString().startsWith("v")); assertFalse(version.toString().endsWith("\n")); }
TranscodeService.Task<T> task = new TranscodeService.Task<T>(new Callable<T>() { public T call() { return tc.decode(cachedData); } }); if (tc.asyncDecode(cachedData)) {
public static void appendString(final StringBuffer buf, final String s) { buf.append('\"'); for (int i = 0; i < s.length(); ++i) { char c = s.charAt(i); if (c == '\n') { buf.append("\\n"); } else if (c == '\r') { buf.append("\\r"); } else if (c == '\\') { buf.append("\\\\"); } else if (c == '"') { buf.append("\\\""); } else if (c < 0x20 || c > 0x7f) { buf.append("\\u"); if (c < 0x10) { buf.append("000"); } else if (c < 0x100) { buf.append("00"); } else if (c < 0x1000) { buf.append('0'); } buf.append(Integer.toString(c, 16)); } else { buf.append(c); } } buf.append('\"'); }
private Map<String, Object> parseHeaders(StreamReader reader) throws IOException { HashMap<String, Object> headers = new HashMap<String, Object>(); String line = reader.readLine(); while (!"".equals(line)) { Matcher match = headerPattern.matcher(line); if (match.find()) { String key = match.group(1); String value = match.group(2); headers.put(key.toLowerCase(), value); } line = reader.readLine(); } return headers; }
private boolean isDateFormatOption(String option) { return option.equals("-t") || option.equals("-xml");
void appendChildTable(int row, Table table); void setTestStatusOnRow(int row, ExecutionResult testStatus); void setName(String tableName); void setCell(int col, int row, Result response); void appendToCell(int col, int row, Result response); }
private void attemptToReadPropertiesFile(File file, PageData data, long lastModifiedTime) throws Exception { InputStream input = null; try { final WikiPageProperties props = new WikiPageProperties();
public void setup() throws NoSuchMethodException { this.mockery = new Mockery(); this.info = mockery.mock(MethodInfo.class); this.stack = mockery.mock(InterceptorStack.class); }
public boolean exec() throws CliException { byte[] b = null; if (args.length >= 3) { b = args[2].getBytes(UTF_8); } zk.addAuthInfo(args[1], b); return false; }
public String makeHtml(FitNesseContext context) throws Exception { WikiPage page = pageData.getWikiPage(); HtmlPage html = context.htmlPageFactory.newPage(); WikiPagePath fullPath = page.getPageCrawler().getFullPath(page); String fullPathName = PathParser.render(fullPath); html.title.use(fullPathName); html.header.use(HtmlUtil.makeBreadCrumbsWithCurrentPageNotLinked(fullPathName)); html.actions.use(HtmlUtil.makeActions(pageData)); SetupTeardownIncluder.includeInto(pageData); String contentHtml = generateHtml(pageData); html.main.use(HtmlUtil.addHeaderAndFooter(page, contentHtml)); handleSpecialProperties(html, page, fullPathName); return html.html(); }
public void makeFile(String path, InputStream content) throws IOException { ByteArrayOutputStream buf = new ByteArrayOutputStream(); FileUtil.copyBytes(content, buf); makeFile(path, buf.toString()); }
protected WikiPagePath clone() { WikiPagePath clone = new WikiPagePath(); clone.names = (LinkedList<String>) names.clone(); clone.mode = mode; return clone; }
public void instantiatesUsingTheContainerAndAddsTheExecutionInterceptors() throws NoSuchMethodException, IOException, ServletException { final String url = "custom_url"; mockery.checking(new Expectations() { { one(router).urlFor(MyComponent.class, MyComponent.class.getDeclaredMethod("base")); will(returnValue(url)); one(request).getRequestDispatcher(url); RequestDispatcher dispatcher = mockery.mock(RequestDispatcher.class); will(returnValue(dispatcher)); one(dispatcher).forward(request, response); } }); logicResult.forwardTo(MyComponent.class).base(); mockery.assertIsSatisfied(); }
protected abstract String mapReceptorClassName(); protected abstract String mapConstructorClassName(); private void assertConvertsTo(String string, List<Object> list) { assertEquals("true", statementExecutor.call(MY_INSTANCE, "setMap", string)); assertEquals(list, statementExecutor.call(MY_INSTANCE, "query", new Object[] {})); Object created = statementExecutor.create(OTHER_INSTANCE, mapConstructorClassName(), new Object[] {string}); assertEquals("OK", created); assertEquals(list, statementExecutor.call(OTHER_INSTANCE, "query", new Object[] {})); } @Test public void fromEmptyString_shouldCreateEmptyMap() throws Exception { assertConvertsTo("", list()); } @Test public void fromGarbageString_shouldCreateEmptyMap() throws Exception { assertConvertsTo("sdfwewdfsdfwefsdfsdfswe", list()); } @Test public void fromEmptyTable_shouldCreateEmptyMap() throws Exception { assertConvertsTo("<table></table>", list()); } @Test public void fromTableWithNoColumns_shouldCreateEmptyMap() throws Exception { assertConvertsTo("<table><tr></tr><tr></tr></table>", list()); } @Test public void fromTableWithOneColumn_shouldCreateEmptyMap() throws Exception { assertConvertsTo("<table><tr><td>0</td></tr></table>", list()); } @Test public void fromTableWithMoreThanTwoColumns_shouldCreateEmptyMap() throws Exception { assertConvertsTo( "<table>" + "<tr>" + " <td>0</td>" + " <td>0</td>" + " <td>0</td>" + "</tr>" + "</table>", list()); } @Test public void fromTableWithTwoColumnsAndOneRow_shouldCreateMapWithOneEntry() throws Exception { assertConvertsTo( "<table>" + "<tr>" + " <td>name</td>" + " <td>Bob</td>" + "</tr>" + "</table>", list(list("name", "Bob"))); } @Test public void fromTableWithTwoColumnsAndTwoRows_shouldCreateMapWithTwoEntries() throws Exception { assertConvertsTo( "<table>" + "<tr>" + " <td>name</td>" + " <td>Bob</td>" + "</tr>" + "<tr>" + " <td>address</td>" + " <td>here</td>" + "</tr>" + "</table>", list(list("address", "here"), list("name", "Bob"))); } @Test public void fromTwoValidTables_shouldCreateEmptyMap() throws Exception { assertConvertsTo( "<table>" + "<tr>" + " <td>name</td>" + " <td>Bob</td>" + "</tr>" + "</table>" + "<table>" + "<tr>" + " <td>name</td>" + " <td>Bob</td>" + "</tr>" + "</table>", list()); } }
public static void uninstall() { Table.symbolType.removeDecorator(INSTANCE); isInstalled = false; }
public void testCurrentFrameNeverExceedsTen() throws Exception { rollMany(20,0); assertEquals(10, g.currentFrame()); }
public Set entrySet() { if (entrySet == null) { entrySet = new ReferenceEntrySet(this); } return entrySet; }
public void testNullAndBlankStrings() throws Exception { Fixture fixture = new Fixture(); assertNull(fixture.parse("null", String.class)); assertEquals("", fixture.parse("blank", String.class)); TypeAdapter adapter = new TypeAdapter(); assertEquals("null", adapter.toString((String) null)); assertEquals("blank", adapter.toString("")); }
public Integer launchFitNesse(ContextConfigurator contextConfigurator) throws Exception { configureLogging("verbose".equalsIgnoreCase(contextConfigurator.get(LOG_LEVEL))); loadPlugins(contextConfigurator.get(ConfigurationParameter.ROOT_PATH)); if (contextConfigurator.get(COMMAND) != null) { contextConfigurator.withTestSystemListener(exitCodeListener); } FitNesseContext context = contextConfigurator.makeFitNesseContext(); logStartupInfo(context); update(context); if ("true".equalsIgnoreCase(contextConfigurator.get(INSTALL_ONLY))) { return null; } return launch(context); }
public void shouldUsePicoContainerAsDefaultProvider() throws ServletException { mockery.checking(new Expectations() { { one(context).getInitParameter(BasicConfiguration.CONTAINER_PROVIDER); will(returnValue(null)); } }); MatcherAssert.assertThat(config.getProvider().getClass(), Matchers.is(Matchers .typeCompatibleWith(PicoProvider.class))); mockery.assertIsSatisfied(); }
public String runTestsAndGenerateHtml(PageData pageData) throws IOException, InterruptedException { String html = pageData.getHtml(); if (html.length() == 0) client.send(emptyPageContent); else client.send(html); return html; }
private Object createRoot(ResourceMethod method, List<Message> errors, ResourceBundle bundle) { return createViaOgnl(method, errors, bundle); }
private static int fullRead(FileChannel fc, ByteBuffer bb) throws IOException { int total = 0; while(bb.remaining() > 0) { int rc = fc.read(bb); if (rc <= 0) { return total; } total += rc; } return total; }
static private int CountLines(String s) { if(s == null) { return 0; } return s.split("\r\n|\r|\n").length; }
public void shouldSend404WhenNoIdIsSet() throws Exception { when(provider.parameterNamesFor(method.getMethod())).thenReturn(new String[] {"entity"}); when(request.getParameter("entity.id")).thenReturn(null); when(session.getSessionFactory()).thenReturn(sessionFactory); when(sessionFactory.getClassMetadata(any(Class.class))).thenReturn(classMetadata); when(classMetadata.getIdentifierPropertyName()).thenReturn("id"); when(classMetadata.getIdentifierType()).thenReturn(type); when(type.getReturnedClass()).thenReturn(Long.class); interceptor.intercept(stack, method, instance); verify(request, never()).setAttribute(eq("entity"), any()); verify(result).notFound(); verify(stack, never()).next(method, instance); }
public GetlOperation getl(String key, int exp, GetlOperation.Callback cb) { return new GetlOperationImpl(key, exp, cb); }
public ArrayList<Object> queryAsArrayList() { ArrayList<Object> list = new ArrayList<Object>();
public void setup() throws NoSuchMethodException { this.mockery = new Mockery(); this.provider = mockery.mock(ParametersProvider.class); this.parameters =mockery.mock(MethodParameters.class); }
public void testInvalidSnapshot() throws Exception { ZooKeeper zk = createClient(); try { for (int i = 0; i < 2000; i++) { zk.create("/invalidsnap-" + i, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); } } finally { zk.close(); } NIOServerCnxnFactory factory = (NIOServerCnxnFactory)serverFactory; stopServer();
public void testGetSslHandshakeDetectionTimeoutMillisProperty() { X509Util x509Util = new ClientX509Util(); Assert.assertEquals( X509Util.DEFAULT_HANDSHAKE_DETECTION_TIMEOUT_MILLIS, x509Util.getSslHandshakeTimeoutMillis()); try { String newPropertyString = Integer.toString(X509Util.DEFAULT_HANDSHAKE_DETECTION_TIMEOUT_MILLIS + 1);
public static void assertScans(String expected, Scanner scanner) { StringBuilder result = new StringBuilder(); while (true) { scanner.moveNext(); if (scanner.isEnd()) break; if (result.length() > 0) result.append(","); Token current = scanner.getCurrent(); String name = current.getClass().getSimpleName(); result.append(name); String string = current.toString(); if (!string.contains(name)) result.append("=").append(string); } assertEquals(expected, result.toString()); }
public void config() { this.mockery = new Mockery(); this.context = mockery.mock(ServletContext.class); this.config = new BasicConfiguration(context); }
private Method method(String name, Class... types) { try { return MyControl.class.getDeclaredMethod(name, types);
public void testBuildDataWithFileSet() throws Exception { DataBuilder builder = new DataBuilder(new NullConsole()); Project project = new Project(); project.setCoreLoader(getClass().getClassLoader()); project.init(); FileSet fileset = new FileSet(); fileset.setDir(new File(getClass().getResource("deb/data").toURI())); fileset.setIncludes("**/*"); fileset.setProject(project); StringBuilder md5s = new StringBuilder(); builder.buildData(Arrays.asList(new DataProducer[]{new DataProducerFileSet(fileset)}), new File("target/data.tar"), md5s, Compression.GZIP); assertTrue("empty md5 file", md5s.length() > 0); assertFalse("windows path separator found", md5s.indexOf("\\") != -1); }
String scalaLibraryArtifactId() throws Exception; String scalaCompilerArtifactId() throws Exception; }
String[] list(File path); String getContent(File file) throws IOException; InputStream getInputStream(File file) throws IOException; void delete(File path); long lastModified(File file); }
public void testSetQuota() throws IOException, InterruptedException, KeeperException, MalformedPathException { final ZooKeeper zk = createClient(); String path = "/c1"; String nodeData = "foo"; zk.create(path, nodeData.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); int count = 10; long bytes = 5L; SetQuotaCommand.createQuota(zk, path, bytes, count);
private void testSerializeDeserialize(StreamMode mode, String fileSuffix) throws IOException { SnapStream.setStreamMode(mode);
protected void constructFixture() { String tableHeader = table.getCellContents(0, 0); String fixtureName = getFixtureName(tableHeader); String disgracedFixtureName = Disgracer.disgraceClassName(fixtureName); constructInstance(getTableName(), disgracedFixtureName, 0, 0); }
public static Predicate<Interceptor> accepts(final ResourceMethod method) { return new Predicate<Interceptor>() { public boolean apply(Interceptor interceptor) {
public void shouldIgnoreCollapsedTables() throws Exception { String table1text = "<table><tr><td>has collapsed table</td></tr><tr class=\"scenario-detail\"><td><table><tr><td>bleh1</td></tr></table></td></tr></table>"; String table2text = "<table><tr><td>has collapsed table</td></tr><tr class=\"scenario-detail\"><td><table><tr><td>HAHA</td></tr></table></td></tr></table>"; Table table1 = (new HtmlTableScanner(table1text)).getTable(0); Table table2 = (new HtmlTableScanner(table2text)).getTable(0); double score = comparer.compareTables(table1, table2); assertEquals(HistoryComparer.MAX_MATCH_SCORE, score, .01 ); assertTrue(comparer.theTablesMatch(score)); }
public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) { testSystemFullName = testSystemName; testSummariesId = "test-system-" + testSystemName; String tag = String.format("<h3>%s</h3>\n<ul id=\"%s\"></ul>", testSystemName, testSummariesId); HtmlTag insertScript = HtmlUtil.makeAppendElementScript(TEST_SUMMARIES_ID, tag); writeData(insertScript.html());
public void evaluateExpectation(Object returnValue) { Result evaluationMessage = null; if (returnValue == null) { evaluationMessage = new PlainResult(originalContent, ignore("Test not run")); } else { String value; value = returnValue.toString(); evaluationMessage = evaluationMessage(value, originalContent); } if (evaluationMessage != null) table.setCell(col, row, evaluationMessage);
protected void evaluateReturnValues(Map<String, Object> returnValues) throws Exception { Object queryReturn = returnValues.get(queryId); if (queryId == null || queryReturn == null || (queryReturn instanceof String)) { table.appendToCell(0, 0, fail("Query fixture has no valid query method")); return; } scanRowsForMatches(ListUtility.uncheckedCast(Object.class, queryReturn)); }
public Maybe<Symbol> parse(Symbol current, Parser parser) { return new Maybe<>(current); }
public Maybe<Symbol> parse(Symbol current, Parser parser) { Symbol next = parser.moveNext(1); if (!next.isType(WikiWord.symbolType)) return Symbol.nothing; return new Maybe<Symbol>(current.add(next)); }
private HtmlSlimTestSystem createHtmlSlimTestSystem(Descriptor descriptor) throws IOException { SlimCommandRunningClient slimClient = new SlimClientBuilder(descriptor) .withFastTest(fastTest) .withManualStart(manualStart) .withRemoteDebug(remoteDebug) .build(); ExecutionLogListener listener = new ExecutionLogListener(slimClient.getCommandRunner(), testSystemListener); log.add(descriptor.getTestSystemName(), listener.getExecutionLog()); HtmlSlimTestSystem testSystem = new HtmlSlimTestSystem(descriptor.getTestSystemName(), slimClient, testSystemListener); return testSystem; }
public void testShouldReportErrorMsgIfAddOperationFails() throws Exception { final String errorMsg = "Cannot add files to Revision Control"; revisionController.add(contentAndPropertiesFilePathFor(FS_PARENT_PAGE)); expectLastCall().andThrow(new RevisionControlException(errorMsg)); replay(revisionController); createPage(FS_PARENT_PAGE); request.setResource(FS_PARENT_PAGE); invokeResponderAndCheckSuccessStatus(); assertSubString(errorMsg, response.getContent()); }
public void onCreateMenu(ContextMenu menu, ContextMenuInfo menuInfo) { menu.add(0, MENU_OPEN, 0, R.string.menu_open); if (!readOnly) { menu.add(0, MENU_DELETE, 0, R.string.menu_delete);
<T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key, int hold); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
public Maybe<String> render(Scanner scanner) { HtmlTag table = new HtmlTag("table"); table.addAttribute("border", "1"); table.addAttribute("cellspacing", "0"); while (true) { HtmlTag row = new HtmlTag("tr"); table.add(row); while (true) { String body = new Translator().translate(scanner, new CellDelimiterToken()); if (scanner.isEnd()) return Maybe.noString; HtmlTag cell = new HtmlTag("td", body); row.add(cell); if (scanner.getCurrent().toString().indexOf("\n") > 0) break; } if (scanner.getCurrent().toString().indexOf("\n|") < 0) break; } return new Maybe<String>(table.html()); }
public void shouldGetAScoreBackFromCompareTables() throws Exception { String table1text = "<table><tr><td>x</td></tr></table>"; Table table1 = (new HtmlTableScanner(table1text)).getTable(0); String table2text = "<table><tr><td>x</td></tr></table>"; Table table2 = (new HtmlTableScanner(table2text)).getTable(0); double score = HistoryComparer.compareTables(table1,table2); assertEquals(1.2,score, .01); }
public void testMultiReqAfterShutdown() throws Exception { client.shutdown(); try { Map<String, ?> m=client.getBulk("k1", "k2", "k3");
public T execute() throws Exception; } public static <T> T profile(Operation<T> op, long timeout, String message) throws Exception { long start = System.currentTimeMillis(); T res = op.execute(); long end = System.currentTimeMillis(); if (end - start > timeout) { LOG.warn("Elapsed "+(end - start) + " ms: " + message); } return res; } }
protected void setUp() throws Exception { super.setUp(); tu=new TranscoderUtils(true); }
public void processResult(int rc, String path, Object ctx, String name, Stat stat); }  @InterfaceAudience.Public interface StringCallback extends AsyncCallback {  public void processResult(int rc, String path, Object ctx, String name); }  @InterfaceAudience.Public interface VoidCallback extends AsyncCallback {  public void processResult(int rc, String path, Object ctx); }  @InterfaceAudience.Public interface MultiCallback extends AsyncCallback {  public void processResult(int rc, String path, Object ctx, List<OpResult> opResults); } }
public Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) { try { String path = context.getContextPath();
public void allTestingCompleteShouldSetTotalRunTimeOnReport() throws Exception { FitNesseContext context = mock(FitNesseContext.class); WikiPage page = new WikiPageDummy("name", "content"); SuiteExecutionReportFormatter formatter = new SuiteExecutionReportFormatter(context, page); TimeMeasurement totalTimeMeasurement = new TimeMeasurement().start(); formatter.announceNumberTestsToRun(0); while (totalTimeMeasurement.elapsed() == 0) { Thread.sleep(50); } formatter.allTestingComplete(totalTimeMeasurement); assertThat(formatter.suiteExecutionReport.getTotalRunTimeInMillis(), is(totalTimeMeasurement.elapsed()));
public void checkHistoryForSimpleSlimTable() throws Exception { ensureXmlResultFileDoesNotExist(new TestSummary(1, 0, 0, 0)); doSimpleRun(simpleSlimDecisionTable()); Document xmlFromFile = getXmlFromFileAndDeleteFile(); xmlChecker.assertXmlHeaderIsCorrect(xmlFromFile); assertHasRegexp("<td><span class=\"pass\">wow</span></td>", Utils.unescapeHTML(results)); }
public static String makeSlimMessage(String msg, String tag){ StringBuilder sb = new StringBuilder(); sb.append(SlimVersion.PRETTY_PRINT_TAG_START); if (tag != null && !tag.isEmpty()) { sb.append(tag);
public String ignore(String s) { return String.format("!style_ignore(%s)", s); }
private String doMakeHtml(String resource, FitNesseContext context, boolean firstTimeForNewPage) { HtmlPage html = context.htmlPageFactory.newPage(); String title = firstTimeForNewPage ? "Page doesn't exist. Edit " : "Edit "; html.setTitle(title + resource + ":"); html.setPageTitle(new PageTitle(title + " Page:", PathParser.parse(resource))); html.setMainTemplate("editPage"); makeEditForm(html, resource, firstTimeForNewPage, context.defaultNewPageContent); return html.html(); }
public void pageHasStandardInAndOutSectionsAndCommandLine() throws Exception { getResultsForPageContents(""); assertTrue(testResults.indexOf("!*> Standard Output\n\n") != -1); assertTrue(testResults.indexOf("!*> Standard Error\n\n") != -1); assertTrue(testResults.indexOf("java -cp classes fitnesse.slim.SlimService") != -1); }
public void endRecord(String tag) throws IOException { char c = (char) stream.read(); if (tag == null || "".equals(tag)) { if (c != '\n' && c != '\r') { throw new IOException("Error deserializing record."); } else { return; } } if (c != '}') { throw new IOException("Error deserializing "+tag); } c = (char) stream.read(); if (c != ',') { stream.unread(c); } return; }
public void testNoSearchStringBringsUpNoResults() throws Exception { String content = getResponseContentUsingSearchString(""); assertSubString("Found 0 results for your search.", content); }
public int read(byte[] b) throws IOException { return delegate.read(b); }
public Boolean convert(String value, Class type, ResourceBundle bundle) { if (value == null) { return null; } return Boolean.valueOf(value); }
public void ifListenerIsSet_AllTestingCompleteFiresAllTestingComplete() throws Exception{ jf.setListener(listener); WikiPage page=buildNestedTestPage(); TimeMeasurement totalTimeMeasurement = new TimeMeasurement().start().stop(); jf.allTestingComplete(totalTimeMeasurement); verify(listener).allTestingComplete(same(totalTimeMeasurement)); }
private boolean isFilePath(String linkPath) { return linkPath.startsWith("file:"); }
String getName(); String getMessage(); boolean shouldBeApplied() throws IOException; void doUpdate() throws IOException; }
public void uncaughtException(Thread t, Throwable e) { LOG.error("Thread {} died", t, e); }
public void parsesIncludes() throws Exception { assertParses("!include PageTwo\n", "SymbolList[Include[Text, WikiWord, Style[Text]]]"); assertParses("|!include PageTwo|\n", "SymbolList[Table[SymbolList[SymbolList[Include[Text, WikiWord, Style[Text]]]]]]"); assertParses("!include PageTwo", "SymbolList[Include[Text, WikiWord, Style[Text]]]"); assertParses("!include -c PageTwo", "SymbolList[Include[Text, WikiWord, Style[Text]]]"); assertParses("!include <PageTwo", "SymbolList[Include[Text, WikiWord, Style[Text]]]"); assertParses("!include <PageTwo>", "SymbolList[Include[Text, WikiWord, Style[Text]], Text]"); assertParses("!include -setup PageTwo", "SymbolList[Include[Text, WikiWord, Style[Text]]]"); assertParses("!include -teardown PageTwo", "SymbolList[Include[Text, WikiWord, Style[Text]]]"); assertParses("!include -h PageTwo", "SymbolList[Include[Text, WikiWord, Style[Text]]]"); }
public void testAutoCreateDb() throws IOException { File tmpDir = ClientBase.createEmptyTestDir(); File dataDir = new File(tmpDir, "data"); File snapDir = new File(tmpDir, "data_txnlog"); Assert.assertTrue("cannot create data directory", dataDir.mkdir()); Assert.assertTrue("cannot create snapshot directory", snapDir.mkdir()); File initFile = new File(dataDir, "initialize"); Assert.assertFalse("initialize file already exists", initFile.exists()); String priorAutocreateDbValue = System.getProperty(FileTxnSnapLog.ZOOKEEPER_DB_AUTOCREATE); Map<Long, Integer> sessions = new ConcurrentHashMap<>(); attemptAutoCreateDb(dataDir, snapDir, sessions, priorAutocreateDbValue, "false", -1L); attemptAutoCreateDb(dataDir, snapDir, sessions, priorAutocreateDbValue, "true", 0L); Assert.assertTrue("cannot create initialize file", initFile.createNewFile()); attemptAutoCreateDb(dataDir, snapDir, sessions, priorAutocreateDbValue, "false", 0L); }
public boolean touch(long sess, int to) { return sessionTracker.touchSession(sess, to); }
public void shouldNotComplainAboutNull() { assertThat(converter.convert(null, BigInteger.class, bundle), is(nullValue())); }
StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(StoreType t, String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  Collection<Operation> clone(KeyedOperation op); }
public DERObject toASN1Object() { return new DERTaggedObject(false, tagNo, obj); }
public void endMap(TreeMap<?,?> v, String tag) throws IOException; }
public void testStartupWithStart_SocketAlreadyBound() throws IOException { assertThrows(SocketException.class, () -> { factory.start();
private String destinationPath(WikiPage page) { String pagePath = page.getFullPath().toString().replace(".", HTML_PATH_SEPARATOR); return destinationPath(pagePath); }
protected final void addStart(final String name, final Attributes attrs) { try { h.startElement("", name, name, attrs);
public void testAdHash() throws Exception{ List<Long> bucket1 = generateRandomHashes(50); List<Long> bucket2 = generateRandomHashes(3); List<Long> bucket3 = generateRandomHashes(30); List<Long> bucket4 = generateRandomHashes(10); List<Long> bucket5 = generateRandomHashes(5);
public void shouldNotIncludeTheAttributeWhenTheValueIsNull() throws Exception { result.include(null); verify(request, never()).setAttribute(anyString(), anyObject()); }
public void onLastLocalUnsubscribe(final ByteString topic) {
public void reset() { System.arraycopy(IV, 0, cbcV, 0, IV.length); Arrays.fill(cbcNextV, (byte)0); cipher.reset(); }
public void testFinalCounts() throws Exception { formatter.acceptFinalCount(finalCounts); Document doc = getXmlDoc(); NodeList finalCountsList = doc.getElementsByTagName("finalCounts"); assertEquals(1, finalCountsList.getLength()); Element finalCountElement = (Element) finalCountsList.item(0); checkCounts(finalCounts, finalCountElement); }
public void deleteIllegalPath() { assertThrows(IllegalArgumentException.class, () -> { this.pathTrie.deletePath("");
public void testClasspath() throws Exception { WikiPage root = InMemoryPage.makeRoot("RooT"); WikiPage page = WikiPageUtil.addPage(root, PathParser.parse("ClassPath"), "!path 123\n!path abc\n"); String paths = builder.getClasspath(page); assertTrue(paths.contains("123")); assertTrue(paths.contains("abc")); }
public SignatureVisitor visitExceptionType() { buf.append('^'); return this; }
public static void addTextNode(Document document, Element element, String tagName, String value) { if(value != null && !(value.equals(""))) {
public void teardown() throws IOException { removeResultsDirectory(); }
long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
private void registerRulesFor(Class<?> type) { RoutesParser parser = new PathAnnotationRoutesParser(router); List<Route> rules = parser.rulesFor(mockery.resource(type)); for (Route route : rules) { router.add(route);
public void ReInit(SimpleCharStream stream) { jjmatchedPos = jjnewStateCnt = 0; curLexState = defaultLexState; input_stream = stream; ReInitRounds(); }
protected void processWord( byte[] in, int inOff) {
private Object paramFor(String[] names, String path, Object[] values) throws InterceptionException { String param = path; if (param.indexOf(".") != -1) { param = param.substring(param.indexOf(".")); } param= Info.capitalize(param); for (int i = 0; i < names.length; i++) { if (names[i].equals(param)) { return values[i]; } } throw new InterceptionException("Unable to find param for hibernate validator: '" + path + "'"); }
public boolean shouldBeApplied() throws Exception { if (super.shouldBeApplied()) return true;
public void setParentForVariables(WikiPage parent); public WikiPage addChildPage(String name) throws Exception; public boolean hasChildPage(String name) throws Exception; public WikiPage getChildPage(String name) throws Exception; public void removeChildPage(String name) throws Exception; public List<WikiPage> getChildren() throws Exception; public String getName() throws Exception; public PageData getData() throws Exception; public PageData getDataVersion(String versionName) throws Exception; public VersionInfo commit(PageData data) throws Exception; public PageCrawler getPageCrawler();
public void testAddFailWhenPageAlreadyHasChild() throws Exception { WikiPage symlink = pageOne.addChildPage("SymLink"); symlink.commit(symlink.getData()); request.addInput("linkName", "SymLink"); request.addInput("linkPath", "PageTwo"); Response response = responder.makeResponse(FitNesseUtil.makeTestContext(root), request); assertEquals(412, response.getStatus()); String content = ((SimpleResponse) response).getContent(); assertSubString("already has a child named SymLink", content); assertSubString("Error Occured", content); }
public void testStop() throws Exception { formatter.setExecutionLogAndTrackingId("2", new CompositeExecutionLog(root.addChildPage("ErrorLogs"))); formatter.announceNumberTestsToRun(1); formatter.newTestStarted(page); formatter.testComplete(page, new TestSummary(4, 1, 0, 0), null); formatter.allTestingComplete(null);
public static void deleteFileSystemDirectory(File current) throws IOException { File[] children = current.listFiles(); if (children != null) { for (File child : children) { deleteFileSystemDirectory(child); } } deleteFile(current); }
public void testExpandedOrCollapsedOrInvisible() throws Exception { CollapsableWidget widget = new CollapsableWidget(new MockWidgetRoot(), "!* title\ncontent\n*!"); assertTrue(widget.expanded); assertFalse(widget.invisible); widget = new CollapsableWidget(new MockWidgetRoot(), "!*> title\ncontent\n*!"); assertFalse(widget.expanded); assertFalse(widget.invisible);
public AnnotationVisitor visitAnnotation( final String desc, final boolean visible) { if (!ClassReader.ANNOTATIONS) { return null; } ByteVector bv = new ByteVector();
private ByteBuffer voteGeneric(ArrayList<ByteBuffer> list, int threshold){ HashMap<ByteBuffer, Integer> map = new HashMap<ByteBuffer, Integer>(); for(ByteBuffer bb : list){ if(!map.containsKey(bb)){ map.put(bb, new Integer(0)); } else LOG.debug("Not equal"); if(bb != null) map.put(bb, map.get(bb) + 1); if(map.get(bb) >= threshold) return bb; } return null; }
boolean shouldOptimize();  int getReadBufSize();  HashAlgorithm getHashAlg();  long getMaxReconnectDelay();  AuthDescriptor getAuthDescriptor();  int getTimeoutExceptionThreshold();  MetricType enableMetrics();  MetricCollector getMetricCollector();  long getAuthWaitTime(); }
public void setUp() throws InterruptedException, IOException { createSlimService(); slimClient = new SlimCommandRunningClient(new MockCommandRunner(new CompositeExecutionLogListener()), "localhost", 8099, 1, SlimCommandRunningClient.MINIMUM_REQUIRED_SLIM_VERSION, true, "fitnesse.socketservice.SslParametersWiki"); statements = new ArrayList<Instruction>(); slimClient.connect(); }
private void serviceThread() { running = true; while (running) { try {
public static MBeanServerConnection conn() throws IOException { return cc.getMBeanServerConnection(); }
public synchronized void close() throws Exception { closed = true; notify(); }
public void allTestingComplete(TimeMeasurement totalTimeMeasurement) throws IOException { for (BaseFormatter formatter : formatters) { formatter.allTestingComplete(totalTimeMeasurement);
public void testOrphansAreRemoved() throws Exception { performImportWithExtraLocalPages(); assertFalse(localRoot.hasChildPage("PageThree")); assertFalse(pageOne.hasChildPage("ChildTwo")); assertFalse(childPageOne.hasChildPage("GrandChildOne")); assertFalse(localRoot.hasChildPage("PageThatDoesntImport")); assertTrue(localRoot.hasChildPage("OtherImportRoot")); }
protected void run(Fixture fixture, Parse table) { Table t = new Table(table); try { table = t.incrementColumnValuesByDelta(columnName, delta); } catch (InvalidInputException e) {
DeleteOperation delete(String key, OperationCallback operationCallback);  FlushOperation flush(int delay, OperationCallback operationCallback);  GetOperation get(String key, GetOperation.Callback callback);  GetsOperation gets(String key, GetsOperation.Callback callback);  GetOperation get(Collection<String> value, GetOperation.Callback cb);  MutatorOperation mutate(Mutator m, String key, int by, long def, int exp, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(StoreType t, String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  Collection<Operation> clone(KeyedOperation op); }
boolean addWatch(String path, Watcher watcher);  default boolean addWatch(String path, Watcher watcher, WatcherMode watcherMode) { if (watcherMode == WatcherMode.DEFAULT_WATCHER_MODE) { return addWatch(path, watcher); } throw new UnsupportedOperationException();
protected Object handleGetObject(String key) { return value; }
public void takeSnapshot(){ try { txnLogFactory.save(dataTree, sessionsWithTimeouts);
String getWikiWord() throws Exception { return expandPrefix(getText()); }
public <T> OperationFuture<Boolean> touch(final String key, final int exp, final Transcoder<T> tc) { final CountDownLatch latch = new CountDownLatch(1); final OperationFuture<Boolean> rv = new OperationFuture<Boolean>(key, latch, operationTimeout); Operation op = opFact.touch(key, exp, new OperationCallback() { public void receivedStatus(OperationStatus status) { rv.set(status.isSuccess(), status); } public void complete() { latch.countDown(); } }); rv.setOperation(op); addOp(key, op); return rv; }
protected void performExecution() throws IOException, InterruptedException { SuiteFilter filter = createSuiteFilter(request, page.getPageCrawler().getFullPath().toString()); SuiteContentsFinder suiteTestFinder = new SuiteContentsFinder(page, filter, root); MultipleTestsRunner runner = newMultipleTestsRunner(suiteTestFinder.getAllPagesToRunForThisSuite()); runner.executeTestPages(); }
public String getStartedTime();  public String[] getEphemeralNodes();  public long getPacketsReceived();  public long getPacketsSent();  public long getOutstandingRequests();  public int getSessionTimeout();  public void terminateSession();  public void terminateConnection(); }
public String acceptResults(String relativePageName, Counts counts) throws Exception { switchCssSuffix(); HtmlTag mainDiv = HtmlUtil.makeDivTag("alternating_row_" + cssSuffix); mainDiv.add(HtmlUtil.makeSpanTag("test_summary_results " + cssClassFor(counts), counts.toString())); HtmlTag link = HtmlUtil.makeLink("#" + relativePageName, relativePageName); link.addAttribute("class", "test_summary_link"); mainDiv.add(link); pageCounts.tallyPageCounts(counts); return mainDiv.html(2); }
public void testRemoteUrlNotFound() throws Exception { String remoteUrl = baseUrl + "PageDoesntExist"; Response response = makeSampleResponse(remoteUrl); String content = new MockResponseSender(response).sentData(); assertSubString("The remote resource, " + remoteUrl + ", was not found.", content); }
private Description suiteDescription() { return getDescriptionFactory().createSuiteDescription(getMainClass()); }
public void shouldNotComplainAboutNull() { assertThat(converter.convert(null, long.class), is(nullValue())); }
public Collection<MatchedResult> scoreMatches(int tableRow) { Collection<MatchedResult> result = new ArrayList<MatchedResult>(); for (QueryResultRow row : rows) { MatchedResult match = scoreMatch(table, tableRow, row); if (match.score > 0) result.add(match); } return result; }
public void testLE() throws Exception { int count = 30; int baseport= 33003; HashMap<Long,QuorumServer> peers = new HashMap<Long,QuorumServer>(count); ArrayList<LEThread> threads = new ArrayList<LEThread>(count); File tmpdir[] = new File[count]; int port[] = new int[count]; votes = new Vote[count]; for(int i = 0; i < count; i++) { peers.put(Long.valueOf(i), new QuorumServer(i, new InetSocketAddress("127.0.0.1", baseport+100+i))); tmpdir[i] = File.createTempFile("letest", "test"); port[i] = baseport+i; } LeaderElection le[] = new LeaderElection[count]; leaderDies = true; boolean allowOneBadLeader = leaderDies; for(int i = 0; i < le.length; i++) { QuorumPeer peer = new QuorumPeer(peers, tmpdir[i], tmpdir[i], port[i], 0, i, 2, 2, 2); peer.startLeaderElection(); le[i] = new LeaderElection(peer); LEThread thread = new LEThread(le[i], peer, i); thread.start(); threads.add(thread); } for(int i = 0; i < threads.size(); i++) { threads.get(i).join(15000); if (threads.get(i).isAlive()) { fail("Threads didn't join"); } } long id = votes[0].id; for(int i = 1; i < votes.length; i++) { if (votes[i] == null) {
protected abstract String getCommandPattern(); protected abstract String getTestRunner(); protected abstract String getTestSystemName(); }
public void canAccessGenericTypeAndMethodRoute() throws NoSuchMethodException { this.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesCreator(), provider, creator); router.add(new Routes() {{ routeFor("--(*)--(*)").is(type("br.com.caelum.vraptor.http.route.{1}"), method("{2}")); }}); ResourceMethod resourceMethod = router.parse("--MyResource--notAnnotated", HttpMethod.GET, request); assertThat(resourceMethod.getMethod(), is(equalTo(MyResource.class.getDeclaredMethod("notAnnotated")))); String url = router.urlFor(MyResource.class, resourceMethod.getMethod(), new Object[] {}); assertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(resourceMethod.getMethod()))); mockery.assertIsSatisfied(); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); FitClientResponderTest.buildSuite(root); FitNesseUtil.startFitnesse(root); port = FitNesseUtil.port; outputBytes = new ByteArrayOutputStream(); runner = new TestRunner(new PrintStream(outputBytes)); }
boolean saveChallenge(long tag, long challenge) { Long l = challengeMutex.get(tag); synchronized (challengeMap) { challengeMap.put(tag, challenge); challengeMutex.remove(tag); } if (l != null) { synchronized (l) { l.notify(); } } return true; }
public boolean onCreateOptionsMenu(Menu menu) { super.onCreateOptionsMenu(menu); menu.add(0, MENU_LOCK, 0, R.string.menu_lock); menu.findItem(MENU_LOCK).setIcon(android.R.drawable.ic_lock_lock); menu.add(0, MENU_SEARCH, 0, R.string.menu_search); menu.findItem(MENU_SEARCH).setIcon(android.R.drawable.ic_menu_search); return true; }
public PwDatabaseV4 openDatabase(InputStream inStream, String password, InputStream keyInputStream) throws IOException, InvalidDBException { return openDatabase(inStream, password, keyInputStream, new UpdateStatus(), 0); }
private void verify(String cmd, String expected) throws IOException { String resp = sendRequest(cmd, 0); LOG.info("cmd " + cmd + " expected " + expected + " got " + resp); Assert.assertTrue(resp.contains(expected)); }
public void testAssertionVerified(Assertion assertion, TestResult testResult); public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); public void testComplete(WikiTestPage test, TestSummary testSummary) throws IOException; public void testSystemStopped(TestSystem testSystem, ExecutionLog executionLog, Throwable cause); }
public void testVersionsExpire() throws Exception { PageVersionPruner.daysTillVersionsExpire = 3; PageData data = page.makePageData(); Set<VersionInfo> versions = data.getVersions(); for (VersionInfo version : versions) page.removeVersion(version.toString()); data.getProperties().setLastModificationTime(dateFormat().parse("20031213000000")); page.makeVersion(data); data.getProperties().setLastModificationTime(dateFormat().parse("20031214000000")); page.makeVersion(data); data.getProperties().setLastModificationTime(dateFormat().parse("20031215000000")); page.makeVersion(data); data.getProperties().setLastModificationTime(dateFormat().parse("20031216000000")); page.makeVersion(data); versions = page.makePageData().getVersions(); PageVersionPruner.pruneVersions(page, versions); versions = page.makePageData().getVersions(); assertEquals(3, versions.size()); List<VersionInfo> versionsList = new LinkedList<VersionInfo>(versions); Collections.sort(versionsList); assertTrue(versionsList.get(0).toString().endsWith("20031214000000")); assertTrue(versionsList.get(1).toString().endsWith("20031215000000")); assertTrue(versionsList.get(2).toString().endsWith("20031216000000")); }
public void testNoPathOption() throws Exception { assertTrue(runner.usingDownloadedPaths); String request = runner.makeHttpRequest(); assertSubString("includePaths", request); runner.args(new String[]{"-nopath", "blah", "80", "blah"}); assertFalse(runner.usingDownloadedPaths); request = runner.makeHttpRequest(); assertNotSubString("includePaths", request); }
int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
public void simpleInputAndOutputPassing() throws Exception { makeTables( "!|scenario|echo|input|giving|output|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|script|\n" + "|echo|7|giving|7|\n" ); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("scriptTable_id_0/scriptTable_s_id_0", "7") ) ); evaluateExpectations(pseudoResults); String scriptTable = script.getChild(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output], [check, echo, 7, pass(7)]]"; assertEquals(expectedScript, scriptTable); String dtHtml = script.getTable().toString(); assertEquals(1, script.getTestSummary().getRight()); assertEquals(0, script.getTestSummary().getWrong()); assertEquals(0, script.getTestSummary().getIgnores()); assertEquals(0, script.getTestSummary().getExceptions()); }
public void pageHistoryShouldHaveStatsForOneTestIfOnePageHistoryFileIsPresent() throws Exception { File pageDirectory = addPageDirectory("TestPage"); addTestResult(pageDirectory, "20090418123103_1_2_3_4"); TestHistory history = new TestHistory(resultsDirectory); PageHistory pageHistory = history.getPageHistory("TestPage"); assertEquals(1, pageHistory.size()); assertEquals(7, pageHistory.maxAssertions()); SortedSet<Date> dates = pageHistory.datesInChronologicalOrder(); assertEquals(1, dates.size()); Date date = dateFormat.parse("20090418123103"); assertEquals(date, dates.first()); PageHistory.PassFailBar passFailBar = pageHistory.getPassFailBar(date, 50); assertEquals(1, passFailBar.getPass()); assertEquals(6, passFailBar.getFail()); assertEquals(7, passFailBar.getPassUnits()); assertEquals(43, passFailBar.getFailUnits()); }
public void handleLine(String line) { if(cb != null) { assert line.startsWith("VERSION "); cb.receivedStatus(line.substring("VERSION ".length())); } transitionState(State.COMPLETE); }
public void getsChildren() { TestRoot root = new TestRoot(); WikiPage page = root.makePage("PageOne"); root.makePage(page, "PageTwo"); root.makePage(page, "PageThree"); WikiSourcePage source = new WikiSourcePage(page); ArrayList<String> names = new ArrayList<>(); for (SourcePage child: source.getChildren()) names.add(child.getName()); assertEquals(2, names.size()); assertTrue(names.contains("PageTwo")); assertTrue(names.contains("PageThree")); }
private void createSlimService(String args) throws Exception { while (!tryCreateSlimService(args)) Thread.sleep(10);
void testComplete(PageType testPage, TestSummary testSummary) throws IOException; void testSystemStopped(TestSystem testSystem, Throwable cause ); void testAssertionVerified(Assertion assertion, TestResult testResult); void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); }
public void testInvokesAllInterceptorsInItsCorrectOrder() throws IOException, InterceptionException { DefaultInterceptorStack stack = new DefaultInterceptorStack(null); CountInterceptor first = new CountInterceptor(); CountInterceptor second = new CountInterceptor(); stack.add(first); stack.add(second); stack.next(null, null); assertThat(first.run, is(equalTo(0))); assertThat(second.run, is(equalTo(1))); }
public boolean acceptAgrs(String[] args) throws Exception { if(args.length < 1) return false; try {
public void testForNoWarningOnIntendedRelativePath() { VerifyingFileFactory vff = new VerifyingFileFactory.Builder(log).warnForRelativePath().build(); vff.create("./an/intended/relative/path");
public void testSortDataDirAscending() { File[] files = new File[5]; files[0] = new File("foo.10027c6de"); files[1] = new File("foo.10027c6df"); files[2] = new File("bar.10027c6dd"); files[3] = new File("foo.10027c6dc"); files[4] = new File("foo.20027c6dc"); File[] orig = files.clone(); List<File> filelist = Util.sortDataDir(files, "foo", true); Assert.assertEquals(orig[2], filelist.get(0)); Assert.assertEquals(orig[3], filelist.get(1)); Assert.assertEquals(orig[0], filelist.get(2)); Assert.assertEquals(orig[1], filelist.get(3)); Assert.assertEquals(orig[4], filelist.get(4)); }
String getQuorumAddress();  String getLastQueuedZxid();  int getPendingRevalidationCount();  long getElectionTimeTaken();  int getObserverMasterPacketSizeLimit();  void setObserverMasterPacketSizeLimit(int sizeLimit);  int getMaxConcurrentSnapSyncs();  void setMaxConcurrentSnapSyncs(int maxConcurrentSnapSyncs);  int getMaxConcurrentDiffSyncs();  void setMaxConcurrentDiffSyncs(int maxConcurrentDiffSyncs); }
long getServerId(); } long createSession(int sessionTimeout);  boolean addGlobalSession(long id, int to);  boolean addSession(long id, int to);  boolean touchSession(long sessionId, int sessionTimeout);  void setSessionClosing(long sessionId);  void shutdown();  void removeSession(long sessionId);  boolean isTrackingSession(long sessionId);  public void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  public void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap(); }
public void setup() { this.mockery = new Mockery(); this.mockLocaleProvider = mockery.mock(LocaleProvider.class); this.iogi = new Iogi(new NullDependencyProvider(), mockLocaleProvider); }
void readConnectResult() throws IOException { if (LOG.isTraceEnabled()) { StringBuffer buf = new StringBuffer("0x["); for (byte b : incomingBuffer.array()) { buf.append(Integer.toHexString(b) + ","); } buf.append("]"); LOG.trace("readConnectRestult " + incomingBuffer.remaining() + " " + buf.toString()); } ByteBufferInputStream bbis = new ByteBufferInputStream(incomingBuffer); BinaryInputArchive bbia = BinaryInputArchive.getArchive(bbis); ConnectResponse conRsp = new ConnectResponse(); conRsp.deserialize(bbia, "connect"); this.sessionId = conRsp.getSessionId(); sendThread.onConnected(conRsp.getTimeOut(), this.sessionId, conRsp.getPasswd());
private String makePageHtml(FitNesseContext context) { HtmlPage page = context.pageFactory.newPage(); page.setTitle("Merge " + resource); page.setPageTitle(new PageTitle("Merge Changes", PathParser.parse(resource))); page.setMainTemplate("mergePage"); page.put("editTime", SaveRecorder.timeStamp()); page.put("ticketId", SaveRecorder.newTicket()); page.put("oldContent", HtmlUtil.escapeHTML(existingContent)); page.put("newContent", newContent); addHiddenAttributes(page); return page.html(); }
public void convertedListQualifiesAsConvertedList() { assertTrue(qualifiesAsConvertedList("[a, b, c]")); assertTrue(qualifiesAsConvertedList(listContainingHashTable)); }
private DataNode convertDataNode(DataTree dt, DataNode parent, DataNodeV1 oldDataNode) { StatPersisted stat = convertStat(oldDataNode.stat); DataNode dataNode = new DataNode(oldDataNode.data, dt.convertAcls(oldDataNode.acl), stat); dataNode.setChildren(oldDataNode.children); return dataNode; }
public void testDelTree() throws Exception { WikiPage levelOne = crawler.addPage(root, PathParser.parse("LevelOne")); WikiPage levelTwo = crawler.addPage(levelOne, PathParser.parse("LevelTwo")); levelOne.commit(levelOne.getData()); levelTwo.commit(levelTwo.getData()); File childOne = new File(defaultPath + "/RooT/LevelOne"); File childTwo = new File(defaultPath + "/RooT/LevelOne/LevelTwo"); assertTrue(childOne.exists()); root.removeChildPage("LevelOne"); assertFalse(childTwo.exists()); assertFalse(childOne.exists()); }
public void shouldProxifyInterfaces() { Proxifier proxifier = new ObjenesisProxifier(); TheInterface proxy = proxifier.proxify(TheInterface.class, new MethodInvocation<TheInterface>() { public Object intercept(TheInterface proxy, Method method, Object[] args, SuperMethod superMethod) { return true; } }); assertTrue(proxy.wasCalled()); }
public String testSummary() { String summaryContent = (wasInterupted()) ? TESTING_INTERUPTED : ""; summaryContent += makeSummaryContent(); HtmlTag script = HtmlUtil.makeReplaceElementScript("test-summary", summaryContent); script.add("document.getElementById(\"test-summary\").className = \"" + cssClassFor(getAssertionCounts()) + "\";"); return script.html(); }
public void shutdown() { LOG.info("shutdown called", new Exception("shutdown Follower")); super.shutdown(); }
public void evaluateVariables(String[] names, VariableSource source) { if (variables == null) variables = new HashMap<>(names.length); for (String name: names) { Maybe<String> value = source.findVariable(name);
public void asyncAddEntry(byte[] data, AddCallback cb, Object ctx) throws InterruptedException, BKException { AddOp r = new AddOp(this, data, cb, ctx); qe.sendOp(r); }
@Test public void translatesPlainTextTables() throws Exception { ParserTestHelper.assertTranslatesTo("![\nstuff\n]!", "<table class=\"plain_text_table\">" + HtmlElement.endl +
private void pRequestHelper(Request request) throws RequestProcessorException { try { switch (request.type) {
public static boolean isNullOrEmpty(byte[] buf) { return (buf == null) || (buf.length == 0); }
SASLStepOperation saslStep(OperationCallback cb);  Collection<Operation> clone(KeyedOperation op); }
public void testExponent () throws Exception { EvaluatorWidget eval = new EvaluatorWidget(widgetRoot, "${=%d: 3^3 =}"); assertEquals("27", eval.render()); }
protected InstructionResult executeInternal(InstructionExecutor executor) throws SlimException { Object result = executor.callAndAssign(symbolName, instanceName, methodName, args); return new InstructionResult(getId(), result); }
public void duplicateMethod(double d) {}; public void realMethod() {}; public void someField(int i) {} public int realCheck() {return 0;} public void voidCheck() {} }
public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize(); }
public void testComplete_clones_TestSummary_Objects() throws Exception{ WikiPageDummy secondPage=new WikiPageDummy("SecondPage", null); secondPage.setParent(new WikiPageDummy("root", null)); TestSummary ts=new TestSummary(5,6,7,8); jf.testComplete(buildNestedTestPage(), ts); ts.right=11; ts.wrong=12; ts.ignores=13; ts.exceptions=14; jf.testComplete(new WikiTestPage(secondPage), ts); assertEquals(new TestSummary(5,6,7,8), jf.getTestSummary("ParentTest.ChildTest")); }
public void init() { for (Class<?> requiredType : applicationScoped.keySet()) { Class<?> type = applicationScoped.get(requiredType);
public Collection<VersionInfo> history(FileSystemPage page) throws Exception; public VersionInfo makeVersion(FileSystemPage page, PageData data) throws Exception; public void removeVersion(FileSystemPage page, String versionName) throws Exception; public void prune(FileSystemPage page) throws Exception; public boolean isExternalReversionControlEnabled(); }
private void mustMatchToken(int toMatch, String messageId) throws IOException, ParserException { if (!matchToken(toMatch)) { reportError(messageId);
public static char[] readSecret(final String pathToFile) { LOG.info("Reading secret from {}", pathToFile); try { final String secretValue = new String(
public void testRemoveAnyDataWatcher() throws Exception { zk1.create("/node1", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); MyWatcher w1 = new MyWatcher("/node1", 1); MyWatcher w2 = new MyWatcher("/node1", 2);
public FitClient build() { String testRunner = descriptor.getTestRunner(); String classPath = descriptor.getClassPath(); String command = buildCommand(descriptor.getCommandPattern(), testRunner, classPath); Map<String, String> environmentVariables = descriptor.createClasspathEnvironment(classPath); CommandRunningFitClient.CommandRunningStrategy runningStrategy = fastTest ? new CommandRunningFitClient.InProcessCommandRunner(testRunner) : new CommandRunningFitClient.OutOfProcessCommandRunner(command, environmentVariables); client = new CommandRunningFitClient(this, context.port, context.socketDealer, runningStrategy); return client; }
public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize(); }
public void write(int b) {
public void canProvideAllRequestScopedComponents() { List<Class<?>> components = Arrays.asList(HttpServletRequest.class, HttpServletResponse.class, RequestInfo.class, HttpSession.class, ParametersInstantiatorInterceptor.class, InterceptorListPriorToExecutionExtractor.class, URLParameterExtractorInterceptor.class, InterceptorStack.class, RequestExecution.class, ResourceLookupInterceptor.class, InstantiateInterceptor.class, Result.class, ExecuteMethodInterceptor.class, PageResult.class, ParametersProvider.class, MethodInfo.class, Validator.class, PathResolver.class, ForwardToDefaultViewInterceptor.class, LogicResult.class, MultipartInterceptor.class, DownloadInterceptor.class); checkAvailabilityFor(false, components); mockery.assertIsSatisfied(); }
public void testGetLeaderHostName() throws Exception { LeaderElectionSupport electionSupport = createLeaderElectionSupport(); electionSupport.start();
public void scanSingleMessage(ScanRequest request) { throw new RuntimeException("Not implemented"); }
public void register(Resource resource) { List<Rule> rules = routesParser.rulesFor(resource); logger.debug(String.format("registering rules for resource: %s. Rules: %s", resource, rules)); add(rules); }
public void name() { } } @Test public void shouldUseVRaptor3AlgorithmIfNotAVRaptor2Component() { final Resource resource = mockery.resource(NonVRaptorComponent.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("id", "name"), is(equalTo(new DefaultResourceAndMethodLookup(resource).methodFor( "id", "name")))); mockery.assertIsSatisfied(); } @Component static class MyResource { public static void ignorableStatic() { } protected void ignorableProtected() { } @Path("/findable") public void findable() { } } @Test public void ignoresNonPublicMethod() { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.ignorableStatic.logic", "ignorableStatic"), is(nullValue())); mockery.assertIsSatisfied(); } @Test public void ignoresStaticMethod() { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.ignorableProtected.logic", "ignorableProtected"), is(nullValue())); mockery.assertIsSatisfied(); } @Test public void returnsNullIfNothingFound() { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.unfindable.logic", "unfindable"), is(nullValue())); mockery.assertIsSatisfied(); } @Test public void returnsTheCorrectDefaultResourceMethodIfFound() throws SecurityException, NoSuchMethodException { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.findable.logic", "findable"), is(VRaptorMatchers.resourceMethod(MyResource.class.getMethod("findable")))); mockery.assertIsSatisfied(); } }
public void commit(long zxid) { synchronized(this){ lastCommitted = zxid; } QuorumPacket qp = new QuorumPacket(Leader.COMMIT, zxid, null, null); sendPacket(qp); }
public void testMatch() throws Exception {  RowFixture fixture = new TestRowFixture(); TypeAdapter arrayAdapter = TypeAdapter.on(fixture, BusinessObject.class.getMethod("getStrings", new Class[0])); Binding binding = new Binding.QueryBinding(); binding.adapter = arrayAdapter; fixture.columnBindings = new Binding[]{binding}; List<BusinessObject> computed = new LinkedList<BusinessObject>(); computed.add(new BusinessObject(new String[]{"1"})); LinkedList<Parse> expected = new LinkedList<Parse>(); expected.add(new Parse("tr", "", new Parse("td", "1", null, null), null)); fixture.match(expected, computed, 0); assertEquals("right", 1, fixture.counts.right); assertEquals("exceptions", 0, fixture.counts.exceptions); assertEquals("missing", 0, fixture.missing.size()); assertEquals("surplus", 0, fixture.surplus.size()); }
public void testPageWasRenamed() throws Exception { String originalName = "OneOne"; WikiPagePath originalPath = PathParser.parse(originalName); String renamedName = "WonWon"; WikiPagePath renamedPath = PathParser.parse(renamedName); crawler.addPage(root, originalPath, "Content"); assertTrue(crawler.pageExists(root, originalPath)); assertFalse(crawler.pageExists(root, renamedPath)); doRename(originalName, renamedName, true); assertTrue(crawler.pageExists(root, renamedPath)); assertFalse(crawler.pageExists(root, originalPath)); }
String getSymbol(String symbolName); void setSymbol(String symbolName, String value); void addScenario(String scenarioName, ScenarioTable scenarioTable); ScenarioTable getScenario(String scenarioName); ScenarioTable getScenarioByPattern(String invokingString); Collection<ScenarioTable> getScenarios(); void incrementPassedTestsCount(); void incrementFailedTestsCount(); void incrementErroredTestsCount(); void incrementIgnoredTestsCount(); void increment(ExecutionResult testSummary); void increment(TestSummary testSummary); TestPage getPageToTest(); void setCurrentScriptClass(Class<? extends ScriptTable> currentScriptClass); Class<? extends ScriptTable> getCurrentScriptClass(); void setCurrentScriptActor(String currentScriptActor); String getCurrentScriptActor(); }
protected String createEvaluationMessage(String value, String originalValue) { setSymbol(symbolName, value); return String.format("$%s<-[%s]", symbolName, table.literalize(value)); }
public void testSuiteWithTagWithIntersect() throws Exception { SuiteFilter filter = new SuiteFilter(null, null, "good, better", null); WikiPage goodSuite = crawler.addPage(root, PathParser.parse("MySuite"), "the suite"); PageData data = goodSuite.getData(); data.setAttribute("Suite"); data.setAttribute(PageData.PropertySUITES, "good, better"); goodSuite.commit(data); WikiPage goodSuiteTest = addTestPage(goodSuite, "GoodTest", "Good Test"); assertTrue(filter.getFilterForTestsInSuite(goodSuite).isMatchingTest(goodSuiteTest)); assertFalse(filter.getFilterForTestsInSuite(root).isMatchingTest(goodSuiteTest)); }
void handleRead(ByteBuffer data);  MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to);  void timeOut();  boolean isTimedOut();  boolean isTimedOut(long ttlMillis);  boolean isTimedOutUnsent();  long getWriteCompleteTimestamp(); }
public static String generateHtml(String state, String titleText, String bodyText) { long id = nextId++; HtmlTag outerBlock = new HtmlTag("div"); outerBlock.addAttribute("class", "collapse_rim"); HtmlTag floatRight = new HtmlTag("div"); floatRight.addAttribute("style", "float: right;"); floatRight.addAttribute("class", "meta"); HtmlTag expand = new HtmlTag("a", "Expand All"); expand.addAttribute("href", "javascript:expandAll();"); floatRight.add(expand); floatRight.add(" | "); HtmlTag collapse = new HtmlTag("a", "Collapse All"); collapse.addAttribute("href", "javascript:collapseAll();"); floatRight.add(collapse); outerBlock.add(floatRight); HtmlTag toggle = new HtmlTag("a"); toggle.addAttribute("href", "javascript:toggleCollapsable('" + Long.toString(id) + "');"); HtmlTag image = new HtmlTag("img"); image.addAttribute("src", "/files/fitnesse/images/collapsable" + state + ".gif"); image.addAttribute("class", "left"); image.addAttribute("id", "img" + Long.toString(id)); toggle.add(image); outerBlock.add(toggle); outerBlock.add("&nbsp;"); HtmlTag title = HtmlUtil.makeSpanTag("meta", titleText); outerBlock.add(title); HtmlTag body = new HtmlTag("div", bodyText); body.addAttribute("class", bodyClass(state)); body.addAttribute("id", Long.toString(id)); outerBlock.add(body); return outerBlock.html(); }
public void and(List<ValidationMessage> errors) { this.errors.addAll(errors); }
protected boolean isExceptionMessage(String value) { return value != null && value.startsWith("!:"); }
public void scenarioTableIsRegistered() throws Exception { getResultsForPageContents("|Scenario|myScenario|\n"); assertTrue("scenario should be registered", responder.testSystem.getScenarios().containsKey("myScenario")); }
public void setup() throws NoSuchMethodException { this.mockery = new Mockery(); this.result = new RequestResult(); this.stack = mockery.mock(InterceptorStack.class); this.parameters =mockery.mock(MethodInfo.class); }
public void testMultiThreaded() throws Exception { ss = new SocketService(PORT_NUMBER, true, new EchoService(),"fitnesse.socketservice.SslParametersWiki"); Socket s = SocketFactory.tryCreateClientSocket("localhost", PORT_NUMBER, true, "fitnesse.socketservice.SslParametersWiki"); BufferedReader br = GetBufferedReader(s); PrintStream ps = GetPrintStream(s); Socket s2 = SocketFactory.tryCreateClientSocket("localhost", PORT_NUMBER, true, "fitnesse.socketservice.SslParametersWiki"); BufferedReader br2 = GetBufferedReader(s2); PrintStream ps2 = GetPrintStream(s2); ps2.println("MyMessage2"); String answer2 = br2.readLine(); s2.close(); ps.println("MyMessage1"); String answer = br.readLine(); s.close(); ss.close(); System.out.print("Got Messages 1: " +answer +", 2: " + answer2 + ".\n"); assertEquals("MyMessage2", answer2); assertEquals("MyMessage1", answer); }
public XmlSerializer from(String prefix, Collection collection) { this.prefixTag= prefix; this.analyzing = collection; return this; }
public void parsesImages() throws Exception { ParserTest.assertParses("!img name", "SymbolList[Link[SymbolList[Text]]]"); ParserTest.assertParses("!img http://name", "SymbolList[Link[SymbolList[Text]]]"); ParserTest.assertParses("!imgx name", "SymbolList[Text, Whitespace, Text]"); ParserTest.assertParses("!img-l name", "SymbolList[Link[SymbolList[Text]]]"); ParserTest.assertParses("!img-r name", "SymbolList[Link[SymbolList[Text]]]"); }
public void testOneRunWithManyTables() throws Exception { receiver.receiveSocket(); client.start(); client.send("<html><table><tr><td>fitnesse.testutil.PassFixture</td></tr></table>" + "<table><tr><td>fitnesse.testutil.FailFixture</td></tr></table>" + "<table><tr><td>fitnesse.testutil.ErrorFixture</td></tr></table></html>"); client.done(); client.join(); assertFalse(exceptionOccurred); assertEquals(3, outputs.size()); assertEquals(1, counts.size()); TestSystem.TestSummary count = counts.get(0); assertEquals(1, count.right); assertEquals(1, count.wrong); assertEquals(1, count.exceptions); }
@Override public void invoke(TestSystemListener listener) throws IOException { listener.testStarted(testPage); }
public void announceNumberTestsToRun(int testsToRun) {} @Override public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) {} @Override public void newTestStarted(TestPage test, TimeMeasurement timeMeasurement) throws IOException {} @Override public void testOutputChunk(String output) throws IOException {} @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) {} @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) {} @Override public void testComplete(TestPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws IOException {} @Override public void errorOccured() {} }
public void testUndecodeable() throws Exception { CachedData cd = new CachedData(Integer.MAX_VALUE & ~(WhalinTranscoder.COMPRESSED | WhalinTranscoder.SERIALIZED), tu.encodeInt(Integer.MAX_VALUE), tc.getMaxSize()); assertNull(tc.decode(cd)); }
public boolean isAutoUpdate() { return has("AutoUpdate"); }
private void setUpForGetAllTestPages() throws Exception { testPage2 = addTestPage(suite, "TestPageTwo", "test page two"); testChildPage = testPage2.addChildPage("ChildPage"); PageData data = testChildPage.getData(); data.setAttribute("Test"); testChildPage.commit(data); }
public void shouldThreatNormalMethod() throws NoSuchMethodException { final HttpServletRequest request = mockery.mock(HttpServletRequest.class); mockery.checking(new Expectations() { { one(request).getRequestURI(); will(returnValue("somethig.non-ajax.logic")); one(request).getParameter("view"); will(returnValue("xml")); } }); ResourceMethod method = mockery.methodFor(DefaultComponents.class, "showIt"); assertThat(info.shouldShowView(request, method), is(equalTo(true))); mockery.assertIsSatisfied(); }
public void testPageVariableTakesPrecedenceOverSystemProperty() { String pageText = "!define TEST_PROPERTY {foo}\n"; System.setProperty("TEST_PROPERTY", "bar"); WikiPage page = makeTestPage(pageText); Descriptor descriptor = new WikiPageDescriptor(page, false, false, getClassPath(page)); assertEquals("foo", descriptor.getVariable("TEST_PROPERTY")); }
private String resource(PageData data) { WikiPagePath fullPath = data.getWikiPage().getPageCrawler().getFullPath(data.getWikiPage()); String resource = PathParser.render(fullPath); return resource; }
public void testGetPath() throws Exception { assertEquals(new File(base, "RooT"), ((FileBasedWikiPage) root).getFileSystemPath()); }
public void testFindReferencingPagesOnSiblingAndChild() throws Exception { WhereUsedPageFinder whereUsed = new WhereUsedPageFinder(pageOne, hits); whereUsed.search(root); hits.assertPagesFound(pageTwo.getName(), pageTwoChild.getName()); }
public WikiBuilder child(final int child) { builders.add(new WikiStringBuilder() { @Override public void build(Translator translator, Symbol symbol, StringBuilder wikiString) { wikiString.append(translator.translate(symbol.childAt(child))); } }); return this; }
public void expressionProblemThrowsExceptionAndDoesNotRedirect() throws ServletException, IOException, NoSuchMethodException { mockery.checking(new Expectations() { { allowing(resource).getType(); will(returnValue(CommonComponentOld.class)); allowing(method).getMethod(); will(returnValue(CommonComponentOld.class.getMethod("base"))); one(config).getForwardFor("CommonComponentOld.base.ok"); will(returnValue("serverSide?client.id=${client.id}")); exactly(2).of(request).getAttribute("client"); will(returnValue(new CommonComponentOld())); } }); this.result.forward(); mockery.assertIsSatisfied(); }
String getStartTime();  long getMinRequestLatency();  double getAvgRequestLatency();  long getMaxRequestLatency();  long getPacketsReceived();  long getPacketsSent();  long getFsyncThresholdExceedCount();  long getAuthFailedCount();  long getNonMTLSLocalConnCount();  long getNonMTLSRemoteConnCount();  long getOutstandingRequests();  int getTickTime();  void setTickTime(int tickTime);  int getMaxClientCnxnsPerHost();  void setMaxClientCnxnsPerHost(int max);  int getMinSessionTimeout();  void setMinSessionTimeout(int min);  int getMaxSessionTimeout();  void setMaxSessionTimeout(int max); boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  void resetNonMTLSConnCount();  void resetAuthFailedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
private ArtifactResolutionRequest createArtifactResolutionRequest(final Artifact artifact, final ArtifactFilter collectionFilter, final ArtifactFilter resolutionFilter, final List<ArtifactRepository> remoteRepositories, final ArtifactRepository localRepository) { final ArtifactResolutionRequest arr = new ArtifactResolutionRequest(); arr.setArtifact(artifact); arr.setCollectionFilter(collectionFilter); arr.setResolutionFilter(resolutionFilter); arr.setResolveRoot(false); arr.setResolveTransitively(true); arr.setRemoteRepositories(remoteRepositories); arr.setLocalRepository(localRepository); return arr; }
public Collection<VersionInfo> history() { Collection<VersionInfo> set = new LinkedList<VersionInfo>(); for (Map.Entry<String, FileVersion[]> entry : versions.entrySet()) { set.add(makeVersionInfo(entry.getValue()[0], entry.getKey())); } return set; }
public static Set<ObjectName> ensureParent(String... expectedNames) throws IOException, InterruptedException { LOG.info("ensureParent:{}", Arrays.toString(expectedNames)); Set<ObjectName> beans; int nTry = 0; Set<ObjectName> found = new HashSet<>(); do { if (nTry++ > 0) { Thread.sleep(500); } try { beans = conn().queryNames(new ObjectName(MBeanRegistry.DOMAIN + ":*"), null); } catch (MalformedObjectNameException e) { throw new RuntimeException(e); } found.clear(); for (String name : expectedNames) { LOG.info("expect:{}", name); for (ObjectName bean : beans) {
private String simpleComparisonMessage(boolean pass) { String message = String.format("%s%s", actual, expected.replaceAll(" ", "")); message = replaceSymbolsWithFullExpansion(message); return pass ? returnedValueExpectation.pass(message) : returnedValueExpectation.fail(message);
public String genJavaEquals(String fname, String peer) { return " ret = org.apache.jute.Utils.bufEquals("+fname+","+peer+");\n"; }
public void testComplete(TestSummary testSummary) { } @Override public void exceptionOccurred(Throwable e) { } @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) { } @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) { } } }
public void testBooleanRetrievalFromPropertyDefault() { ZKConfig conf = new ZKConfig(); String prop = "UnSetProperty" + System.currentTimeMillis(); boolean defaultValue = false; boolean result = conf.getBoolean(prop, defaultValue); assertEquals(defaultValue, result); }
String getDoc();  CommandResponse run(ZooKeeperServer zkServer, Map<String, String> kwargs); }
private String makeLinkToNonExistentWikiPage(String text, String url) { HtmlTag link = new HtmlTag("a", "[?]"); link.addAttribute("title", "create page"); link.addAttribute("href", url+ "?edit&nonExistent=true"); return text + link.htmlInline(); }
private boolean equalStrings(String s1, String s2) { if (s1 == null) return (s2 == null || s2.trim().equals("") || s2.equals("\n")); if (s2 == null) return s1.trim().equals("") || s1.equals("\n"); return s1.trim().equals(s2.trim()); }
public void reset() throws Exception { } public void execute() throws Exception { } protected void bindColumnHeadersToMethodsAndFields(Parse heads) { try { columnBindings = new Binding[heads.size()]; for (int i = 0; heads != null; i++, heads = heads.more) { columnBindings[i] = createBinding(i, heads); } } catch (Throwable throwable) {
public void testFindExistentAttributeInRequestContext() { String attributeValue = "myValue"; mockery.checking(new Expectations() { { exactly(2).of(request).getAttribute("my.attribute.request"); will(returnValue("myValue")); } }); Object value = jstlWrapper.find(webRequest, "my.attribute"); assertSame(attributeValue, value); mockery.assertIsSatisfied(); }
public TestSystem startTestSystem(TestSystem.Descriptor descriptor, String classPath) throws IOException { TestSystem testSystem = null; if (!testSystems.containsKey(descriptor)) { testSystem = makeTestSystem(descriptor); testSystem.setFastTest(fastTest); testSystem.setManualStart(manualStart); testSystems.put(descriptor, testSystem); log.add(descriptor.getTestSystemName(), testSystem.getExecutionLog(classPath, descriptor)); testSystem.start(); } return testSystem; }
public void forwardTo(String url) { logger.debug("forwarding to {}", url); try { request.getRequestDispatcher(url).forward(request.getOriginalRequest(), response.getOriginalResponse());
public void testComplete(WikiPage test, TestSummary testSummary) throws Exception { getAssertionCounts().add(testSummary); }
public String toString(){ StringBuilder sb=new StringBuilder(); Channel channel = sk.channel(); if (channel instanceof SocketChannel) { sb.append(" ").append(((SocketChannel)channel).socket() .getRemoteSocketAddress()) .append("[").append(Integer.toHexString(sk.interestOps())) .append("](queued=").append(getOutstandingRequests()) .append(",recved=").append(getPacketsReceived()) .append(",sent=").append(getPacketsSent()).append(")\n"); } return sb.toString(); }
public void testDeleteCancellation() throws Exception { tryTestSequence(client.delete("x")); }
@Test public void frontPageCopiedToIndex() { WikiPageUtil.addPage(root, PathParser.parse("FrontPage"), "stuff"); Publisher publisher = new Publisher(TEMPLATE, "out", root.getPageCrawler(), this::writer); publisher.traverse(root); Assert.assertEquals("out/root.htmlout/FrontPage.htmlout/index.html", paths); }
Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(String mechs[], CallbackHandler cbh) throws OperationException;  Set<String> listSaslMechanisms(); }
public void settingShouldNullifyUpToIndexAndIgnoreRemoval() throws Exception { final Long[] l = new Long[] {}; mockery.checking(new Expectations() { { allowing(context).getRoot(); one(typeConverter).convertValue((Map) with(anything()), with(anything()), (Member) with(anything()), (String) with(an(String.class)), with(anything()), (Class) with(an(Class.class))); will(returnValue(22L)); } }); accessor.setProperty(context, l, 1, 22L); assertThat(instance.simpleNode[0], is(nullValue())); assertThat(instance.simpleNode[1], is(equalTo(22L))); }
protected SlimTestSystem getTestSystem() throws IOException { SlimCommandRunningClient slimClient = new SlimClientBuilder(getDescriptor()) .withFastTest(fastTest) .build(); return new HtmlSlimTestSystem("slim", slimClient, this); }
public void existsForWillReturnTrueIfAVraptor2ConverterExistsForTheType() throws Exception { final Converters stubConverters = mockery.mock(Converters.class); mockery.checking(new Expectations() { { allowing(stubConverters).existsFor(with(any(Class.class))); will(returnValue(false)); one(config).getConverters(); will(returnValue(Arrays.asList(new String[] { VRaptor2BasedConverter.class.getName() }))); } }); final VRaptor2Converters converters = new VRaptor2Converters(config, container); converters.setDelegateConverters(stubConverters); assertThat(converters.existsFor(Integer.class), is(true)); }
private void setHelpTextPrefix (WikiPage page) throws Exception { String helpPrefixEnv = parent.getVariable(HELP_PREFIX_TOC); helpTextPrefix = (helpPrefixEnv != null)? helpPrefixEnv : HELP_PREFIX_DEFAULT; }
public Symbol parseToWithSymbols(SymbolType[] terminators, SymbolProvider provider, int priority) { ParseSpecification newSpecification = new ParseSpecification().provider(provider).priority(priority); for (SymbolType terminator: terminators) newSpecification.terminator(terminator); return parse(newSpecification); }
public void shouldCompareUnevenAmountsOfTables() throws Exception { comparer.firstFileContent = "<table><tr><td>x</td></tr></table><table><tr><td>y</td></tr></table>"; comparer.secondFileContent = "<table><tr><td>x</td></tr></table>"; assertTrue(comparer.grabAndCompareTablesFromHtml()); assertEquals(2, HistoryComparer.resultContent.size()); assertEquals("pass", HistoryComparer.resultContent.get(0)); assertEquals("fail", HistoryComparer.resultContent.get(1)); }
private void initializeSVNStatusTypeToStateMap() { this.states.put(SVNStatusType.STATUS_UNVERSIONED, SVNState.UNKNOWN); this.states.put(SVNStatusType.STATUS_NONE, SVNState.UNKNOWN); this.states.put(null, SVNState.UNKNOWN); this.states.put(SVNStatusType.STATUS_ADDED, SVNState.ADDED); this.states.put(SVNStatusType.STATUS_DELETED, SVNState.DELETED); this.states.put(SVNStatusType.STATUS_NORMAL, SVNState.VERSIONED); this.states.put(SVNStatusType.STATUS_MODIFIED, SVNState.VERSIONED); this.states.put(SVNStatusType.STATUS_REPLACED, SVNState.VERSIONED); this.states.put(SVNStatusType.MERGED, SVNState.VERSIONED); }
public WikiPage getChildPage(String name) throws Exception { WikiPage page = getNormalChildPage(name); if(page == null) page = createSymbolicPage(getData().getProperties().getProperty("SymbolicLinks"), name); return page; }
public boolean gameOver() { return currentFrame == 10 && currentBall == 0; }
public void shouldBeAbleToConvert() { mockery.checking(new Expectations() { { exactly(2).of(request).getAttribute("javax.servlet.jsp.jstl.fmt.locale.request"); will(returnValue("pt_br")); } }); assertThat(converter.convert("10/06/2008", Calendar.class, bundle), is(equalTo((Calendar) new GregorianCalendar(2008, 5, 10)))); mockery.assertIsSatisfied(); }
public Converter<?> to(Class<?> type) { Converter<?> vraptor2Convterter = findVRaptor2Converter(type); return vraptor2Convterter == null ? delegateConverters.to(type) : vraptor2Convterter; }
@Test public void translatesCollapsible() { CollapsibleBuilder.resetId(); ParserTest.assertTranslatesTo("!* Some title\n''content''\n*!", sectionWithClass("collapsable", "Open", "<i>content</i>")); CollapsibleBuilder.resetId(); ParserTest.assertTranslatesTo("!*> Some title\n content \n*!", sectionWithClass("hidden", "Closed", " content ")); CollapsibleBuilder.resetId(); ParserTest.assertTranslatesTo("!*< Some title\n content \n*!", "<div class=\"invisible\"> content </div>" + HtmlElement.endl);
public void shouldNotBeEqualIfVersionIsDifferent() throws Exception { report1.version = "x"; report2.version = "y"; assertFalse(report1.equals(report2)); }
public void insertEntry(PwDatabase db, List<? extends PwEntry> entries) { mDb.beginTransaction(); try { for (int i=0; i < entries.size(); i++) {
public void testComplete(TestSummary testSummary) throws Exception { WikiPage testPage = processingQueue.removeFirst(); resultsListener.testComplete(testPage, testSummary); }
public void fromTableWithOneColumn_shouldCreateEmptyMap() throws Exception { makeMap("<table><tr><td>0</td></tr></table>"); assertEquals(0, result.size()); }
public void connectionRetryTimeoutTest() throws Exception { Learner learner = new TestLearner(); learner.self = new QuorumPeer(); learner.self.setTickTime(2000); learner.self.setInitLimit(5); learner.self.setSyncLimit(2);
public synchronized void startup() { startupWithServerState(State.RUNNING); }
public void testGetDefaultCipherSuitesJava9() { String[] cipherSuites = X509Util.getDefaultCipherSuitesForJavaVersion("9");
String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); void appendCellToRow(int row, Table table); }
public Collection<Object> values() { throw new RuntimeException(); }
public T insideRequest(Container firstContainer) { if (componentToRegister != null) { ComponentRegistry registry = firstContainer.instanceFor(ComponentRegistry.class); registry.register(componentToRegister, componentToRegister); } ResourceMethod firstMethod = mock(ResourceMethod.class, "rm" + counter); firstContainer.instanceFor(MethodInfo.class).setResourceMethod(firstMethod); return instanceFor(componentToBeRetrieved,firstContainer); }
public void testIsInputShutdown(boolean useSecureClient) throws Exception { init(useSecureClient); serverSideSocket.isInputShutdown(); assertFalse(serverSideSocket.isModeKnown()); serverSideSocket.shutdownInput(); assertTrue(serverSideSocket.isInputShutdown()); }
private static void printUsage() { System.err.println("Usage: java -jar fitnesse.jar [-pdrleoa]"); System.err.println("\t-p <port number> {" + Arguments.DEFAULT_PORT + "}"); System.err.println("\t-d <working directory> {" + Arguments.DEFAULT_PATH + "}"); System.err.println("\t-r <page root directory> {" + Arguments.DEFAULT_ROOT + "}"); System.err.println("\t-l <log directory> {no logging}"); System.err.println("\t-e <days> {" + Arguments.DEFAULT_VERSION_DAYS + "} Number of days before page versions expire"); System.err.println("\t-o omit updates"); System.err .println("\t-a {user:pwd | user-file-name} enable authentication."); System.err.println("\t-i Install only, then quit."); }
public void testRegexp() throws Exception { assertMatchEquals("!note some note", "!note some note"); assertMatchEquals("! note some note", null); }
public static void main(String[] args) { try { MergedLogSource src = new MergedLogSource(args);
public void shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsPresent() throws Exception { Object[] values = new Object[] { new Object() }; Method method = HeaderParamComponent.class.getDeclaredMethod("method", String.class); ResourceMethod resourceMethod = DefaultResourceMethod.instanceFor(HeaderParamComponent.class, method); when(request.getHeader("password")).thenReturn("123"); when(parametersProvider.getParametersFor(resourceMethod, errors, bundle)).thenReturn(values); when(parameterNameProvider.parameterNamesFor(method)).thenReturn(new String[]{"passwordParam"}); instantiator.intercept(stack, resourceMethod, null); verify(request).setParameter("passwordParam", "123"); verify(params).setParameters(values); verify(stack).next(resourceMethod, null); verify(validator).addAll(Collections.<Message>emptyList()); }
public void run() { if (logger.isDebugEnabled()) logger.debug("Consuming message that is out of order for msgId: " + msg.getMsgId().getLocalComponent()); ConcurrencyUtils.put(consumeQueue, false); }
<T> T forwardTo(Class<T> type);  <T> T redirectTo(Class<T> type); }
public void putAll(Map<? extends String, ? extends Object> t) { throw new RuntimeException(); }
public void testInvalidKey3() throws Exception { try { Object val=client.get("Key\n");
public void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException { registerRulesFor(MyResource.class); final Method method = MyResource.class.getMethod("customizedPath"); String url = router.urlFor(MyResource.class, method, new Object[] {}); assertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method))); mockery.assertIsSatisfied(); }
public void testShouldPassIfActualExecutionTimeIsLessThanMaxtime() throws Exception { String fitPage = "<table><tr><td>" + MaxTime.class.getName() + "</td><td>80</td><td>milliseconds</td></tr><tr><td>eg.Division</td></tr>" + "<tr><td>numerator</td><td>denominator</td><td>quotient()</td></tr>" + "<tr><td>10</td><td>2</td><td>5</td></tr><tr><td>12.6</td><td>3</td><td>4.2</td></tr>" + "<tr><td>100</td><td>4</td><td>25</td></tr></table>"; Counts expected = TestCaseHelper.counts(4, 0, 0, 0); executeAndAssert(expected, fitPage, new MaxTime(stopWatch)); }
public void testRemoveNodeChildrenChangedWatches() throws Exception { List<EventType> expectedEvents = new ArrayList<Watcher.Event.EventType>(); expectedEvents.add(EventType.ChildWatchRemoved); MyWatcher myWatcher = new MyWatcher("/testnode1", expectedEvents, 1); zk.create("/testnode1", "data".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); LOG.info("Adding child changed watcher"); zk.getChildren("/testnode1", myWatcher); String cmdstring = "removewatches /testnode1 -c"; LOG.info("Remove watchers using shell command : {}", cmdstring); zkMain.cl.parseCommand(cmdstring); Assert.assertTrue("Removewatches cmd fails to remove child watches", zkMain.processZKCmd(zkMain.cl)); myWatcher.matches(); Assert.assertEquals( "Failed to remove child watches : " + zk.getChildWatches(), 0,
public boolean append(Request si) throws IOException { return txnLog.append(si); }
public void rename(File file, File originalFile) { throw new IllegalStateException("FileSystem.rename() has not been implemented for Memory file system."); }
public void testRemove1() throws Exception { String dir = "/testRemove1"; final int numClients = 1; ZooKeeper[] clients = new ZooKeeper[numClients]; DistributedQueue[] queueHandles = new DistributedQueue[numClients]; for (int i = 0; i < clients.length; i++) { clients[i] = createClient(); queueHandles[i] = new DistributedQueue(clients[i], dir, null); } try { queueHandles[0].remove(); } catch (NoSuchElementException e) { return; } Assert.fail(); }
public Maybe<String> findVariable(String name) { String value = context.getVariable(name); return value != null ? new Maybe<String>(value) : Maybe.noString; }
public void sendSync(LearnerSyncRequest r) { QuorumPacket qp = new QuorumPacket(Leader.SYNC, 0, null, null); r.fh.queuePacket(qp); }
public void oneRowWithPartialMatch() throws Exception { assertQueryResults("|2|4|\n", asList(
public void matchesScenarioWithMostArguments() throws Exception { SlimTestContextImpl testContext = new SlimTestContextImpl(); WikiPageUtil.setPageContents(root, "" + "!|scenario|Login user|name|\n" + "|should not get here|\n" + "\n" + "!|scenario|Login user|name|with password|password|\n" + "|login|@name|with|@password|\n" + "\n" + "!|script|\n" + "|Login user Bob with password xyzzy|\n"); TableScanner ts = new HtmlTableScanner(root.getData().getHtml()); ScenarioTable st1 = new ScenarioTable(ts.getTable(0), "s1_id", testContext); ScenarioTable st2 = new ScenarioTable(ts.getTable(1), "s2_id", testContext); script = new ScriptTable(ts.getTable(2), "id", testContext); assertions.addAll(st1.getAssertions()); assertions.addAll(st2.getAssertions()); assertions.addAll(script.getAssertions()); List<CallInstruction> expectedInstructions = list( new CallInstruction("scriptTable_id_0/scriptTable_s2_id_0", "scriptTableActor", "loginWith", new Object[]{"Bob", "xyzzy"}) ); assertEquals(expectedInstructions, instructions()); }
public void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException { new Rules(router) { public void routes() { routeFor("/clients/add").is(MyControl.class).add(null); routeFor("/clients/add").is(MyControl.class).list(); } }; assertThat(router.parse("/clients/add", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method( "add", Dog.class)))); mockery.assertIsSatisfied(); }
public void close() throws IOException { if (_off != 0) { byte[] bytes = new byte[_off]; System.arraycopy(_buf, 0, bytes, 0, _off); DEROctetString.encode(_derOut, bytes); } writeBEREnd(); }
public void buildFactory() { factory = Validation.byDefaultProvider() .configure() .messageInterpolator(interpolator) .buildValidatorFactory(); logger.debug("Initializing Bean Validation (1.0 supported)"); }
public Maybe<String> findVariable(String key) { String value; if (key.equals("PAGE_NAME")) value = namedPage.getName(); else if (key.equals("PAGE_PATH")) value = namedPage.getPath(); else return Maybe.noString; return new Maybe<>(value); }
public void testHammer() throws Exception { Thread.sleep(1000); bang = true; for (int i = 0; i < 100; i++) { new HammerThread().start(); } Thread.sleep(5000); tearDown(); bang = false; restart(); Thread.sleep(5000); String parts[] = hostPort.split(","); String prevList[] = null; for (String hp : parts) { ZooKeeper zk = createClient();
private void releaseQueuedBuffer() { checkIsInEventLoop("releaseQueuedBuffer"); if (queuedBuffer != null) { queuedBuffer.release();
public void imageWithBorder() { ParserTestHelper.assertTranslatesTo("!img -b 1 name", "<img src=\"name\" style=\"border:1px solid black;\"/>"); }
public void testDeadWatcherMetrics() throws InterruptedException { ServerMetrics.getMetrics().resetAll(); MyDeadWatcherListener listener = new MyDeadWatcherListener(); WatcherCleaner cleaner = new WatcherCleaner(listener, 1, 1, 1, 1); listener.setDelayMs(20); cleaner.start(); listener.setCountDownLatch(new CountDownLatch(3));
public void shouldInstantiateArrayListForCollectionInterface() throws Exception { mockery.checking(new Expectations() { { one(removal).add(new ArrayList<Object>()); } }); Collection<?> collection = handler.instantiate(Collection.class); assertThat(collection, is(notNullValue())); assertThat(collection, is(instanceOf(ArrayList.class))); }
private String ifSymbolAssignment(String expected) { Matcher matcher = SYMBOL_ASSIGNMENT_PATTERN.matcher(expected); return matcher.find() ? matcher.group(1) : null; }
public void setUp() throws Exception { FitNesseContext context = FitNesseUtil.makeTestContext(); page = new HtmlPage(context.pageFactory.getVelocityEngine(), "skeleton.vm", "fitnesse_theme", "/"); html = page.html(); }
public RequestExecution prepare(ResourceMethod method, HttpServletRequest request, HttpServletResponse response) { RequestExecution execution = instanceFor(RequestExecution.class); return new RequestExecutionWrapper(execution); }
public void doWork() throws Exception { long startTime = Time.currentElapsedTime(); listener.processDeadWatchers(snapshot); long latency = Time.currentElapsedTime() - startTime; LOG.info("Takes {} to process {} watches", latency, total); totalDeadWatchers.addAndGet(-total); synchronized(totalDeadWatchers) { totalDeadWatchers.notifyAll();
public abstract void setUp() throws Exception; protected abstract String getTestClassName(); @Test public void callNiladicFunction() throws Exception { caller.call("testSlim", "nilad"); assertTrue(testSlim.niladWasCalled()); } @Test public void throwMethodNotCalledErrorIfNoSuchMethod() throws Exception { String response = (String) caller.call("testSlim", "noSuchMethod"); assertTrue(response, response.indexOf(SlimServer.EXCEPTION_TAG) != -1 && response.indexOf("message:<<NO_METHOD_IN_CLASS noSuchMethod[0] " + getTestClassName() + ".>>") != -1); } @Test public void methodReturnsString() throws Exception { Object retval = caller.call("testSlim", "returnString"); assertEquals("string", retval); } @Test public void methodReturnsInt() throws Exception { Object retval = caller.call("testSlim", "returnInt"); assertEquals("7", retval); } @Test public void methodReturnsVoid() throws Exception { Object retval = caller.call("testSlim", "nilad"); assertEquals(VoidConverter.VOID_TAG, retval); } @Test public void methodTakesAndReturnsBooleanTrue() throws Exception { Object retval = caller.call("testSlim", "echoBoolean", "true"); assertEquals(BooleanConverter.TRUE, retval); } @Test public void methodTakesAndReturnsBooleanFalse() throws Exception { Object retval = caller.call("testSlim", "echoBoolean", "false"); assertEquals(BooleanConverter.FALSE, retval); } @Test public void passOneString() throws Exception { caller.call("testSlim", "oneString", "string"); assertEquals("string", testSlim.getStringArg()); } @Test public void passOneInt() throws Exception { caller.call("testSlim", "oneInt", "42"); assertEquals(42, testSlim.getIntArg()); } @Test public void passOneDouble() throws Exception { caller.call("testSlim", "oneDouble", "3.14159"); assertEquals(3.14159, testSlim.getDoubleArg(), .000001); } @Test public void passOneDate() throws Exception { caller.call("testSlim", "oneDate", "5-May-2009"); assertEquals((Date) new DateConverter().fromString("5-May-2009"), testSlim.getDateArg()); } @Test public void passOneList() throws Exception { caller.call("testSlim", "oneList", list("one", "two")); assertEquals(list("one", "two"), testSlim.getListArg()); } @Test public void passManyArgs() throws Exception { caller.call("testSlim", "manyArgs", "1", "2.1", "c"); assertEquals(1, testSlim.getIntegerObjectArg().intValue()); assertEquals(2.1, testSlim.getDoubleObjectArg(), .00001); assertEquals('c', testSlim.getCharArg()); } @Test public void convertLists() throws Exception { caller.call("testSlim", "oneList", "[1 ,2, 3,4, hello Bob]"); assertEquals(list("1", "2", "3", "4", "hello Bob"), caller.call("testSlim", "getListArg")); } @Test public void convertArraysOfStrings() throws Exception { caller.call("testSlim", "setStringArray", "[1 ,2, 3,4, hello Bob]"); assertEquals("[1, 2, 3, 4, hello Bob]", caller.call("testSlim", "getStringArray")); } @Test public void convertArraysOfIntegers() throws Exception { caller.call("testSlim", "setIntegerArray", "[1 ,2, 3,4]"); assertEquals("[1, 2, 3, 4]", caller.call("testSlim", "getIntegerArray")); } @Test public void convertArrayOfIntegersThrowsExceptionIfNotInteger() throws Exception { Object result = caller.call("testSlim", "setIntegerArray", "[1 ,2, 3,4, hello]"); String resultString = (String) result; assertTrue(resultString, resultString.indexOf("message:<<CANT_CONVERT_TO_INTEGER_LIST>>") != -1); } @Test public void convertArraysOfBooleans() throws Exception { caller.call("testSlim", "setBooleanArray", "[true ,false, false,true]"); assertEquals("[true, false, false, true]", caller.call("testSlim", "getBooleanArray")); } @Test public void convertArraysOfDoubles() throws Exception { caller.call("testSlim", "setDoubleArray", "[1 ,2.2, -3e2,0.04]"); assertEquals("[1.0, 2.2, -300.0, 0.04]", caller.call("testSlim", "getDoubleArray")); } @Test public void convertArrayOfDoublesThrowsExceptionIfNotInteger() throws Exception { Object result = caller.call("testSlim", "setDoubleArray", "[1 ,2, 3,4, hello]"); String resultString = (String) result; assertTrue(resultString, resultString.indexOf("message:<<CANT_CONVERT_TO_DOUBLE_LIST>>") != -1); } @Test public void handleReturnNull() throws Exception { Object result = caller.call("testSlim", "nullString"); Assert.assertNull(result); } @Test public void handleEchoNull() throws Exception { Object result = caller.call("testSlim", "echoString", new Object[]{null}); Assert.assertNull(result); } @Test public void handleNullSymbols() throws Exception { caller.setVariable("x", null); Object result = caller.call("testSlim", "echoString", new Object[]{"$x"}); Assert.assertNull(result); } @Test public void handleNullSymbolsSurroundedByString() throws Exception { caller.setVariable("x", null); Object result = caller.call("testSlim", "echoString", new Object[]{"A $x B"}); assertEquals("A null B", result); } @Test public void handleUnspecifiedSymbols() throws Exception { Object result = caller.call("testSlim", "echoString", new Object[]{"$x"}); assertEquals("$x", result); } }
public void setUp() throws Exception { super.setUp(); inserter = new PageListSetUpTearDownInserter(); }
public boolean canRun(List<WikiPage> pages) { return true; }
public void testReferenceToSubPageNotChangedWhenDisabled() throws Exception { WikiPageUtil.addPage(root, PathParser.parse("ReferingPage"), "PageOne.PageA"); movePage("PageOne", "PageTwo", false); WikiPage referingPage = root.getChildPage("ReferingPage"); assertEquals("PageOne.PageA", referingPage.getData().getContent()); }
public String toString() { String endl = System.getProperty("line.separator"); StringBuffer buffer = new StringBuffer(); buffer.append("\t").append("port: ").append(port).append(endl); buffer.append("\t").append("root page: ").append(root).append(endl); buffer.append("\t").append("logger: ").append(logger == null ? "none" : logger.toString()).append(endl); buffer.append("\t").append("authenticator: ").append(authenticator).append(endl); buffer.append("\t").append("page factory: ").append(pageFactory).append(endl); return buffer.toString(); }
public void testSnapshotCommand_serializeLastZxidDisabled() throws Exception { ZooKeeperServer.setSerializeLastProcessedZxidEnabled(false); try {
public void describeTo(Description description) { description.appendText("an empty list"); }
private void assertExpectationMessage(String expected, String value, String message) throws Exception { Table t = new Table(new TableWidget(null, "")); SlimTable slimTable = new DecisionTable(t, "id"); SlimTable.Expectation expectation = slimTable.makeReturnedValueExpectation(expected, 0, 0, 0); assertEquals(message, expectation.createEvaluationMessage(value, expected)); }
protected void updateColumnsBasedOnResults(Parse table) { updateColumns(table.parts.parts.more, elapsedTime, minTime, false); updateColumns(table.parts.parts.more.more.more, elapsedTime, maxTime, true); }
<T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
private void checkDocumentResults(int right, int wrong, int ignored, int exceptions) throws Exception { Counts actual = FitProtocol.readCounts(new StreamReader(socketInput)); assertEquals(right, actual.right); assertEquals(wrong, actual.wrong); assertEquals(ignored, actual.ignores); assertEquals(exceptions, actual.exceptions); }
private void process(List<Op> ops) throws Exception { pLatch = new CountDownLatch(1); processor = new PrepRequestProcessor(zks, new MyRequestProcessor()); Record record = new MultiOperationRecord(ops); Request req = createRequest(record, OpCode.multi); processor.pRequest(req); Assert.assertTrue("request hasn't been processed in chain", pLatch.await(5, TimeUnit.SECONDS)); }
public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException { this.run(); return super.get(timeout, unit); }
public void testExecutionStatusOk() throws Exception { doSimpleRun(passFixtureTable()); assertTrue(results.contains(">Execution Log<")); assertTrue(results.contains("\\\"ok\\\"")); }
public void checkNotWithFunction() throws Exception { buildInstructionsFor("|check not|function|arg|result|\n"); List<CallInstruction> expectedInstructions = list( new CallInstruction("scriptTable_id_0", "scriptTableActor", "function", new Object[]{"arg"}) ); assertEquals(expectedInstructions, instructions); }
public void shouldSerializeCalendarLikeXstream() { List<JsonSerializer<?>> adapters = new ArrayList<JsonSerializer<?>>(); adapters.add(new CalendarSerializer()); GsonJSONSerialization serialization = new GsonJSONSerialization(response, extractor, initializer, adapters, Collections.<ExclusionStrategy> emptyList()); Client c = new Client("renan"); c.included = new GregorianCalendar(2012, 8, 3); serialization.from(c).serialize(); String result = result(); String expectedResult = "{\"client\":{\"name\":\"renan\",\"included\":{\"time\":\"" + c.included.getTimeInMillis() + "\",\"timezone\":\"" + c.included.getTimeZone().getID() + "\"}}}"; assertThat(result, is(equalTo(expectedResult))); }
private void treesUnEqual(Tree t1, Tree t2) { assertFalse(t1.equals(t2)); assertFalse(t2.equals(t1)); assertFalse(ListTree.equals(t1,t2)); assertFalse(ListTree.equals(t2,t1)); }
public void testPageMatchesQueryWithMultipleAttributes() throws Exception { String[] suites = new String[0]; List<String> pageTypes = Arrays.asList("Test"); Map<String, Boolean> attributes = new HashMap<String, Boolean>(); setupRequestInputAndPageProperty("Test", attributes, true, page, null); setupRequestInputAndPageProperty("Suite", attributes, true, page, null); assertFalse(searcher.pageMatchesQuery(page, pageTypes, attributes, suites, false, false)); setupRequestInputAndPageProperty("Test", attributes, true, page, "true"); setupRequestInputAndPageProperty("Suite", attributes, false, page, null); assertTrue(searcher.pageMatchesQuery(page, pageTypes, attributes, suites, false, false)); setupRequestInputAndPageProperty("Test", attributes, false, page, "true"); setupRequestInputAndPageProperty("Suite", attributes, false, page, null); assertFalse(searcher.pageMatchesQuery(page, pageTypes, attributes, suites, false, false)); setupRequestInputAndPageProperty("Test", attributes, false, page, null); setupRequestInputAndPageProperty("Suite", attributes, false, page, "true"); assertFalse(searcher.pageMatchesQuery(page, pageTypes, attributes, suites, false, false));
private Maybe<Symbol> makeImageLink(Symbol link, String imageProperty) { return new Maybe<Symbol>(link.putProperty(LinkRule.ImageProperty, imageProperty)); }
private void parseTheFileContentToAList(File updateFileList, ArrayList<String> list) throws Exception { String content = FileUtil.getFileContent(updateFileList); String[] filePaths = content.split("\n"); for (String path : filePaths) list.add(path);
private void debugNodeInfo(Collection<MemcachedNode> nodes) { System.err.println("Debug nodes:"); for (MemcachedNode node : nodes) { System.err.println(node);
public void set(String name, WikiPageProperty child) { children.put(name, child); }
public BinaryPackageControlFile createDeb(Compression compression) throws PackagingException { File tempData = null; File tempControl = null; List<String> tempConffiles = new ArrayList<String>(); try { tempData = File.createTempFile("deb", "data");
private boolean isChecked(Request request, String name) { return (request.getInput(name) != null); }
public void testDigestMatchesDuringSnapSync() throws Exception { triggerSync(true);
public void shouldThrowExceptionForInvalidString() { try { converter.convert("not a boolean!", boolean.class, bundle);
public PwGroup Search(String str) { if (searchHelper == null) { return null; } PwGroup group = searchHelper.search(this, str); return group;
public void stop() { } } public static class DoNothingProvider implements ContainerProvider { public <T> T provideForRequest(VRaptorRequest vraptorRequest, Execution<T> execution) { return execution.insideRequest(null); } public void start(ServletContext context) { } public void stop() { } } @Test public void shouldDeferToContainerIfStaticFile() throws IOException, ServletException { VRaptor raptor = new VRaptor(); final HttpServletRequest request = mockery.mock(HttpServletRequest.class); final HttpServletResponse response = mockery.mock(HttpServletResponse.class); final StaticContentHandler handler = mockery.mock(StaticContentHandler.class); final FilterChain chain = mockery.mock(FilterChain.class); mockery.checking(new Expectations() { { one(handler).requestingStaticFile(request); will(returnValue(true)); one(handler).deferProcessingToContainer(chain, request, response); } }); raptor.init(new DoNothingProvider(), handler); raptor.doFilter(request, response, chain); mockery.assertIsSatisfied(); } }
public void testHtml() throws Exception { String content = getResponseContentUsingSearchReplaceString("(.*)something(.*)", "$1replacedthing$2"); assertThat(content, containsString("replacedthing")); assertThat(content, containsString("SomePage")); }
private Class lookFor(Class<? extends Object> baseType, Class currentType, Method method) { if (currentType.equals(Object.class)) { throw new IllegalArgumentException("Invalid rule registration, method " + method.getName() + " was not found, although it was declared at " + baseType.getName()); } return null; }
public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof MultiTransactionRecord)) return false; MultiTransactionRecord that = (MultiTransactionRecord) o; if (ops != null) { Iterator<Op> other = that.ops.iterator();
public void testBackwardSearchWidget() throws Exception {
public void processResult(int rc, String path, Object ctx, List<OpResult> opResults) { if (!ClientCnxn.isInEventThread()) { throw new RuntimeException("not in event thread"); } synchronized (res) { res.rc = rc;
private void addTo(final PGPSignatureOutputStream pOutput, final File pContent) throws IOException { final InputStream input = new FileInputStream(pContent); try { Utils.copy(input, pOutput);
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException { } }
public void shouldReturnAGenericType() { InputStream stream = new ByteArrayInputStream( "{'entity':{'name':'Brutus','age':7,'birthday':'06/01/1987'}}".getBytes()); ResourceClass resourceClass = new DefaultResourceClass(ExtGenericController.class); Method method = new Mirror().on(GenericController.class).reflect().method("method").withAnyArgs(); ResourceMethod resource = new DefaultResourceMethod(resourceClass, method); when(provider.parameterNamesFor(resource.getMethod())).thenReturn(new String[] { "entity" }); Object[] deserialized = deserializer.deserialize(stream, resource); Dog dog = (Dog) deserialized[0]; assertThat(dog.name, equalTo("Brutus")); }
public void shouldNotUsePortWhenPortIs80() { when(request.getServerName()).thenReturn("caelum.com.br"); when(request.getServerPort()).thenReturn(80); when(request.getContextPath()).thenReturn("/context/"); assertEquals("http://caelum.com.br/context/", configuration.getApplicationPath());
public static void main(String[] args) { try { String mainClassName = args[0];
protected void execute() throws Exception { WikiPage parentOfPageToRename = oldRefactoredPage.getParent(); WikiPage renamedPage = parentOfPageToRename.addChildPage(newName); movePage(oldRefactoredPage, renamedPage); }
private boolean childShouldStartWithNewLine() { return (firstElement || lastMadeChildWasNotTag) && !isInline; }
public void authenticate(Socket sock, DataInputStream din) throws IOException; }
public void setup() { mockery = new Mockery(); registry = mockery.mock(InterceptorRegistry.class); scanner = mockery.mock(Scanner.class); registrar = new InterceptorRegistrar(registry); }
private Response saveEdits(FitNesseContext context, Request request, WikiPage page) { Response response = new SimpleResponse(); setData(); VersionInfo commitRecord = page.commit(data); response.addHeader("Current-Version", commitRecord.getName()); context.recentChanges.updateRecentChanges(data); if (request.hasInput("redirect")) response.redirect("", request.getInput("redirect").toString()); else response.redirect(context.contextRoot, request.getResource()); return response; }
public void testBuildBackwardsSearchReferenceHandlesReferentRenameOfFirstName() throws Exception { WikiPagePath parent = PathParser.parse(".AaA"); WikiPagePath renamedPathToReferent = PathParser.parse(".RrR.BbB"); assertEquals("<RrR.BbB", WikiWordWidget.buildBackwardSearchReference(parent, renamedPathToReferent)); }
public void testSlimTablesCreation() throws ClassNotFoundException { testProperties.setProperty(ComponentFactory.SLIM_TABLES, "test:" + TestSlimTable.class.getName()); loader.loadSlimTables(); HtmlTable table = makeMockTable("test"); SlimTable slimTable = new SlimTableFactory().makeSlimTable(table, "foo", new SlimTestContextImpl()); assertSame(TestSlimTable.class, slimTable.getClass()); }
public void linkNameShouldBeAValidWikiWord() throws Exception { request.addInput("linkName", "Symlink"); request.addInput("linkPath", "PageTwo"); Response response = responder.makeResponse(FitNesseUtil.makeTestContext(root), request); assertEquals(412, response.getStatus()); String content = ((SimpleResponse) response).getContent(); assertSubString("WikiWord", content); }
public void testRender() throws Exception { assertEquals("MyPage", PathParser.render(makePath("MyPage"))); assertEquals(".MyPage", PathParser.render(makePath(".MyPage"))); WikiPagePath p = PathParser.parse(".MyPage"); p.makeAbsolute(); assertEquals(".MyPage", PathParser.render(p)); assertEquals("root", PathParser.render(PathParser.parse("."))); assertEquals("root", PathParser.render(PathParser.parse("root"))); assertEquals("<MyPage", PathParser.render(makePath("<MyPage"))); assertEquals(">MyPage", PathParser.render(makePath(">MyPage"))); }
private void executeTestPages() throws Exception { Map<String, LinkedList<WikiPage>> pagesByTestSystem; pagesByTestSystem = makeMapOfPagesByTestSystem(page, root, getSuiteFilter()); for (String testSystemName : pagesByTestSystem.keySet()) executePagesInTestSystem(testSystemName, pagesByTestSystem);
public MatchResult makeMatch(ScanString input, SymbolStream symbols) { MatchResult result = new MatchResult(); for (ScanMatch match: matches) { match.match(input, symbols, result); if (!result.isMatched()) return result; } return result; }
public void setUp() throws Exception { context = new FitNesseContext(root); }
public void parameterizedNameWithOutputArg() throws Exception { makeScenarioTable("login user|\n|enter|@{name}|for|login|\n|enter|@{password}|for|secret|\n|$myName=|current user"); assertEquals("LoginUser", st.getName()); Set<String> inputs = st.getInputs(); assertEquals(2, inputs.size()); assertTrue(inputs.contains("name")); assertTrue(inputs.contains("password")); assertTrue(st.isParameterized()); Set<String> outputs = st.getOutputs(); assertEquals(1, outputs.size()); assertTrue(outputs.contains("myName")); }
public String toString() { StringBuilder sb = new StringBuilder(); if (topic != null) sb.append("Topic: " + topic.toStringUtf8()); if (subscriberId != null) sb.append(PubSubData.COMMA).append("SubscriberId: " + subscriberId.toStringUtf8()); return sb.toString(); }
public void initContainer() { mockery = new Mockery(); servletContext = mockery.mock(ServletContext.class); session = new HttpSessionMock(servletContext, "session"); request = new HttpServletRequestMock(session); response = mockery.mock(HttpServletResponse.class); VRaptorRequestHolder.setRequestForCurrentThread(new VRaptorRequest(servletContext, request, response)); RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request)); container = new SpringBasedContainer("br.com.caelum.vraptor.ioc.spring"); container.start(servletContext); }
public void staticTimeZoneMethodShouldDelegateToInstance() throws Exception { newConstantTimeClock(3, true); assertThat(Clock.currentTimeZone(), is(TimeZone.getTimeZone("Antarctica/Casey"))); }
private boolean shouldThrottleOp(Request request, long elapsedTime) { if (everyNthOp > 0 && request.isThrottlable() && (++opCounter % everyNthOp == 0)) { opCounter %= everyNthOp; return true; } return false; }
public void shouldThrowExceptionWhenUnableToParse() { when(request.getAttribute("javax.servlet.jsp.jstl.fmt.locale.request")) .thenReturn("pt_br"); try { converter.convert("a,10/06/2008/a/b/c", DateMidnight.class, bundle);
public void shouldThrowExceptionIfNoConverterIsFound() throws Throwable { mockery.checking(new Expectations() { { one(converters).to(Tail.class, null); will(returnValue(null)); } }); Map context = Ognl.createDefaultContext(myCat); Ognl.setTypeConverter(context, controller); try { Ognl.setValue("tail", context, myCat, "15");
public void registerCustomComparators(CustomComparatorRegistry customComparatorRegistry) throws PluginException { } }
public void run() {
protected abstract boolean pageMatches(WikiPage page); public void process(WikiPage page) { if (pageMatches(page)) { observer.process(page); } } public List<WikiPage> search(WikiPage page) { hits = new ArrayList<WikiPage>(); page.getPageCrawler().traverse(page, this); return hits; } }
void terminateSession();  void terminateConnection();  long getMinLatency();  long getAvgLatency();  long getMaxLatency();  String getLastOperation();  String getLastCxid();  String getLastZxid();  String getLastResponseTime();  long getLastLatency();  void resetCounters(); }
void setRequestThrottleDropStale(boolean drop); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size); }
public synchronized void start() throws Exception { if (simpleKdc != null) { throw new RuntimeException("Already started"); } simpleKdc = new SimpleKdcServer(); prepareKdcServer(); simpleKdc.init(); resetDefaultRealm(); simpleKdc.start(); LOG.info("MiniKdc stated."); }
public PageData getRevisionData(FileSystemPage page, String label); public Collection<VersionInfo> history(FileSystemPage page); public VersionInfo makeVersion(FileSystemPage page, PageData data); public void removeVersion(FileSystemPage page, String versionName); public void prune(FileSystemPage page); public boolean isExternalRevisionControlEnabled(); }
public void setup() { this.mockery = new VRaptorMockery(true); this.context = mockery.mock(OgnlContext.class); this.evaluation = mockery.mock(Evaluation.class); this.node = mockery.mock(SimpleNode.class); this.instance = new Data(); this.typeConverter = mockery.mock(TypeConverter.class); final EmptyElementsRemoval removal = new EmptyElementsRemoval() { @Override public void removeExtraElements() {
public Object parse(String s) throws Exception { return s;
InputStream getContent() throws IOException; VersionInfo getVersionInfo(); }
public void testdoesntTraverseSymbolicPages() throws Exception { PageData data = page1.getData(); data.getProperties().set(SymbolicPage.PROPERTY_NAME).set("SymLink", "PageTwo"); page1.commit(data); crawler.traverse(this); assertEquals(6, traversedPages.size()); assertFalse(traversedPages.contains("SymLink")); }
private String getFullPagePath(WikiPage page) throws Exception { return StringUtil.join(page.getPageCrawler().getFullPath(page).getNames(), "."); }
public void testGetPageTypesFromInput() { assertPageTypesMatch(TEST); assertPageTypesMatch(TEST, STATIC); assertPageTypesMatch(TEST, SUITE, STATIC);
public String getAlgorithmName();  public int getMacSize();  public void update(byte in) throws IllegalStateException;  public void update(byte[] in, int inOff, int len) throws DataLengthException, IllegalStateException;  public int doFinal(byte[] out, int outOff) throws DataLengthException, IllegalStateException;  public void reset(); }
public void setUp() throws Exception { setUpWithServerId(1); }
public static void logError(String mess, String location) { formatLine(System.err, mess, location); System.err.flush(); }
public void testSymbolicLinkToSubGetsRenamed() { checkSymbolicLinkChangesOnPageOne(".SubWiki.PageTwo.PageTwoChild", ".SubWiki.PageThree.PageTwoChild"); }
public void testWritesQueuedInCommitProcessor() throws Exception { setupProcessors(0, 0); Request req1 = createWriteRequest(1l, 1); processRequestWithWait(req1); Request req2 = createWriteRequest(1l, 2); processRequestWithWait(req2);
private HtmlTag makeResultsTable(List<WikiPage> pages, WikiPage page, Map<String, Boolean> attributes) throws Exception { rootPagePath = getFullPagePath(page.getParent()); HtmlTableListingBuilder table = new HtmlTableListingBuilder(); makeHeadingRow(table, attributes.keySet()); makeMatchingPagesRows(table, pages, attributes); return table.getTable(); }
public void testVariablesFromSystemProperties() throws Exception { PageData data = rootPage.getData(); System.getProperties().setProperty("widgetRootTestKey", "widgetRootTestValue"); rootPage.commit(data); WikiPage page = crawler.addPage(rootPage, PathParser.parse("SomePage"), "!define v2 {blah}\n${v1}\n"); data = page.getData(); assertEquals("widgetRootTestValue", data.getVariable("widgetRootTestKey")); }
public void lostTopic(final ByteString topic) { new Thread(new Runnable() { @Override
void sendPacket(QuorumPacket qp) { synchronized (forwardingFollowers) { for (LearnerHandler f : forwardingFollowers) {
public VersionInfo makeVersion(FileSystemPage page, PageData data) throws Exception; public void removeVersion(FileSystemPage page, String versionName) throws Exception; public void prune(FileSystemPage page) throws Exception; public boolean isExternalReversionControlEnabled(); }
private void makeSureDirectoriesExist() { String[] subDirectories = destination.split(Pattern.quote(File.separator)); String currentDirPath = rootDir; for (int i = 0; i < subDirectories.length; i++) { String subDirectory = subDirectories[i];
protected RequestThrottler createRequestThrottler() { return new RequestThrottler(this); }
@Test public void translatesAnchors() { ParserTest.assertTranslatesTo(".#anchorName", anchorReferenceWithName("anchorName")); ParserTest.assertTranslatesTo(".#anchorName stuff", anchorReferenceWithName("anchorName") + " stuff"); ParserTest.assertTranslatesTo("more.#anchorName stuff", "more" + anchorReferenceWithName("anchorName") + " stuff"); ParserTest.assertTranslatesTo("more\r\n.#anchorName stuff", "more<br/>" + HtmlElement.endl
public void nestedNewlineExpansion () throws Exception { PageData data = rootPage.getData(); data.setContent("!define LIST {\n * list\n}\n" + "!define BB (|${LIST}|\n)\n" ); rootPage.commit(data); WikiPage page = crawler.addPage(rootPage, PathParser.parse("SomePage"), "${BB}\n"); data = page.getData(); String html = data.getHtml(); boolean found = Pattern .compile("<table.+<td.+<ul.+<li.+</li.+</ul.+</td.+</table", Pattern.DOTALL) .matcher(html).find(); assertTrue("[" + html + "]", found); }
public void tableFollowingIgnoreScriptTestExceptionExecuted() throws TestExecutionException { String exceptionId = SlimServer.EXCEPTION_IGNORE_SCRIPT_TEST_TAG + "table1 with random ignore exception"; slimTestSystem.processTable(table(exceptionId), false); slimTestSystem.processTable(table("Table2"), false); slimTestSystem.processTable(table("Table3"), false); assertTestRecords(ignore(exceptionId), pass("Table2"), pass("Table3")); }
static String targetOption(String target, VersionNumber scalaVersion) { if (scalaVersion.major == 2) { if (scalaVersion.minor <= 12) { if (target.equals("1.5") || target.equals("5")) { return "jvm-1.5"; } else if (target.equals("1.6") || target.equals("6")) { return "jvm-1.6"; } else if (target.equals("1.7") || target.equals("7")) { return "jvm-1.7"; } else if (target.equals("1.8") || target.equals("8")) { return "jvm-1.8"; } else {
private void enlarge(final int size) { int length1 = 2 * data.length; int length2 = length + size; byte[] newData = new byte[length1 > length2 ? length1 : length2]; System.arraycopy(data, 0, newData, 0, length); data = newData; }
public static void startFitnesse(WikiPage root) throws Exception { context = makeTestContext(root); context.responderFactory = new ResponderFactory(context.rootPagePath); context.port = port; startFitnesse(context); }
private void testWidgetClassAndText(WikiWidget widget, Class expectedClass, String expectedText) { assertEquals(expectedClass, widget.getClass()); if (widget instanceof TextWidget) assertEquals(expectedText, ((TextWidget) widget).getText());
public void setUp() throws Exception { handshakeCompleted = false; port = PortAssignment.unique(); String testDataPath = System.getProperty("test.data.dir", "build/test/data"); System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY, "org.apache.zookeeper.server.NettyServerCnxnFactory"); System.setProperty(ZKClientConfig.ZOOKEEPER_CLIENT_CNXN_SOCKET, "org.apache.zookeeper.ClientCnxnSocketNetty"); System.setProperty(ZKClientConfig.SECURE_CLIENT, "true"); x509Util = new ClientX509Util(); System.setProperty(x509Util.getSslKeystoreLocationProperty(), testDataPath + "/ssl/testKeyStore.jks"); System.setProperty(x509Util.getSslKeystorePasswdProperty(), "testpass"); System.setProperty(x509Util.getSslTruststoreLocationProperty(), testDataPath + "/ssl/testTrustStore.jks"); System.setProperty(x509Util.getSslTruststorePasswdProperty(), "testpass"); System.setProperty(x509Util.getSslHostnameVerificationEnabledProperty(), "false"); }
public T fromString(String name) { return Enum.valueOf(enumClass, name); }
private String extract(String line, String tag) throws ConfigException { int lastPosition = line.lastIndexOf("</" + tag + ">"); if (lastPosition == -1) { throw new ConfigException("Valid vraptor.xml but not supported by vraptor3. You should put all " + tag + " tags in separate lines (one line for an opening, content and closing tag)"); } return line.substring(line.indexOf("<" + tag + ">") + tag.length() + 2, lastPosition); }
public void resetStatistics() { ServerStats serverStats = zks.serverStats(); serverStats.resetRequestCounters(); serverStats.resetLatency(); serverStats.resetFsyncThresholdExceedCount(); }
public void announceStartNewTest(WikiPage test) throws Exception; public void setExecutionLog(CompositeExecutionLog log); public void processTestOutput(String output) throws Exception; public void processTestResults(WikiPage test, TestSummary testSummary) throws Exception; }
public static void assertSubString(String substring, String string) { if(string.indexOf(substring) == -1) fail("substring '" + substring + "' not found.");
public void shouldHandleInstanceMethods() throws Exception { testProperties.setProperty(ConfigurationParameter.PLUGINS.getKey(), InstantiableDummyPlugin.class.getName()); testProperties.setProperty("responderName", "instanceTest"); loader = new PluginsLoader(new ComponentFactory(testProperties), classLoader); loader.loadResponders(responderFactory); assertEquals(WikiPageResponder.class, responderFactory.getResponderClass("instanceTest")); }
public synchronized void waitForClose(final long timeoutMillis) throws Exception { if (!closed) {
public abstract void write(HttpServletResponse response) throws IOException; }
protected InstructionResult executeInternal(InstructionExecutor executor) throws SlimException { executor.addPath(this.path); return new InstructionResult.Ok(getId()); }
public PageData getRevisionData(FileSystemPage page, String label); public Collection<VersionInfo> history(FileSystemPage page); public VersionInfo makeVersion(FileSystemPage page, PageData data); public void removeVersion(FileSystemPage page, String versionName); public void prune(FileSystemPage page); }
public void testShouldResolveSymbolicLinkToActualPageAndApplyRevisionControlOperations() throws Exception { replay(this.revisionController); final String symbolicLinkName = "SymbolicLink"; final String pageOneName = "PageOne"; final String symbolicLinkPageName = pageOneName + "." + symbolicLinkName; createSymbolicLink(symbolicLinkName, pageOneName); this.request.setResource(symbolicLinkPageName); invokeResponderAndCheckResponseContains("The page " + symbolicLinkPageName + " doesn't support '" + this.revisionControlOperation + "' operation."); }
public void testSpacesInFileName() throws Exception { String restoredPath = FileResponder.restoreRealSpacesInFileName("files/test%20File%20With%20Spaces%20In%20Name"); assertEquals("files/test File With Spaces In Name", restoredPath); request.setResource("files/file4%20with%20spaces.txt"); responder = (FileResponder) FileResponder.makeResponder(request, SampleFileUtility.base); assertEquals("files/file4 with spaces.txt", responder.resource); }
private static String makeAllButLastCrumb(String[] crumbs, String separator, TagGroup group) { String trail = ""; for(int i = 0; i < crumbs.length - 1; i++) { String crumb = crumbs[i]; HtmlTag link = makeLink("/" + trail + crumb, crumb); link.tail = separator; trail = trail + crumb + separator; group.add(link); } return trail; }
public void manyInputsAndRows() throws Exception { makeTables( "!|scenario|login|user name|password|password|pin|pin|\n" + "|login|@userName|with password|@password|and pin|@pin|\n" + "\n" + "!|DT:LoginPasswordPin|\n" + "|user name|password|pin|\n" + "|bob|xyzzy|7734|\n" + "|bill|yabba|8892|\n" ); List<CallInstruction> expectedInstructions = asList(new CallInstruction("decisionTable_did_0/scriptTable_s_id_0", "scriptTableActor", "loginWithPasswordAndPin", new Object[]{"bob", "xyzzy", "7734"}), new CallInstruction("decisionTable_did_1/scriptTable_s_id_0", "scriptTableActor", "loginWithPasswordAndPin", new Object[]{"bill", "yabba", "8892"})); assertEquals(expectedInstructions, instructions()); }
private WikiPage addPage(String pageName, String content) throws Exception { return pageBuilder.addPage(root, PathParser.parse(pageName), content); }
protected void markField(int tableRow, int matchedRow, int col) { String actualValue = queryResults.getCell(fieldNames.get(col), matchedRow); String expectedValue = table.getCellContents(col, tableRow); table.setCell(col, tableRow, replaceSymbolsWithFullExpansion(expectedValue)); if (actualValue == null) failMessage(col, tableRow, "field not present");
public void updatesShouldNotBeRunIfCurrentVersionAlreadyUpdated() throws Exception { updater = new WikiContentUpdater(context) { @Override List<Update> makeAllUpdates() { return Collections.<Update>singletonList(new UpdateSpy()); } }; String version = "TestVersion"; updater.setFitNesseVersion(version); Properties properties = updater.getProperties(); properties.put("Version", version); updater.update(); assertFalse(updateDone); }
public HtmlTag makeErrorMessage() { HtmlTag tag = HtmlUtil.makeDivTag("centered"); tag.add(message); return tag; }
public void testIncludingVariablesSeamless() throws Exception { verifyIncludingVariables("--seamless "); }
private boolean hasMavenProjectDependency(Set<String> classpath) throws MalformedURLException { try { List<URL> urls = new ArrayList<URL>();
public void testOrderWithExtraPrefixes() throws Exception { String[] names = {"r-1-3-2", "r-2-2-1", "r-3-1-3"}; String[] expected = {"r-2-2-1", "r-1-3-2", "r-3-1-3"}; assertOrderedNodeNames(names, expected); }
private void appendToMessage(byte[] bytes) throws Exception { messageBuffer.write(bytes); }
public void visitLocalVariable(final String name, final String desc, final String signature, final Label start, final Label end, final int index) { mv.visitLocalVariable(name, desc, signature, start, end, index); }
private void setContent(String content) throws Exception { this.content = content; addChildWidgets(this.content); }
public void testTrimPath() {
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); pageOne = WikiPageUtil.addPage(root, PathParser.parse("PageOne"), "this is page one ^ChildPage"); pageTwo = WikiPageUtil.addPage(root, PathParser.parse("PageTwo"), "I am Page Two my brother is PageOne . SomeMissingPage"); pageThree = WikiPageUtil.addPage(root, PathParser.parse("PageThree"), "This is !-PageThree-!, I Have \n!include PageTwo"); WikiPageUtil.addPage(pageTwo, PathParser.parse("ChildPage"), "I will be a virtual page to .PageOne "); whereUsed = new WhereUsedPageFinder(root, this); hits.clear(); }
public void submitRequest(Request si) {
public final void connected() { reconnectAttempt.set(0); continuousTimeout.set(0); }
public void testSetupDecoratorShouldAddColumnNameDataTypeAndDeltaToSummary() throws Exception { decorator.setupDecorator(new String[] {"Column1", "int", "1"}); assertEquals("Column1", (String) decorator.summary.get(IncrementColumnsValue.COLUMN_NAME)); assertEquals(new Delta("int", "1"), decorator.summary.get(IncrementColumnsValue.DELTA)); }
private void extractRows(HashMap<String, String> map, NodeList rows) { for (int rowIndex = 0; rowIndex < rows.size(); rowIndex++) { extractRow(map, rows, rowIndex);
protected void initClient(ConnectionFactory cf) throws Exception { client=new MemcachedClient(cf, AddrUtil.getAddresses("::1:11212"));
public void shouldUseTheDefaultLocale() throws ParseException { when(request.getSession()).thenReturn(session); when(request.getAttribute("javax.servlet.jsp.jstl.fmt.locale.request")).thenReturn(null); when(session.getAttribute("javax.servlet.jsp.jstl.fmt.locale.session")). thenReturn(null); when(context.getAttribute("javax.servlet.jsp.jstl.fmt.locale.application")). thenReturn(null); when(context.getInitParameter("javax.servlet.jsp.jstl.fmt.locale")). thenReturn(null); when(request.getLocale()).thenReturn(Locale.getDefault()); DecimalFormat fmt = new DecimalFormat("##0,00"); fmt.setMinimumFractionDigits(2); float theValue = 10.00f; String formattedValue = fmt.format(theValue); assertThat((Float) converter.convert(formattedValue, float.class, bundle), is(equalTo(theValue))); }
boolean waitForQuorum(long id) throws InterruptedException { int loopCounter = 0; while((quora.get(id).size() <= count/2) && (loopCounter < 50)){ Thread.sleep(100); loopCounter++; } if((loopCounter >= 50) && (quora.get(id).size() <= count/2)){ return false;
public void shouldReturnNotNullWhenJavaIsNotAvailableOnCommandLineAndJavaHomeIsPresent() throws IOException { Toolchain toolchain = new ReturningToolChain(null); assertNotNull(JavaLocator.findExecutableFromToolchain(toolchain)); }
public void testUnnecessarySnap() throws Exception { testPopulatedLeaderConversation(new PopulatedLeaderConversation() { @Override
public void testShutdownCalledFromServer() throws Exception { Thread thread = new Thread() { public void run() { try { RequestBuilder request = new RequestBuilder("/?responder=shutdown"); ResponseParser.performHttpRequest("localhost", FitNesseUtil.port, request); doneShuttingDown = true; } catch(Exception e) { e.printStackTrace(); } } }; thread.start(); Thread.sleep(500); assertTrue(doneShuttingDown); assertFalse(fitnesse.isRunning()); }
public void forwardingToANonGetMethodChangesMethodParameterToTheCorrectHttpMethod() throws Exception { mockery.checking(new Expectations() { { one(request).setParameter("_method", "POST"); ignoring(anything()); } }); logicResult.forwardTo(MyComponent.class).annotated(); mockery.assertIsSatisfied(); }
public void shoudCallPredestroyExactlyOneTimeForComponentsScannedFromTheClasspath() { CustomComponentWithLifecycleInTheClasspath component = getFromContainer(CustomComponentWithLifecycleInTheClasspath.class); assertThat(component.getCallsToPreDestroy(), is(equalTo(0))); provider.stop(); assertThat(component.getCallsToPreDestroy(), is(equalTo(1))); resetProvider(); }
public void updateHistogram(String name, int amount) { metrics.put(name, metrics.get(name) + amount); }
public void shouldForwardWhenUriDoesntBelongToAnyLogic() throws Exception { mockery.checking(new Expectations() { { one(router).parse("/any/url", HttpMethod.GET, request); will(returnValue(null)); one(request).getRequestDispatcher("/any/url"); will(returnValue(dispatcher)); one(dispatcher).forward(request, response); } }); view.forward("/any/url"); mockery.assertIsSatisfied(); }
public static void gotoUrl(Context context, String url) throws ActivityNotFoundException { if ( url != null && url.length() > 0 ) { Uri uri = Uri.parse(url);
public static Collection<Object[]> configs() { return Arrays.asList(new Object[][] { { Mode.PROXY }, { Mode.REGULAR }, { Mode.SSL }}); }
public void testInitiateConnection(long sid) throws Exception { SocketChannel channel; LOG.debug("Opening channel to server " + sid); channel = SocketChannel .open(self.quorumPeers.get(sid).electionAddr); channel.socket().setTcpNoDelay(true); initiateConnection(channel, sid); }
public void testEmailWidget() throws Exception { ParentWidget page = new WidgetRoot("someone@somewhere.com", mockSource); assertEquals(1, page.numberOfChildren()); assertEquals(EmailWidget.class, page.nextChild().getClass()); }
public T get(long l, TimeUnit tu) throws InterruptedException, ExecutionException, TimeoutException { return content; }
public void testInvalidPath() throws Exception { pLatch = new CountDownLatch(1); processor = new PrepRequestProcessor(zks, new MyRequestProcessor()); SetDataRequest record = new SetDataRequest("", new byte[0], -1); Request req = createRequest(record, OpCode.setData); processor.pRequest(req); pLatch.await(); Assert.assertEquals(outcome.getHdr().getType(), OpCode.error); Assert.assertEquals(outcome.getException().code(), KeeperException.Code.BADARGUMENTS); }
private TestSummary showResult(Element result) throws Exception { String page = XmlUtil.getTextValue(result, "relativePageName"); Element counts = XmlUtil.getElementByTagName(result, "counts"); int right = Integer.parseInt(XmlUtil.getTextValue(counts, "right")); int wrong = Integer.parseInt(XmlUtil.getTextValue(counts, "wrong")); int ignores = Integer.parseInt(XmlUtil.getTextValue(counts, "ignores")); int exceptions = Integer.parseInt(XmlUtil.getTextValue(counts, "exceptions")); TestSummary testSummary = new TestSummary(right, wrong, ignores, exceptions); String marker = (wrong > 0 || exceptions > 0) ? "*" : " "; output.println(String.format("%s Page:%s right:%d, wrong:%d, ignored:%d, exceptions:%d", marker, page, right, wrong, ignores, exceptions)); return testSummary; }
public void testValues() { addDataPoints(); Map<String, Object> values = testCounterSet.values(); assertEquals(10, values.size(), "There should be 10 values in the set"); assertEquals(0.5D, values.get("avg_key1_test"), "avg_key1_test should =0.5"); assertEquals(0L, values.get("min_key1_test"), "min_key1_test should =0"); assertEquals(1L, values.get("max_key1_test"), "max_key1_test should =1"); assertEquals(2L, values.get("cnt_key1_test"), "cnt_key1_test should =2"); assertEquals(1L, values.get("sum_key1_test"), "sum_key1_test should =1"); assertEquals(3.5, values.get("avg_key2_test"), "avg_key2_test should =3.5"); assertEquals(2L, values.get("min_key2_test"), "min_key2_test should =2"); assertEquals(5L, values.get("max_key2_test"), "max_key2_test should =5"); assertEquals(4L, values.get("cnt_key2_test"), "cnt_key2_test should =4"); assertEquals(14L, values.get("sum_key2_test"), "sum_key2_test should =14"); }
public void testSnapFilesLessThanToRetain() throws Exception { int nRecentCount = 4; int fileToPurgeCount = 2; AtomicInteger offset = new AtomicInteger(0); tmpDir = ClientBase.createTmpDir(); File version2 = new File(tmpDir.toString(), "version-2"); assertTrue("Failed to create version_2 dir:" + version2.toString(), version2.mkdir()); List<File> snapsToPurge = new ArrayList<File>(); List<File> logsToPurge = new ArrayList<File>(); List<File> snaps = new ArrayList<File>(); List<File> logs = new ArrayList<File>(); createDataDirFiles(offset, fileToPurgeCount, false, version2, snapsToPurge, logsToPurge); createDataDirFiles(offset, nRecentCount, false, version2, snaps, logs); logs.add(logsToPurge.remove(0));
public void testShouldReportPortOfMinusOneIfNotInitialized() { FitNesseContext.globalContext = null; assertEquals(-1, FitNesseContext.getPort()); }
private native void nativeCleanup(long ctxPtr); @Override protected void engineSetMode(String mode) throws NoSuchAlgorithmException { if ( ! mode.equals("CBC") ) { throw new NoSuchAlgorithmException("This only supports CBC mode"); } } @Override protected void engineSetPadding(String padding) throws NoSuchPaddingException { if ( ! mIsInited ) { NativeLib.init(); } if ( padding.length() == 0 ) { return; } if ( ! padding.equals("PKCS5Padding") ) { throw new NoSuchPaddingException("Only supports PKCS5Padding."); } mPadding = true; } @Override protected byte[] engineUpdate(byte[] input, int inputOffset, int inputLen) { int maxSize = engineGetOutputSize(inputLen); byte output[] = new byte[maxSize]; int updateSize = update(input, inputOffset, inputLen, output, 0); if ( updateSize == maxSize ) { return output; } else {
protected String buildCommand(String program, String classPath) throws Exception { String testRunner = page.getData().getVariable("COMMAND_PATTERN"); if (testRunner == null) testRunner = DEFAULT_COMMAND_PATTERN; String command = replace(testRunner, "%p", classPath); command = replace(command, "%m", program); return command; }
public static void beforeClass() throws Exception {
synchronized public void processRequest(Request request) {
protected ZooKeeper createClient() throws IOException, InterruptedException { return createClient(hostPort); }
public String from(int begin) { return input.substring(begin); }
boolean matches(WikiPage wikiPage) { return (tags == null) ? matchIfNoTags : testMatchesQuery(wikiPage); }
protected Update makeUpdate() throws Exception { return new ReplacingFileUpdate(context.getRootPagePath(), "testFile", destDirName); }
protected FixtureWithNamedSystemUnderTestBase createNamedFixture() { createFixtureInstance(namedFixtureName()); return new FixtureWithNamedSystemUnderTestJsr223( (FixtureProxyJsr223) getVerifiedInstance());
public void testInvalidSnapshot() throws Exception { ZooKeeper zk = createClient(); try { for (int i = 0; i < 2000; i++) { zk.create("/invalidsnap-" + i, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); } } finally { zk.close(); } NIOServerCnxnFactory factory = (NIOServerCnxnFactory) serverFactory; stopServer();
public void sendBuffer(ByteBuffer... buffers) { if (LOG.isTraceEnabled()) { LOG.trace("Add a buffer to outgoingBuffers, sk {} is valid: {}", sk, sk.isValid()); } synchronized (outgoingBuffers) { for (ByteBuffer buffer : buffers) { outgoingBuffers.add(buffer); } outgoingBuffers.add(packetSentinel); } requestInterestOpsUpdate(); }
public void setUp() throws Exception { tmpDir = ClientBase.createTmpDir(); peer = createQuorumPeer(tmpDir); participantId = 1; Map<Long, QuorumPeer.QuorumServer> peers = peer.getQuorumVerifier().getAllMembers(); observerId = peers.size(); leader = createLeader(tmpDir, peer); peer.leader = leader; peers.put(observerId, new QuorumPeer.QuorumServer( observerId, new InetSocketAddress("127.0.0.1", PortAssignment.unique()), new InetSocketAddress("127.0.0.1", PortAssignment.unique()), new InetSocketAddress("127.0.0.1", PortAssignment.unique()), QuorumPeer.LearnerType.OBSERVER));
<T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); }
public void testSubPagePath() throws Exception { path = makePath(">MySubPagePath.ChildPage"); assertTrue(path.isSubPagePath()); assertEquals("MySubPagePath", path.getFirst()); assertEquals("ChildPage", path.getRest().getFirst()); assertTrue(path.getRest().getRest().isEmpty()); }
public static void main(String[] args) { ControllerServerConfig config; try { if (args.length != 1) {
private void appendToQueuedBuffer(ByteBuf buf) { checkIsInEventLoop("appendToQueuedBuffer"); if (queuedBuffer.numComponents() == queuedBuffer.maxNumComponents()) {
private int frameCoordinate(int frame) { return frame < 9 ? frame * 2 + 1 : frame * 2 + 2; }
public void testComplete(TestPage test, TestSummary testSummary) { LOG.info(new WikiPagePath(WikiTestPageUtil.getSourcePage(test)).toString() + " r " + testSummary.getRight() + " w " + testSummary.getWrong() + " " + testSummary.getExceptions()
public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { this.applicationContext = applicationContext; }
public void makeDirectory(File path) { files.put(path.getPath(), payload(DIRECTORY_PLACEHOLDER)); }
public void processResult(int rc, String path, Object ctx, String name) { try { safeProcessResult(rc, path, ctx, name);
void movedPermanentlyTo(String url);  <T> T movedPermanentlyTo(Class<T> controller); }
private void setCachedData(PageData data) throws Exception { if (cachedData != null) cachedData.clear(); cachedData = new SoftReference<PageData>(data); cachedDataCreationTime = System.currentTimeMillis(); }
private void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) { testSystemListener.testSystemStarted(testSystem); }
public Object aroundSlimInvoke(FixtureInteraction interaction, Method method, Object... arguments) throws Exception { METHODS.add(method.getName()); return interaction.methodInvoke(method, this, arguments); }
public void table(List<List<String>> table) {
public void testMutatorOperationDecrCloning() { int exp = 823862; long def = 28775; int by = 7735; MutatatorOperation op = ofact.mutate(Mutator.decr, TEST_KEY, by, def, exp, genericCallback); MutatatorOperation op2 = cloneOne(MutatatorOperation.class, op); assertKey(op2); assertEquals(-1, op2.getExpiration()); assertEquals(-1, op2.getDefault()); assertEquals(by, op2.getBy()); assertSame(Mutator.decr, op2.getType()); assertCallback(op2); }
public void onEachLink(String path, String linkName, boolean symlink, String user, int uid, String group, int gid) throws IOException { path = fixPath(path); createParentDirectories((new File(path)).getParent(), user, uid, group, gid); final TarArchiveEntry entry = new TarArchiveEntry(path, symlink ? TarArchiveEntry.LF_SYMLINK : TarArchiveEntry.LF_LINK); entry.setLinkName(linkName); tarOutputStream.putArchiveEntry(entry); tarOutputStream.closeArchiveEntry(); console.info( "link:" + entry.getName() + " linkname:" + entry.getLinkName()
private Object get(final int local) { maxLocals = Math.max(maxLocals, local); return local < locals.size() ? locals.get(local) : Opcodes.TOP; }
protected byte[] computeSHAdigest(final byte[] value) { try { return MessageDigest.getInstance("SHA").digest(value);
public void allowsParametersToBeOverriden() { vraptor.setParameter("name", "silveira"); assertThat(vraptor.getParameter("name"), is(equalTo("silveira"))); mockery.assertIsSatisfied(); }
public String ensureSuffix(String templateName) { if (templateName.endsWith(".vm")) { return templateName; } return templateName + ".vm"; }
public TarArchiveEntry map( final TarArchiveEntry pEntry ) { TarArchiveEntry entry = pEntry; for (Mapper mapper : mappers) { entry = mapper.map(entry); } return entry; }
public static String aclToString(List<ACL> acls) { StringBuilder sb = new StringBuilder(); for (ACL acl : acls) { sb.append(acl.getId().getScheme()); sb.append(":"); sb.append(acl.getId().getId()); sb.append(":"); sb.append(getPermString(acl.getPerms())); } return sb.toString(); }
private void addExceptionAndCloseResponse(Exception e) throws IOException { response.add(ErrorResponder.makeExceptionString(e)); response.close(); }
public abstract List<String> getChildren(String nodePath); }
public void testActionPropertiesHtml() throws Exception { WikiPage page = root.addChildPage("SomePage"); PageData data = page.getData(); String html = new PropertiesResponder().makeTestActionCheckboxesHtml(data).html(); assertSubString("<div style=\"float: left; width: 180px;\">Actions:", html); assertSubString("Actions:", html); assertSubString("<input type=\"checkbox\" name=\"Edit\" checked=\"true\"/> - Edit", html); assertSubString("<input type=\"checkbox\" name=\"Versions\" checked=\"true\"/> - Versions", html); assertSubString("<input type=\"checkbox\" name=\"Properties\" checked=\"true\"/> - Properties", html); assertSubString("<input type=\"checkbox\" name=\"Refactor\" checked=\"true\"/> - Refactor", html); assertSubString("<input type=\"checkbox\" name=\"WhereUsed\" checked=\"true\"/> - WhereUsed", html); }
public static boolean doesLineNeedExtraLastColumn(String stringPassed) { String firstColumn = Arrays.asList(stringPassed.split("\\|")).get(1).trim(); return firstColumn.equals("check") || firstColumn.equals("check not"); }
Future<V> addListener(BulkGetCompletionListener listener);  Future<V> removeListener(BulkGetCompletionListener listener); }
private QuorumPeer waitForQuorumPeer(MainThread mainThread, int timeout) throws TimeoutException { long start = Time.currentElapsedTime(); while (true) { QuorumPeer quorumPeer = mainThread.isAlive() ? mainThread.getQuorumPeer() : null;
public void setResponseCachingEnabled(boolean isEnabled);  public int getConnectionMaxTokens(); public void setConnectionMaxTokens(int val); public int getConnectionTokenFillTime(); public void setConnectionTokenFillTime(int val); public int getConnectionTokenFillCount(); public void setConnectionTokenFillCount(int val); public int getConnectionFreezeTime(); public void setConnectionFreezeTime(int val); public double getConnectionDropIncrease(); public void setConnectionDropIncrease(double val); public double getConnectionDropDecrease(); public void setConnectionDropDecrease(double val); public double getConnectionDecreaseRatio(); public void setConnectionDecreaseRatio(double val);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); }
int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  void resetNonMTLSConnCount();  void resetAuthFailedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public void tryToParseTheFileIntoTheList(File updateFileList, ArrayList<String> list) { if (!updateFileList.exists()) throw new RuntimeException("Could Not Find UpdateList"); try { parseTheFileContentToAList(updateFileList, list);
private static void serializeTree(int depth, int width, int len) throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException { DataTree tree = new DataTree(); createNodes(tree, "/", depth, width, new byte[len]); int count = tree.getNodeCount(); BinaryOutputArchive oa = BinaryOutputArchive.getArchive(new NullOutputStream()); System.gc(); long start = System.nanoTime(); tree.serialize(oa, "test"); long end = System.nanoTime(); long durationms = (end - start)/1000000L; long pernodeus = ((end - start)/1000L)/count; System.out.println("Serialized " + count + " nodes in " + durationms + " ms (" + pernodeus + "us/node), depth="
public void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException { new Rules(router) { @Override public void routes() { routeFor("/clients/add").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null); } }; assertThat(router.parse("/clients/add", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method( "add", Dog.class)))); assertThat(router.parse("/clients/add", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method( "add", Dog.class)))); mockery.assertIsSatisfied(); }
public TestSystem create(Descriptor descriptor) throws IOException { InProcessSlimClientBuilder clientBuilder = new InProcessSlimClientBuilder(descriptor); SlimCommandRunningClient slimClient = clientBuilder.build(); HtmlSlimTestSystem testSystem = new HtmlSlimTestSystem(clientBuilder.getTestSystemName(), slimClient, slimTableFactory, customComparatorRegistry); return testSystem; }
public void convertArraysOfBooleans() throws Exception { caller.call("testSlim", "setBooleanArray", "[true ,false, false,true]"); assertEquals("[true, false, false, true]", caller.call("testSlim", "getBooleanArray")); }
public static void setup() { System.setProperty(ZKAuditProvider.AUDIT_ENABLE, "true"); LoggerTestTool loggerTestTool = new LoggerTestTool(Slf4jAuditLogger.class); os = loggerTestTool.getOutputStream(); }
public void testValidArguments() { String[] args = {"2181", "/data/dir", "60000", "10000"}; serverConfig.parse(args); assertEquals(2181, serverConfig.getClientPortAddress().getPort()); assertTrue(checkEquality("/data/dir", serverConfig.getDataDir())); assertEquals(60000, serverConfig.getTickTime()); assertEquals(10000, serverConfig.getMaxClientCnxns()); }
public void shouldCallCloseOnClosableTestSystemListener() throws IOException, InterruptedException { WikiPage testPage = addTestPage(suite, "TestPage1", "!define TEST_SYSTEM {A}"); ClosableTestSystemListener listener = mock(ClosableTestSystemListener.class); PagesByTestSystem pagesByTestSystem = new PagesByTestSystem(asList(testPage), context.root, null); MultipleTestsRunner runner = new MultipleTestsRunner(pagesByTestSystem, testSystemFactory); runner.addTestSystemListener(listener); runner.executeTestPages(); verify(listener).close(); }
public void withMultipart() throws Exception { when(request.getContentType()).thenReturn("multipart/form-data"); assertThat(interceptor.accepts(method), equalTo(true)); }
public String applyScalaArtifactVersioningScheme(String name) { return name + '_' + major + '.' + minor; }
public void shouldAcceptCaseInsensitiveRequestMethods() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(RequestInfo.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getContextPath(); will(returnValue("")); one(request).getRequestURI(); will(returnValue("/url")); one(request).getMethod(); will(returnValue("pOsT")); one(router).parse("/url", HttpMethod.POST, webRequest); will(returnValue(expected)); one(request).getParameter("_method"); will(returnValue(null)); }}); ResourceMethod resource = translator.translate(info); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied(); }
public void resetConverters() { ConverterRegistry.resetToStandardConverters(); }
public List<Object> query() { List<Object> table = list(); for (int i=1; i<=n; i++) { List<Object> ncol = list("n",String.valueOf(i)); List<Object> n2col = list("2n", String.valueOf(2*i)); List<Object> row = list(ncol, n2col); table.add(row); } return table; }
public void testTokenSubstitution() throws Exception { InputStream in = new ReaderInputStream(new StringReader("#!/bin/sh\ncat [[artifactId]][[myProperty1]] \necho '[[myProperty2]]'\n")); FilteredFile placeHolder = new FilteredFile(in, variableResolver, StandardCharsets.UTF_8); String actual = placeHolder.toString(); assertEquals("#!/bin/sh\ncat jdebcustom1 \necho 'custom2'\n", actual); }
Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
private static void establishDirectory(String path) { File filesDir = new File(path); if(!filesDir.exists()) filesDir.mkdir();
private Value next() throws IOException { if (vIdx < vLen) { Value v = valList.get(vIdx);
private void utestChildren() throws IOException, InterruptedException, KeeperException { ZooKeeper zk = new ZooKeeper("127.0.0.1:33221", CONNECTION_TIMEOUT, this); for (int i = 0; i < 10000; i++) { zk.getChildren("/" + i, true); } zk.close(); }
public Parse makeMessageCell(Exception e) { Parse errorCell = new Parse("td", "", null, null); final StringWriter buffer = new StringWriter(); e.printStackTrace(new PrintWriter(buffer)); errorCell.addToTag(" colspan=\"" + (columnBindings.length + 1) + "\""); errorCell.addToBody("<i>" + ERROR_INDICATOR + e.getMessage() + "</i>"); errorCell.addToBody("<pre>" + (buffer.toString()) + "</pre>"); wrong(errorCell); return errorCell; }
private void checkResultElement(Element resultElement, PageResult result) throws Exception { assertEquals(result.title(), XmlUtil.getTextValue(resultElement, "relativePageName")); assertEquals(result.content(), XmlUtil.getTextValue(resultElement, "content")); Element countsElement = XmlUtil.getElementByTagName(resultElement, "counts"); TestSystemBase.TestSummary testSummary = result.testSummary(); checkCounts(testSummary, countsElement); }
public MemcachedNode createMemcachedNode(SocketAddress sa, SocketChannel c, int bufSize) { return new BinaryMemcachedNodeImpl(sa, c, bufSize, createReadOperationQueue(),
public void testElement3() throws Exception { createNremoveMelementTest("/testElement3", 1000, 500); }
public void observing() throws Exception { pageFinder = pageFinder("has"); pageFinder.search(root); hits.assertPagesFound(pageOne.getName(), virtualPage.getName()); }
public void testBasics() throws Exception { CommandRunner runner = new CommandRunner(new String[] { "java", "-cp", GradleSupport.CLASSES_DIR, "fitnesse.testutil.Echo" }, null, executionLogListener); runner.asynchronousStart(); runner.join(); assertHasRegexp(Echo.ECHO_THIS, executionLogListener.stdOut.toString()); assertEquals("", executionLogListener.stdErr.toString()); assertEquals(true, executionLogListener.exceptions.isEmpty()); assertEquals(0, executionLogListener.exitCode); }
private static native byte[] nTransformMasterKey(byte[] password, byte[] salt, int parallelism, long memory, long iterations, byte[] secretKey, byte[] associatedData, long version) throws IOException; }
public void tearDown() throws Exception { LOG.info("Error count {}", errors.get()); }
public void sendHtmlInstructionForTable() throws Exception { String testPage = "!define BONUSRatingTbl {| RATING_NBR | DESCR2 |\n" + "| 1 | Met 100% of goals |\n" + "| 2 | Met < 50% of goals |\n" + "}\n" + "| script |\n" + "| show | echo | ${BONUSRatingTbl}|\n"; st = makeScriptTable(testPage, false); assertions.addAll(st.getAssertions()); assertEquals(assertions.toString(), 2, assertions.size()); assertEquals("Instruction{id='NOOP'}", assertions.get(0).getInstruction().toString()); assertEquals("{id='scriptTable_id_0', instruction='call', instanceName='scriptTableActor', methodName='echo', args=[<table>\n" + "\t<tr>\n" +
public int doFinal( byte[] out, int outOff) { finish(); Pack.intToBigEndian(H1, out, outOff); Pack.intToBigEndian(H2, out, outOff + 4); Pack.intToBigEndian(H3, out, outOff + 8); Pack.intToBigEndian(H4, out, outOff + 12); Pack.intToBigEndian(H5, out, outOff + 16); Pack.intToBigEndian(H6, out, outOff + 20); Pack.intToBigEndian(H7, out, outOff + 24); Pack.intToBigEndian(H8, out, outOff + 28); reset(); return DIGEST_LENGTH; }
public void shouldThrowExceptionIfYouHaventSpecifiedWhereToGoOnValidationError() throws SecurityException, NoSuchMethodException, InterceptionException, IOException { final ResourceMethod method = mockery.methodFor(AnyController.class, "didntSpecifyWhereToGo"); final AnyController controller = new AnyController(validator); mockery.checking(new Expectations() { { one(info).getParameters(); will(returnValue(new Object[0])); one(validator).hasErrors(); will(returnValue(true)); } }); try { interceptor.intercept(stack, method, controller);
public String pathFor(ResourceMethod method, String result) { return "/" + method.getResource().getType().getSimpleName() + "/" + method.getMethod().getName() + "." + result + ".jsp";
public Maybe<Symbol> parse(Symbol current, Parser parser) { Symbol body = parser.parseToIgnoreFirst(current.getType()); if (body.getChildren().isEmpty()) return Symbol.nothing; if (!parser.getCurrent().isType(current.getType())) return Symbol.nothing; return new Maybe<Symbol>(current.add(body)); }
static MarkUpSystem make() { return new MarkUpSystemV2(); }
public Writer getWriter(FitNesseContext context, WikiPage page, TestSummary counts, long time) throws Exception { File resultPath = new File(PageHistory.makePageHistoryFileName(context, page, counts, time)); File resultDirectory = new File(resultPath.getParent()); resultDirectory.mkdirs(); File resultFile = new File(resultDirectory, resultPath.getName()); return new FileWriter(resultFile); }
synchronized public String toString() { StringBuffer sb = new StringBuffer("Session Sets (") .append(sessionSets.size()).append("):\n"); ArrayList<Long> keys = new ArrayList<Long>(sessionSets.keySet()); Collections.sort(keys); for (long time : keys) { sb.append(sessionSets.get(time).sessions.size()) .append(" expire at ").append(new Date(time)).append(":\n"); for (SessionImpl s : sessionSets.get(time).sessions) { sb.append("\t0x").append(Long.toHexString(s.sessionId)) .append("\n"); } } return sb.toString(); }
private List<String> asList() { List<String> list = new ArrayList<String>(); for (Cell cell : cells) {
private String getLine(int number) throws Exception { String value = null; String pageContent = FitnesseFixtureContext.page.getData().getHtml(); String lineizedContent = convertBreaksToLineSeparators(pageContent); StringTokenizer tokenizedLines = tokenizeLines(lineizedContent); for (int i = number; i != 0; i--) value = tokenizedLines.nextToken(); return value.trim(); }
public BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys) { return asyncGetBulk(keys, transcoder); }
public void testCreate(boolean useAsync) throws Exception { multi(zk, Arrays.asList( Op.create("/multi0", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT), Op.create("/multi1", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT), Op.create("/multi2", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT)), useAsync); zk.getData("/multi0", false, null); zk.getData("/multi1", false, null); zk.getData("/multi2", false, null); }
private void handleInputQueue() { if (!addedQueue.isEmpty()) { getLogger().debug("Handling queue");
public void trulyEqual() throws Exception { assertTrue(approximatelyEqual("3.0", "3.0")); }
public void testMultiToFollower() throws Exception { qu = new QuorumUtil(1); CountdownWatcher watcher = new CountdownWatcher(); qu.startQuorum(); int index = 1; while(qu.getPeer(index).peer.leader == null) index++; ZooKeeper zk = new ZooKeeper( "127.0.0.1:" + qu.getPeer((index == 1)?2:1).peer.getClientPort(), ClientBase.CONNECTION_TIMEOUT, watcher); watcher.waitForConnected(CONNECTION_TIMEOUT); zk.multi(Arrays.asList( Op.create("/multi0", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT), Op.create("/multi1", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT), Op.create("/multi2", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT) )); zk.getData("/multi0", false, null); zk.getData("/multi1", false, null); zk.getData("/multi2", false, null); zk.close(); }
public void testGetBoundary() throws Exception { String boundary = builder.getBoundary(); assertEquals(boundary, builder.getBoundary()); assertFalse(boundary.equals(new RequestBuilder("blah").getBoundary())); }
public void process(WatchedEvent event) { ReplyHeader h = new ReplyHeader(-1, -1L, 0); if (LOG.isTraceEnabled()) { ZooTrace.logTraceMessage( LOG, ZooTrace.EVENT_DELIVERY_TRACE_MASK, "Deliver event " + event + " to 0x" + Long.toHexString(this.sessionId) + " through " + this); }
private static String[] parseSymbol(String text) { Matcher matcher = SYMBOL_REPLACEMENT_PATTERN.matcher(text); String[] symbols = new String[] {"","",""}; if (matcher.matches()) { symbols[0] = matcher.group(1); symbols[1] = matcher.group(2); symbols[2] = matcher.group(3); } else { symbols[1] = text; } return symbols; }
public void starting(TestInfo testInfo) {
void registerNode(TreeNode node, int depth) { while (depth > nodesAtDepths.size()) { nodesAtDepths.add(new ArrayList<TreeNode>()); } nodesAtDepths.get(depth - 1).add(node); nodesByName.put(node.label, node); this.count++; }
public void pageImportError(WikiPage localPage, Exception e) { } } public static class AuthenticationRequiredException extends Exception { private static final long serialVersionUID = 1L; public AuthenticationRequiredException(String message) { super(message); } } }
public void shouldDetectTheDefaultLogicNameIfAnnotationWithoutValue() throws SecurityException, NoSuchMethodException { assertThat(Info.getLogicName(DefaultComponents.class.getMethod("emptyAnnotation")), is(equalTo("emptyAnnotation"))); mockery.assertIsSatisfied(); }
public void setUp() throws Exception { setUp(false, true); }
public void shouldBeAbleToConvertEmpty() { assertThat(converter.convert("", BigDecimal.class, bundle), is(nullValue())); mockery.assertIsSatisfied(); }
public void testRunnerDefault() throws Exception { String pageText = "!define TEST_SYSTEM {slim}\n"; WikiPage page = makeTestPage(pageText); Descriptor defaultDescriptor2 = TestSystem.getDescriptor(page.getData(), context.pageFactory, false); assertEquals("fitnesse.slim.SlimService", defaultDescriptor2.testRunner); Descriptor defaultDescriptor3 = TestSystem.getDescriptor(page.getData(), context.pageFactory, true); assertEquals("fitnesse.slim.SlimService", defaultDescriptor3.testRunner); String specifiedPageText = "!define REMOTE_DEBUG_RUNNER {Different runner}"; WikiPage specifiedPage = makeTestPage(specifiedPageText); Descriptor specifiedDescriptor = TestSystem.getDescriptor(specifiedPage.getData(), context.pageFactory, true); assertEquals("Different runner", specifiedDescriptor.testRunner); }
protected void afterKeyBytes(final ByteBuffer b) { if (expBytes != null) { b.put((byte) ' ');
public void testSimpleDeletionAsync() throws KeeperException, InterruptedException { final CountDownLatch latch = new CountDownLatch(1); AsyncCallback.Create2Callback cb = (rc, path, ctx, name, stat) -> { assertEquals(ctx, "context"); latch.countDown(); }; zk.create("/foo", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER, cb, "context"); assertTrue(latch.await(5, TimeUnit.SECONDS)); zk.create("/foo/bar", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); zk.delete("/foo/bar", -1);
public void set(String coin, Integer amount) { if (!COIN_VALUES.containsKey(coin)) { throw new IllegalArgumentException("Unknown coin type " + coin); } totalCents += amount * COIN_VALUES.get(coin); }
public void parsesTables() { ParserTestHelper.assertParses("|a|\n", "SymbolList[Table[TableRow[TableCell[Text]]]]"); ParserTestHelper.assertParses("!|a|\n", "SymbolList[Table[TableRow[TableCell[Text]]]]"); ParserTestHelper.assertParses("| a |\n", "SymbolList[Table[TableRow[TableCell[Whitespace, Text, Whitespace]]]]"); ParserTestHelper.assertParses("!| a |\n", "SymbolList[Table[TableRow[TableCell[Whitespace, Text, Whitespace]]]]"); ParserTestHelper.assertParses("!|a:b|\n", "SymbolList[Table[TableRow[TableCell[Text, Colon, Text]]]]"); }
public void testRenderSimplePath() throws Exception { path.addNameToEnd("Bob"); String renderedPath = PathParser.render(path); assertEquals("Bob", renderedPath); }
public void processRequest(Request request) { if (!finished) { Request upgradeRequest = null;
private HtmlSlimTestSystem createHtmlSlimTestSystem(Descriptor descriptor) throws IOException { SlimClientBuilder builder = new SlimClientBuilder(page, descriptor); builder.setFastTest(fastTest); builder.setManualStart(manualStart); builder.start(); SlimClient slimClient = builder.getSlimClient(); HtmlSlimTestSystem testSystem = new HtmlSlimTestSystem(page, slimClient, testSystemListener);
public void LoadData(Context ctx, InputStream is, String password, String keyfile, boolean debug) throws IOException, InvalidKeyFileException, InvalidPasswordException { LoadData(ctx, is, password, keyfile, new UpdateStatus(), debug); }
public static void dump() throws IOException { LOG.info("JMXEnv.dump() follows"); Set<ObjectName> beans; try { beans = conn().queryNames( new ObjectName(CommonNames.DOMAIN + ":*"), null); } catch (MalformedObjectNameException e) { throw new RuntimeException(e); } for (ObjectName bean : beans) { LOG.info("bean:" + bean.toString());
public byte[] getFinalKey(PwDbHeaderV3 header) throws PwDbOutputException { try { return ImporterV3.makeFinalKey(header.masterSeed, header.masterSeed2, mPM.masterKey, mPM.numKeyEncRounds);
public void closedLeftIntervalComparison() throws Exception { assertExpectationMessage(" 2.1 <= _ < 5.9", "4.3", "!style_pass(!<2.1<=4.3<5.9>!)"); assertExpectationMessage(" 2.1 <= _ < 5.9", "2.1", "!style_pass(!<2.1<=2.1<5.9>!)"); assertExpectationMessage(" 2.1 <= _ < 5.9", "8.3", "!style_fail(!<2.1<=8.3<5.9>!)"); }
public void testVersionConversion() { Calendar cal = new GregorianCalendar(2013, Calendar.FEBRUARY, 17); assertEquals("should match", "1.0", Utils.convertToDebianVersion("1.0", false, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~SNAPSHOT", Utils.convertToDebianVersion("1.0+SNAPSHOT", false, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~SNAPSHOT", Utils.convertToDebianVersion("1.0-SNAPSHOT", false, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~20130217000000", Utils.convertToDebianVersion("1.0+SNAPSHOT", true, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~RC2", Utils.convertToDebianVersion("1.0-RC2", true, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~alpha3", Utils.convertToDebianVersion("1.0-alpha3", true, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~Beta+4", Utils.convertToDebianVersion("1.0.Beta-4", true, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~milestone+4", Utils.convertToDebianVersion("1.0-milestone-4", true, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~a+4", Utils.convertToDebianVersion("1.0-a-4", true, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~b+4", Utils.convertToDebianVersion("1.0-b-4", true, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~rc7", Utils.convertToDebianVersion("1.0rc7", true, "SNAPSHOT", cal.getTime())); }
public static void tearDownSasl() throws Exception { stopMiniKdc(); FileUtils.deleteQuietly(workDir); }
public void shouldSerializeCollectionWithPrefixTag() { String expectedResult = "{\"price\":15.0,\"comments\":\"pack it nicely, please\"}"; expectedResult += "," + expectedResult; expectedResult = "{\"orders\":[" + expectedResult + "]}"; Order order = new Order(new Client("guilherme silveira"), 15.0, "pack it nicely, please"); serialization.from(Arrays.asList(order, order), "orders").serialize(); assertThat(result(), is(equalTo(expectedResult))); }
private void stopProcess(Stoppable process) { try { process.stop();
public void allTestingComplete(TimeMeasurement totalTimeMeasurement) { setTotalRunTimeOnReport(totalTimeMeasurement); }
protected void addFormatters(MultipleTestsRunner runner) { runner.addTestSystemListener(mainFormatter); if (withSuiteHistoryFormatter()) { addHistoryFormatter(runner); } else { runner.addExecutionLogListener(new ConsoleExecutionLogListener()); } if (mainFormatter instanceof ExecutionLogListener) { runner.addExecutionLogListener((ExecutionLogListener) mainFormatter); } for (Formatter formatter : context.formatterFactory.createFormatters()) { runner.addTestSystemListener(formatter); } if (context.testSystemListener != null) { runner.addTestSystemListener(context.testSystemListener);
public void addWatch( String basePath, Watcher watcher, AddWatchMode mode, VoidCallback cb, Object ctx ) { PathUtils.validatePath(basePath); validateWatcher(watcher); String serverPath = prependChroot(basePath); RequestHeader h = new RequestHeader(); h.setType(ZooDefs.OpCode.addWatch); AddWatchRequest request = new AddWatchRequest(serverPath, mode.getMode()); cnxn.queuePacket(h, new ReplyHeader(), request, new ErrorResponse(), cb, basePath, serverPath, ctx, new AddWatchRegistration(watcher, basePath, mode));
public String toString() { return "NIOServerCnxn object with sock = " + sock + " and sk = " + sk;
public void testTrackSend() throws InterruptedException { long timestamp1 = System.currentTimeMillis(); MessageTracker messageTracker = new MessageTracker(BUFFERED_MESSAGE_SIZE);
public void shouldPruneTheFirstArrayIfTheSecondIsInADifferentInstance() throws SecurityException, NoSuchMethodException { Dog dog = new Dog(); dog.names = new String[] {"first", null, "second", null, "third"}; removal.add(dog.getNames(), Dog.class.getMethod("setNames", dog.names.getClass()), dog); Dog dog2 = new Dog(); dog2.names = new String[] {"first", null, "second", null}; removal.add(dog2.getNames(), Dog.class.getMethod("setNames", dog.names.getClass()), dog2); removal.removeExtraElements(); assertThat(dog.names.length, is(equalTo(3))); assertThat(dog2.names.length, is(equalTo(2))); }
public Response makeResponse(FitNesseContext context, Request request) throws Exception { crawler = context.root.getPageCrawler(); page = crawler.getPage(context.root, PathParser.parse(request.getResource())); if (page == null) return notFoundResponse(context, request); if (nameIsInvalid((String) request.getInput("name"))) return errorResponse(context, request); createChildPage(request); SimpleResponse response = new SimpleResponse(); WikiPagePath path = crawler.getFullPath(page); response.redirect(path.toString()); return response; }
private HtmlSlimTestSystem createHtmlSlimTestSystem(Descriptor descriptor) throws IOException { SlimCommandRunningClient slimClient = new SlimClientBuilder(descriptor) .withManualStart(manualStart) .withRemoteDebug(remoteDebug) .build(); HtmlSlimTestSystem testSystem = new HtmlSlimTestSystem(descriptor.getTestSystemName(), slimClient, testSystemListener); return testSystem; }
public void stopTestExceptionThrown() throws Exception { addImportAndMake(); statements.add(list("id", "call", "testSlim", "throwStopping")); statements.add(list("id2", "call", "testSlim", "throwNormal")); Map<String, Object> results = slimClient.invokeAndGetResponse(statements); assertContainsException("__EXCEPTION__:ABORT_SLIM_TEST:fitnesse.slim.test.TestSlim$StopTestException: This is a stop test exception", "id", results); assertNull(results.get("id2")); }
public Boolean convert(String value, Class<? extends Boolean> type, ResourceBundle bundle) { if (isNullOrEmpty(value)) { return false; } return booleanConverter.convert(value, type, bundle); }
public String getText() throws Exception { ByteArrayOutputStream output = new ByteArrayOutputStream(); send(output); return output.toString(); }
public void testFindReferencingPagesWithLinksWithAlternateText() throws Exception { WhereUsedPageFinder whereUsed = new WhereUsedPageFinder(pageThree, this); WikiPage newPage = WikiPageUtil.addPage(root, PathParser.parse("NewPage"), "I enjoy being a sibling of [[the third page][PageThree]]"); whereUsed.search(root); assertEquals(1, hits.size()); assertEquals(newPage, hits.get(0)); }
public void testBigPosts() throws Exception { StringBuffer buffer = new StringBuffer(); for (int i = 0; i < 10; i++) { for (int j = 0; j < 1000; j++) buffer.append(i); } String prefix = EditResponder.TIME_STAMP + "=12345&content="; appendToMessage("POST /HelloThere HTTP/1.1\r\n"); appendToMessage(String.format("Content-length: %d\r\n", prefix.length()+buffer.length())); appendToMessage("\r\n"); appendToMessage(prefix); appendToMessage(buffer); parseMessage(); String expected = buffer.toString(); String actual = (String)request.getInput("content"); assertEquals(expected.length(), actual.length()); assertEquals(expected, actual); }
public void testMakeReponder() throws Exception { MockRequest request = new MockRequest(); request.setResource("PageOne"); Responder responder = new VersionSelectionResponder(); SimpleResponse response = (SimpleResponse) responder.makeResponse(new FitNesseContext(root), request); String content = response.getContent(); assertSubString("<input", content); assertSubString("name=\"version\"", content); assertSubString("<form", content); assertSubString("action=\"PageOne\"", content); assertSubString("name=\"responder\"", content); assertSubString(" value=\"viewVersion\"", content); }
private static String removeUnprocessedLiterals(String cellText) { Matcher matcher = PreProcessorLiteralWidget.pattern.matcher(cellText); while (matcher.find()) { String replacement = matcher.group(1); cellText = cellText.replace(matcher.group(), replacement); } return cellText; }
public void tearDown() throws Exception { ct.tearDownAll(); qb.tearDown(); }
private void collectEverySecondCell(Parse cells) throws Exception { for (int argNo = 0; argNo < args.length; argNo++) { collectCell(cells, argNo, cells.text());
public void remove() { versionsController.delete(new FileVersion() { @Override
public void testLoadPEMKeyStore() throws Exception {
protected void removeVersion(String versionName) throws Exception { String versionFileName = makeVersionFileName(versionName); File versionFile = new File(versionFileName); versionFile.delete(); }
public void testReferenceToSubPageChanged() throws Exception { WikiPageUtil.addPage(root, PathParser.parse("ReferingPage"), "PageOne.PageA"); movePage("PageOne", "PageTwo", true); WikiPage referingPage = root.getChildPage("ReferingPage"); assertEquals(".PageTwo.PageOne.PageA", referingPage.getData().getContent()); }
Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); }
public void formatterWithNoTestsShouldHaveZeroPageCounts() throws Exception { assertEquals(new TestSummary(0, 0, 0, 0), formatter.getPageCounts()); }
long decodeLong(byte[] b) { long rv=0; for(byte i : b) { rv = (rv << 8) | (i<0?256+i:i); } return rv; }
String getScheme();  KeeperException.Code handleAuthentication(ServerCnxn cnxn, byte authData[]);  boolean matches(String id, String aclExpr);  boolean isAuthenticated();  boolean isValid(String id); }
public void receivedStatus(String line) { if(!line.equals("END")) { getLogger().warn("Expeted ``END'', was ``%s''," +
public void testParentPageNameVariable() throws Exception { crawler.setDeadEndStrategy(new VirtualEnabledPageCrawler()); final String ROOT_PAGE_NAME = "RootPage"; WikiPage root = crawler.addPage(rootPage, PathParser.parse(ROOT_PAGE_NAME)); final String INCLUDED_PAGE_NAME = "IncludedPage"; WikiPage includedPage = crawler.addPage(rootPage, PathParser.parse(INCLUDED_PAGE_NAME)); WidgetRoot widgetRoot = new WidgetRoot(root); WidgetRoot includedRoot = new WidgetRoot(includedPage,widgetRoot); PageData data = includedPage.getData(); assertEquals(INCLUDED_PAGE_NAME,data.getVariable("PAGE_NAME")); assertEquals(INCLUDED_PAGE_NAME, includedRoot.getVariable("PAGE_NAME")); assertEquals(ROOT_PAGE_NAME,includedRoot.getVariable("RUNNING_PAGE_NAME")); }
public void settersAreFirstFunctionsAreLastLeftToRight() throws Exception { makeDecisionTableAndBuildInstructions("|DT:fixture|\n" + "|a|fa?|b|fb?|c|fc?|d|e|f|fd?|fe?|ff?|\n" + "|a|a|b|b|c|c|d|e|f|d|e|f|\n"); int n = 0; List<Instruction> expectedInstructions = asList( new MakeInstruction(id(n++), "decisionTable_id", "fixture"), new CallInstruction(id(n++),"decisionTable_id", "table", new Object[] {asList( asList("a", "fa?", "b", "fb?", "c", "fc?", "d", "e", "f", "fd?", "fe?", "ff?"), asList("a", "a", "b", "b", "c", "c", "d", "e", "f", "d", "e", "f"))}), new CallInstruction(id(n++), "decisionTable_id", "beginTable"), new CallInstruction(id(n++), "decisionTable_id", "reset"), new CallInstruction(id(n++), "decisionTable_id", "setA", new Object[] {"a"}), new CallInstruction(id(n++), "decisionTable_id", "setB", new Object[] {"b"}), new CallInstruction(id(n++), "decisionTable_id", "setC", new Object[] {"c"}), new CallInstruction(id(n++), "decisionTable_id", "setD", new Object[] {"d"}), new CallInstruction(id(n++), "decisionTable_id", "setE", new Object[] {"e"}), new CallInstruction(id(n++), "decisionTable_id", "setF", new Object[] {"f"}), new CallInstruction(id(n++), "decisionTable_id", "execute"), new CallInstruction(id(n++), "decisionTable_id", "fa"), new CallInstruction(id(n++), "decisionTable_id", "fb"), new CallInstruction(id(n++), "decisionTable_id", "fc"), new CallInstruction(id(n++), "decisionTable_id", "fd"), new CallInstruction(id(n++), "decisionTable_id", "fe"), new CallInstruction(id(n++), "decisionTable_id", "ff"), new CallInstruction(id(n++), "decisionTable_id", "endTable") ); assertEquals(expectedInstructions, instructions); }
public void setUp() throws Exception { String testDataPath = System.getProperty("test.data.dir", "build/test/data"); System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY, "org.apache.zookeeper.server.NettyServerCnxnFactory"); System.setProperty(ZooKeeper.ZOOKEEPER_CLIENT_CNXN_SOCKET, "org.apache.zookeeper.ClientCnxnSocketNetty"); System.setProperty(ZooKeeper.SECURE_CLIENT, "true"); System.setProperty(X509Util.SSL_AUTHPROVIDER, "x509"); System.setProperty(X509Util.SSL_KEYSTORE_LOCATION, testDataPath + "/ssl/testKeyStore.jks"); System.setProperty(X509Util.SSL_KEYSTORE_PASSWD, "testpass"); System.setProperty(X509Util.SSL_TRUSTSTORE_LOCATION, testDataPath + "/ssl/testTrustStore.jks"); System.setProperty(X509Util.SSL_TRUSTSTORE_PASSWD, "testpass"); System.setProperty("javax.net.debug", "ssl"); String host = "localhost"; int port = PortAssignment.unique(); hostPort = host + ":" + port; serverFactory = ServerCnxnFactory.createFactory(); serverFactory.configure(new InetSocketAddress(host, port), maxCnxns, true); super.setUp(); }
public void testCnxManagerTimeout() throws Exception { Random rand = new Random(); byte b = (byte) rand.nextInt(); int deadPort = PortAssignment.unique(); String deadAddress = new String("10.1.1." + b); LOG.info("This is the dead address I'm trying: " + deadAddress); peers.put(Long.valueOf(2), new QuorumServer(2, new InetSocketAddress(deadAddress, deadPort), new InetSocketAddress(deadAddress, PortAssignment.unique()))); peerTmpdir[2] = ClientBase.createTmpDir(); QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2); QuorumCnxManager cnxManager = new QuorumCnxManager(peer); QuorumCnxManager.Listener listener = cnxManager.listener; if(listener != null){ listener.start(); } else { LOG.error("Null listener when initializing cnx manager"); } long begin = System.currentTimeMillis(); cnxManager.toSend(new Long(2), createMsg(ServerState.LOOKING.ordinal(), 1, -1, 1)); long end = System.currentTimeMillis(); if((end - begin) > 6000) Assert.fail("Waited more than necessary");
<T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<Boolean> prepend(String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); Future<CASResponse> asyncCAS(String key, long casId, int exp, Object value); <T> OperationFuture<CASResponse> asyncCAS(String key, long casId, int exp, T value, Transcoder<T> tc); <T> CASResponse cas(String key, long casId, int exp, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); CASResponse cas(String key, long casId, int exp, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); CountDownLatch broadcastOp(final BroadcastOpFactory of); CountDownLatch broadcastOp(final BroadcastOpFactory of, Collection<MemcachedNode> nodes);  Set<String> listSaslMechanisms(); }
public void shouldLoadEntityUsingIdOfAnyType() throws Exception { when(provider.parameterNamesFor(other.getMethod())).thenReturn(new String[] {"entity"}); when(request.getParameter("entity.id")).thenReturn("123"); OtherEntity expectedEntity = new OtherEntity(); when(session.get(OtherEntity.class, "123")).thenReturn(expectedEntity); interceptor.intercept(stack, other, instance); verify(request).setAttribute("entity", expectedEntity); verify(stack).next(other, instance); }
protected Result createEvaluationMessage(String actual, String expected) { Result evaluationMessage; String replacedExpected = Utils.unescapeHTML(replaceSymbols(expected)); if (actual == null) evaluationMessage = fail("null");
public List<Symbol> findHeaderLines() { return Collections.emptyList(); }
public long getLastZxid();  public int getWatchCount();  public int getEphemeralCount(); }
private QuorumPacket createValidateSessionPacket() throws Exception { ByteArrayOutputStream baos = new ByteArrayOutputStream(); DataOutputStream dos = new DataOutputStream(baos); dos.writeLong(SESSION_ID); dos.writeInt(3000); dos.close(); QuorumPacket qp = new QuorumPacket(Leader.REVALIDATE, -1, baos.toByteArray(), null); return qp; }
public void shouldNotRedirectIfHasNotErrors() { try { validator.onErrorRedirectTo(MyComponent.class).logic();
public void shouldAcceptAConverterThatIsAnnotatedAndImplementsCorrectInterface() throws Exception { mockery.checking(new Expectations() { { one(scanner).getTypesWithAnnotation(Convert.class); will(returnValue(asList(ConverterOk.class))); one(converters).register(ConverterOk.class); } }); this.registrar.registerFrom(scanner); this.mockery.assertIsSatisfied(); }
protected String responseMessage(String resource) throws Exception { String parentResource = ""; int lastIndexOfDot = resource.lastIndexOf('.'); if (lastIndexOfDot != -1) parentResource = resource.substring(0, lastIndexOfDot); return "Click " + HtmlUtil.makeLink(parentResource, "here").html() + " to view the parent page."; }
boolean touchSession(long sessionId, int sessionTimeout);  void setSessionClosing(long sessionId);  void shutdown();  void removeSession(long sessionId);  boolean isTrackingSession(long sessionId);  void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap();  long getLocalSessionCount(); }
private void writeResults() throws Exception { makeFileWriter(); VelocityContext velocityContext = new VelocityContext(); velocityContext.put("response", testResponse); Template template = null; template = context.getVelocityEngine().getTemplate("testResults.vm"); template.merge(velocityContext, getWriter()); fileWriter.close(); }
public void testGetKey() { String expResult = "a"; String result = instance.getKey(); assertEquals(expResult, result); }
public void config(Router router) { router.add(new PathAnnotationRules(resource)); }
private long mutate(Mutator m, String key, int by) { final AtomicLong rv=new AtomicLong(); final CountDownLatch latch=new CountDownLatch(1); addOp(key, opFact.mutate(m, key, by, new OperationCallback() { public void receivedStatus(String val) { rv.set(new Long(val==null?"-1":val)); } public void complete() { latch.countDown(); }})); try { latch.await(); } catch (InterruptedException e) { throw new RuntimeException("Interrupted", e); } getLogger().debug("Mutation returned %s", rv); return rv.get(); }
public void testNestedTables() throws Exception { String nestedTable = "<table><tr><td>embedded</td></tr></table>"; Parse p = new Parse("<table><tr><td>" + nestedTable + "</td></tr>" + "<tr><td>two</td></tr><tr><td>three</td></tr></table>trailer"); Parse sub = p.at(0, 0, 0).parts; assertEquals(1, p.size()); assertEquals(3, p.parts.size()); assertEquals(1, sub.at(0, 0, 0).size()); assertEquals("embedded", sub.at(0, 0, 0).body); assertEquals(1, sub.size()); assertEquals(1, sub.parts.size()); assertEquals(1, sub.parts.parts.size()); assertEquals("two", p.at(0, 1, 0).body); assertEquals("three", p.at(0, 2, 0).body); assertEquals(1, p.at(0, 1, 0).size()); assertEquals(1, p.at(0, 2, 0).size()); }
private void parse(InputStream pInputStream, VariableResolver pResolver) throws IOException, ParseException { BufferedReader br = null; try { br = new BufferedReader(new InputStreamReader(pInputStream));
public void executeLine(String line) throws InterruptedException, IOException { if (!line.equals("")) { cl.parseCommand(line);
protected void createSessionTracker() { sessionTracker = new FollowerSessionTracker(this, sessionsWithTimeouts, this.serverId); }
public boolean roll() { if (pins.equals("-")) return false;
private void assertCannotLoadFixture(String failureMessage, String fixtureName, Class expectedExceptionType) throws Throwable { try {
private MockRequest makeInvalidRequest(String name) { MockRequest request = new MockRequest(); request.setResource("TestPage"); request.addInput("pageName", name); request.addInput("pageContent", "hello"); request.addInput("pageType", ""); return request; }
public Maybe<String> render(Scanner scanner) { char beginner = getContent().charAt(getContent().length() - 1); String style = getContent().substring(7, getContent().length() - 1); String body = new Translator(getPage()).translateIgnoreFirst(scanner, SymbolType.closeType(beginner)); if (scanner.isEnd()) return Maybe.noString; return new Maybe<String>(HtmlUtil.makeSpanTag(style, body).html()); }
public static PwDatabaseV3Debug GetTest1(Context ctx) throws Exception { if ( mDb1 == null ) { GetDb1(ctx); } return (PwDatabaseV3Debug) mDb1.pm; }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); subWiki = WikiPageUtil.addPage(root, PathParser.parse("SubWiki"), ""); subWiki_pageTwo = WikiPageUtil.addPage(subWiki, PathParser.parse("PageTwo"), ""); subWiki_pageTwo_pageTwoChild = WikiPageUtil.addPage(subWiki_pageTwo, PathParser.parse("PageTwoChild"), ""); }
public void removeHistogram(String name) { metrics.remove(name); }
public void testClearSign() throws Exception { final InputStream input = new FileInputStream("/Users/tcurdt/changes.txt"); final OutputStream output = new FileOutputStream("/Users/tcurdt/changes.txt.signed"); final InputStream ring = new FileInputStream("/Users/tcurdt/.gnupg/secring.gpg"); SigningUtils.clearSign(input, ring, "7C200941", "", output); }
public int encode( byte[] data, int off, int length, OutputStream out) throws IOException { for (int i = off; i < (off + length); i++) { int v = data[i] & 0xff; out.write(encodingTable[(v >>> 4)]); out.write(encodingTable[v & 0xf]); } return length * 2; }
public void testReadUpTo3() throws Exception { checkReadUoTo("12345", "112123123412345", "1121231234"); }
public Integer launchFitNesse(Arguments arguments) throws Exception { Properties properties = ConfigurationParameter.makeProperties(System.getProperties(), new File(arguments.getConfigFile())); properties = arguments.asProperties(properties); return launchFitNesse(new ContextConfigurator(properties)); }
private void noExplicitTestSystem() { whenTestSystemLookedUp().thenReturn(Optional.empty()); }
private boolean isAncestor(WikiPage ancestor, WikiPage descendent) { return moveResponder.pageIsAncestorOfNewParent(ancestor.getPageCrawler().getFullPath(), descendent.getPageCrawler().getFullPath());
public void testFailOnUnknownValue() throws IOException { try { data.setSrc(missingFile);
public void shouldUseTheDefaulJvmtLocale() throws ParseException { when(request.getAttribute(LOCALE_KEY + ".request")).thenReturn(null); when(request.getSession()).thenReturn(session); when(session.getAttribute(LOCALE_KEY + ".session")). thenReturn(null); when(context.getAttribute(LOCALE_KEY + ".application")). thenReturn(null); when(context.getInitParameter(LOCALE_KEY)). thenReturn(null); when(request.getLocale()).thenReturn(null); assertThat(Locale.getDefault(), is(equalTo(converter.getLocale()))); }
public void testVirtualInclude() throws Exception { String virtualWikiURL = "http://localhost:" + FitNesseUtil.port + "/PageTwo"; VirtualCouplingExtensionTest.setVirtualWiki(page1, virtualWikiURL); FitNesseUtil.startFitnesse(root); try {
@Test public void definesValues() throws Exception { assertDefinesValue("!define x {y}", "x", "y");
public static List<File> sortDataDir(File[] files, String prefix, boolean ascending) { if (files == null) { return new ArrayList<>(0); } List<File> filelist = Arrays.asList(files); Collections.sort(filelist, new DataDirFileComparator(prefix, ascending)); return filelist; }
public static void deleteSampleFiles() { FileUtil.deleteFileSystemDirectory(FitNesseUtil.base); }
private String loadContent(final FileVersion fileVersion) throws IOException { try { return FileUtil.toString(fileVersion.getContent());
void aMethod() {} } @Test public void shouldNotThrowNullPointersOnLogicResult() throws Exception { result.use(logic()).forwardTo(AController.class).aMethod(); result.use(logic()).redirectTo(AController.class).aMethod(); } @Test public void shouldNotThrowNullPointersOnPageResult() throws Exception { result.use(page()).defaultView(); result.use(page()).forwardTo("Abc"); result.use(page()).include(); result.use(page()).of(AController.class).aMethod(); result.use(page()).redirectTo("abc"); } @Test public void shouldNotThrowNullPointersOnHttpResult() throws Exception { result.use(http()) .addDateHeader(null, 0) .addHeader(null, null) .addIntHeader(null, 0); result.use(http()).sendError(0); result.use(http()).sendError(0, ""); result.use(http()).setStatusCode(0); } @Test public void shouldNotThrowNullPointersOnJsonResult() throws Exception { result.use(json()).withoutRoot().from("abc").exclude("aaa").include("aaa").serialize(); } @Test public void shouldNotThrowNullPointersOnXmlResult() throws Exception { result.use(xml()).from("abc").exclude("aaa").include("aaa").serialize(); } @Test public void shouldNotThrowNullPointersOnRepresentationResult() throws Exception { result.use(representation()).from("abc").exclude("aaa").include("aaa").serialize(); } @Test public void shouldNotThrowNullPointersOnStatusResult() throws Exception { result.use(status()).movedPermanentlyTo(AController.class).aMethod(); } }
public void importWiki(WikiPage page) throws Exception { PageCrawler pageCrawler = page.getPageCrawler(); for(Iterator iterator = page.getChildren().iterator(); iterator.hasNext();) pageCrawler.traverse((WikiPage) iterator.next(), this);
public void testAddResponderPlugins() throws Exception { String respondersValue = "custom1:" + WikiPageResponder.class.getName() + ",custom2:" + EditResponder.class.getName(); testProperties.setProperty(ConfigurationParameter.RESPONDERS, respondersValue); ResponderFactory responderFactory = new ResponderFactory("."); loader.loadResponders(responderFactory); assertEquals(WikiPageResponder.class, responderFactory.getResponderClass("custom1")); assertEquals(EditResponder.class, responderFactory.getResponderClass("custom2")); }
public void shouldStoreFirstVersionAsZero() { WikiPage root = makeRoot(); root.commit(root.getData()); assertEquals(1, root.getVersions().size()); assertEquals("0", root.getVersions().iterator().next().getName()); }
private static SlimTable tearDownTable(String key) { DummySlimTable result = table(key); result.setTearDown(true); return result; }
private Operation buildOperation(OperationStatus st, OperationCallback cb) { if(st == null) { return opFact.saslAuth(authDescriptor.mechs,
public static TestResult pass(String actual, String expected) { return new TestResult(actual, expected, null, ExecutionResult.PASS); }
public void testDoesntwaitForTimeoutOnBadCommand() throws Exception { CommandRunningFitClient.TIMEOUT = 5000; TimeMeasurement measurement = new TimeMeasurement().start(); client = new CommandRunningFitClient(new CommandRunningFitClient.OutOfProcessCommandRunner("java blah", null, "localhost", port, 1)); client.addFitClientListener(this); client.start(); Thread.sleep(50); client.join(); assertTrue(exceptionOccurred); assertTrue(measurement.elapsed() < CommandRunningFitClient.TIMEOUT); }
void acceptResult(PageResult result) throws IOException; void acceptFinalCount(TestSummary testSummary) throws IOException; }
public List<OpResult> multi(Iterable<Op> ops) throws InterruptedException, KeeperException { return multiInternal(new MultiTransactionRecord(ops)); }
public void processResult(int rc, String path, Object ctx, String name) { }}, null); } } } finally { if(zk != null) zk.close(); } } }
private HtmlPage makeHtml(String name, WikiPage page, FitNesseContext context, Request request) { WikiPage pageVersion = page.getVersion(version); HtmlPage html = context.pageFactory.newPage(); html.setTitle("Version " + version + ": " + name); html.setPageTitle(new PageTitle("Version " + version, PathParser.parse(resource), pageVersion.getData().getAttribute(PageData.PropertySUITES)));
public void pushFixture() { fixtureStack.push(getFixture()); }
public static void deleteSampleFiles(String rootPagePath) throws IOException { FileUtil.deleteFileSystemDirectory(rootPagePath); }
public void run() { while (!ss.socket().isClosed()) { try { selector.select(1000); Set<SelectionKey> selected; synchronized (this) { selected = selector.selectedKeys(); } ArrayList<SelectionKey> selectedList = new ArrayList<SelectionKey>( selected); Collections.shuffle(selectedList); for (SelectionKey k : selectedList) { if ((k.readyOps() & SelectionKey.OP_ACCEPT) != 0) { SocketChannel sc = ((ServerSocketChannel) k .channel()).accept(); sc.configureBlocking(false); SelectionKey sk = sc.register(selector, SelectionKey.OP_READ); NIOServerCnxn cnxn = createConnection(sc, sk); sk.attach(cnxn); addCnxn(cnxn); } else if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) { NIOServerCnxn c = (NIOServerCnxn) k.attachment(); c.doIO(k); } } selected.clear(); } catch (Exception e) { ZooLog.logException(e); } } ZooLog.logTextTraceMessage("NIOServerCnxn factory exitedloop.", ZooLog.textTraceMask); clear(); ZooLog.logError("=====> Goodbye cruel world <======");
private void makeTestResponse(String pageName) throws Exception { root = InMemoryPage.makeRoot("RooT"); page = root.getPageCrawler().addPage(root, PathParser.parse(pageName), "original content"); PageData data = page.getData(); data.setContent("new stuff"); VersionInfo commitRecord = page.commit(data); oldVersion = commitRecord.getName(); MockRequest request = new MockRequest(); request.setResource(pageName); request.addInput("version", oldVersion); Responder responder = new VersionResponder(); response = (SimpleResponse)responder.makeResponse(new FitNesseContext(root), request); }
public void simpleInputAndOutputPassing() throws Exception { makeTables( "!|scenario|echo|input|giving|output|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|DT:EchoGiving|\n" + "|input|output|\n" + "|7|7|\n" ); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("decisionTable_did_0/scriptTable_s_id_0", "7") ) ); evaluateExpectations(pseudoResults); String scriptTable = dt.getChildren().get(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output], [check, echo, 7, pass(7)]]"; assertEquals(expectedScript, scriptTable); String dtHtml = dt.getTable().toString(); assertEquals(1, dt.getTestSummary().getRight()); assertEquals(0, dt.getTestSummary().getWrong()); assertEquals(0, dt.getTestSummary().getIgnores()); assertEquals(0, dt.getTestSummary().getExceptions()); }
public void shouldAddAllResourcesToACommonList() { final Resource myResource = mockery.mock(Resource.class); mockery.checking(new Expectations() { { one(builder).lookupFor(myResource); will(returnValue(null)); } }); registry.register(myResource); assertThat(registry.all(), Matchers.hasItem(myResource)); mockery.assertIsSatisfied(); }
private void writeObject(String key, ProtectedBinary value, boolean allowRef) throws IllegalArgumentException, IllegalStateException, IOException { assert(key != null && value != null); xml.startTag(null, ElemBinary); xml.startTag(null, ElemKey); xml.text(safeXmlString(key)); xml.endTag(null, ElemKey); xml.startTag(null, ElemValue); String strRef = null; if (allowRef) { strRef = binPool.poolFind(value); } if (strRef != null) { xml.attribute(null, AttrRef, strRef); } else { subWriteValue(value); } xml.endTag(null, ElemValue); xml.endTag(null, ElemBinary); }
Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(final CallbackHandler cbh) throws OperationException; }
public void testHtmlFormatter() throws Exception { checkFormatterCreated("html", HtmlResultFormatter.class); }
public boolean isValid(Matchable candidate) { return true; }}); assertEquals(match.isMatch(), expected);
private void includeScenarioLibrariesIfAny(LibraryFilter libraryFilter) { List<WikiPage> uncles = PageCrawlerImpl.getAllUncles("ScenarioLibrary", testPage.getSourcePage()); List<WikiPage> filteredUncles = filter(uncles, libraryFilter); if (filteredUncles.size() > 0) includeScenarioLibraries(filteredUncles);
void include();  void redirect(String url); }
public void execute() { if (control == null || !control.isDirectory()) { throw new BuildException("You need to point the 'control' attribute to the control directory."); } if (changesIn != null) { if (!changesIn.isFile() || !changesIn.canRead()) { throw new BuildException("The 'changesIn' attribute needs to point to a readable file. " + changesIn + " was not found/readable."); } if (changesOut == null) { throw new BuildException("A 'changesIn' without a 'changesOut' does not make much sense."); } if (!isPossibleOutput(changesOut)) { throw new BuildException("Cannot write the output for 'changesOut' to " + changesOut); } if (changesSave != null && !isPossibleOutput(changesSave)) { throw new BuildException("Cannot write the output for 'changesSave' to " + changesSave); } } else { if (changesOut != null || changesSave != null) { throw new BuildException("The 'changesOut' or 'changesSave' attributes may only be used when there is a 'changesIn' specified."); } } if (dataProducers.size() == 0) { throw new BuildException("You need to provide at least one reference to a tgz or directory with data."); } if (deb == null) { throw new BuildException("You need to point the 'destfile' attribute to where the deb is supposed to be created."); } final File[] controlFiles = control.listFiles(); final DataProducer[] data = new DataProducer[dataProducers.size()]; dataProducers.toArray(data); final Processor processor = new Processor(new Console() { public void println(String s) { log(s); } }, null); final PackageDescriptor packageDescriptor; try { packageDescriptor = processor.createDeb(controlFiles, data, deb); log("Created " + deb); } catch (Exception e) { log("Failed to create debian package " + deb + e); e.printStackTrace(); return; } final TextfileChangesProvider changesProvider; try { if (changesOut == null) { return; }
public void fromString_should_return_null_object_when_value_is_not_defined() { } @Test public void fromString_should_return_default_object_when_value_is_not_defined() { String value = ""; Integer current = converter.fromString(value); assertNotNull(current); assertEquals(PrimitiveIntConverter.DEFAULT_VALUE, current); } }
public void testChildrenGetMovedIfParentMoves() throws Exception { final String sourceChildOne = "PageOne.PageA.ChildOne"; final String sourceChildTwo = "PageOne.PageA.ChildTwo"; final String sourceGrandChild = "PageOne.PageA.ChildTwo.ChildTwoDotOne"; final String parentToMove = "PageOne.PageA"; final String destinationParent = "PageTwo"; final String destinationPage = "PageTwo.PageA"; final String destinationChildOne = "PageTwo.PageA.ChildOne"; final String destinationChildTwo = "PageTwo.PageA.ChildTwo"; final String destinationGrandChild = "PageTwo.PageA.ChildTwo.ChildTwoDotOne"; WikiPagePath sourceChildOnePath = PathParser.parse(sourceChildOne); WikiPagePath sourceChildTwoPath = PathParser.parse(sourceChildTwo); WikiPagePath sourceGrandChildPath = PathParser.parse(sourceGrandChild); WikiPagePath destinationPagePath = PathParser.parse(destinationPage); WikiPagePath destinationChildOnePath = PathParser.parse(destinationChildOne); WikiPagePath destinationChildTwoPath = PathParser.parse(destinationChildTwo); WikiPagePath destinationGrandChildPath = PathParser.parse(destinationGrandChild); WikiPageUtil.addPage(root, sourceChildOnePath, "child1Content"); WikiPageUtil.addPage(root, sourceChildTwoPath, "child2Content"); WikiPageUtil.addPage(root, sourceGrandChildPath); movePage(parentToMove, destinationParent, true); WikiPage movedPage = crawler.getPage(destinationPagePath); assertFalse(crawler.pageExists(sourceChildOnePath)); assertFalse(crawler.pageExists(sourceChildTwoPath)); List<?> children = movedPage.getChildren(); assertEquals(2, children.size()); assertTrue(crawler.pageExists(destinationChildOnePath)); assertTrue(crawler.pageExists(destinationChildTwoPath)); assertTrue(crawler.pageExists(destinationGrandChildPath)); }
private void createNoStatVerifyResult(String newName) throws KeeperException, InterruptedException { Assert.assertNull("Node existed before created", zk.exists(newName, false)); zk.create(newName, newName.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER); Assert.assertNotNull("Node was not created as expected", zk.exists(newName, false));
public void testIsCollapsable() throws Exception { IncludeWidget widget = createIncludeWidget(page1, "PageOne"); final String result = widget.render(); assertSubString("class=\"collapsable\"", result); }
public boolean addGlobalSession(long sessionId, int sessionTimeout) { throw new UnsupportedOperationException(); }
public void testEphemeralOwner_emulationTTL() { Assert.assertThat(EphemeralType.get(-1), equalTo(EphemeralType.TTL)); }
public void addUploadedFile(String name, UploadedFile uploadedFile) { uploadedFiles.put(name, uploadedFile); }
protected void resetInput() { payload=null; payloadOffset=0; headerOffset=0; }
public void shouldBeAbleToConvert() { mockery.checking(new Expectations() { { exactly(2).of(request).getAttribute("javax.servlet.jsp.jstl.fmt.locale.request"); will(returnValue("pt_br")); } }); assertThat(converter.convert("19,91", Double.class, bundle), is(equalTo(new Double("19.91")))); mockery.assertIsSatisfied(); }
private void sortGroup(PwGroupV3 group, Vector<PwGroupV3> groupList) {
private byte[] ReadProtectedBinary(XmlPullParser xpp) throws XmlPullParserException, IOException { byte[] buf = ProcessNode(xpp); if ( buf != null ) return buf; String base64 = ReadString(xpp); if ( base64.length() == 0 ) return new byte[0]; return Base64Coder.decode(base64); }
private Object[] makeArgsArray(int argsIndex) { List<Object> argList = words.subList(argsIndex, words.size()); Object[] args = argList.toArray(new Object[argList.size()]); return args; }
@Test public void scansTextAsWords() { ParserTestHelper.assertScans("hi mom", "Text=hi,Whitespace= ,Text=mom"); }
public void argumentsAreParsedCorrectly() throws Exception { System.setProperty("fitnesse.root.dir.parent", "."); FitNesseRunner suite = new FitNesseRunner(FitNesseSuiteExampleTest.class); assertEquals(".", suite.getFitNesseDir(FitNesseSuiteExampleTest.class)); assertEquals(new File(System.getProperty("fitnesse.root.dir.parent")).getAbsolutePath(), suite.getFitNesseDir(FitNesseSuiteExampleFromPropertiesTest.class)); assertEquals("FitNesse.SuiteAcceptanceTests.SuiteSlimTests", suite.getSuiteName(FitNesseSuiteExampleTest.class)); assertEquals("tmp",suite.getOutputDir(FitNesseSuiteExampleTest.class)); assertEquals(new File(System.getProperty("java.io.tmpdir"),"fitnesse").getAbsolutePath(),suite.getOutputDir(FitNesseSuiteExampleFromPropertiesTest.class)); assertNull("null filter allowed", suite.getSuiteFilter(FitNesseSuiteExampleTest.class)); assertNull("null exclude filter allowed", suite.getExcludeSuiteFilter(FitNesseSuiteExampleTest.class)); assertEquals("testSuite", suite.getSuiteFilter(FitNesseSuiteWithFilterExampleTest.class)); assertEquals("excludedSuite", suite.getExcludeSuiteFilter(FitNesseSuiteWithFilterExampleTest.class)); assertEquals(true, suite.useDebugMode(FitNesseSuiteExampleTest.class)); assertEquals(true, suite.useDebugMode(FitNesseSuiteWithFilterExampleTest.class)); assertEquals(false, suite.useDebugMode(FitNesseSuiteExampleTestNoDebug.class)); }
private String fillRefPlaceholders(String text, SprContextV4 ctx, int recursionLevel) { if (ctx.db == null) { return text; } int offset = 0; for (int i = 0; i < 20; ++i) { text = fillRefsUsingCache(text, ctx); int start = StrUtil.indexOfIgnoreCase(text, STR_REF_START, offset, Locale.ENGLISH); if (start < 0) { break; } int end = StrUtil.indexOfIgnoreCase(text, STR_REF_END, start + 1, Locale.ENGLISH); if (end <= start) { break; } String fullRef = text.substring(start, end + 1); TargetResult result = findRefTarget(fullRef, ctx); if (result != null) { PwEntryV4 found = result.entry; char wanted = result.wanted; if (found != null) { String data; switch (wanted) { case 'T': data = found.getTitle(); break; case 'U': data = found.getUsername(); break; case 'A': data = found.getUrl(); break; case 'P': data = found.getPassword(); break; case 'N': data = found.getNotes(); break; case 'I': data = found.getUUID().toString(); break; default: offset = start + 1; continue; } SprContextV4 subCtx = (SprContextV4) ctx.clone(); subCtx.entry = found; String innerContent = compileInternal(data, subCtx, recursionLevel + 1); addRefsToCache(fullRef, innerContent, ctx); text = fillRefsUsingCache(text, ctx); } else { offset = start + 1; continue; } } } return text; }
public Record toRequestRecord() { return new GetChildrenRequest(getPath(), false); }
public Object parse(String s) { return new Short(Short.parseShort(s)); }
public Thread newThread(Runnable r) { Thread t = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0); t.setDaemon(true); if (t.getPriority() != Thread.NORM_PRIORITY) t.setPriority(Thread.NORM_PRIORITY); return t; }
void enterChildPage(WikiPage newPage, Date lastModified); void exitPage(); }
public void create(final String path, byte data[], List<ACL> acl, CreateMode createMode, Create2Callback cb, Object ctx) { final String clientPath = path; PathUtils.validatePath(clientPath, createMode.isSequential()); final String serverPath = prependChroot(clientPath); RequestHeader h = new RequestHeader(); h.setType(ZooDefs.OpCode.create2); Create2Request request = new Create2Request(); Create2Response response = new Create2Response(); ReplyHeader r = new ReplyHeader(); request.setData(data); request.setFlags(createMode.toFlag()); request.setPath(serverPath); request.setAcl(acl); cnxn.queuePacket(h, r, request, response, cb, clientPath, serverPath, ctx, null);
public void testDecodeTwoChars() throws Exception { assertEquals("a:", Base64.decode("YTo=")); }
public void shouldInvokeAIs() { Client c = client(1L); c.ugly=true; assertThat((Boolean) evaluator.get(c, "client.ugly"), is(equalTo(true))); }
List<File> findSourceWithFilters(List<File> sourceRootDirs) throws Exception { List<File> sourceFiles = new ArrayList<>(); initFilters();
protected Object toReference(int type, Object referent, int hash) { switch (type) { case HARD: return referent;
public DERObject toASN1Object() { ASN1EncodableVector v = new ASN1EncodableVector(); v.add(pKIStatusInfo); addOptional(v, errorCode); addOptional(v, errorDetails); return new DERSequence(v); }
Collection<SocketAddress> getAvailableServers(); Collection<SocketAddress> getUnavailableServers(); Transcoder<Object> getTranscoder(); NodeLocator getNodeLocator(); Future<Boolean> append(long cas, String key, Object val); <T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, int exp, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void testSnapshot() throws Exception { File snapDir = new File(testData, "invalidsnap"); ZooKeeperServer zks = new ZooKeeperServer(snapDir, snapDir, 3000); SyncRequestProcessor.setSnapCount(1000); final int PORT = Integer.parseInt(HOSTPORT.split(":")[1]); NIOServerCnxn.Factory f = new NIOServerCnxn.Factory(PORT); f.startup(zks); LOG.info("starting up the zookeeper server .. waiting"); assertTrue("waiting for server being up", ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT)); ZooKeeper zk = new ZooKeeper(HOSTPORT, 20000, this); try {
private String portablePath(String path) { return path.replace("/", System.getProperty("file.separator")); }
public void testRemoveNodeDataChangedWatches() throws Exception { LOG.info("Adding data watcher using getData()"); List<EventType> expectedEvents = new ArrayList<Watcher.Event.EventType>(); expectedEvents.add(EventType.DataWatchRemoved); MyWatcher myWatcher = new MyWatcher("/testnode1", expectedEvents, 1); zk.create("/testnode1", "data".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); zk.getData("/testnode1", myWatcher, null); String cmdstring = "removewatches /testnode1 -d"; LOG.info("Remove watchers using shell command : {}", cmdstring); zkMain.cl.parseCommand(cmdstring); Assert.assertTrue("Removewatches cmd fails to remove data watches", zkMain.processZKCmd(zkMain.cl)); LOG.info("Waiting for the DataWatchRemoved event"); myWatcher.matches();
public void shouldAcceptAResultWithASpecificWebMethod() throws SecurityException, NoSuchMethodException { List<Route> routes = parser.rulesFor(new DefaultResourceClass(ClientsController.class)); Route route = getRouteMatching(routes, "/clients/head"); assertThat(route.allowedMethods(), is(EnumSet.of(HttpMethod.HEAD)));
public void initialize() { ByteBuffer b=null; if(delay == -1) { b=ByteBuffer.wrap(FLUSH); } else { b=ByteBuffer.allocate(32); b.put( ("flush_all " + delay + "\r\n").getBytes()); b.flip(); } setBuffer(b); }
protected void close() throws Exception { response.add(HtmlUtil.getHtmlOfInheritedPage("PageFooter", page)); response.add(formatter.tail()); response.closeChunks(); response.addTrailingHeader("Exit-Code", String.valueOf(log.getExitCode())); response.closeTrailer(); response.close(); }
public void loadVirtualChildren(String url) throws Exception { try {
public static String replaceAll(String original, String target, String replacement) { StringBuffer result = new StringBuffer(); int fromIndex = 0; while (true) { int foundIndex = original.indexOf(target, fromIndex); if (foundIndex == -1) { result.append(original.substring(fromIndex)); break; } result.append(original.substring(fromIndex, foundIndex)); result.append(replacement); fromIndex = foundIndex + target.length(); } return result.toString(); }
public void execute() { if (control == null || !control.isDirectory()) { throw new BuildException("You need to point the 'control' attribute to the control directory."); } if (changesIn != null) { if (!changesIn.isFile() || !changesIn.canRead()) { throw new BuildException("The 'changesIn' attribute needs to point to a readable file. " + changesIn + " was not found/readable."); } if (changesOut == null) { throw new BuildException("A 'changesIn' without a 'changesOut' does not make much sense."); } if (!isPossibleOutput(changesOut)) { throw new BuildException("Cannot write the output for 'changesOut' to " + changesOut); } if (changesSave != null && !isPossibleOutput(changesSave)) { throw new BuildException("Cannot write the output for 'changesSave' to " + changesSave); } } else { if (changesOut != null || changesSave != null) { throw new BuildException("The 'changesOut' or 'changesSave' attributes may only be used when there is a 'changesIn' specified."); } } if (!"gzip".equals(compression) && !"bzip2".equals(compression) && !"none".equals(compression)) { throw new BuildException("The compression method '" + compression + "' is not supported"); } if (dataProducers.size() == 0) { throw new BuildException("You need to provide at least one reference to a tgz or directory with data."); } if (deb == null) { throw new BuildException("You need to point the 'destfile' attribute to where the deb is supposed to be created."); } final File[] controlFiles = control.listFiles(); final DataProducer[] data = new DataProducer[dataProducers.size()]; dataProducers.toArray(data); final Processor processor = new Processor(new TaskConsole(this, verbose), null); final PackageDescriptor packageDescriptor; try { log("Creating debian package: " + deb); packageDescriptor = processor.createDeb(controlFiles, data, deb, compression); } catch (Exception e) { throw new BuildException("Failed to create debian package " + deb, e); } final TextfileChangesProvider changesProvider; try { if (changesOut == null) { return; } log("Creating changes file: " + changesOut);
public void testShouldThrowNoSuchMethodExceptionIfGivenParseDelgateClassDoesNotHaveParseMethodWithStringParam() throws Exception { try { TypeAdapter.registerParseDelegate(Class.class, PublicStaticParseMethodWithoutStringParam.class);
public void shouldReturnNotNullWhenJavaIsNotAvailableOnCommandLineAndJavaHomeIsPresent() { Toolchain toolchain = new ReturningToolChain(null); assertNotNull(JavaLocator.findExecutableFromToolchain(toolchain)); }
public void nullListSerialize() throws Exception { assertEquals("[000000:]", ListSerializer.serialize(list)); }
public boolean isBetween(String minimum, String maximum, int startsAt) { if (offset + startsAt + minimum.length() > input.length()) return false; String test = substring(startsAt, startsAt + minimum.length()); return test.compareTo(minimum) >= 0 && test.compareTo(maximum) <= 0; }
public void test304IfNotModifiedForFiles() throws IOException { test304IfNotModified("files/testFile1"); }
public void closedLeftIntervalComparison() throws Exception { assertExpectationMessage(" 2.1 <= _ < 5.9", "4.3", "pass(2.1<=4.3<5.9)"); assertExpectationMessage(" 2.1 <= _ < 5.9", "2.1", "pass(2.1<=2.1<5.9)"); assertExpectationMessage(" 2.1 <= _ < 5.9", "8.3", "fail(2.1<=8.3<5.9)"); }
public String makeFullPathOfTarget(String wikiWordPath) {
public void failuresAreRecordedCorrectly() throws Exception{ xmlTestListener.recordTestResult("testName", new TestSummary(1,2,0,0), 100); Assert.assertEquals(readContents(new File(xmlOutputDir,"TEST-testName.xml")), "<testsuite errors=\"0\" skipped=\"0\" tests=\"1\" time=\"0.1\" failures=\"1\" name=\"testName\"><properties></properties><testcase classname=\"testName\" time=\"0.1\" name=\"testName\"><failure type=\"java.lang.AssertionError\" message=\" exceptions: 0 wrong: 2\"></failure></testcase></testsuite>");
private ContentValues buildNewEntryContent(PwDatabase db, PwEntry entry) { ContentValues cv = new ContentValues(); UUID uuid = entry.getUUID(); String uuidStr = uuid.toString(); cv.put(KEY_UUID, uuidStr); cv.put(KEY_TITLE, entry.getTitle()); cv.put(KEY_URL, entry.getUrl()); cv.put(KEY_USERNAME, entry.getUsername()); cv.put(KEY_COMMENT, entry.getNotes()); return cv; }
public void shouldComplainWhenUnableToInstantiateAnInterceptor() throws InterceptionException, IOException { handler.execute(null, null, null); }
ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException; }
public void putTagInline(String tag) { startTagInline(tag); endTag(); }
protected long nanoTime() { return socketConnectAttempt * timeMultiplier; }
byte[] generatePasswd(long id) { Random r = new Random(id ^ superSecret); byte[] p = new byte[16]; r.nextBytes(p); return p; }
private void outputDatabase(OutputStream os) throws IllegalArgumentException, IllegalStateException, IOException {
Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
private void verify(String cmd, String expected) throws IOException, SSLContextException { String resp = sendRequest(cmd); LOG.info("cmd {} expected {} got {}", cmd, expected, resp); assertTrue(resp.contains(expected), "Unexpected response"); }
public void canParseTheCommandLine() throws Exception { updater.parseCommandLine(new String[]{"testDir"}); assertEquals("testDir", updater.getDirectories().get(0)); }
public void checkAccess(ThreadGroup g) { if (delegate != null) { delegate.checkAccess(g);
protected void register(Class<? extends Converter> converterType) { if (!converterType.isAnnotationPresent(Convert.class)) {
public void testLinkToNonExistentWikiPageOnVirtualPage() throws Exception {
private void throwException() throws Exception { throw createException(); }
public void testUsage() throws Exception { formatter.acceptResult(new PageResult("PageOne", new TestSystemBase.TestSummary(1, 0, 0, 0), "page one")); formatter.acceptResult(new PageResult("PageTwo", new TestSystemBase.TestSummary(0, 1, 0, 0), "page two")); formatter.acceptFinalCount(new TestSystemBase.TestSummary(1, 1, 0, 0)); String html = getHtml(); assertSubString("PageOne", html); assertSubString("page one", html); assertSubString("pass", html); assertSubString("PageTwo", html); assertSubString("page two", html); assertSubString("fail", html); }
public void testStarted(TestPage testPage) { } @Override public void testComplete(TestPage testPage, TestSummary testSummary) { } @Override public void testSystemStopped(TestSystem testSystem, Throwable throwable) { } @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) { } @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) { } } }
void nothing();  void notFound();  void permanentlyRedirectTo(String uri);  <T> T permanentlyRedirectTo(Class<T> controller);  <T> T permanentlyRedirectTo(T controller); }
<T extends Interceptor> void add(Class<T> interceptor); void next(ResourceMethod method, Object resourceInstance) throws IOException, InterceptionException; void addAsNext(Interceptor interceptor); }
public synchronized boolean wasStopped() { return wasStopped; }
public void testRunnerDefault() throws Exception { String pageText = "!define TEST_SYSTEM {slim}\n"; WikiPage page = makeTestPage(pageText); WikiPageDescriptor descriptor = new WikiPageDescriptor(page, false, false, ""); MockClientBuilder clientBuilder = new MockClientBuilder(descriptor); assertEquals(MOCK_TEST_RUNNER, clientBuilder.getTestRunner()); }
public void testFinderShouldFindUncleSymbolicLinks() { PageData data = pageTwoChild.getData(); WikiPageProperty suiteProperty = data.getProperties().set(SymbolicPage.PROPERTY_NAME); suiteProperty.set("SymbThree", "<" + pageThree.getFullPath().toString()); pageTwoChild.commit(data); WhereUsedPageFinder whereUsed = new WhereUsedPageFinder(pageThree, hits); whereUsed.search(root); hits.assertPagesFound(pageTwoChild.getName()); }
public void testTestSummaryTestPass() throws Exception { formatter.announceNumberTestsToRun(1); formatter.newTestStarted(page); formatter.testComplete(page, new TestSummary(4, 0, 0, 0)); formatter.allTestingComplete(); assertSubString("<script>document.getElementById(\"test-summary\").innerHTML =", pageBuffer.toString()); assertSubString("<strong>Assertions:</strong> 4 right, 0 wrong, 0 ignored, 0 exceptions", pageBuffer.toString()); assertSubString("document.getElementById(\"test-summary\").className = \"pass\"", pageBuffer.toString()); }
public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress(); }
public void returnsTheCorrectDefaultResourceMethodIfFound() throws SecurityException, NoSuchMethodException { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.findable.logic", "findable"), is(VRaptorMatchers.resourceMethod(MyResource.class.getMethod("findable")))); mockery.assertIsSatisfied(); }
public void fromNull_shouldCreateNullString() { assertEquals(Converter.NULL_VALUE, ListConverterHelper.toString(null)); }
public void testVariableSubstitutionPlain () throws Exception { WikiPage page2 = crawler.addPage( page, PathParser.parse("MyVarSubPage"), "~vs1:${=${ONE}=}~\n" + "~vs2:${=${ONE}+${TWO}=}~\n" + "~vs3:${= ${ONE} + ${TWO} * ${TWO} =}~\n" + "~vs4:${=(${ONE} + ${TWO}) * ${TWO}=}~\n" ); String result = page2.getData().getHtml(); assertSubString("~vs1:1~", result); assertSubString("~vs2:3~", result); assertSubString("~vs3:5~", result); assertSubString("~vs4:6~", result); }
private void writeFrameType(final Object type) { if (type instanceof String) { stackMap.putByte(7).putShort(cw.newClass((String) type));
public void testRenameSubpageOfRoot() { WikiPage source = WikiPageUtil.addPage(root, PathParser.parse("SourcePage"), "gunk ^TargetPage gunk"); WikiPage target = WikiPageUtil.addPage(source, PathParser.parse("TargetPage")); renamer = new PageReferenceRenamer(target, "RenamedPage"); renameReferences(root, renamer); source = root.getChildPage("SourcePage"); String updatedSourceContent = source.getData().getContent(); assertEquals("gunk >RenamedPage gunk", updatedSourceContent); }
void cancel();  OperationState getState();  ByteBuffer getBuffer();  void writeComplete();  void initialize();  void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data);  MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to);  void timeOut();  boolean isTimedOut();  boolean isTimedOut(long ttlMillis);  boolean isTimedOutUnsent(); }
protected void describeMismatchSafely(byte[] item, Description mismatchDescription) { } @Override protected boolean matchesSafely(byte[] item) { if (item.length < array.length) { return false; } for (int i = 0; i < array.length; i++) { if (array[i] != item[i]) { return false; } } return true; } public void describeTo(Description description) { description.appendText("a byte array starting with " + Arrays.toString(array)); } }; } static class FakeResource { public String string() { return null; } public File file() { return null; } public InputStream input() { return null; } public Download download() { return null; } } }
public void allTestingComplete() throws Exception { writeResults(); }
private void loadFile() throws Exception { LinkedList lines = getPasswordFileLines(); loadCipher(lines); loadPasswords(lines); }
private String getSocketOutput(String requestLine, WikiPage page) throws Exception { MockSocket s = new MockSocket(requestLine); FitNesseContext context = new FitNesseContext(); context.rootPagePath = SampleFileUtility.base; context.responderFactory = new ResponderFactory(SampleFileUtility.base); context.root = page; FitNesseServer server = new FitNesseServer(context); server.serve(s, 1000); String output = s.getOutput(); return output; }
private static void addToCleanupQueue(NativeAESCipherSpi ref, long ptr) { Log.d("KeepassDroid", "queued cipher context: " + ptr); mCleanup.put(new PhantomReference<NativeAESCipherSpi>(ref, mQueue), ptr); }
Collection<SocketAddress> getAvailableServers(); Collection<SocketAddress> getUnavailableServers(); Transcoder<Object> getTranscoder(); NodeLocator getNodeLocator(); Future<Boolean> append(long cas, String key, Object val); <T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) throws OperationTimeoutException; CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void onKeyInvalidated() { clearStoredCredentials(); Toast.makeText(getContext(), R.string.biometric_invalidated, Toast.LENGTH_LONG).show(); }
public void shoudSupportCustomImplementationsForAlreadyRegisteredComponents() { this.container.register(UrlToResourceTranslator.class, CustomTranslator.class); UrlToResourceTranslator translator = this.container.instanceFor(UrlToResourceTranslator.class); assertThat(translator, is(notNullValue())); assertThat(translator, is(instanceOf(CustomTranslator.class))); }
Map<String, Class<? extends Responder>> getResponders() throws PluginException; Authenticator getAuthenticator(); List<SymbolType> getSymbolTypes() throws PluginException; List<WikiPageFactory> getWikiPageFactories() throws PluginException; ContentFilter getContentFilter(); Map<String, Class<? extends SlimTable>> getSlimTables() throws PluginException; Map<String, CustomComparator> getCustomComparators() throws PluginException; Map<String, TestSystemFactory> getTestSystemFactories() throws PluginException; void setComponentFactory(ComponentFactory componentFactory); }
public void canProvidePicoSpecificApplicationScopedComponents() { List<Class<?>> components = Arrays.asList(Scanner.class, StereotypedComponentRegistrar.class, ComponentFactoryRegistrar.class, InterceptorRegistrar.class, ConverterRegistrar.class, ResourceRegistrar.class); checkAvailabilityFor(true, components); mockery.assertIsSatisfied(); }
public void testComplete(TestPage test, TestSummary summary, TimeMeasurement timeMeasurement) throws Exception { testCount++; if (summary.wrong > 0) { failCount++; } if (summary.exceptions > 0) { failCount++;
public void succeeded(FrameworkMethod method) { LOG.info("SUCCEEDED " + testName); }
private void printUsage() { System.err.println("Usage: java fitnesse.TestRunner [-vh] <URL>"); System.err.println("\t-v verbose"); System.err.println("\t-h show html output"); System.err.println("\tThe URL should be a FitNesse page test execution, "); System.err.println("\tending in either '?suite' or '?test"); }
public void setup() { this.mockery = new VRaptorMockery(); Localization localization = mockery.localization(); this.jsr303Validator = new JSR303Validator(localization); this.hibernateValidator3 = new HibernateValidator3(localization); }
public void testRenderWithSpaces() throws Exception { AnchorMarkerWidget widget = new AnchorMarkerWidget(null, ".#anchorName and some other stuff"); assertEquals("<a href=\"#anchorName\">.#anchorName</a>", widget.render().trim()); }
private double exponentiateNegativeNumber(double result, boolean expNeg, double e) { if (Math.ceil(e) == e) { result = calculateIntegralExponent(result, expNeg, e); } else { result = Double.NaN; } return result; }
private String getSetUpTearDownGroup(WikiPage page) throws Exception { String setUpPath = getPathForSetUpTearDown(page, SuiteContentsFinder.SUITE_SETUP_NAME); String tearDownPath = getPathForSetUpTearDown(page, SuiteContentsFinder.SUITE_TEARDOWN_NAME); return setUpPath + "," + tearDownPath; }
GetsOperation gets(String key, GetsOperation.Callback callback);  GetOperation get(Collection<String> value, GetOperation.Callback cb);  MutatatorOperation mutate(Mutator m, String key, int by, long def, int exp, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(String key, long casId, int flags, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root"); crawler = root.getPageCrawler();
public void testCnxManager() throws Exception { CnxManagerThread thread = new CnxManagerThread(); thread.start(); QuorumPeer peer = new QuorumPeer(peers, tmpdir[1], tmpdir[1], port[1], 3, 1, 2, 2, 2); QuorumCnxManager cnxManager = new QuorumCnxManager(peer); QuorumCnxManager.Listener listener = cnxManager.listener; if(listener != null){ listener.start(); } else { LOG.error("Null listener when initializing cnx manager"); } cnxManager.toSend(new Long(0), createMsg(ServerState.LOOKING.ordinal(), 1, -1, 1)); Message m = null; int numRetries = 1; while((m == null) && (numRetries++ <= THRESHOLD)){ m = cnxManager.recvQueue.poll(3000, TimeUnit.MILLISECONDS); if(m == null) cnxManager.connectAll(); } Assert.assertTrue("Exceeded number of retries", numRetries <= THRESHOLD); thread.join(5000); if (thread.isAlive()) { Assert.fail("Thread didn't join");
protected void wasCancelled() { cb.receivedStatus(CANCELLED); }
void fillWriteBuffer(boolean optimizeGets);  void transitionWriteItem();  Operation getCurrentReadOp();  Operation removeCurrentReadOp();  Operation getCurrentWriteOp();  Operation removeCurrentWriteOp();  boolean hasReadOp();  boolean hasWriteOp();  void addOp(Operation op);  void insertOp(Operation o);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  boolean isAuthenticated();  long lastReadDelta();  void completedRead();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
void created(String location);  void noContent();  void badRequest(String message);  void badRequest(List<?> errors);  void forbidden(String message);  void notFound();  void conflict(); void header(String key, String value); void methodNotAllowed(EnumSet<HttpMethod> allowedMethods);  void notModified();  void movedPermanentlyTo(String url);  <T> T movedPermanentlyTo(Class<T> controller);  void unsupportedMediaType(String errorMessage);  void notAcceptable();  void accepted(); }
public Operation newOp(final MemcachedNode n, final CountDownLatch latch) { return opFact.flush(delay, new OperationCallback(){ public void receivedStatus(String line) {
public static KeyStore loadTrustStore( String trustStoreLocation, String trustStorePassword, String trustStoreTypeProp) throws IOException, GeneralSecurityException { KeyStoreFileType storeFileType = KeyStoreFileType.fromPropertyValueOrFileName( trustStoreTypeProp, trustStoreLocation); return FileKeyStoreLoaderBuilderProvider .getBuilderForKeyStoreFileType(storeFileType)
public boolean isSaslClientEnabled() { return Boolean.valueOf(getProperty(ENABLE_CLIENT_SASL_KEY, ENABLE_CLIENT_SASL_DEFAULT)); }
private boolean contains(char[] terminators, char candidate) { for (char terminator: terminators) if (candidate == terminator) return true; return false; }
public void testLongDecode() { assertEquals(4294967296L, decodeLong(new byte[]{0, 0, 0, 1, 0, 0, 0, 0}, 0)); assertEquals(1L, decodeLong(new byte[]{0, 0, 0, 0, 0, 0, 0, 1}, 0));
private void addGrandChild(WikiPage parent, String childName) throws Exception { crawler.addPage(parent.getChildPage(childName), PathParser.parse("GrandChild"), "content"); }
public void testUnspecifiedClientAddress() throws Exception { int[] ports = { PortAssignment.unique(), PortAssignment.unique(), PortAssignment.unique() }; String server = "server.0=localhost:" + ports[0] + ":" + ports[1] + ";" + ports[2]; QuorumServer qs = new QuorumServer(0, server); Assert.assertEquals(qs.clientAddr.getHostString(), "0.0.0.0"); Assert.assertEquals(qs.clientAddr.getPort(), ports[2]); }
public void markMeter(String name) { metrics.put(name, metrics.get(name) + 1); }
public void list() { result.include("resources", registry.all()); result.use(Results.page()).forward("ok"); }
public static void walkArchive(File deb, ArchiveVisitor<ArArchiveEntry> visitor) throws IOException { ArArchiveInputStream in = new ArArchiveInputStream(new FileInputStream(deb)); ArchiveWalker.walk(in, visitor); }
public void testNoSuchMethod() throws Exception { final String[][] table = { {"fitnesse.fixtures.ColumnFixtureTestFixture"}, {"no such method?"} }; Parse page = FixtureTest.executeFixture(table); String columnHeader = page.at(0, 1, 0).body; assertTrue(columnHeader.contains("Could not find method: no such method?.")); }
protected String createEvaluationMessage(String value, String literalizedValue, String originalValue) { slimTable.setSymbol(symbolName, value); return String.format("$%s<-[%s]", slimTable.literalize(symbolName), literalizedValue); }
private ByteBuffer createConnRequest() { Random r = new Random(SESSION_ID ^ superSecret); byte p[] = new byte[16]; r.nextBytes(p); ConnectRequest conReq = new ConnectRequest(0, 1L, 30000, SESSION_ID, p); MockPacket packet = new MockPacket(null, null, conReq, null, null, false); return packet.createAndReturnBB(); }
MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to); }
private void makeVirtualWikiHtml() throws Exception { html.put("virtualWikiValue", getVirtualWikiValue(pageData)); }
public void emptyListReturnsNicely() throws Exception { statements.clear(); executor.execute(statements); expectedResults.clear(); respondsWith(new ArrayList<Object>()); }
private org.apache.zookeeper.metrics.Gauge gaugeWithLeader(Function<Leader, Number> supplier) { return () -> { final Leader leader = getLeader();
abstract int syncTimeout();  abstract int getTickOfNextAckDeadline();  abstract int getTickOfInitialAckDeadline();  abstract long getAndDecrementFollowerCounter();  abstract void processAck(long sid, long zxid, SocketAddress localSocketAddress);  abstract void touch(long sess, int to);  abstract void revalidateSession(QuorumPacket qp, LearnerHandler learnerHandler) throws IOException;  abstract void submitLearnerRequest(Request si);  abstract long startForwarding(LearnerHandler learnerHandler, long lastSeenZxid);  abstract long getQuorumVerifierVersion();  abstract String getPeerInfo(long sid);  abstract byte[] getQuorumVerifierBytes(); abstract QuorumAuthServer getQuorumAuthServer();  abstract void registerLearnerHandlerBean(final LearnerHandler learnerHandler, Socket socket);  abstract void unregisterLearnerHandlerBean(final LearnerHandler learnerHandler); }
Future<Boolean> prepend(long cas, String key, Object val); Future<Boolean> prepend(String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<Boolean> prepend(String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); Future<CASResponse> asyncCAS(String key, long casId, int exp, Object value); <T> OperationFuture<CASResponse> asyncCAS(String key, long casId, int exp, T value, Transcoder<T> tc); <T> CASResponse cas(String key, long casId, int exp, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); CASResponse cas(String key, long casId, int exp, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by, long def, int exp); Future<Long> asyncIncr(String key, int by, long def, int exp); Future<Long> asyncDecr(String key, long by, long def, int exp); Future<Long> asyncDecr(String key, int by, long def, int exp); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Long> asyncIncr(String key, long by, long def); Future<Long> asyncIncr(String key, int by, long def); Future<Long> asyncDecr(String key, long by, long def); Future<Long> asyncDecr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); CountDownLatch broadcastOp(final BroadcastOpFactory of); CountDownLatch broadcastOp(final BroadcastOpFactory of, Collection<MemcachedNode> nodes);  Set<String> listSaslMechanisms(); }
public void testTiming() throws Exception { PageData data = somePage.getData(); long savedTicket = 0; long editTicket = 1; long time = SaveRecorder.pageSaved(somePage, savedTicket); somePage.commit(data); assertTrue(SaveRecorder.changesShouldBeMerged(time - 1, editTicket, somePage)); assertFalse(SaveRecorder.changesShouldBeMerged(time + 1, editTicket, somePage)); }
String variableValueToHtml(ParsingPage page, String variableValue); void findWhereUsed(WikiPage page, Consumer<String> takeWhereUsed); String changeReferences(WikiPage page, Function<String, Optional<String>> changeReference); static MarkUpSystem make() { return new MarkUpSystemV2(); }
long getLastLoggedZxid() throws IOException;  boolean truncate(long zxid) throws IOException;  long getDbId() throws IOException;  void commit() throws IOException;  long getTxnLogSyncElapsedTime();  void setTotalLogSize(long size);  long getTotalLogSize();  interface TxnIterator extends Closeable {  TxnHeader getHeader();  Record getTxn();  boolean next() throws IOException;  long getStorageSize() throws IOException; } }
public Thread newThread(Runnable r) { Thread t = new Thread(group, r, "QuorumConnectionThread-" + "[myid=" + mySid + "]-" + threadIndex.getAndIncrement()); return t; }
public void tearDown() throws Exception { } public void testGetValueFor() throws Exception { assertEquals(0, Base64.getValueFor((byte)'A')); assertEquals(26, Base64.getValueFor((byte)'a')); assertEquals(52, Base64.getValueFor((byte)'0')); } public void testDecodeNothing() throws Exception { assertEquals("", Base64.decode("")); } public void testDecodeOneChar() throws Exception { assertEquals("a", Base64.decode("YQ==")); } public void testDecodeTwoChars() throws Exception { assertEquals("a:", Base64.decode("YTo=")); } public void testDecodeLongSample() throws Exception { assertEquals("Aladdin:open sesame", Base64.decode("QWxhZGRpbjpvcGVuIHNlc2FtZQ==")); } public void testEncodeNothing() throws Exception { assertEquals("", Base64.encode("")); } public void testEncodeOneChar() throws Exception { assertEquals("YQ==", Base64.encode("a")); } public void testEncodeTwoChars() throws Exception { assertEquals("YTo=", Base64.encode("a:")); } public void testEncodeThreeChars() throws Exception { assertEquals("YWJj", Base64.encode("abc")); } public void testEncodeLongSample() throws Exception { assertEquals("QWxhZGRpbjpvcGVuIHNlc2FtZQ==", Base64.encode("Aladdin:open sesame")); } }
<T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by); long decr(String key, int by); long incr(String key, int by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void visitLocalVariable(final String name, final String desc, final String signature, final Label start, final Label end, final int index) {
public HtmlTag makeTagsHtml(PageData pageData) throws Exception { HtmlTag div = new HtmlTag("div"); div.addAttribute("style", "float: left; padding-right: 5px"); div.add(makeInputField("Tags:", PageData.PropertySUITES, SUITES, 40, pageData)); return div; }
public void gotData(ViewResponse response) { vr = response; }
public NoSuchConverter noSuchConverter() { return new NoSuchConverter(); }
protected void initServiceCredentials() throws Exception { if (serviceName == null) serverCreds = null;
public void testArgumentsDefaults() throws Exception { makeArgs(new String[] {}); assertEquals(80, args.getPort()); assertEquals(".", args.getRootPath()); assertEquals("FitNesseRoot", args.getRootDirectory()); assertEquals(null, args.getLogDirectory()); assertEquals(false, args.isOmittingUpdates()); assertEquals(14, args.getDaysTillVersionsExpire()); assertEquals(null, args.getUserpass()); assertEquals(false, args.isInstallOnly()); }
public void connect() throws IOException { reader = slimRunner.getReader(); writer = slimRunner.getByteWriter(); validateConnection(); }
public static void startFitnesse(WikiPage root) { context = makeTestContext(root); context.responderFactory = new ResponderFactory(context.getRootPagePath()); context.port = port; startFitnesseWithContext(context); }
public void shouldExcludeWithListsOfData() throws Exception { Data data1 = new Data(); data1.test = "testing"; Data data2 = new Data(); data2.test = "testing2"; fixedExtJson.from(Arrays.asList(data1, data2)).exclude("test").serialize(); assertThat(writer.toString(), is("{\"data\": [{},{}]}")); }
public void testPageMatchesQueryWithSingleAttribute() throws Exception { Map<String, Boolean> attributes = new HashMap<>(); searcher = new AttributeWikiPageFinder(this, Arrays.asList(TEST), attributes, new ArrayList<String>()); attributes.put(TEST.toString(), true); assertTrue(searcher.pageMatches(page)); removePageProperty(page, TEST.toString()); assertFalse(searcher.pageMatches(page)); searcher = generateSearcherByPageTypesAndSearchAttributes(Arrays.asList(STATIC, SUITE), attributes); attributes.put(TEST.toString(), false); assertTrue(searcher.pageMatches(page)); setPageProperty(page, TEST.toString(), "true"); assertFalse(searcher.pageMatches(page)); }
public void testCreateNewSession() throws JSONException { ZSession session = createSession(); Assert.assertEquals(session.id.length(), 36);
public Object convert(String value, Class type, List errors, ResourceBundle bundle) { if(value==null || value=="") { return 0L; } try { return Long.parseLong(value);
public void tearDown() throws Exception { if (zooKeeper != null) { zooKeeper.delete(testRootNode + Thread.currentThread().getId(), -1); } super.tearDown(); }
public void addToResponse(String output) throws Exception { if (!closed) response.add(output);
public String toHtml() { if (response != null) { return contents + " " + response.toHtml(); } return contents; }
public void setup() throws Exception { this.stream = new ByteArrayOutputStream(); HttpServletResponse response = mock(HttpServletResponse.class); when(response.getWriter()).thenReturn(new PrintWriter(stream)); this.serialization = new XStreamJSONPSerialization(response, new DefaultTypeNameExtractor(), new HibernateProxyInitializer()); }
public void stepsInstancesFound(List<String> names){ findSteps.found(names); }
public void testAutoUpdateSettingDisplayed() throws Exception { MockRequest request = makeRequest(baseUrl); request.addInput("autoUpdate", true); String content = simulateWebRequest(request); assertSubString("Automatic Update turned ON", content); request = makeRequest(baseUrl); content = simulateWebRequest(request); assertSubString("Automatic Update turned OFF", content); }
public String toString() { return "DataType = " + INT_TYPE; }
public void testTrimStringWithLeadingAndTrailingSpaces() { assertEquals("FitNesse", StringUtil.trimNonNullString(" FitNesse ")); }
public List<Route> rulesFor(StereotypedClass resource) { return EMPTY; }
public void testSlimTablesWithColonCreation() throws PluginException { testProperties.setProperty(ConfigurationParameter.SLIM_TABLES.getKey(), "test::" + TestSlimTable.class.getName()); SlimTableFactory slimTableFactory = new SlimTableFactory(); loader.loadSlimTables(slimTableFactory); HtmlTable table = makeMockTable("test:"); SlimTable slimTable = slimTableFactory.makeSlimTable(table, "foo", new SlimTestContextImpl(null)); assertSame(TestSlimTable.class, slimTable.getClass()); }
public void includeScenarioLibraryUnclesInOrder() throws Exception { addPage("TestPage.TestPageChild", "child"); addPage("TestPage.ScenarioLibrary", "child library"); WikiPage nephew = addPage("TestPage.TestPageChild.TestPageGrandChild", "!define TEST_SYSTEM {slim}\n"); addPage("TestPage.TestPageChild.ScenarioLibrary", "grand child library"); TestPage testPage = new TestPage(nephew); String html = testPage.getDecoratedData().getHtml(); assertSubString("child library", html); assertSubString("grand child library", html); assertSubString("TestPage.ScenarioLibrary", html); assertSubString("TestPage.TestPageChild.ScenarioLibrary", html); assertSubString("Scenario Libraries", html); assertTrue(html.indexOf("grand child library") > html.indexOf("child library")); }
public void announceStartNewTest(String relativeName, String fullPathName) throws Exception { pageNumber++; if (firstTest) { HtmlTag outputTitle = new HtmlTag("h2", "Test Output"); outputTitle.addAttribute("class", "centered"); writeData(outputTitle.html()); firstTest = false; } if (testSystemFullName != null) { HtmlTag systemTitle = new HtmlTag("h2", String.format("Test System: %s", testSystemFullName)); systemTitle.addAttribute("class", "centered"); writeData(systemTitle.html());
private void addTextToResults(HtmlPage resultsPage, String text) { resultsPage.main.add(text); }
public Iterator anIteratorOfPoint() { return aListOfPoint().iterator(); }
public void setUp() throws Exception {
protected SlimTestResult createEvaluationMessage(String actual, String expected) { table.substitute(getCol(), getRow(), replaceSymbolsWithFullExpansion(expected)); return SlimTestResult.plain(); }
public ListTree tree(String s) { return ListTree.parse(s); }
void setSymbol(String symbolName, String value); void addScenario(String scenarioName, ScenarioTable scenarioTable); ScenarioTable getScenario(String scenarioName); Collection<ScenarioTable> getScenarios(); void incrementPassedTestsCount(); void incrementFailedTestsCount(); void incrementErroredTestsCount(); void incrementIgnoredTestsCount(); void increment(ExecutionResult testSummary); void increment(TestSummary testSummary); TestPage getPageToTest(); }
public void execute() throws IOException, InterceptionException { interceptorStack.add(ResourceLookupInterceptor.class); interceptorStack.add(instantiateInterceptor); interceptorStack.add(ExecuteMethodInterceptor.class); interceptorStack.next(null, null); }
public void traverse(TraversalListener<? super WikiPage> listener) { traverse(context, listener); }
public Class<?> typeFor(ResourceMethod method) { if (!cache.containsKey(method)) { cache.put(method, creator.typeFor(method)); logger.debug("cached generic type for method " + method); } return cache.get(method); }
public void setup() { MockitoAnnotations.initMocks(this); this.proxifier = new JavassistProxifier(new ObjenesisInstanceCreator()); this.typeFinder = new NoTypeFinder(); when(router.builderFor(anyString())).thenAnswer(new Answer<DefaultRouteBuilder>() { public DefaultRouteBuilder answer(InvocationOnMock invocation) throws Throwable { return new DefaultRouteBuilder(proxifier, typeFinder, converters, nameProvider, new JavaEvaluator(), (String) invocation.getArguments()[0]); } }); parser = new PathAnnotationRoutesParser(router); }
public long getMinRequestLatency();  public double getAvgRequestLatency();  public long getMaxRequestLatency();  public long getPacketsReceived();  public long getPacketsSent();  public long getFsyncThresholdExceedCount();  public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max); public boolean getResponseCachingEnabled(); public void setResponseCachingEnabled(boolean isEnabled);  public int getConnectionMaxTokens(); public void setConnectionMaxTokens(int val); public int getConnectionTokenFillTime(); public void setConnectionTokenFillTime(int val); public int getConnectionTokenFillCount(); public void setConnectionTokenFillCount(int val); public int getConnectionFreezeTime(); public void setConnectionFreezeTime(int val); public double getConnectionDropIncrease(); public void setConnectionDropIncrease(double val); public double getConnectionDropDecrease(); public void setConnectionDropDecrease(double val); public double getConnectionDecreaseRatio(); public void setConnectionDecreaseRatio(double val);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); public long getFlushDelay(); public void setFlushDelay(long delay); public long getMaxWriteQueuePollTime(); public void setMaxWriteQueuePollTime(long delay); public int getMaxBatchSize(); public void setMaxBatchSize(int size); }
private static void addClassPathElements(WikiPage page, List classPathElements, Set visitedPages) throws Exception { List pathElements = new ClassPathBuilder().getInheritedPathElements(page, visitedPages); classPathElements.addAll(pathElements); }
public void method(@Load Entity entity) { } public void other(@Load OtherEntity entity) { } public void noId(@Load NoIdEntity entity) { } public void methodOtherIdName(@Load EntityOtherIdName entity) { } } private Stubber fail() { return doThrow(new AssertionError()); } }
TestPage getPageToTest(); void setCurrentScript(Class<? extends ScriptTable> scriptTableClass, String actorName); Class<? extends ScriptTable> getCurrentScriptClass(); String getCurrentScriptActor(); }
public void bye() throws Exception { for (TestSystem testSystem : testSystems.values()) { testSystem.bye();
public abstract boolean isSuccessfullyStarted(); public abstract void kill() throws Exception; public abstract void sendPageData(PageData pageData) throws Exception; }
private HtmlTag makeScriptButtons() { TagGroup scripts = new TagGroup(); includeJavaScriptFile("/files/javascript/SpreadsheetTranslator.js", scripts); includeJavaScriptFile("/files/javascript/spreadsheetSupport.js", scripts); HtmlTag wizardScript = new HtmlTag("script"); wizardScript.add("\nfunction addFixture()\n" + "{\n" + "\tdocument.tableWizardForm.text.value = document.f." + CONTENT_INPUT_NAME + ".value;\n" + "\tdocument.tableWizardForm.fixture.value = document.f.fixtureTable.options[document.f.fixtureTable.selectedIndex].value;\n" + "\tdocument.tableWizardForm.submit();\n" + "}"); scripts.add(wizardScript); return scripts; }
public void testClearChildrenChangingVW() throws Exception { createSimpleVirtualLink(); assertTrue(!(extension.getVirtualCoupling() instanceof NullVirtualCouplingPage));
void createSlimService(String args) throws Exception { while (!tryCreateSlimService(args)) Thread.sleep(10);
public void testKerberosLogin() throws Exception { MiniKdc kdc = getKdc(); File workDir = getWorkDir(); LoginContext loginContext = null; try { String principal = "foo";
public void testCyclicSymbolicLinks() { createCycle(); PageCrawler pageCrawler = root.getPageCrawler(); WikiPage deepPage = pageCrawler.getPage(PathParser.parse(pageOnePath + ".SymOne.SymTwo.SymOne.SymTwo.SymOne")); assertNull(deepPage);
private byte[] encrypt(byte[] lock, byte[] key) { int keyIndex = 0; for (int i = 0; i < lock.length; i++) { byte lockByte = lock[i]; byte keyByte = key[keyIndex++]; lock[i] = (byte) (lockByte + keyByte); if (keyIndex == key.length) keyIndex = 0; } return lock; }
@Test public void ignoresMismatchedStyle() { ParserTestHelper.assertTranslatesTo("!style_myStyle[stuff)", "!style_myStyle[stuff)"); }
public String getContent(File file) throws IOException { return FileUtil.getFileContent(file); }
private FitNesseContext initContext(File configFile, String rootPath, int port) throws IOException, PluginException { Properties configFileProperties = ConfigurationParameter.makeProperties(System.getProperties(), configFile); Properties properties = ConfigurationParameter.makeProperties(configFileProperties, ConfigurationParameter.PORT, port, ConfigurationParameter.ROOT_PATH, rootPath, ConfigurationParameter.ROOT_DIRECTORY, "FitNesseRoot"); return new ContextConfigurator(properties).makeFitNesseContext();
List<String> getClasspaths(); List<String> getXrefPages(); String getContent(); String getAttribute(String attribute); boolean hasAttribute(String attribute); WikiPageProperties getProperties(); WikiPage getWikiPage(); }
private void removePageProperty(WikiPage page, String attributeName) throws Exception { PageData pageData = page.getData(); pageData.getProperties().remove(attributeName); page.commit(pageData); }
public boolean atLast() { return scanner.isLast(); } public boolean isMoveNext(SymbolType type) { return moveNext(1).isType(type); }
public void initialBlankCellDoesNothing() throws Exception { buildInstructionsFor("||blah|blah|\n"); List<Object> expectedInstructions = list(); assertEquals(expectedInstructions, instructions); }
@Test public void translatesRecursiveContents() throws Exception { WikiPage pageOne = makePages(); ParserTest.assertTranslatesTo(pageOne, "!contents -R", contentsWithPages("PageThree", "PageTwo",
public VersionInfo addDirectory(final FileVersion dir) throws IOException { final File filePath = dir.getFile(); addDirectory(filePath); return VersionInfo.makeVersionInfo(dir.getAuthor(), new Date(fileSystem.lastModified(filePath))); }
public void initialize() { prepareBuffer("", EMPTY_BYTES); }
String followerInfo();  String nonVotingFollowerInfo();  long getElectionTimeTaken();  int getLastProposalSize();  int getMinProposalSize();  int getMaxProposalSize();  void resetProposalStatistics();  int getMaxConcurrentSnapSyncs();  void setMaxConcurrentSnapSyncs(int maxConcurrentSnapSyncs);  int getMaxConcurrentDiffSyncs();  void setMaxConcurrentDiffSyncs(int maxConcurrentDiffSyncs); }
public Future<Boolean> flush(final int delay) { final AtomicReference<Boolean> flushResult= new AtomicReference<Boolean>(null); CountDownLatch blatch = broadcastOp(new BroadcastOpFactory(){ public Operation newOp(final MemcachedNode n, final CountDownLatch latch) { return new FlushOperationImpl(delay, new OperationCallback(){ public void receivedStatus(String line) { flushResult.set(line.equals("OK")); } public void complete() { latch.countDown(); }}); }}); return new OperationFuture<Boolean>(blatch, flushResult); }
public boolean sameAs(Token other) { return other instanceof HorizontalRuleToken; }
Map<String, Object> invokeAndGetResponse(List<Instruction> statements) throws IOException; void sendBye() throws IOException; String getTestRunner(); }
public void testCertificateRevocationList() throws Exception { q1 = new MainThread(1, clientPortQp1, quorumConfiguration, SSL_QUORUM_ENABLED); q2 = new MainThread(2, clientPortQp2, quorumConfiguration, SSL_QUORUM_ENABLED); q1.start(); q2.start(); Assert.assertTrue(ClientBase.waitForServerUp("127.0.0.1:" + clientPortQp1, CONNECTION_TIMEOUT)); Assert.assertTrue(ClientBase.waitForServerUp("127.0.0.1:" + clientPortQp2, CONNECTION_TIMEOUT)); String revokedInCRLKeystorePath = tmpDir + "/crl_revoked.jks"; String crlPath = tmpDir + "/crl.pem"; X509Certificate revokedInCRLCert = buildEndEntityCert(defaultKeyPair, rootCertificate, rootKeyPair.getPrivate(), HOSTNAME, null, crlPath, null); writeKeystore(revokedInCRLCert, defaultKeyPair, revokedInCRLKeystorePath); buildCRL(revokedInCRLCert, crlPath); System.setProperty(quorumX509Util.getSslKeystoreLocationProperty(), revokedInCRLKeystorePath);
private void buildInstructionsFor(String scriptStatements) throws Exception { String importTableHeader = "|Import|\n"; makeSlimTableAndBuildInstructions(importTableHeader + scriptStatements); }
public Collection<VersionInfo> history(final File... files) { return new HashSet<>(); }
public void setUp() throws Exception { WikiPage root = InMemoryPage.makeRoot("root"); context = FitNesseUtil.makeTestContext(root); request = new MockRequest(); customComparatorRegistry = new CustomComparatorRegistry(); responder = getSlimResponder(customComparatorRegistry); responder.setFastTest(true);
private void addEntry(StringBuffer buffer, String key, String value) { buffer.append("|'''").append(key).append(": '''|").append("!-").append(value).append("-!").append("|\n"); }
public void testDisconnect() throws Exception { try (ZooKeeper zk = createClient(new CountdownWatcher(), hostPort)) { zk.addWatch("/a/b", persistentWatcher, PERSISTENT_RECURSIVE);
@Test public void scansWordsAsText() { ParserTest.assertScans("hi mom", "TextToken=hi mom"); }
public static String convertToDebianVersion( String version, boolean apply, String envName, Date timestamp ) { Matcher matcher = SNAPSHOT_PATTERN.matcher(version); if (matcher.matches()) { version = matcher.group(1) + "~"; if (apply) { final String envValue = System.getenv(envName); final String snapshot = (envValue != null && envValue.length() > 0) ? envValue : new SimpleDateFormat("yyyyMMddHHmmss").format(timestamp); version += snapshot; } else { version += "SNAPSHOT"; } } else { matcher = BETA_PATTERN.matcher(version); if (matcher.matches()) { if (matcher.group(1) != null) { version = matcher.group(1) + "~" + matcher.group(4) + matcher.group(5); } else { version = matcher.group(3) + "~" + matcher.group(4) + matcher.group(5); } } }
public void testTotalTimingShouldAppearInSummary() throws Exception { formatter.announceNumberTestsToRun(1); WikiTestPage firstPage = new WikiTestPage(new WikiPageDummy("page1", "content")); formatter.testStarted(firstPage); formatter.testComplete(firstPage, new TestSummary(1, 2, 3, 4)); clock.elapse(900); formatter.close(); assertSubString("<strong>Assertions:</strong> 1 right, 2 wrong, 3 ignored, 4 exceptions (0.900 seconds)", pageBuffer.toString()); }
public void setup() { this.mockery = new VRaptorMockery(); this.request = mockery.mock(MutableRequest.class); this.router = new DefaultRouter(new NoRoutesConfiguration(), new ComponentRoutesCreator(), null, null); }
public void shouldRegisterConvertersForAllDefaultTypes() { final HashMap<Class, Class<? extends Converter>> EXPECTED_CONVERTERS = new HashMap<Class, Class<? extends Converter>>() { { put(int.class, PrimitiveIntConverter.class); put(long.class, PrimitiveLongConverter.class); put(short.class, PrimitiveShortConverter.class); put(byte.class, PrimitiveByteConverter.class); put(double.class, PrimitiveDoubleConverter.class); put(float.class, PrimitiveFloatConverter.class); put(boolean.class, PrimitiveBooleanConverter.class); put(Integer.class, IntegerConverter.class); put(Long.class, LongConverter.class); put(Short.class, ShortConverter.class); put(Byte.class, ByteConverter.class); put(Double.class, DoubleConverter.class); put(Float.class, FloatConverter.class); put(Boolean.class, BooleanConverter.class); put(Calendar.class, LocaleBasedCalendarConverter.class); put(Date.class, LocaleBasedDateConverter.class); put(Enum.class, EnumConverter.class); put(UploadedFile.class, UploadedFileConverter.class); } private static final long serialVersionUID = 8559316558416038474L; }; for (Class<? extends Converter> converterType : EXPECTED_CONVERTERS.values()) { Converter<?> expected = mock(converterType); when((Converter)container.instanceFor(converterType)).thenReturn(expected); } for (Entry<Class, Class<? extends Converter>> entry : EXPECTED_CONVERTERS.entrySet()) { Class<?> typeFor = entry.getKey();
protected XmlFormatter makeXmlFormatter(final FitNesseContext context, final WikiPage page) throws Exception { return new XmlFormatter(context, page) { protected void writeData(byte[] byteArray) throws Exception {
protected void doCommit(PageData data) { this.data = data; }
public WikiWidget makeWidget(ParentWidget parent, Matcher matcher) throws Exception { int group = getGroupMatched(matcher); Class widgetClass = widgetClasses[group - 1]; return constructWidget(widgetClass, parent, matcher.group()); }
public void testImportingFromSecurePageWithCredentials() throws Exception { makeSecurePage(testData.remoteRoot); MockRequest request = makeRequest(baseUrl); request.addInput("remoteUsername", "joe"); request.addInput("remotePassword", "blow"); Response response = getResponse(request); MockResponseSender sender = new MockResponseSender(); sender.doSending(response); String content = sender.sentData(); assertNotSubString("requires authentication", content); assertSubString("3 pages were imported.", content); }
private void print(String key, String value) { pw.print("zk_"); pw.print(key); pw.print("\t"); pw.println(value); }
private boolean sameNameAsId(String id, Method method) { return ("/" + method.getName()).equals(id); }
public void testAttributesAreTruelyCopiedInCopyConstructor() throws Exception { PageData data = root.getData(); data.setAttribute(WikiPage.LAST_MODIFYING_USER, "Joe"); PageData newData = new PageData(data); newData.setAttribute(WikiPage.LAST_MODIFYING_USER, "Jane"); assertEquals("Joe", data.getAttribute(WikiPage.LAST_MODIFYING_USER)); }
public boolean isStopTestException() { return exceptionValue.contains(EXCEPTION_STOP_TEST_TAG); }
public void clearSign(String input, OutputStream output) throws IOException, PGPException { clearSign(new ByteArrayInputStream(input.getBytes(UTF_8)), output); }
public boolean isDead() { if (process !=null) return isDead(process);
public void initialize() { ByteBuffer bb=ByteBuffer.allocate(data.length + key.length() + OVERHEAD); setArguments(bb, type.name(), key, flags, exp, data.length); assert bb.remaining() >= data.length + 2 : "Not enough room in buffer, need another " + (2 + data.length - bb.remaining()); bb.put(data); bb.put(CRLF); bb.flip(); setBuffer(bb); }
public void setup() { this.mockery = new Mockery(); this.request = mockery.mock(HttpServletRequest.class); final Hashtable t = new Hashtable(); t.put("name", "guilherme"); t.put("age", "27"); mockery.checking(new Expectations() { { allowing(request).getParameterNames(); will(returnValue(t.keys())); allowing(request).getParameterMap(); will(returnValue(t)); allowing(request).getParameter("name"); will(returnValue("guilherme")); allowing(request).getParameter("minimum"); will(returnValue(null)); } }); this.vraptor = new VRaptorRequest(request); }
public void testAsyncGetChildren2Empty() { new Children2CB(zk).verifyGetChildrenEmpty(); }
public boolean matches(String id, String aclExpr) { String[] parts = aclExpr.split("/", 2); byte[] aclAddr = addr2Bytes(parts[0]); if (aclAddr == null) { return false; } int bits = aclAddr.length * 8; if (parts.length == 2) { try { bits = Integer.parseInt(parts[1]); if (bits < 0 || bits > aclAddr.length * 8) { return false; } } catch (NumberFormatException e) { return false; } } mask(aclAddr, bits); byte[] remoteAddr = addr2Bytes(id); if (remoteAddr == null) { return false; } mask(remoteAddr, bits); for (int i = 0; i < remoteAddr.length; i++) { if (remoteAddr[i] != aclAddr[i]) { return false; } } return true; }
private void assertNativeHash(String key) { assertHash(HashAlgorithm.NATIVE_HASH, key, Math.abs(key.hashCode())); }
public void testPopulatedLeaderConversation(PopulatedLeaderConversation conversation, int ops) throws Exception { Socket pair[] = getSocketPair(); Socket leaderSocket = pair[0]; Socket followerSocket = pair[1]; File tmpDir = File.createTempFile("test", "dir", testData); tmpDir.delete(); tmpDir.mkdir(); LeadThread leadThread = null; Leader leader = null; try {
protected void serialize( DataTree dt, Map<Long, Integer> sessions, OutputArchive oa, FileHeader header) throws IOException {
public boolean equals(Object obj) { if (obj instanceof CartesianVector) { CartesianVector v = (CartesianVector) obj; if (v.x == x && v.y == y) return true; } return false; }
public PwDatabaseV3 openDatabase( InputStream inStream, String password, String keyfile ) throws IOException, InvalidKeyFileException, InvalidPasswordException, InvalidDBSignatureException, InvalidDBVersionException { return openDatabase(inStream, password, keyfile, new UpdateStatus()); }
private void buildPacket() throws UnsupportedEncodingException { packet = new JSONObject(); String html = page.getHtml(); TableScanner scanner = new HtmlTableScanner(html); addTablesToPacket(scanner); if (jsonpFunction != null) response.setContent(String.format("%s(%s)", jsonpFunction, packet.toString(1)));
private void addToClasspath(String groupId, String artifactId, String version, Set<String> classpath) throws Exception { addToClasspath(groupId, artifactId, version, classpath, true); }
Locale getLocale(); Locale getFallbackLocale(); String getMessage(String key, String... parameters); }
public void close() { for (TestSystemListener listener : listeners()) if (listener instanceof Closeable)
public void readsViewsPropertiesIfFound() throws IOException, ConfigException { final File file = create("key = value"); mockery.checking(new Expectations() { { one(context).getRealPath("/WEB-INF/classes/views.properties"); will(returnValue(file.getAbsolutePath())); one(context).getRealPath("/WEB-INF/classes/vraptor.xml"); will(returnValue(new File("unknown").getAbsolutePath())); } }); VRaptor2Config config = new VRaptor2Config(context); assertThat(config.getForwardFor("key"), is(equalTo("value"))); mockery.assertIsSatisfied(); }
public void testGetInetAddress() { serverSideSocket.getInetAddress(); assertFalse(serverSideSocket.isModeKnown()); }
public void handleException(ExceptionResult exceptionResult) { table.updateContent(col, row, exceptionResult); }
public void args(String[] argv) { if (argv.length != 0) { System.err.println("usage: java fitnesse.FitFilter"); System.exit(-1); } try { input = read();
public void testIgnore() throws FitParseException { fixture.ignore(cell); assertEquals("i",code()); }
public void execute() throws Exception { setRequest(new MockRequest()); details(); if (username != null) request.setCredentials(username, password); request.parseRequestUri("/" + uri); WikiPagePath path = PathParser.parse(request.getResource());
void addOp(Operation op);  void insertOp(Operation o);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  boolean isAuthenticated();  long lastReadDelta();  void completedRead();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat) { if (rc == 0) { String string = new String(data); String lastString = null; byte[] v = lastValue.get(path); if (v != null) { lastString = new String(v); } if (lastString != null && Integer.parseInt(string) < Integer.parseInt(lastString)) { ZooLog.logError("ERROR: Got " + string + " expected >= " + lastString); errorCount++; } lastValue.put(path, (byte[]) ctx); } decOutstanding(); }
public void start() throws Exception { slimRunner.start(); slimClient = new SlimClient("localhost", slimSocket); waitForConnection(); started = true; }
public void testStringUtilsSplit() throws Exception { assertEquals(1, StringUtils.split("hello", "|").length); assertEquals(1, StringUtils.split("hello|", "|").length); assertEquals(2, StringUtils.split("hel|lo", "|").length); assertEquals(2, StringUtils.split("hel||lo", "|").length); }
protected void removeVersion(final String versionName) { this.versionsController.removeVersion(this, versionName); }
protected String createPageContent() throws Exception { String textAreaContent = (String)request.getInput("text"); String fixtureName = (String)request.getInput("fixture"); String template = createFixtureTableTemplate(fixtureName); if(!template.equals("")) template = "\n" + template; return textAreaContent + template; }
<T extends View> T use(Class<T> view);  Result on(Class<? extends Exception> exception);  boolean used();  Map<String, Object> included();  void forwardTo(String uri);  void redirectTo(String uri);  <T> T forwardTo(Class<T> controller);  <T> T redirectTo(Class<T> controller);  <T> T of(Class<T> controller);  <T> T redirectTo(T controller);  <T> T forwardTo(T controller);  <T> T of(T controller);  void nothing();  void notFound();  void permanentlyRedirectTo(String uri);  <T> T permanentlyRedirectTo(Class<T> controller);  <T> T permanentlyRedirectTo(T controller); }
protected NullHandler nullHandler() { return new GenericNullHandler(removal); }
public Table tableAt(int i, int j, int k) { Parse at = parse.at(i,j,k).parts; return new Table(at); }
public void shouldThrowExceptionIfYouHaventSpecifiedWhereToGoOnValidationError() throws SecurityException, NoSuchMethodException, InterceptionException, IOException { Method didntSpecifyWhereToGo = AnyController.class.getMethod("didntSpecifyWhereToGo"); final ResourceMethod method = DefaultResourceMethod.instanceFor(AnyController.class, didntSpecifyWhereToGo); final AnyController controller = new AnyController(validator); when(info.getParameters()).thenReturn(new Object[0]); when(validator.hasErrors()).thenReturn(true); try { interceptor.intercept(stack, method, controller);
public <T> Serializer from(T object) { return from(object, null); }
private void assertHash(HashAlgorithm ha, String key, long exp) { assertTrue(exp >= 0L); assertEquals("Invalid " + ha + " for key " + key, exp, ha.hash(key));
public void check(Parse cell, double value) { if (parseDouble(cell) == value) { right(cell);
public void shouldBeAbleToConvertNull() { assertThat(converter.convert(null, Calendar.class, bundle), is(nullValue())); mockery.assertIsSatisfied(); }
@Test public void translatesBold() { ParserTestHelper.assertTranslatesTo("'''bold text'''", "<b>bold text</b>"); }
String getTestRunner(); String getCommandPattern(); Map<String, String> createClasspathEnvironment(String classPath); String getClassPath();
protected Responder responderInstance() { return new MovePageResponder(); }
public void variablesAreReplacedInMatch() throws Exception { makeQueryTableAndBuildInstructions(queryTableHeader + "|2|$V|\n"); qt.setSymbol("V", "4"); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("queryTable_id_0", "OK"), list("queryTable_id_1", list( list(list("n", "2"), list("2n", "4")) ) ) ) ); testContext.evaluateExpectations(pseudoResults); qt.evaluateReturnValues(pseudoResults); assertEquals( "[" +
public static void writeShort(int val, byte[] buf, int offset) { buf[offset + 0] = (byte)(val & 0xFF); buf[offset + 1] = (byte)((val >>> 8) & 0xFF); }
public void serve(Socket s) throws IOException { SocketFactory.printSocketInfo(s); SlimStreamReader reader = null; OutputStream writer = null; try { reader = SlimStreamReader.getReader(s);
public void shouldOutjectGetAndIsBasedMethod() throws SecurityException, NoSuchMethodException, InterceptionException, IOException { final Dog dog = new Dog(); dog.name = "james"; dog.male = true; final ResourceMethod method = mockery.methodForResource(Dog.class); mockery.checking(new Expectations() { { one(request).setAttribute("name", "james"); one(request).setAttribute("male", true); one(stack).next(method, dog); } }); interceptor.intercept(stack, method, dog); mockery.assertIsSatisfied(); }
synchronized public boolean touchSession(long sessionId, int timeout) { if (LOG.isTraceEnabled()) { ZooTrace.logTraceMessage(LOG, ZooTrace.CLIENT_PING_TRACE_MASK, "SessionTrackerImpl --- Touch session: 0x" + Long.toHexString(sessionId) + " with timeout " + timeout); } Session s = sessionsById.get(sessionId); if (s == null) { return false; } long expireTime = roundToInterval(System.currentTimeMillis() + timeout); if (s.tickTime >= expireTime) {
public void testDeletePage() throws Exception { WikiPage level1 = this.crawler.addPage(this.root, this.level1Path); this.crawler.addPage(level1, this.level2Path); assertTrue(this.crawler.pageExists(this.root, this.level1Path)); MockRequest request = new MockRequest(); request.setResource(this.level1Name); request.addInput("confirmed", "yes"); SimpleResponse response = (SimpleResponse) this.responder.makeResponse(new FitNesseContext(this.root), request); String page = response.getContent(); assertNotSubString("Are you sure you want to delete", page); assertEquals(303, response.getStatus()); assertEquals("root", response.getHeader("Location")); assertFalse(this.crawler.pageExists(this.root, PathParser.parse(this.level1Name))); List<?> children = this.root.getChildren(); assertEquals(0, children.size()); }
public void passOneDate() throws Exception { caller.call("testSlim", "oneDate", "5-May-2009"); assertEquals((Date) new DateConverter().fromString("5-May-2009"), testSlim.getDateArg()); }
public long getPacketsReceived();  public long getPacketsSent();  public long getFsyncThresholdExceedCount();  public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max); public boolean getResponseCachingEnabled(); public void setResponseCachingEnabled(boolean isEnabled);  public int getConnectionMaxTokens(); public void setConnectionMaxTokens(int val); public int getConnectionTokenFillTime(); public void setConnectionTokenFillTime(int val); public int getConnectionTokenFillCount(); public void setConnectionTokenFillCount(int val); public int getConnectionFreezeTime(); public void setConnectionFreezeTime(int val); public double getConnectionDropIncrease(); public void setConnectionDropIncrease(double val); public double getConnectionDropDecrease(); public void setConnectionDropDecrease(double val); public double getConnectionDecreaseRatio(); public void setConnectionDecreaseRatio(double val);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); public long getFlushDelay(); public void setFlushDelay(long delay); public long getMaxWriteQueuePollTime(); public void setMaxWriteQueuePollTime(long delay); public int getMaxBatchSize(); public void setMaxBatchSize(int size); }
PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage(); String getVariable(String name); List<String> getXrefPages(); }
private void loadPrefs() { loadList(databases, DB_KEY); loadList(keyfiles, KEYFILE_KEY); }
public HtmlBuilder body(final int index, final String prefix) { builders.add(new TagBuilder() { public void build(Translator translator, Symbol symbol, HtmlTag tag) { tag.add(prefix + TranslateChildAt(translator, symbol, index)); } }); return this; }
public void shouldAddLibrary() { Library library = new Library("library", new Object()); SlimExecutionContext context = new SlimExecutionContext(new DefaultInteraction()); context.addLibrary(library); assertEquals(1, context.getLibraries().size()); assertEquals(library, context.getLibraries().get(0)); }
public void exception(NHttpClientConnection conn, HttpException ex) { this.handler.exception(conn, ex); }
String getHtml(); String getVariable(String name); ParsedPage getParsedPage(); List<String> getClasspaths(); List<String> getXrefPages(); String getContent(); String getAttribute(String attribute); boolean hasAttribute(String attribute); WikiPageProperties getProperties(); WikiPage getWikiPage(); }
private void register(final Class<?> type, ConfigurableListableBeanFactory beanFactory) { registerOn((BeanDefinitionRegistry) beanFactory, type, true); if (ComponentFactory.class.isAssignableFrom(type)) { beanFactory.registerSingleton(type.getName(), new ComponentFactoryBean(container, type));
public void allTestingComplete() throws Exception { ByteArrayOutputStream os = new ByteArrayOutputStream(); XmlWriter writer = new XmlWriter(os); writer.write(testResultsDocument); writer.close(); writeData(os.toByteArray()); close(); }
public void translatesAliases() throws Exception { WikiPage page = new TestRoot().makePage("PageOne"); ParserTest.assertTranslatesTo(page, "[[tag][link]]", link("tag", "link")); ParserTest.assertTranslatesTo(page, "[[tag][PageOne]]", link("tag", "PageOne")); ParserTest.assertTranslatesTo(page, "[[''tag''][PageOne]]", link("<i>tag</i>", "PageOne")); ParserTest.assertTranslatesTo(page, "[[you're it][PageOne]]", link("you're it", "PageOne")); ParserTest.assertTranslatesTo(page, "[[PageOne][IgnoredPage]]", link("PageOne", "PageOne")); ParserTest.assertTranslatesTo(page, "[[tag][PageOne?edit]]", link("tag", "PageOne?edit")); ParserTest.assertTranslatesTo(page, "[[tag][http://files/myfile]]", link("tag", "/files/myfile")); }
public void checkDefaultIsCached() { DefaultInteraction d = new DefaultInteraction(); assertTrue(CachedInteraction.class.isAssignableFrom(d.getClass())); }
DeleteOperation delete(String key, int when, OperationCallback operationCallback);  FlushOperation flush(int delay, OperationCallback operationCallback);  GetOperation get(String key, GetOperation.Callback callback);  GetOperation get(Collection<String> value, GetOperation.Callback cb);  MutatatorOperation mutate(Mutator m, String key, int by, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb); }
private WikiPage makeTestPage(String pageText) { WikiPage root = InMemoryPage.makeRoot("RooT"); return WikiPageUtil.addPage(root, PathParser.parse("TestPage"), pageText); }
public String toString() { StringBuilder s = new StringBuilder(); for (ViewRow r : rows) { s.append(r.getId() + " : " + r.getKey() + " : " + r.getValue() + "\n"); } return s.toString(); }
public List<String> getChildren( String path, boolean watch, Stat stat) throws KeeperException, InterruptedException { return getChildren(path, getDefaultWatcher(watch), stat); }
public void starPath() { } } class InheritanceExample extends MyResource { } @Test public void canTranslateADefaultResource() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); String url = builder.urlFor(MyResource.class, mockery.methodFor(MyResource.class, "notAnnotated").getMethod(), new Object[] {}); assertThat(url, is(equalTo("/MyResource/notAnnotated"))); mockery.assertIsSatisfied(); } @Test public void canTranslateAnnotatedMethod() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); String url = builder.urlFor(MyResource.class, mockery.methodFor(MyResource.class, "customizedPath").getMethod(), new Object[] {}); assertThat(url, is(equalTo("/myPath"))); mockery.assertIsSatisfied(); } @Test public void canTranslateAInheritedResourceMethod() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); String url = builder.urlFor(InheritanceExample.class, mockery.methodFor(MyResource.class, "notAnnotated").getMethod(), new Object[] {}); assertThat(url, is(equalTo("/InheritanceExample/notAnnotated"))); mockery.assertIsSatisfied(); } @Test public void canTranslateAMethodUsingAsteriskAsAPatternMatcher() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); String url = builder.urlFor(MyResource.class, mockery.methodFor(MyResource.class, "starPath").getMethod(), new Object[] {}); assertThat(url, is(equalTo("//customPath"))); mockery.assertIsSatisfied(); } @Test public void usesAsteriskBothWays() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); Method method = mockery.methodFor(MyResource.class, "starPath").getMethod(); String url = builder.urlFor(MyResource.class, method, new Object[] {}); ResourceAndMethodLookup lookup = builder.lookupFor(mockery.resource(MyResource.class)); assertThat(lookup.methodFor(url, "POST").getMethod(), is(equalTo(method))); mockery.assertIsSatisfied(); } @Test public void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); Method method = mockery.methodFor(MyResource.class, "notAnnotated").getMethod(); String url = builder.urlFor(InheritanceExample.class, method, new Object[] {}); ResourceAndMethodLookup lookup = builder.lookupFor(mockery.resource(InheritanceExample.class)); assertThat(lookup.methodFor(url, "POST").getMethod(), is(equalTo(method))); mockery.assertIsSatisfied(); } @Test public void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); Method method = mockery.methodFor(MyResource.class, "customizedPath").getMethod(); String url = builder.urlFor(MyResource.class, method, new Object[] {}); ResourceAndMethodLookup lookup = builder.lookupFor(mockery.resource(MyResource.class)); assertThat(lookup.methodFor(url, "POST").getMethod(), is(equalTo(method))); mockery.assertIsSatisfied(); } }
private void assertPublishes(String pageContent, String pageName, String prefix, WikiPage page) { Publisher publisher = new Publisher(TEMPLATE, "out", root.getPageCrawler(), this::writer); publisher.traverse(page); Assert.assertEquals("out/" + pageName + ".html", paths); Assert.assertTrue(content, content.contains("b*" + pageContent + "*b")); Assert.assertTrue(content, content.contains("<link href=\"" + prefix + "files/path\">")); Assert.assertTrue(content, content.contains("<script src=\"" + prefix + "files/path\">")); }
public boolean isBackwardSearchPath() { return mode == BACKWARD_SEARCH; }
public void testJsonResponse() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("PageOne")); PageData data = page.getData(); data.setContent("some content"); WikiPageProperties properties = data.getProperties(); properties.set("Test", "true"); page.commit(data); MockRequest request = new MockRequest(); request.setResource("PageOne"); request.addInput("format", "json"); Responder responder = new PropertiesResponder(); SimpleResponse response = (SimpleResponse) responder.makeResponse(new FitNesseContext(root), request); assertEquals("text/json", response.getContentType()); String jsonText = response.getContent(); JSONObject jsonObject = new JSONObject(jsonText); assertTrue(jsonObject.getBoolean("Test")); assertTrue(jsonObject.getBoolean("Search")); assertTrue(jsonObject.getBoolean("Edit")); assertTrue(jsonObject.getBoolean("Properties")); assertTrue(jsonObject.getBoolean("Versions")); assertTrue(jsonObject.getBoolean("Refactor")); assertTrue(jsonObject.getBoolean("WhereUsed")); assertTrue(jsonObject.getBoolean("RecentChanges")); assertFalse(jsonObject.getBoolean("Suite")); assertFalse(jsonObject.getBoolean("Prune")); assertFalse(jsonObject.getBoolean(WikiPage.SECURE_READ)); assertFalse(jsonObject.getBoolean(WikiPage.SECURE_WRITE)); assertFalse(jsonObject.getBoolean(WikiPage.SECURE_TEST)); }
public boolean isRunning() { return FitnesseFixtureContext.fitnesse.isRunning(); }
public boolean equals(AtomicLongWithEquals that) { return get() == that.get(); }
public void shouldInvokeInterceptorsMethodIfAbleToInstantiateIt() throws InterceptionException, IOException { final Object instance = new Object(); when(container.instanceFor(Interceptor.class)).thenReturn(interceptor); when(interceptor.accepts(method)).thenReturn(true); ToInstantiateInterceptorHandler handler = new ToInstantiateInterceptorHandler(container, Interceptor.class); handler.execute(stack, method, instance); verify(interceptor).intercept(stack, method, instance); }
public void simpleTextFormatForPassingTest() throws Exception { request.addInput("format", "text"); doSimpleRun(passFixtureTable()); assertEquals("text/text", response.getContentType()); assertTrue(results.contains("\n. ")); assertTrue(results.contains("R:1 W:0 I:0 E:0 TestPage\t(TestPage)")); assertTrue(results.contains("1 Tests,\t0 Failures")); }
boolean asn1Equals( DERObject o) { if (!(o instanceof DERT61String)) { return false; } return this.getString().equals(((DERT61String)o).getString()); }
public Object getObject() throws Exception { return request.getSession(); }
public WebAppBootstrap create(BasicConfiguration config) { try {
public void shouldEscapeBackslashesInMakeAppendElementScript() { String appendText = "<p>My string has escaped \\r \\n</p>"; HtmlTag scriptTag = HtmlUtil.makeAppendElementScript("element\\r\\n\\", appendText); assertSubString("element\\\\r\\\\n\\\\", scriptTag.html()); assertSubString("My string has escaped \\\\r \\\\n", scriptTag.html()); }
public static void clearFixtureSupplierRegistration() { FIXTURE_SUPPLIER = new DefaultFixtureSupplier(); }
public void testUnicodeCharacters() throws Exception { response.add("\uba80\uba81\uba82\uba83"); response.close(); assertSubString("\uba80\uba81\uba82\uba83", buffer.toString()); }
public String render() throws Exception { HtmlTag hr = new HtmlTag("hr"); if (extraDashes > 0) hr.addAttribute("size", hrSize(extraDashes)); return hr.html(); }
private LeaderElectionSupport createLeaderElectionSupport() { LeaderElectionSupport electionSupport = new LeaderElectionSupport(); electionSupport.setZooKeeper(zooKeeper); electionSupport.setRootNodeName(testRootNode + Thread.currentThread().getId()); electionSupport.setHostName("foohost"); return electionSupport; }
public void verify(String type) throws Exception { if (expectedStatus != ClientResponse.Status.NOT_FOUND) { zpath = zk.create(zpath, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL); } ClientResponse cr = r.path(zpath).accept(type).type(type) .delete(ClientResponse.class); assertEquals(expectedStatus, cr.getClientResponseStatus());
public String toHtml(Translator translator, Symbol symbol) { String increment = symbol.getProperty(TodayRule.Increment); int incrementDays = increment.startsWith("+") ? Integer.parseInt(increment.substring(1)) : increment.startsWith("-") ? - Integer.parseInt(increment.substring(1)) : 0; GregorianCalendar calendar = new GregorianCalendar(); calendar.setTime(SystemClock.now()); calendar.add(Calendar.DAY_OF_MONTH, incrementDays); return new SimpleDateFormat( makeFormat(symbol.getProperty(TodayRule.Format)))
@Test public void scansTables() { ParserTestHelper.assertScansTokenType("|a|\n", "Table", true); ParserTestHelper.assertScansTokenType("!|a|\n", "Table", true); ParserTestHelper.assertScansTokenType("-|a|\n", "Table", true); ParserTestHelper.assertScansTokenType("-!|a|\n", "Table", true); }
public void setUp() throws Exception { super.setUp(); zk = createClient(); zkMain = new ZooKeeperMain(zk); }
private void verifyDefaultLinks(String html, String pageName) { assertSubString("<a href=\"" + pageName + "?edit\" accesskey=\"e\">Edit</a>", html); assertSubString("<a href=\"" + pageName + "?versions\" accesskey=\"v\">Versions</a>", html); assertSubString("<a href=\"" + pageName + "?properties\" accesskey=\"p\">Properties</a>", html); assertSubString("<a href=\"" + pageName + "?refactor\" accesskey=\"r\">Refactor</a>", html); assertSubString("<a href=\"" + pageName + "?whereUsed\" accesskey=\"w\">Where Used</a>", html); assertSubString("<a href=\"/files\" accesskey=\"f\">Files</a>", html); assertSubString("<a href=\"?searchForm\" accesskey=\"s\">Search</a>", html); assertSubString("<a href=\"/RecentChanges\" accesskey=\"\">RecentChanges</a>", html); }
public void runFromConfig(QuorumPeerConfig config) throws IOException, AdminServerException { try { ManagedUtil.registerLog4jMBeans(); } catch (JMException e) { LOG.warn("Unable to register log4j JMX control", e); } LOG.info("Starting quorum peer"); try { ServerCnxnFactory cnxnFactory = ServerCnxnFactory.createFactory();
private List<Instruction> invokeRow(int row) throws SyntaxError { List<Instruction> instructions = new ArrayList<Instruction>(); checkRow(row); instructions.add(callUnreportedFunction("reset")); instructions.addAll(setVariables(row)); instructions.add(callUnreportedFunction("execute")); instructions.addAll(callFunctions(row)); return instructions; }
protected String ignore(String value) { return String.format("!style_ignore(%s)", value); }
public void tearDown() throws Exception { } public void testRegexp() throws Exception { assertTrue("match1", Pattern.matches(CommentWidget.REGEXP, "# Comment text\n")); assertTrue("match2", Pattern.matches(CommentWidget.REGEXP, "#\n")); assertTrue("match3", !Pattern.matches(CommentWidget.REGEXP, " #\n")); } public void testHtml() throws Exception { CommentWidget widget = new CommentWidget(root, "# some text\n"); assertEquals("", widget.render()); } public void testAsWikiText() throws Exception { CommentWidget widget = new CommentWidget(root, "# some text\n"); assertEquals("# some text\n", widget.asWikiText()); } }
public void exceptionOccurred(Throwable e) { slimException = e; }
public void success(Function0<String> message) { if (log.isInfoEnabled()) { log.info("Success: " + message.apply());
void exceptionOccurred(Throwable e); void testAssertionVerified(Assertion assertion, TestResult testResult); void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); }
public String toString() { return String.format("status = %s, contentType = %s, content = %s", getStatus(), getContentType(), getContent());
private void minMaxDate(PageTestSummary summary) { Date date = summary.getDate(); if (startingDate == null) startingDate = endingDate = date;
public void testAttributeValues() throws Exception { request.addInput("Edit", "On"); request.addInput("Test", "On"); request.addInput("Search", "On"); Responder responder = new MergeResponder(request); SimpleResponse response = (SimpleResponse)responder.makeResponse(new FitNesseContext(source), new MockRequest()); assertHasRegexp("type=\"hidden\"", response.getContent()); assertHasRegexp("name=\"Edit\"", response.getContent()); assertHasRegexp("name=\"Test\"", response.getContent()); assertHasRegexp("name=\"Search\"", response.getContent()); }
public Object convert(String value, Class type, List<ValidationMessage> errors, ResourceBundle bundle) { if(value==null || value=="") { return (short) 0; } try { return Short.parseShort(value);
ResourceMethod matches(String uri, HttpMethod method, MutableRequest request);  boolean canHandle(String uri); EnumSet<HttpMethod> allowedMethods();  String urlFor(Class<?> type, Method m, Object params);  boolean canHandle(Class<?> type, Method method);  int getPriority(); }
public void testReadWriteAsyncSingleClient() throws IOException{ try {
public void testShouldBeAbleToFindEncapsulatedFixtureName() throws Exception { String fitPage = "<table>" + geDecoratorHTMLRow() + "<tr><td>eg.Division</td></tr></table>"; Dispatcher dispatcher = new Dispatcher(); dispatcher.doTables(new Parse(fitPage)); String encapsulatedFixtureName = (String) dispatcher.summary.get(FixtureDecorator.ENCAPSULATED_FIXTURE_NAME); assertEquals("eg.Division", encapsulatedFixtureName); }
public <T> OperationFuture<Boolean> touch(final String key, final int exp, final Transcoder<T> tc) { final CountDownLatch latch = new CountDownLatch(1); final OperationFuture<Boolean> rv = new OperationFuture<Boolean>(key, latch, operationTimeout, executorService); Operation op = opFact.touch(key, exp, new OperationCallback() { @Override public void receivedStatus(OperationStatus status) { rv.set(status.isSuccess(), status); } @Override public void complete() { latch.countDown(); } }); rv.setOperation(op); mconn.enqueueOperation(key, op); return rv; }
public Foo convert(String value, Class<? extends Foo> type, ResourceBundle bundle) { return new Foo(); }
public static Test suite() { return TestSuiteMaker.makeSuite("components", new Class[]{ SaveRecorderTest.class,
public static void main(String[] args) throws NumberFormatException, IOException { if (args.length != 3) { System.err .println("USAGE: SledgeHammer zookeeper_server reps reads_per_rep"); System.exit(3); } SledgeHammer h = new SledgeHammer(args[0], Integer.parseInt(args[1]), Integer.parseInt(args[2])); h.start(); System.exit(0); }
public void testExecutionStatusErrorHasPriority() throws Exception { responder.setFastTest(false); doSimpleRun(errorWritingTable("blah") + crashFixtureTable()); assertEquals("Errors Occurred", getExecutionStatusMessage()); }
public void testLoadPrivateKeyFromKeyStore() throws IOException, GeneralSecurityException { Optional<String> optPassword = x509TestContext.getKeyStorePassword().length() > 0 ? Optional.of(x509TestContext.getKeyStorePassword()) : Optional.empty(); PrivateKey privateKey = PemReader.loadPrivateKey( x509TestContext.getKeyStoreFile(KeyStoreFileType.PEM), optPassword); Assert.assertEquals(x509TestContext.getKeyStoreKeyPair().getPrivate(), privateKey); }
public void testBadOperation() throws Exception { client.addOp(0, new Operation(new OperationCallback(){ public void complete() {
public String next() {
private void sendPackets() throws InterruptedException { long traceMask = ZooTrace.SERVER_PACKET_TRACE_MASK; while (true) { QuorumPacket p;
public void PageDataIsFileContents() throws Exception { assertEquals("!-stuff-!", makePage("somewhere", "myfile.html", "stuff").getData().getContent()); }
public void testStandardError() throws Exception { client = new CommandRunningFitClient(new CommandRunningFitClient.OutOfProcessCommandRunner("java blah", null)); client.addFitClientListener(this); client.start(); Thread.sleep(100); client.join(); assertTrue(exceptionOccurred); assertSubString("Error", client.getExecutionLog().getCapturedError()); }
protected void removeVersion(String versionName) throws Exception { revisioner.removeVersion(this, versionName); }
private Collection<PluginFeatureFactory> findPluginFeatureFactories() throws PluginException { List<PluginFeatureFactory> factories = new ArrayList(); factories.add(new PropertyBasedPluginFeatureFactory(componentFactory)); factories.addAll(loadLegacyPlugins()); for (PluginFeatureFactory factory : ServiceLoader.load(PluginFeatureFactory.class)) { factories.add(factory); } return factories; }
public boolean isContainedIn(PwGroup container) { PwGroup cur = this; while (cur != null) { if (cur == container) { return true; } cur = cur.getParent(); } return false; }
public void testNotFound() throws Exception { String output = getSocketOutput("GET /WikiWord HTTP/1.1\r\n\r\n", new MockWikiPage()); assertSubString("404 Not Found", output); }
public void setup() { this.mockery = new Mockery(); this.registry = mockery.mock(Router.class); this.translator = new DefaultResourceTranslator(registry); this.request = mockery.mock(HttpServletRequest.class); this.webRequest = new VRaptorRequest(request); }
public static void logEnv(String msg, Logger log) { List<Entry> env = Environment.list(); for (Entry e : env) { log.info(msg + e.toString());
public String getViewPattern(); public String getForwardFor(String key); public List<String> getConverters(); }
public String render() throws Exception {
public void testMulti() throws KeeperException, InterruptedException { Op createTtl = Op.create("/a", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_WITH_TTL, 100); Op createTtlSequential = Op.create("/b", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL_WITH_TTL, 200); Op createNonTtl = Op.create("/c", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); List<OpResult> results = zk.multi(Arrays.asList(createTtl, createTtlSequential, createNonTtl)); String sequentialPath = ((OpResult.CreateResult)results.get(1)).getPath(); final AtomicLong fakeElapsed = new AtomicLong(0); ContainerManager containerManager = newContainerManager(fakeElapsed); containerManager.checkContainers(); Assert.assertNotNull("node should not have been deleted yet", zk.exists("/a", false)); Assert.assertNotNull("node should not have been deleted yet", zk.exists(sequentialPath, false)); Assert.assertNotNull("node should never be deleted", zk.exists("/c", false)); fakeElapsed.set(110); containerManager.checkContainers(); Assert.assertNull("node should have been deleted", zk.exists("/a", false)); Assert.assertNotNull("node should not have been deleted yet", zk.exists(sequentialPath, false)); Assert.assertNotNull("node should never be deleted", zk.exists("/c", false)); fakeElapsed.set(210); containerManager.checkContainers(); Assert.assertNull("node should have been deleted", zk.exists("/a", false)); Assert.assertNull("node should have been deleted", zk.exists(sequentialPath, false)); Assert.assertNotNull("node should never be deleted", zk.exists("/c", false)); }
private void createDirectory( String directory, String user, int uid, String group, int gid, int mode, long size ) throws IOException {
public CachedData encode(String o) { return new CachedData(flags, o.getBytes(), getMaxSize()); }
public final InstructionResult execute(InstructionExecutor executor) { InstructionResult result; try { result = executeInternal(executor); } catch (SlimException e) { result = new InstructionResult.Error(getId(), e); } return result; }
OperationException getException();  OperationCallback getCallback();  void cancel();  OperationState getState();  ByteBuffer getBuffer();  void writeComplete();  OperationReadType getReadType();  void initialize();  void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data);  void handleLine(String line); }
public void shouldBeAbleToFindContentOverManyLines() throws Exception { finder = new SuiteSpecificationMatchFinder(null, "child.*life", this); finder.search(root); assertPagesFound("TestPageOne", "ChildPage"); }
public static void LoadData(Context ctx, String filename, String password, String keyfile) throws InvalidCipherTextException, IOException, InvalidKeyFileException, FileNotFoundException { FileInputStream fis; fis = new FileInputStream(filename); ImporterV3 Importer = new ImporterV3(); mPM = Importer.openDatabase(fis, password, keyfile); if ( mPM != null ) { mPM.constructTree(null); populateGlobals(null); } mFilename = filename; searchHelper = new SearchDbHelper(ctx); searchHelper.open(); buildSearchIndex(ctx); }
public void testDelayedFlush() throws Exception { assertNull(client.get("test1")); client.set("test1", 5, "test1value"); client.set("test2", 5, "test2value"); assertEquals("test1value", client.get("test1")); assertEquals("test2value", client.get("test2")); client.flush(2); Thread.sleep(2100); assertNull(client.get("test1")); assertNull(client.get("test2")); }
private Response makeResponse(Request request) throws SocketException { try { Thread parseThread = createParsingThread(request); parseThread.start(); waitForRequest(request); if (!hasError) response = createGoodResponse(request); } catch (SocketException se) { throw se; } catch (Exception e) { response = new ErrorResponder(e).makeResponse(context, request); } return response; }
private Response invokeResponder() throws Exception { Response response = responder.makeResponse(context, request); reloadPages(); return response; }
protected void startServer() throws Exception { LOG.info("STARTING server"); serverFactory = createNewServerInstance(tmpDir, serverFactory, hostPort, maxCnxns);
private void purgeHistory(Request request, FitNesseContext context) { File resultsDirectory = context.getTestHistoryDirectory(); int days = getDaysInput(request); deleteTestHistoryOlderThanDays(resultsDirectory, days); }
Object get(String key) throws OperationTimeoutException; <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public HttpResult addDateHeader(String name, long date) { response.addDateHeader(name, date); return this; }
public List<FileItem> parseRequest(HttpServletRequest request) throws FileUploadException { FileItem f0 = new MockFileItem("myfile0", "foo.txt", "foo".getBytes()); FileItem f1 = new MockFileItem("myfile1", "foo.txt", "bar".getBytes()); return Arrays.asList(f0, f1); }
public String toHtml(Translator translator, Symbol symbol) { HtmlTag result = new HtmlTag("span", "variable defined: " + translator.translate(symbol.childAt(0)) + "=" + translator.translate(symbol.childAt(1))); result.addAttribute("class", "meta"); return result.html(); }
public Maybe<String> render(Scanner scanner) { scanner.moveNext(); if (scanner.getCurrent().getType() != TokenType.Whitespace) return Maybe.noString; String titleText = new Translator().translate(scanner, TokenType.Newline); if (scanner.isEnd()) return Maybe.noString; long id = nextId++; HtmlTag outerBlock = new HtmlTag("div"); outerBlock.addAttribute("class", "collapse_rim"); HtmlTag floatRight = new HtmlTag("div"); floatRight.addAttribute("style", "float: right;"); floatRight.addAttribute("class", "meta"); HtmlTag expand = new HtmlTag("a", "Expand All"); expand.addAttribute("href", "javascript:expandAll();"); floatRight.add(expand); floatRight.add(" | "); HtmlTag collapse = new HtmlTag("a", "Collapse All"); collapse.addAttribute("href", "javascript:collapseAll();"); floatRight.add(collapse); outerBlock.add(floatRight); HtmlTag toggle = new HtmlTag("a"); toggle.addAttribute("href", "javascript:toggleCollapsable('" + Long.toString(id) + "');"); HtmlTag image = new HtmlTag("img"); image.addAttribute("src", "/files/images/collapsableOpen.gif"); image.addAttribute("class", "left"); image.addAttribute("id", "img" + Long.toString(id)); toggle.add(image); outerBlock.add(toggle); outerBlock.add("&nbsp;"); HtmlTag title = HtmlUtil.makeSpanTag("meta", titleText); outerBlock.add(title); String bodyText = new Translator().translate(scanner, TokenType.EndSection); if (scanner.isEnd()) return Maybe.noString; HtmlTag body = new HtmlTag("div", bodyText); body.addAttribute("class", getContent()); body.addAttribute("id", Long.toString(id)); outerBlock.add(body); return new Maybe<String>(outerBlock.html()); }
public void makeManyCallsInOrderToTestLongSequencesOfInstructions() throws Exception { addImportAndMake(); for (int i = 0; i < 1000; i++) addEchoInt(Integer.toString(i)); List<Object> result = slimClient.invokeAndGetResponse(statements); assertEquals(1000, result.size()); for (int i = 0; i < 1000; i++) assertEquals(i, Integer.parseInt((String) result.get(i)));
private boolean returnAssignableTo(Class type) { return type.isAssignableFrom(getReturnType()); }
protected Instruction callAndAssign(String symbolName, String functionName) { return callAndAssign(symbolName, getTableName(), functionName); }
public void testEnterChildPageWhenRemotePageNotModified() throws Exception { importer.enterChildPage(pageOne, Clock.currentDate()); importer.exitPage(); PageData data = pageOne.getData(); data.setContent("new content"); pageOne.commit(data); importer.enterChildPage(pageOne, new Date(0)); assertEquals("new content", pageOne.getData().getContent()); }
public synchronized static int unique() { LOG.info("assigning port " + nextPort); return nextPort++; }
public static String makePageFooterHtml(PageData pageData) { return WikiPageUtil.getFooterPageHtml(pageData.getWikiPage()); }
byte[] toByteArray() throws IOException { if (_remaining == 0) { return EMPTY_BYTES; } byte[] bytes = new byte[_remaining]; if ((_remaining -= Streams.readFully(_in, bytes)) != 0) { throw new EOFException("DEF length " + _originalLength + " object truncated by " + _remaining); } setParentEofDetect(true); return bytes; }
public void testHtml() throws Exception { LineBreakWidget widget = new LineBreakWidget(new MockWidgetRoot(), "\n"); assertEquals("<br/>", widget.render()); }
public static boolean waitForServerDown(String hp, long timeout, boolean secure) { long start = Time.currentElapsedTime(); while (true) { try { HostPort hpobj = parseHostPortList(hp).get(0); send4LetterWord(hpobj.host, hpobj.port, "stat", secure); } catch (IOException e) { return true; } catch (SSLContextException e) { return true; } if (Time.currentElapsedTime() > start + timeout) { break; } try { Thread.sleep(250); } catch (InterruptedException e) {
protected void initializeHandlers() { handlers = new HashMap<OperationType, Handler>(); ChannelTracker tracker = new ChannelTracker(client.getSubscriber()); handlers.put(OperationType.PUBLISH, new ProxyPublishHander(client.getPublisher())); handlers.put(OperationType.SUBSCRIBE, new ProxySubscribeHandler(client.getSubscriber(), tracker)); handlers.put(OperationType.UNSUBSCRIBE, new ProxyUnsubscribeHandler(client.getSubscriber(), tracker)); handlers.put(OperationType.CONSUME, new ProxyConsumeHandler(client.getSubscriber())); handlers.put(OperationType.STOP_DELIVERY, new ProxyStopDeliveryHandler(client.getSubscriber(), tracker)); handlers.put(OperationType.START_DELIVERY, new ProxyStartDeliveryHandler(client.getSubscriber(), tracker));
public void existsForWillReturnTrueIfDelegateAlsoReturnsTrue() throws Exception { mockery.checking(new Expectations(){{ atLeast(1).of(delegate).existsFor(CachedConvertersTest.class); will(returnValue(true)); }}); assertTrue(converters.existsFor(CachedConvertersTest.class)); }
public void dumpConf(PrintWriter pwriter) { pwriter.print("clientPort="); pwriter.println(getClientPort()); pwriter.print("secureClientPort="); pwriter.println(getSecureClientPort()); pwriter.print("dataDir="); pwriter.println(zkDb.snapLog.getSnapDir().getAbsolutePath()); pwriter.print("dataDirSize="); pwriter.println(getDataDirSize()); pwriter.print("dataLogDir="); pwriter.println(zkDb.snapLog.getDataDir().getAbsolutePath()); pwriter.print("dataLogSize="); pwriter.println(getLogDirSize()); pwriter.print("tickTime="); pwriter.println(getTickTime()); pwriter.print("maxClientCnxns="); pwriter.println(getMaxClientCnxnsPerHost()); pwriter.print("minSessionTimeout="); pwriter.println(getMinSessionTimeout()); pwriter.print("maxSessionTimeout="); pwriter.println(getMaxSessionTimeout()); pwriter.print("serverId="); pwriter.println(getServerId()); }
public Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) { T instance = relation(method.getName()).uses(type); new Mirror().on(instance).invoke().method(method).withArgs(args); return null; }
public void testMultipleLevelsOfIncludedPages() throws Exception { crawler.setDeadEndStrategy(new VirtualEnabledPageCrawler()); final String ROOT_PAGE_NAME = "RootPage"; WikiPage root = crawler.addPage(rootPage, PathParser.parse(ROOT_PAGE_NAME)); final String INCLUDED_PAGE_NAME = "IncludedPage"; WikiPage includedPage = crawler.addPage(rootPage, PathParser.parse(INCLUDED_PAGE_NAME)); final String SECOND_LEVEL_INCLUDED_PAGE_NAME = "SecondLevelIncludedPage"; WikiPage secondLevelIncludedPage = crawler.addPage(rootPage, PathParser.parse(SECOND_LEVEL_INCLUDED_PAGE_NAME)); WidgetRoot widgetRoot = new WidgetRoot(root); WidgetRoot includedRoot = new WidgetRoot(includedPage,widgetRoot); WidgetRoot secondLevelRoot = new WidgetRoot(secondLevelIncludedPage,includedRoot); PageData data = secondLevelIncludedPage.getData(); assertEquals(SECOND_LEVEL_INCLUDED_PAGE_NAME,data.getVariable("PAGE_NAME")); assertEquals(SECOND_LEVEL_INCLUDED_PAGE_NAME, secondLevelRoot.getVariable("PAGE_NAME")); assertEquals(ROOT_PAGE_NAME,secondLevelRoot.getVariable("RUNNING_PAGE_NAME")); }
public void visitAttribute(final Attribute attr) {
public void shouldCallMethodOnFieldNamed_systemUnderTest_WhenFixtureDoesNotHaveMethod() throws Exception { FixtureWithNamedSystemUnderTestBase myFixture = createNamedFixture(); executeStatementAndVerifyResultIsVoid(); assertFalse(myFixture.echoCalled()); assertTrue(myFixture.getSystemUnderTest().speakCalled()); }
long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by, long def, int exp); Future<Long> asyncIncr(String key, int by, long def, int exp); Future<Long> asyncDecr(String key, long by, long def, int exp); Future<Long> asyncDecr(String key, int by, long def, int exp); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Long> asyncIncr(String key, long by, long def); Future<Long> asyncIncr(String key, int by, long def); Future<Long> asyncDecr(String key, long by, long def); Future<Long> asyncDecr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); CountDownLatch broadcastOp(final BroadcastOpFactory of); CountDownLatch broadcastOp(final BroadcastOpFactory of, Collection<MemcachedNode> nodes);  Set<String> listSaslMechanisms(); }
public void testIncrementColumnValueShouldIncrementallyAddTheGivenDeltaMultipleTimes() throws Exception { table.incrementColumnValues(3, "denominator", new Delta("int", "1")); String expectedFitPage = "<table><tr><td>eg.Division</td></tr>" + "<tr><td>numerator</td><td>denominator</td><td>quotient()</td></tr>" + "<tr><td>10</td><td>2</td><td>5</td></tr><tr><td>10</td><td>3</td><td>5</td></tr>" + "<tr><td>10</td><td>4</td><td>5</td></tr></table>"; assertTable(expectedFitPage); }
public void commonOverrideExecutesForward() throws ServletException, IOException, NoSuchMethodException { mockery.checking(new Expectations() { { allowing(resource).getType(); will(returnValue(CommonComponentOld.class)); allowing(method).getMethod(); will(returnValue(CommonComponentOld.class.getMethod("base"))); one(config).getForwardFor("CommonComponentOld.base.ok"); will(returnValue("serverSide")); one(request).getRequestDispatcher("serverSide"); will(returnValue(dispatcher)); one(dispatcher).forward(request, response); } }); this.result.defaultView(); mockery.assertIsSatisfied(); }
public void onEachDir( String dirname, String linkname, String user, int uid, String group, int gid, int mode, long size ) throws IOException {
public static void addServerStartFailureAuditLog() { if (isAuditEnabled()) { log(ZKAuditProvider.getZKUser(), AuditConstants.OP_START, Result.FAILURE);
public void setUp() throws Exception { super.setUp(); zooKeeper = createClient(); zooKeeper.create( TEST_ROOT_NODE + Thread.currentThread().getId(),
public Map<String, Object> invokeAndGetResponse(List<Object> statements) throws IOException, Exception { if (statements.size() == 0) return new HashMap<String, Object>(); String instructions = ListSerializer.serialize(statements); writeString(instructions); int resultLength = getLengthToRead(); String results = null; results = reader.read(resultLength); List<Object> resultList = ListDeserializer.deserialize(results); return resultToMap(resultList); }
private void removeAlwaysChangingProperties(WikiPageProperties properties) { properties.remove(PageData.PropertyLAST_MODIFIED); }
public void testParse() throws Exception { String input = "Key1: Value1\n" + "Key2: Value2\n" + " Value2.1\n" + " Value2.2\n" + "Key3: Value3\n"; PackageDescriptor d = new PackageDescriptor(input); assertFalse(d.isValid()); assertEquals("key 1", "Value1", d.get("Key1")); assertEquals("key 2", "Value2\nValue2.1\nValue2.2", d.get("Key2")); assertEquals("key 3", "Value3", d.get("Key3")); }
public ResourceMethod parse(String uri, HttpMethod method, MutableRequest request) { for (Rule rule : routes) { ResourceMethod value = rule.matches(uri, method, request); if (value != null) { return value; } } return null; }
protected void evaluateExpectation(Map<String, Object> returnValues) { String value = (String) returnValues.get(makeInstructionTag(instructionNumber)); String literalizedValue = literalize(value); String originalContent = table.getCellContents(col, row); String evaluationMessage = createEvaluationMessage(value, originalContent); table.setCell(col, row, evaluationMessage); }
void prepareEntryChange(){ entryChange = new long[bookieConfigMap.size()]; int counter = 0; for(Long l : bookieConfigMap.keySet()){ entryChange[counter++] = l;
private String makeDirectoryListingPage(String pageName, String filename, FitNesseContext context) { HtmlPage page = context.htmlPageFactory.newPage(); page.setTitle("Delete File(s)"); page.setPageTitle(new PageTitle("Delete File", resource + filename, "/")); page.put("pageName", "/" + pageName); makeConfirmationHTML(page, filename, context); page.setMainTemplate("deleteConfirmation"); return page.html(); }
protected void decodePayload(byte[] pl) { final int flags = decodeInt(pl, 0); final byte[] data = new byte[pl.length - EXTRA_HDR_LEN - keyLen]; System.arraycopy(pl, (EXTRA_HDR_LEN + keyLen), data, 0, pl.length - EXTRA_HDR_LEN - keyLen); ReplicaGetOperation.Callback gcb = (ReplicaGetOperation.Callback) getCallback(); gcb.gotData(key, flags, data); getCallback().receivedStatus(STATUS_OK); }
public void testSize() { List<InetSocketAddress> addresses = getAddressList(); MultipleAddresses multipleAddresses = new MultipleAddresses(addresses); Assert.assertEquals(PORTS_AMOUNT, multipleAddresses.size()); }
public ContextConfigurator withRootPath(String rootPath) { this.rootPath = rootPath; return this; }
public void testMakeNavigationPropertiesHtml() throws Exception { WikiPage page = root.addChildPage("SomePage"); PageData data = page.getData(); String html = new PropertiesResponder().makeNavigationCheckboxesHtml(data).html(); assertSubString("<div style=\"float: left; width: 150px;\">Navigation:", html); assertSubString("<input type=\"checkbox\" name=\"Files\" checked=\"true\"/> - Files", html); assertSubString("<input type=\"checkbox\" name=\"Search\" checked=\"true\"/> - Search", html); }
public void shouldReturnWantedUrlWithPartialParamArgs() { String a = "test"; when(router.urlFor(TestController.class, TestController.class.getDeclaredMethods()[2], new Object[]{a, null})).thenReturn("/expectedUrl");
public void methodReturnsVoid() throws Exception { Object retval = caller.call("testSlim", "nilad"); assertEquals(VoidConverter.VOID_TAG, retval); }
protected void engineInit( int opmode, Key key, SecureRandom random) throws InvalidKeyException { try {
public void setup() { MockitoAnnotations.initMocks(this); FilterChain chain = mock(FilterChain.class); final RequestInfo webRequest = new RequestInfo(context, chain, request, null); jstlLocalization = new JstlLocalization(webRequest); converter = new LocaleBasedJodaTimeConverter(jstlLocalization); }
private int subWord(int x) { return (S[x&255]&255 | ((S[(x>>8)&255]&255)<<8) | ((S[(x>>16)&255]&255)<<16) | S[(x>>24)&255]<<24); }
public void testTapVersion() { (new VersionOperationImpl(null)).toString(); }
public Enum convert(String value, Class<? extends Enum> type, List<ValidationMessage> errors, ResourceBundle bundle) { if (value == null || value.equals("")) { return null; } Class<? extends Enum> enumType = (Class<? extends Enum>) type; if (Character.isDigit(value.charAt(0))) { return resolveByOrdinal(value, enumType);
private FixtureInteraction captureInteraction(Descriptor descriptor) { InProcessSlimClientBuilder slimClientBuilder = spy(new InProcessSlimClientBuilder(descriptor, classLoader)); ArgumentCaptor<FixtureInteraction> interactionCaptor = ArgumentCaptor.forClass(FixtureInteraction.class); slimClientBuilder.build(); verify(slimClientBuilder).createSlimServer(interactionCaptor.capture(), isNull(), anyBoolean()); return interactionCaptor.getValue(); }
public void actionPerformed(ActionEvent e) { ZooInspectorAboutDialog.this.dispose(); }
public DERObject toASN1Object() { return (DERObject)contents; }
public void run() { String keyBase = "testKey"; String object = "This is a test of an object blah blah es, " + "serialization does not seem to slow things down so much. " + "The gzip compression is horrible horrible performance, " + "so we only use it for very large objects. " + "I have not done any heavy benchmarking recently"; long begin = System.currentTimeMillis(); for (int i = stat.start; i < stat.start + stat.runs; i++) { mc.set("" + i + keyBase, 3600, object); if(total.incrementAndGet() >= MAX_QUEUE) { flush(); } } long end = System.currentTimeMillis(); stat.setterTime = end - begin; }
@Override public Dummy fetch(String key) { calls.add(1); return null; }
public void init(CommandRunningFitClient fitClient) { String[] arguments = new String[] { "-x", hostName, Integer.toString(port), Integer.toString(ticketNumber) }; this.fastFitServer = createTestRunnerThread(testRunner, arguments); this.fastFitServer.start(); this.commandRunner = new MockCommandRunner(); }
WikiPagePath getFullPathOfChild(WikiPage parent, WikiPagePath childPath) throws Exception; WikiPagePath getFullPath(WikiPage page) throws Exception; WikiPage addPage(WikiPage context, WikiPagePath path, String content) throws Exception; WikiPage addPage(WikiPage context, WikiPagePath path) throws Exception; String getRelativeName(WikiPage base, WikiPage page) throws Exception; boolean isRoot(WikiPage page) throws Exception; WikiPage getRoot(WikiPage page) throws Exception; void traverse(WikiPage root, FitNesseTraversalListener pageCrawlerTest) throws Exception; }
public void shouldNotComplainAboutEmpty() { assertThat(converter.convert("", Integer.class, bundle), is(nullValue())); }
private void evaluateRow(List<List<Object>> tableResults, int row) { List<Object> rowList = tableResults.get(row); for (int col = 0; col < rowList.size(); col++) { String cellResult = (String) rowList.get(col);
protected abstract String mapConstructorClassName(); private void assertConvertsTo(String string, List<Object> list) { assertEquals("true", statementExecutor.call(MY_INSTANCE, "setMap", string)); assertEquals(list, statementExecutor.call(MY_INSTANCE, "query", new Object[] {})); Object created = statementExecutor.create(OTHER_INSTANCE, mapConstructorClassName(), new Object[] {string}); assertEquals("OK", created); assertEquals(list, statementExecutor.call(OTHER_INSTANCE, "query", new Object[] {})); } @Test public void fromEmptyString_shouldCreateEmptyMap() throws Exception { assertConvertsTo("", list()); } @Test public void fromGarbageString_shouldCreateEmptyMap() throws Exception { assertConvertsTo("sdfwewdfsdfwefsdfsdfswe", list()); } @Test public void fromEmptyTable_shouldCreateEmptyMap() throws Exception { assertConvertsTo("<table></table>", list()); } @Test public void fromTableWithNoColumns_shouldCreateEmptyMap() throws Exception { assertConvertsTo("<table><tr></tr><tr></tr></table>", list()); } @Test public void fromTableWithOneColumn_shouldCreateEmptyMap() throws Exception { assertConvertsTo("<table><tr><td>0</td></tr></table>", list()); } @Test public void fromTableWithMoreThanTwoColumns_shouldCreateEmptyMap() throws Exception { assertConvertsTo( "<table>" + "<tr>" + " <td>0</td>" + " <td>0</td>" + " <td>0</td>" + "</tr>" + "</table>", list()); } @Test public void fromTableWithTwoColumnsAndOneRow_shouldCreateMapWithOneEntry() throws Exception { assertConvertsTo( "<table>" + "<tr>" + " <td>name</td>" + " <td>Bob</td>" + "</tr>" + "</table>", list(list("name", "Bob"))); } @Test public void fromTableWithTwoColumnsAndTwoRows_shouldCreateMapWithTwoEntries() throws Exception { assertConvertsTo( "<table>" + "<tr>" + " <td>name</td>" + " <td>Bob</td>" + "</tr>" + "<tr>" + " <td>address</td>" + " <td>here</td>" + "</tr>" + "</table>", list(list("address", "here"), list("name", "Bob"))); } @Test public void fromTwoValidTables_shouldCreateEmptyMap() throws Exception { assertConvertsTo( "<table>" + "<tr>" + " <td>name</td>" + " <td>Bob</td>" + "</tr>" + "</table>" + "<table>" + "<tr>" + " <td>name</td>" + " <td>Bob</td>" + "</tr>" + "</table>", list()); } }
void cancel();  OperationState getState();  ByteBuffer getBuffer();  void writing();  void writeComplete();  void initialize();  void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data);  MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to);  void timeOut();  boolean isTimedOut();  boolean isTimedOut(long ttlMillis);  boolean isTimedOutUnsent();  long getWriteCompleteTimestamp();  byte[] getErrorMsg(); }
protected void execute() throws RefactorException { movePage(oldRefactoredPage, newParentPage, getNewPageName()); }
public void registerSymbolTypes(SymbolProvider symbolProvider) throws PluginException { register(plugin, "registerSymbolTypes", SymbolProvider.class, symbolProvider); }
private void createFixtureInstance(Class<?> fixtureClass) { Class<?> clazz = fixtureClass; Object created = statementExecutor.create("myInstance", clazz.getName(), new Object[] {}); assertEquals("OK", created); }
protected void respondsWith(List<?> expected) { expectedResults.addAll(expected); List<Object> result = executor.execute(statements); Map<String, Object> expectedMap = SlimCommandRunningClient.resultToMap(expectedResults); Map<String, Object> resultMap = SlimCommandRunningClient.resultToMap(result); assertEquals(expectedMap, resultMap); }
static VersionInfo last(Collection<VersionInfo> versions) { VersionInfo last = null; for (VersionInfo i : versions) { last = i; } return last; }
public void callNiladicFunction() throws Exception { caller.call("testSlim", "nilad"); assertTrue(testSlim.niladWasCalled()); }
public void testTooManySnapshotsEssential() throws Exception { LearnerSnapshotThrottler throttler = new LearnerSnapshotThrottler(5); try { for (int i = 0; i < 6; i++) { throttler.beginSnapshot(true); } } catch (SnapshotThrottleException ex) { Assert.fail("essential snapshots should not be throttled"); } throttler.endSnapshot(); throttler.beginSnapshot(false); }
public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception { try { if (evt == NettyServerCnxn.ReadEvent.ENABLE) {
public static String translateTo(SourcePage page, String input) { Symbol list = Parser.make(new ParsingPage(page), input).parse(); return new HtmlTranslator(page).translateTree(list); }
public void accept(final ClassVisitor cv) {
public static void finalCleanUp() { ConverterRegistry.resetToStandardConverters(); }
protected void unregisterMetrics() { super.unregisterMetrics(); MetricsContext rootContext = ServerMetrics.getMetrics().getMetricsProvider().getRootContext(); rootContext.unregisterGauge("learners"); rootContext.unregisterGauge("synced_followers"); rootContext.unregisterGauge("synced_non_voting_followers"); rootContext.unregisterGauge("synced_observers"); rootContext.unregisterGauge("pending_syncs"); rootContext.unregisterGauge("leader_uptime"); rootContext.unregisterGauge("last_proposal_size"); rootContext.unregisterGauge("max_proposal_size"); rootContext.unregisterGauge("min_proposal_size"); }
public static Test suite() { return new TestSuiteBuilder(AllTests.class) .includeAllPackagesUnderHere()
public void stdErr(String output) { executionLog.capturedError.append(output).append("\n"); }
public void receivedStatus(String s) { rv.put(sa, s); ai.decrementAndGet(); sync.set(ai); }
private void doWarnForRelativePath(File file) { if(file.isAbsolute()) return; if(file.getPath().substring(0, 2).equals("."+File.separator)) return; log.warn(file.getPath()+" is relative. Prepend ." +File.separator+" to indicate that you're sure!");
public void shouldNotCountABadDirectoryNameAsAHistoryDirectory() throws Exception { addPageDirectoryWithOneResult("SomePage", "20090419123103_1_0_0_0"); addPageDirectoryWithOneResult("bad+directory+name", "20090419123103_1_0_0_0"); TestHistory history = new TestHistory(resultsDirectory); assertEquals(1, history.getPageNames().size()); assertTrue(history.getPageNames().contains("SomePage")); }
protected void registerJMX() {
public void add(ScheduleItem item) { scheduleItems.add(item); }
public void sendRedirect(String location) throws IOException { for (RedirectListener listener : listeners) { listener.beforeRedirect(); } super.sendRedirect(location); }
public static void addConverter(Class<?> k, Converter converter) { converters.put(k, converter); }
private WikiPage addLocalPageWithImportProperty(WikiPage parentPage, String pageName, boolean isRoot) throws Exception { WikiPage page = parentPage.addChildPage(pageName); PageData data = page.getData(); WikiPagePath pagePath = localRoot.getPageCrawler().getFullPath(page); WikiImportProperty importProps = new WikiImportProperty("http://localhost:" + FitNesseUtil.PORT + "/" + PathParser.render(pagePath)); if (isRoot) importProps.setRoot(true); importProps.addTo(data.getProperties()); page.commit(data); return page; }
public String toString() { return packet.getType() + ", " + packet.getZxid() + ", " + request; }
public boolean isWithEditLocally() { PageData data = getData(); return !rollback && data != null && WikiImportProperty.isImported(data); }
private TimeMeasurement constantStartTimeAndElapsedTimeMeasurement(final long startTime, final long elapsed) { return new TimeMeasurement() { @Override
public void testGetNegative() { expectGetAndReturn("blaha", null); assertNull(cacheMap.get("a")); }
public static Method findMethodWithName(Class<?> type, String name, List<Object> args) { return findMethodWithName(type, name, getClasses(args)); }
BaseFormatter createXmlFormatter() throws Exception { BaseFormatter formatter = new SuiteXmlFormatter(page) { @Override protected void close() throws Exception { closeHtmlResponse(); } @Override protected void writeData(byte[] byteArray) throws Exception { response.add(byteArray); } }; return formatter; }
public void debug(String message) { if (verbose) { log.info(message);
public <T extends View> T use(final Class<T> view) { this.typeToUse = view; if (view.equals(EmptyResult.class)) { return null; } return instanceView(view); }
public void shouldExecuteMultipleFilters() throws Exception { factory.addFilter("mock", AnotherMockFilter.class); Responder responder = factory.makeResponder(request); expectedAnotherFilterResponse = new SimpleResponse(); Response response = responder.makeResponse(context, request); assertSame(expectedAnotherFilterResponse, response); }
public void testPrunesNonTests() throws Exception { SuiteFilter filter = new SuiteFilter(null, null, null, null); assertFalse(filter.isMatchingTest(root)); }
public void doNothingIfHasNoActiveTransationAsNull() { HibernateTransactionInterceptor interceptor = new HibernateTransactionInterceptor(session, validator); when(session.beginTransaction()).thenReturn(null); when(validator.hasErrors()).thenReturn(false); interceptor.intercept(stack, method, instance); verify(transaction, never()).rollback(); }
public void shouldAddInterceptorsInOrder() throws InterceptionException, IOException { final Sequence sequence = mockery.sequence("executionSequence"); mockery.checking(new Expectations() { { one(stack).add(ResourceLookupInterceptor.class); inSequence(sequence); one(stack).add(URLParameterExtractorInterceptor.class); inSequence(sequence); one(stack).add(InterceptorListPriorToExecutionExtractor.class); inSequence(sequence); one(stack).add(instantiator); inSequence(sequence); one(stack).add(ParametersInstantiatorInterceptor.class); inSequence(sequence); one(stack).add(ExecuteMethodInterceptor.class); inSequence(sequence); one(stack).next(null, null); inSequence(sequence); } }); execution.execute(); mockery.assertIsSatisfied(); }
private ResourceBundle createEmptyBundle() { try { return new PropertyResourceBundle(new StringReader(""));
public void info( String message ) { throw new RuntimeException("info should never be called"); }
public void testNoDynamicConfig() throws Exception { ClientBase.setupTestEnv(); final int CLIENT_PORT = PortAssignment.unique(); MainThread mt = new MainThread(MainThread.UNSET_MYID, CLIENT_PORT, "", false); verifyStandalone(mt, CLIENT_PORT); }
public void fieldInMatchingRowDoesntExist() throws Exception { assertQueryResults( "|3|4|\n", asList(asList(asList("n", "3"))), "[" + headRow + "[n, 2n], " + "[pass(3), fail(a=field 2n not present;e=4)]" + "]" ); assertEquals(1, testContext.getTestSummary().getRight()); assertEquals(1, testContext.getTestSummary().getWrong()); }
public static FitNesseContext makeTestContext(WikiPage root) { return makeTestContext(root, PORT); }
public DERObject toASN1Object() { ASN1EncodableVector v = new ASN1EncodableVector(); v.add(contentType); v.add(contentEncryptionAlgorithm); if (encryptedContent != null) { v.add(new BERTaggedObject(false, 0, encryptedContent)); } return new BERSequence(v); }
private String getHtmlWithGreatGrandChildRegracedProp()
public void testTooManySyncsEssential() throws Exception { LearnerSyncThrottler throttler = new LearnerSyncThrottler(5, syncType); try { for (int i = 0; i < 6; i++) { throttler.beginSync(true); } } catch (SyncThrottleException ex) { Assert.fail("essential syncs should not be throttled"); } throttler.endSync(); throttler.beginSync(false); }
boolean touchSession(long sessionId, int sessionTimeout);  void shutdown();  void removeSession(long sessionId); void checkSession(long sessionId) throws KeeperException.SessionExpiredException; }
private void assertFoundResultsEqualsExpectation(List<WikiPage> expected2, List<WikiPage> results) { assertEquals(expected2.size(), results.size()); assertTrue(results.containsAll(expected2)); }
public org.vafer.jdeb.mapping.Mapper createMapper() throws IOException { if ("perm".equalsIgnoreCase(mapperType)) { return new PermMapper(uid, gid, user, group, fileMode, dirMode, strip, prefix); } if ("ls".equalsIgnoreCase(mapperType)) { try { return new LsMapper(new FileInputStream(src)); } catch (Exception e) { e.printStackTrace(); } } throw new IOException("Unknown mapper type '" + mapperType + "'"); }
public void testReferencesOnPageOne_3() throws Exception { checkChangesOnPageOne("Stuff PageOne.PageTwo Stuff\n", "Stuff PageOne.PageTwo Stuff\n"); }
protected Object convertWikiHashes(Converter<Map> cnv, Object value) { value = convertWikiHash(cnv, value); if (value instanceof Map) { value = convertNestedWikiHashes(cnv, (Map<String, ?>) value); } return value; }
private String getActionsHtml(String pageName) throws Exception { root.addChildPage(pageName); PageData pageData = new PageData(root.getChildPage(pageName)); return HtmlUtil.makeActions(pageData, pageName, pageName, false).html(); }
public void testCommandPatternCSharp() throws Exception { String specifiedPageText = "!define COMMAND_PATTERN {%m -r fitSharp.Slim.Service.Runner,fitsharp.dll %p}\n"; WikiPage specifiedPage = makeTestPage(specifiedPageText); Descriptor descriptor = new WikiPageDescriptor(specifiedPage.readOnlyData(), false, false, getClassPath(specifiedPage)); assertEquals("%m -r fitSharp.Slim.Service.Runner,fitsharp.dll %p", descriptor.getCommandPattern()); Descriptor descriptor1 = new WikiPageDescriptor(specifiedPage.readOnlyData(), false, true, getClassPath(specifiedPage)); assertEquals("%m -r fitSharp.Slim.Service.Runner,fitsharp.dll %p", descriptor1.getCommandPattern()); }
public static String translateTemplate(VelocityContext velocityContext, String templateFileName) { StringWriter writer = new StringWriter(); translateTemplate(velocityContext, templateFileName, writer); return writer.toString(); }
public void processResult(int rc, String path, Object ctx, List<OpResult> opResults) { synchronized (res) { res.rc = rc;
public void testOutputChunk(String output) throws Exception { } @Override public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { } }
MetricType enableMetrics();  MetricCollector getMetricCollector();  long getAuthWaitTime(); }
private static FitNesseContext loadContext(Arguments arguments) throws Exception { FitNesseContext context = new FitNesseContext(); context.port = arguments.getPort(); context.rootPath = arguments.getRootPath(); ComponentFactory componentFactory = new ComponentFactory(context.rootPath); context.rootDirectoryName = arguments.getRootDirectory(); context.setRootPagePath(); String defaultNewPageContent = componentFactory.getProperty(ComponentFactory.DEFAULT_NEWPAGE_CONTENT); if (defaultNewPageContent != null) context.defaultNewPageContent = defaultNewPageContent; WikiPageFactory wikiPageFactory = new WikiPageFactory(); context.responderFactory = new ResponderFactory(context.rootPagePath); context.logger = makeLogger(arguments); context.authenticator = makeAuthenticator(arguments.getUserpass(), componentFactory); context.htmlPageFactory = componentFactory.getHtmlPageFactory(new HtmlPageFactory()); context.shouldCollectHistory = !arguments.isOmittingHistory(); extraOutput = componentFactory.loadPlugins(context.responderFactory, wikiPageFactory); extraOutput += componentFactory.loadWikiPage(wikiPageFactory); extraOutput += componentFactory.loadResponders(context.responderFactory); extraOutput += componentFactory.loadWikiWidgets(); extraOutput += componentFactory.loadWikiWidgetInterceptors(); extraOutput += componentFactory.loadContentFilter(); context.root = wikiPageFactory.makeRootPage(context.rootPath, context.rootDirectoryName, componentFactory); WikiImportTestEventListener.register(); return context; }
public int requestPageSaveWithContentsByUserAndPassword(String pageName, String contents, String username, String password) throws Exception { MockRequest request = new MockRequest(); if (username != null) request.setCredentials(username, password); request.addInput("responder", "saveData"); request.addInput(EditResponder.TIME_STAMP, "9999999999999"); request.addInput(EditResponder.TICKET_ID, "321"); request.addInput("pageContent", contents); request.parseRequestUri("/" + pageName); WikiPagePath path = PathParser.parse(request.getResource());
public Maybe<Integer> match(ScanString input, SymbolStream symbols, int offset) { return input.startsLine(offset) ? new Maybe<Integer>(0) : Maybe.noInteger; }
void authenticate(String username, String password) throws OperationException; }
private void runFixture(Parse tables, Fixture fixture) { fixture.counts = embeddedCounts; fixture.summary = embeddedSummary; fixture.doTable(tables); }
public void shouldThrowScannerExceptionIfClassNotExists() { Collection<String> classNames = asList("a.resource.that.NotExists"); new DynamicWebAppBootstrap(classNames).configure(registry); }
public static Op create(String path, byte[] data, List<ACL> acl, CreateMode createMode) { return new Create(path, data, acl, createMode); }
private void checkForAndReportVersionMismatch(PageDataRead pageData) { double expectedVersionNumber = getExpectedSlimVersion(pageData); double serverVersionNumber = slimClient.getServerVersion(); if (serverVersionNumber < expectedVersionNumber) exceptions.addException("Slim Protocol Version Error",
private String makeLocalEditLinks(String title) { String[] splitTitle = title.split("\\s+"); return splitTitle[splitTitle.length-1]+"?edit&redirectToReferer=true&redirectAction="; }
public void decisionTableCanBeConstructorOnly() throws Exception { makeDecisionTableAndBuildInstructions("|fixture|argument|\n"); List<Object> expectedInstructions = list( list("decisionTable_id_0", "make", "decisionTable_id", "fixture", "argument"), list("decisionTable_id_1", "call", "decisionTable_id", "table", list()) ); assertEquals(expectedInstructions, instructions); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("decisionTable_id_0", "OK"), list("decisionTable_id_1", "OK") ) ); testContext.evaluateExpectations(pseudoResults); String colorizedTable = dt.getTable().toString(); String expectedColorizedTable = "[[pass(fixture), argument]]"; assertEquals(expectedColorizedTable, colorizedTable); }
public void dumpExpiredCachedData() throws Exception { if (cachedDataExpired()) clearCache();
public void testPagesForTestSystemAreSurroundedBySuiteSetupAndTeardown() throws Exception { WikiPage slimPage = addTestPage(suite, "AaSlimTest", simpleSlimDecisionTable); WikiPage setUp = crawler.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = crawler.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); testPages = new LinkedList<WikiPage>(); testPages.add(setUp); testPages.add(slimPage); testPages.add(testPage); testPages.add(tearDown); MultipleTestsRunner runner = new MultipleTestsRunner(testPages, context, suite, null); Map<TestSystem.Descriptor, LinkedList<WikiPage>> map = runner.makeMapOfPagesByTestSystem(); TestSystem.Descriptor fitDescriptor = TestSystem.getDescriptor(testPage.getData(), false); TestSystem.Descriptor slimDescriptor = TestSystem.getDescriptor(slimPage.getData(), false); List<WikiPage> fitList = map.get(fitDescriptor); List<WikiPage> slimList = map.get(slimDescriptor); assertEquals(3, fitList.size()); assertEquals(3, slimList.size()); assertEquals(setUp, fitList.get(0)); assertEquals(testPage, fitList.get(1)); assertEquals(tearDown, fitList.get(2)); assertEquals(setUp, slimList.get(0)); assertEquals(slimPage, slimList.get(1)); assertEquals(tearDown, slimList.get(2)); }
Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void testFlush() { (new FlushOperationImpl(0, null)).toString(); }
public void testGetValidAddressWithNotValid() { assertThrows(NoRouteToHostException.class, () -> {
public void validAuth() throws Exception { ZooKeeper zk = createClient();
private void errorMessage(int resId) { Toast.makeText(this, resId, Toast.LENGTH_LONG).show(); }
public boolean containsWikitext() { return realPage instanceof WikitextPage; }
public void newTestStarted(WikiTestPage testPage, TimeMeasurement timeMeasurement) throws IOException { super.newTestStarted(testPage, timeMeasurement); writeData(WikiPageUtil.getHeaderPageHtml(getPage())); }
public static void dump() throws IOException { LOG.info("JMXEnv.dump() follows"); Set<ObjectName> beans; try { beans = conn().queryNames( new ObjectName(MBeanRegistry.DOMAIN + ":*"), null); } catch (MalformedObjectNameException e) { throw new RuntimeException(e); } for (ObjectName bean : beans) { LOG.info("bean:" + bean.toString());
public void testACLDigestHashHiding_AdminUser() {
public void testToString() throws ConfigException { String config = "127.0.0.1:1234:1236:participant;0.0.0.0:1237"; String expected = "127.0.0.1:1234:1236:participant;0.0.0.0:1237"; QuorumServer qs = new QuorumServer(0, config); Assert.assertEquals("Use IP address", expected, qs.toString()); config = "127.0.0.1:1234:1236;0.0.0.0:1237"; expected = "127.0.0.1:1234:1236:participant;0.0.0.0:1237"; qs = new QuorumServer(0, config); Assert.assertEquals("Type unspecified", expected, qs.toString()); config = "127.0.0.1:1234:1236:observer;0.0.0.0:1237"; expected = "127.0.0.1:1234:1236:observer;0.0.0.0:1237"; qs = new QuorumServer(0, config); Assert.assertEquals("Observer type", expected, qs.toString()); config = "127.0.0.1:1234:1236:participant;1237"; expected = "127.0.0.1:1234:1236:participant;0.0.0.0:1237"; qs = new QuorumServer(0, config); Assert.assertEquals("Client address unspecified", expected, qs.toString()); config = "127.0.0.1:1234:1236:participant;1.2.3.4:1237"; expected = "127.0.0.1:1234:1236:participant;1.2.3.4:1237"; qs = new QuorumServer(0, config); Assert.assertEquals("Client address specified", expected, qs.toString()); config = "example.com:1234:1236:participant;1237"; expected = "example.com:1234:1236:participant;0.0.0.0:1237"; qs = new QuorumServer(0, config); Assert.assertEquals("Use hostname", expected, qs.toString()); }
public void testRootWatchTriggered() throws Exception { class MyWatcher implements Watcher{ boolean fired=false; public void process(WatchedEvent event) { if(event.getPath().equals("/")) fired=true; } }; MyWatcher watcher=new MyWatcher();
WikiPage addChildPage(String name); boolean hasChildPage(String name); WikiPage getChildPage(String name); void removeChildPage(String name); List<WikiPage> getChildren(); String getName(); PageData getData(); PageData getDataVersion(String versionName); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage();
public void configure(InetSocketAddress addr, int maxClientCnxns) throws IOException { configureSaslLogin(); localAddress = addr; this.maxClientCnxns = maxClientCnxns; }
private void validateQuotaMetrics(final String namespace, final Long countLimit, final Long bytesLimit, final Long countUsage, final Long bytesUsage, final String nameSuffix) { final Map<String, Object> values = MetricsUtils.currentServerMetrics(); assertEquals(countLimit, values.get(namespace + "_" + QuotaMetricsUtils.QUOTA_COUNT_LIMIT_PER_NAMESPACE + nameSuffix)); assertEquals(bytesLimit, values.get(namespace + "_" + QuotaMetricsUtils.QUOTA_BYTES_LIMIT_PER_NAMESPACE + nameSuffix)); assertEquals(countUsage, values.get(namespace + "_" + QuotaMetricsUtils.QUOTA_COUNT_USAGE_PER_NAMESPACE + nameSuffix)); assertEquals(bytesUsage, values.get(namespace + "_" + QuotaMetricsUtils.QUOTA_BYTES_USAGE_PER_NAMESPACE + nameSuffix)); }
public void redirect(String url) { logger.debug("redirection to {}", url); try { if (url.startsWith("/")) {
public void succeeded(Description method) { LOG.info("SUCCEEDED {}", testName); }
public void testRelationalMatching() throws Exception { final String[][] table = { {"fitnesse.fixtures.ColumnFixtureTestFixture"}, {"input", "output?"}, {"1", "_>0"} }; Parse page = executeFixture(table); String colTwoResult = page.at(0, 2, 1).body; assertTrue(colTwoResult.indexOf("<b>1</b>>0") != -1); String colTwoTag = page.at(0, 2, 1).tag; assertTrue(colTwoTag.indexOf("pass") != -1); }
public void deepRegister(Class componentType) { register(componentType, componentType); deepRegister(componentType, componentType); }
public Symbol parse(String input) { return new Parser(this, currentPage, new Scanner(new TextMaker(variableSource), input), provider, variableSource, 0, emptyTypes, emptyTypes, emptyTypesList).parse(); }
private void removeWatches( int opCode, String path, Watcher watcher, WatcherType watcherType, boolean local, VoidCallback cb, Object ctx) { PathUtils.validatePath(path); final String clientPath = path; final String serverPath = prependChroot(clientPath); WatchDeregistration wcb = new WatchDeregistration(clientPath, watcher, watcherType, local, getWatchManager()); RequestHeader h = new RequestHeader(); h.setType(opCode); Record request = getRemoveWatchesRequest(opCode, watcherType, serverPath); cnxn.queuePacket(h, new ReplyHeader(), request, null, cb, clientPath, serverPath, ctx, null, wcb); }
public SASLAuthOperation saslAuth(String[] mech, String serverName, Map<String, ?> props, AuthHandlerBridge cb) { return new SASLAuthOperationImpl(mech, serverName, props, cb); }
StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  Collection<Operation> clone(KeyedOperation op); }
public void run() { try { for (; current < count; current++) {
private void writeLength( int length) throws IOException { if (length > 127) {
public <T> Serializer from(T object, String alias) { if (object == null) { throw new NullPointerException("You can't serialize null objects"); } if (Collection.class.isInstance(object)) { throw new IllegalArgumentException("It's not possible to serialize colections yet. " + "Create a class that wraps this collections by now."); } else { Class<?> type = object.getClass(); xstream.alias(alias, type); excludeNonPrimitiveFields(type); } this.toSerialize = object; return this; }
void addHtmlFormatter() throws Exception { BaseFormatter formatter = new TestHtmlFormatter(context, page, context.htmlPageFactory) { @Override protected void writeData(String output) throws Exception { addToResponse(output); } }; formatters.add(formatter); }
public void testMultiRollbackNoLastChange() throws Exception { zks.getZKDatabase().dataTree.createNode("/foo", new byte[0], Ids.OPEN_ACL_UNSAFE, 0, 0, 0, 0); zks.getZKDatabase().dataTree.createNode("/foo/bar", new byte[0], Ids.OPEN_ACL_UNSAFE, 0, 0, 0, 0); assertNull(zks.outstandingChangesForPath.get("/foo"));
public void ReInit(java.io.Reader dstream) { ReInit(dstream, 1, 1, 4096); }
public void executesInternalValidationIfSuccessful() { final Client guilherme = new Client(); guilherme.age = 10; Validations validations = new Validations(); validations.that(guilherme).shouldBe(notNullValue()).otherwise(new Validations() { public void check(){ that(guilherme.getAge()).shouldBe(greaterThan(17)); that(guilherme.getAge()).shouldBe(greaterThanOrEqualTo(12)); } }); assertThat(validations.getErrors(), hasSize(2)); }
public Relation build() { if (controller != null) { if(method==null) { method = findMethod(name, controller); parameters = new Object[method.getParameterTypes().length]; } return new ControllerBasedRelation(controller, name, method, parameters, routes); } throw new IllegalStateException( "Transition was not correctly created: '" + name + "'");
public void testSubstract() throws Exception { WikiPagePath path123 = new WikiPagePath(new String[]{"OnE", "TwO", "ThreE"}); WikiPagePath path12 = new WikiPagePath(new String[]{"OnE", "TwO"}); WikiPagePath path1 = new WikiPagePath(new String[]{"OnE"}); WikiPagePath blah = new WikiPagePath(new String[]{"BlaH"}); assertEquals(new WikiPagePath(new String[]{"ThreE"}), path123.subtract(path12)); assertEquals(new WikiPagePath(new String[]{"TwO", "ThreE"}), path123.subtract(path1)); assertEquals(new WikiPagePath(new String[]{"TwO"}), path12.subtract(path1)); assertEquals(path123, path123.subtract(blah)); assertEquals(new WikiPagePath(), path123.subtract(path123)); }
abstract QuorumAuthServer getQuorumAuthServer();  abstract void registerLearnerHandlerBean(final LearnerHandler learnerHandler, Socket socket);  abstract void unregisterLearnerHandlerBean(final LearnerHandler learnerHandler); }
public String render() throws Exception { this.parent.addVariable(name, value); return HtmlUtil.metaText("variable defined: " + name + "=" + value); }
public void chunkingShouldBeTurnedOffIfnochunkParameterIsPresent() throws Exception { MockRequest request = new MockRequest(); request.addInput("nochunk", ""); response = (ChunkedResponse)responder.makeResponse(context, request); assertTrue(response.isChunkingTurnedOff()); }
public void setUp() throws Exception { request = new RequestAttributes(mock(HttpServletRequest.class)); outjector = new DefaultOutjector(request); }
public void testWriteFinalProcTime() throws Exception { setupProcessors(0, 1000); Request req1 = createWriteRequest(1l, 2); processRequestWithWait(req1);
EnumSet<HttpMethod> allowedMethods();  String urlFor(Class<?> type, Method m, Object params);  boolean canHandle(Class<?> type, Method method);  int getPriority();  String getOriginalUri(); }
<T extends Interceptor> void add(Class<T> interceptor); void next(ResourceMethod method, Object resourceInstance) throws IOException, InterceptionException; }
public void testMatches() throws Exception { assertMatch("!-literal-!"); assertMatch("!-this is a literal-!"); assertMatch("!-this is\n a literal-!"); assertMatch("!- !- !-this is a literal-!"); assertMatch("!-!literal-!"); assertMatch("!--!"); assertNoMatch("!-no"); assertNoMatch("! -no-!"); assertMatchEquals("!-no-!-!", "!-no-!"); }
public void assertFitPassFixtureXmlReportIsCorrect() throws Exception { assertHeaderOfXmlDocumentsInResponseIsCorrect(); Element result = getElementByTagName(testResultsElement, "result"); Element counts = getElementByTagName(result, "counts"); assertCounts(counts, "1", "0", "0", "0"); Element tags = getElementByTagName(result, "tags"); assertNull(tags); String content = XmlUtil.getTextValue(result, "content"); assertSubString("PassFixture", content); String relativePageName = XmlUtil.getTextValue(result, "relativePageName"); assertEquals("TestPage", relativePageName); }
private void createDirectory(String directory, String user, int uid, String group, int gid, int mode, long size) throws IOException {
public void setUp() throws Exception { when(writerFactory.getWriter(any(FitNesseContext.class), any(WikiPage.class), any(TestSummary.class), anyLong())).thenReturn(writer); page = new WikiTestPage(new WikiPageDummy("page", "content")); right = new TestSummary(1, 0, 0, 0); wrong = new TestSummary(0, 1, 0, 0); exception = new TestSummary(0, 0, 0, 1); }
public void my_test_1() throws IOException, InterruptedException, KeeperException { enode_test_1(); enode_test_2(); delete_create_get_set_test_1(); create_get_stat_test(); }
public Configuration configuration() { Class<? extends Embeddable> embeddableClass = this.getClass(); SeleniumStepMonitor monitor = new SeleniumStepMonitor(contextView, context, new SilentStepMonitor()); StoryReporterBuilder builder = new MyBuilder(context, contextView); builder = builder.withCodeLocation( CodeLocations.codeLocationFromClass(embeddableClass)) .withDefaultFormats().withFormats(IDE_CONSOLE, TXT, HTML, XML); return new SeleniumConfiguration().useSeleniumContext(context) .useWebDriverFactory(driverFactory).useStepMonitor(monitor)
void setupQuorumPeerConfig(Properties prop, boolean configBackwardCompatibilityMode) throws IOException, ConfigException { quorumVerifier = parseDynamicConfig(prop, electionAlg, true, configBackwardCompatibilityMode, oraclePath); setupMyId(); setupClientPort(); setupPeerType(); checkValidity(); }
public Serializer include(String... fields) { serializee.includeAll(Arrays.asList(fields)); return this; }
public void shouldBeAbleToConvertNull() { assertThat(converter.convert(null, Float.class, bundle), is(nullValue())); mockery.assertIsSatisfied(); }
public void start() { String command = buildCommand(descriptor); Map<String, String> environmentVariables = createClasspathEnvironment(descriptor.getClassPath()); CommandRunningFitClient.CommandRunningStrategy runningStrategy = fastTest ? new CommandRunningFitClient.InProcessCommandRunner(descriptor) : new CommandRunningFitClient.OutOfProcessCommandRunner(command, environmentVariables); this.client = new CommandRunningFitClient(this, context.port, context.socketDealer, runningStrategy); setExecutionLog(new ExecutionLog(page, client.commandRunner)); client.start(); }
BlockingQueue<Operation> createWriteOperationQueue();  NodeLocator createLocator(List<MemcachedNode> nodes);  OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon();  boolean useNagleAlgorithm();  Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode();  Transcoder<Object> getDefaultTranscoder();  boolean shouldOptimize();  int getReadBufSize();  public HashAlgorithm getHashAlg();  long getMaxReconnectDelay(); }
private void loadPrefs() { if (databases == null) { databases = new ArrayList<String>(); } if (keyfiles == null) { keyfiles = new ArrayList<String>(); } loadList(databases, DB_KEY); loadList(keyfiles, KEYFILE_KEY); }
protected void initClient() throws Exception { initClient(new DefaultConnectionFactory(5, 1024) { @Override
public void setup() throws Exception { CollectorRegistry.defaultRegistry.clear(); provider = new PrometheusMetricsProvider(); Properties configuration = new Properties(); configuration.setProperty("httpPort", "0");
public void shouldAllowCustomPathResolverWhileIncluding() throws ServletException, IOException { PageResult view = new PageResult(request, response, method, fixedResolver); mockery.checking(new Expectations() { { one(request).getRequestDispatcher("fixed"); will(returnValue(dispatcher)); one(dispatcher).include(request, response); } }); view.include("ok"); mockery.assertIsSatisfied(); }
protected void setupDecorator(String[] args) throws InvalidInputException { } protected void updateColumnsBasedOnResults(Parse table) { } }; return decorator; } private void assertArray(String[] expected, String[] actual) { assertEquals(expected.length, actual.length); for (int i = 0; i < actual.length; i++) { assertEquals(expected[i], actual[i]); } } private String geWrongDecoratorHTMLRow() { return "<tr><td>" + Loop.class.getName() + "</td></tr>"; } protected abstract String geDecoratorHTMLRow(); protected abstract int numberOfAssertionsOnDecorator(); protected void executeAndAssert(Counts expected, String fitPage, Fixture fixture) throws ParseException { fixture.doTable(new Parse(fitPage)); TestCaseHelper.assertCounts(expected, fixture.counts); } }
public abstract Date getCreate(); public abstract Date getMod(); public abstract Date getAccess(); public abstract Date getExpire(); public abstract PwGroup getParent(); public abstract String getDisplayTitle(); }
public void deferProcessingToContainer(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException; }
public File findMostRecentSnapshot() throws IOException { List<File> files = findNValidSnapshots(1); if (files.size() == 0) { return null; } return files.get(0); }
public void LoadData(Context ctx, InputStream is, String password, InputStream keyInputStream) throws IOException, InvalidDBException { LoadData(ctx, is, password, keyInputStream, new UpdateStatus(), !Importer.DEBUG); }
public void testSubmitFormForLinkToExternalRootThatsMissing() throws Exception { request.addInput("linkName", "SymLink"); request.addInput("linkPath", "file:/testDir/ExternalRoot"); Response response = invokeResponder(); assertEquals(404, response.getStatus()); String content = ((SimpleResponse) response).getContent(); assertSubString("Cannot create link to the file system path 'file:/testDir/ExternalRoot'.", content); assertSubString("Error Occured", content); }
public static String stripLeadingSlash( final String s ) { if (s == null) { return s; } if (s.length() == 0) { return s; } if (s.charAt(0) == '/') { return s.substring(1); } return s; }
public void init(FilterConfig cfg) throws ServletException { servletContext = cfg.getServletContext(); BasicConfiguration config = new BasicConfiguration(servletContext); init(config.getProvider(), new DefaultStaticContentHandler(servletContext)); logger.info("VRaptor 3 successfuly initialized"); }
public void passesTheWebMethod() throws SecurityException, NoSuchMethodException { final HttpMethod delete = HttpMethod.DELETE; final Route route = mockery.mock(Route.class); mockery.checking(new Expectations() {{ one(route).matches("/clients/add", delete, request); will(returnValue(method)); one(route).getResource(); will(returnValue(null)); }}); router.add(route); ResourceMethod found = router.parse("/clients/add", delete, request); assertThat(found, is(equalTo(method))); mockery.assertIsSatisfied(); }
public static ZooKeeper createZKClient(String cxnString, int sessionTimeout) throws IOException { CountdownWatcher watcher = new CountdownWatcher(); ZooKeeper zk = new ZooKeeper(cxnString, sessionTimeout, watcher); try { watcher.waitForConnected(CONNECTION_TIMEOUT); } catch (InterruptedException | TimeoutException e) { Assert.fail("ZooKeeper client can not connect to " + cxnString); } return zk; }
public static Document newDocument(String input) throws IOException, SAXException { ByteArrayInputStream is = new ByteArrayInputStream(input.getBytes("UTF-8")); return newDocument(is); }
private List<String> populateConffiles(Collection<DataProducer> producers) { final List<String> result = new ArrayList<String>(); if (producers == null || producers.isEmpty()) { return result; } final DataConsumer receiver = new DataConsumer() { public void onEachDir( String dirname, String linkname, String user, int uid, String group, int gid, int mode, long size ) throws IOException {
public byte[] getData(String path, Stat stat, Watcher watcher) throws KeeperException.NoNodeException { return dataTree.getData(path, stat, watcher); }
protected int compile(File sourceDir, File outputDir, List<String> classpathElements, boolean compileInLoop) throws Exception, InterruptedException {
public void shouldFinishSuccessfullyWithTooManyTests() { TestResult testResult = SlimTestResult.pass(); listener.announceNumberTestsToRun(0); listener.testAssertionVerified(null, testResult); listener.testComplete(mockWikiTestPage(), summary("R")); listener.close(); verify(notifier).fireTestFinished(description); }
public void run() { while (!stopped) { DumbWatcher watcher = createOrGetWatcher(r.nextInt(watchers));
<T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public PageData getDataVersion(String versionName) throws Exception { return new PageData(this, "content from version " + versionName); }
public void safeRun() { if (metadata.isClosed()) { LOG.warn("Attempt to add to closed ledger: " + ledgerId); LedgerHandle.this.opCounterSem.release(); cb.addComplete(BKException.Code.LedgerClosedException, LedgerHandle.this, -1, ctx); return; } long entryId = ++lastAddPushed; long currentLength = addToLength(data.length); PendingAddOp op = new PendingAddOp(LedgerHandle.this, cb, ctx, entryId); pendingAddOps.add(op); ChannelBuffer toSend = macManager.computeDigestAndPackageForSending( entryId, lastAddConfirmed, currentLength, data); op.initiate(toSend); }
public File takeSnapshot() throws IOException { return takeSnapshot(false); }
public void removeVersion(FileSystemPage page, String versionName); public void prune(FileSystemPage page); public boolean isExternalRevisionControlEnabled(); }
public boolean isDone() { assert op != null : "No operation"; return op.getState() == OperationImpl.State.COMPLETE; }
public void testTLSDetectionNonBlockingNonStrictServerIdleClient() throws Exception { Socket badClientSocket = null; Socket clientSocket = null; Socket secureClientSocket = null; UnifiedServerThread serverThread = new UnifiedServerThread( x509Util, localServerAddress, true, DATA_TO_CLIENT); serverThread.start(); try { badClientSocket = connectWithoutSSL();
private void testWikiImportUpdateWith(WikiImportProperty property) throws Exception { WikiPage page = WikiPageUtil.addPage(root, PathParser.parse("SomePage")); PageData data = page.getData(); property.addTo(data.getProperties()); page.commit(data); getPropertiesContentFromPage(page); checkUpdateForm(); assertSubString("Wiki Import Update", content); assertSubString("<a href=\"http://my.host.com/PageRoot\">http://my.host.com/PageRoot</a>", content); assertNotSubString("value=\"Import\"", content); }
private <T extends View> T mockResult(Class<T> view) { T pageResult = mock(view); when(container.instanceFor(view)).thenReturn(pageResult); return pageResult; }
public void shouldUseTheDefaultLocale() throws ParseException { mockery.checking(new Expectations() { { one(request).getAttribute("javax.servlet.jsp.jstl.fmt.locale.request"); will(returnValue(null)); one(request).getSession(); will(returnValue(session)); one(session).getAttribute("javax.servlet.jsp.jstl.fmt.locale.session"); will(returnValue(null)); one(context).getAttribute("javax.servlet.jsp.jstl.fmt.locale.application"); will(returnValue(null)); one(context).getInitParameter("javax.servlet.jsp.jstl.fmt.locale"); will(returnValue(null)); one(request).getLocale(); will(returnValue(new Locale("pt_BR"))); } }); assertThat(new Locale("pt_BR"), is(equalTo(converter.getLocale()))); mockery.assertIsSatisfied(); }
public void shouldInstantiateArrayListForCollectionInterface() throws Exception { GenericNullHandler handler = new GenericNullHandler(); Collection collection = handler.instantiate(Collection.class); assertThat(collection, is(notNullValue())); assertThat(collection, is(instanceOf(ArrayList.class))); }
private static void assertEventually(Duration timeout, Supplier<Boolean> test) { assertTimeout(timeout, () -> { while (true) {
boolean hasAttribute(String attribute); WikiPageProperties getProperties(); }
public void addFilename(FilenameSelector arg0) { task.addFilename(arg0); }
public void learnerSocketCloseTest() { SendAckRequestProcessor processor = new SendAckRequestProcessor(new FakeLearner()); processor.processRequest(new Request(0L, 0, ZooDefs.OpCode.sync, new TxnHeader(), new LearnerInfo(), 0L)); assertTrue(true, "should get here without exception"); }
private void replaceSymbol() { String value; String prefix; String suffix; String symbolName = symbolMatcher.group(1); value = formatSymbol(symbolName); prefix = replacedString.substring(0, symbolMatcher.start()); suffix = replacedString.substring(symbolMatcher.end()); replacedString = prefix + value + suffix; int replacementEnd = symbolMatcher.start() + value.length(); startingPosition = Math.min(replacementEnd, replacedString.length()); }
public void testAppendNoSuchKey() throws Exception { final String key="append.missing"; assertFalse(client.append(0, key, "es").get()); assertNull(client.get(key)); }
public void simpleInputAndOutputFailing() throws Exception { makeTables( "!|scenario|echo|input|giving|output|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|script|\n" + "|echo|7|giving|8|\n" ); Map<String, Object> pseudoResults = SlimCommandRunningClient.resultToMap( list( list("scriptTable_id_0/scriptTable_s_id_0", "7") ) ); Assertion.evaluateExpectations(assertions, pseudoResults); String scriptTable = script.getChildren().get(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output], [check, echo, 7, fail(a=7;e=8)]]"; assertEquals(expectedScript, scriptTable); String dtHtml = script.getTable().toString(); assertEquals(0, getTestSummary().getRight()); assertEquals(1, getTestSummary().getWrong()); assertEquals(0, getTestSummary().getIgnores()); assertEquals(0, getTestSummary().getExceptions()); }
public void setUp() throws Exception { LOG.info("STARTING quorum {}", getClass().getName()); qb.localSessionsEnabled = true; qb.localSessionsUpgradingEnabled = false; qb.setUp(); ClientBase.waitForServerUp(qb.hostPort, 10000); }
static void usage() { System.err.println("ZooKeeper -server host:port cmd args"); for (String cmd : commandMap.keySet()) { System.err.println("\t"+cmd+commandMap.get(cmd));
public void gotData(String k, int flags, byte[] data) { assert key.equals(k) : "Wrong key returned"; val=transcoder.decode(new CachedData(flags, data)); }});
public String matchMessage(String actual, String expected) { if (actual == null) return "NULL"; if (actual.equals(replaceSymbols(expected))) return expected; Comparator c = new Comparator(actual, expected); return c.evaluate(); }
WikiPage addPage(WikiPage context, WikiPagePath path); String getRelativeName(WikiPage base, WikiPage page); boolean isRoot(WikiPage page); WikiPage getRoot(WikiPage page); void traverse(WikiPage root, TraversalListener<? super WikiPage> pageCrawlerTest); WikiPage getSiblingPage(WikiPage page, WikiPagePath pathRelativeToSibling); WikiPage findAncestorWithName(WikiPage page, String name); }
public void testComplete(TestPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) { System.out.println(new WikiPagePath(test.getSourcePage()).toString() + " r " + testSummary.right + " w " + testSummary.wrong + " e " + testSummary.exceptions
public abstract Object getInstance(String instanceName); public abstract boolean stopHasBeenRequested(); public abstract void reset(); public abstract void setInstance(String actorInstanceName, Object actor); }
private String SafeXmlString(String text) { if (EmptyUtils.isNullOrEmpty(text)) { return text; } StringBuilder sb = new StringBuilder(); char ch; for (int i = 0; i < text.length(); i++) { ch = text.charAt(i); if(((ch >= 0x20) && (ch <= 0xD7FF)) || (ch == 0x9) || (ch == 0xA) || (ch == 0xD) || ((ch >= 0xE000) && (ch <= 0xFFFD))) { sb.append(ch); } } return sb.toString(); }
public void shouldDoNothingIfTheMethodAsksForValidationOfNoParams() throws NoSuchMethodException, InterceptionException, IOException { final ResourceMethod method = mockery.methodFor(Car.class, "paintWithoutValidate", Door.class); mockery.checking(new Expectations() { { one(stack).next(method, null); } }); interceptor.intercept(stack, method, null); mockery.assertIsSatisfied();
public void testPRequest() throws Exception { pLatch = new CountDownLatch(1); processor = new PrepRequestProcessor(zks, new MyRequestProcessor()); Request foo = new Request(null, 1L, 1, OpCode.create, ByteBuffer.allocate(3), null); processor.pRequest(foo); assertEquals("Request should have marshalling error", new ErrorTxn(KeeperException.Code.MARSHALLINGERROR.intValue()), outcome.getTxn()); assertTrue("request hasn't been processed in chain", pLatch.await(5, TimeUnit.SECONDS)); }
protected void dumpNodes(int count) { for (int i = 0; i < count; i++) { WriteLock node = nodes[i];
private SlimAssertion callUnreportedFunction(String functionName, int row) { return makeAssertion(callFunction(getTableName(), functionName), new SilentReturnExpectation(0, row));
public void testPageWasRenamed() throws Exception { String originalName = "OneOne"; WikiPagePath originalPath = PathParser.parse(originalName); String renamedName = "WonWon"; WikiPagePath renamedPath = PathParser.parse(renamedName); PageCrawler crawler = root.getPageCrawler(); WikiPageUtil.addPage(root, originalPath, "Content"); assertTrue(crawler.pageExists(originalPath)); assertFalse(crawler.pageExists(renamedPath)); doRename(originalName, renamedName, true); assertTrue(crawler.pageExists(renamedPath)); assertFalse(crawler.pageExists(originalPath)); }
public void multiplePageMatch() throws Exception { pageFinder = pageFinder(matchAll()); pageFinder.search(root); hits.assertPagesFound(root.getName(), pageOne.getName(), childPage.getName(), virtualPage.getName()); }
public String buildLink(String body, Symbol symbol) { String reference = symbol.childAt(0).getContent(); String url = symbol.getContent() + reference; HtmlTag tag = new HtmlTag("a", body); tag.addAttribute("href", reference.startsWith("files/") ? "/" + reference : url); return tag.htmlInline();
private boolean addChildHtml(StringBuffer buffer, int depth) throws Exception { boolean addedTag = false; boolean lastAddedWasNonTag = false; int i = 0; for(HtmlElement element : childTags) { if(element instanceof HtmlTag) { if ((i == 0 || lastAddedWasNonTag) && !isInline) buffer.append(endl); buffer.append(((HtmlTag) element).html(depth + 1)); addedTag = true; lastAddedWasNonTag = false; } else { buffer.append(element.html()); lastAddedWasNonTag = true; } i++; } return addedTag; }
public boolean isLocalSession(long sessionId) { return localSessionTracker != null && localSessionTracker.isTrackingSession(sessionId);
public void start() throws MetricsProviderLifeCycleException { try { LOG.info("Starting /metrics HTTP endpoint at port {} exportJvmInfo: {}", port, exportJvmInfo);
private List<SlimAssertion> startActor(int row) { int classNameColumn = 1; String cellContents = table.getCellContents(classNameColumn, row); String className = Disgracer.disgraceClassName(cellContents); return list(constructInstance("scriptTableActor", className, classNameColumn, row)); }
<T> Serializer from(T object, String alias); Serializer exclude(String... names); Serializer include(String... names);  Serializer recursive();  void serialize(); }
public Response makeResponse(FitNesseContext context, Request request) { SimpleResponse response = new SimpleResponse(400); HtmlPage html = context.htmlPageFactory.newPage(); HtmlUtil.addTitles(html, "Error Occured"); if (exception != null) html.setMainContent(new HtmlTag("pre", makeExceptionString(exception)).html()); if (message != null) html.setMainContent(makeErrorMessage()); response.setContent(html.html()); return response; }
Collection<Operation> clone(KeyedOperation op);  TapOperation tapBackfill(String id, long date, OperationCallback cb);  TapOperation tapCustom(String id, RequestMessage message, OperationCallback cb);  TapOperation tapAck(TapOpcode opcode, int opaque, OperationCallback cb);  TapOperation tapDump(String id, OperationCallback cb); }
public void process() { for (FileItem item : items) { if (item.isFormField()) {
private SimpleResponse makeResponse(SuiteOverviewTree treeview, WikiPagePath path, Request request) { SimpleResponse response = new SimpleResponse(); HtmlPage page = context.pageFactory.newPage(); page.setTitle("Suite Overview"); page.setPageTitle(new PageTitle("Suite Overview", path)); page.put("treeRoot", treeview.getTreeRoot()); page.put("viewLocation", request.getResource()); page.setMainTemplate("suiteOverview.vm"); response.setContent(page.html()); return response; }
public void start() throws IOException { slimRunner.asynchronousStart(); slimClient = new SlimClient(descriptor.determineSlimHost(), descriptor.getSlimPort()); try { waitForConnection();
long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
public void scenarioHasExtraArgumentsThatAreIgnored() throws Exception { makeTables( "!|scenario|echo|input|giving|output||output2|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|DT:EchoGiving|\n" + "|input|output|\n" + "|7|7|\n" ); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("decisionTable_did_0/scriptTable_s_id_0", "7") ) ); evaluateExpectations(pseudoResults); String scriptTable = dt.getChildren().get(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output, , output2], [check, echo, 7, pass(7)]]"; assertEquals(expectedScript, scriptTable); String dtHtml = dt.getTable().toString(); }
public boolean accepts(Method method) { return isEligible(method) && !isGetter(method); }
public String getForwardFor(String key); public List<String> getConverters(); public boolean hasPlugin(String type); }
void testStarted(TestPage testPage); void testComplete(TestPage testPage, TestSummary testSummary); void testSystemStopped(TestSystem testSystem, Throwable cause ); void testAssertionVerified(Assertion assertion, TestResult testResult); void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); }
public void tearDown() throws Exception { LOG.info("STOPPING quorum " + getClass().getName()); }
public static String join(List strings, String delimiter) { if(strings.isEmpty()) return ""; Iterator i = strings.iterator(); StringBuffer joined = new StringBuffer((String) i.next()); while(i.hasNext()) { String eachLine = (String) i.next(); joined.append(delimiter); joined.append(eachLine); } return joined.toString(); }
private String invokeResponder(MockRequest request) throws Exception { Response response = responder.makeResponse(new FitNesseContext(root), request); MockResponseSender sender = new MockResponseSender(); sender.doSending(response); return sender.sentData(); }
public static void cleanup() { if (keytabFile != null) { FileUtils.deleteQuietly(keytabFile); } cleanupJaasConfig(); }
private void deleteFileIfAppropriate(Date purgeOlder, File file) { if (file.isDirectory()) { File[] files = FileUtil.getDirectoryListing(file);
Mutator getType();  int getBy();  long getDefault();  int getExpiration(); }
public void simpleInputAndOutputPassing() throws Exception { makeTables( "!|scenario|echo|input|giving|output|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|DT:EchoGiving|\n" + "|input|output|\n" + "|7|7|\n" ); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("scriptTable_did.0_0", "7") ) ); evaluateExpectations(pseudoResults); String scriptTable = dt.getChild(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output], [check, echo, 7, pass(7)]]"; assertEquals(expectedScript, scriptTable); String dtHtml = dt.getTable().toString(); assertSubString("<span id=\"test_status\" class=pass>Scenario</span>", dtHtml); assertEquals(1, dt.getTestSummary().right); assertEquals(0, dt.getTestSummary().wrong); assertEquals(0, dt.getTestSummary().ignores); assertEquals(0, dt.getTestSummary().exceptions); }
public void translatesLiteralNestedTable() { ParserTestHelper.assertTranslatesTo("!|${x}|\n", new TestVariableSource("x", "|y|\n"), tableWithCell("|y|")); }
public void whenPluginsDirectoryDoesNotExist() { try { PluginsClassLoader pluginsClassLoader = new PluginsClassLoader();
public void whenPageDirectoryHasResultsRepsonseShouldShowSummary() throws Exception { File pageDirectory = addPageDirectory("SomePage"); addTestResult(pageDirectory, "20090418123103_1_2_3_4"); addTestResult(pageDirectory, "20090419123103_1_0_0_0"); makeResponse(); assertHasRegexp("SomePage", response.getContent()); assertHasRegexp("<td class=\"pass\">1</td>", response.getContent()); assertHasRegexp("<td class=\"fail\">1</td>", response.getContent()); assertHasRegexp("<td>19 Apr, 09 12:31</td>", response.getContent()); assertHasRegexp("<td class=\"pass\">.*\\+.*</td>", response.getContent()); assertHasRegexp("<td class=\"fail\">.*-.*</td>", response.getContent()); assertDoesntHaveRegexp("No History", response.getContent());
public void testFormatInetAddrGoodHostname() { InetSocketAddress isa = new InetSocketAddress("localhost", 1234); assertThat(NetUtils.formatInetAddr(isa), equalTo("localhost:1234")); }
public void destroyContainer() { container.stop(); container = null; RequestContextHolder.resetRequestAttributes(); VRaptorRequestHolder.resetRequestForCurrentThread(); }
public void removeLastChild() { children.remove(children.size() - 1); }
public DeleteOperation delete(String key, int when, OperationCallback operationCallback) { return new DeleteOperationImpl(key, operationCallback); }
String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); void appendCellToRow(int row, Table table); void setTestStatusOnRow(int row, boolean testStatus); }
public long getMinRequestLatency();  public long getAvgRequestLatency();  public long getMaxRequestLatency();  public long getPacketsReceived();  public long getPacketsSent();  public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency(); }
public static AuthDescriptor typical(String u, String p) { return new AuthDescriptor(new String[] { "CRAM-MD5", "PLAIN" }, new PlainCallbackHandler(u, p));
public void remove() { } @Path("/clients/head") @Head public void head() { } public void add() { } @Path("/protectMe") protected void protectMe() { } @Path("/staticMe") public static void staticMe() { } } @Test public void shouldAcceptAPublicNonStaticNonAnnotatedMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/add", "POST"); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("add")))); mockery.assertIsSatisfied(); } @Test public void shouldIgnoreAResourceWithTheWrongWebMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/clients/remove", "POST"); assertThat(method, is(Matchers.nullValue())); mockery.assertIsSatisfied(); } @Test public void shouldAcceptAResultWithASpecificWebMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/clients/head", "HEAD"); assertThat(method.getMethod(), is(equalTo(Clients.class.getMethod("head")))); mockery.assertIsSatisfied(); } }
public static void createTestDir() throws IOException { workDir = createTmpDir( new File(System.getProperty("build.test.dir", "build")));
public String toString() { StringWriter sw = new StringWriter(); PrintWriter pwriter = new PrintWriter(sw); dumpSessions(pwriter); pwriter.flush(); pwriter.close(); return sw.toString(); }
public abstract String addTo(String originalValue, Object value, int numberofTime); public abstract Object validate(String value) throws InvalidInputException; static DataType instance(String dataType) throws InvalidInputException { Object type = types.get(dataType.toLowerCase()); if (type == null) { type = STRING; } return (DataType) type; } }
public boolean include(Artifact artifact) { return !artifact.isOptional(); }
BlockingQueue<OperationImpl> createOperationQueue();  NodeLocator createLocator(List<MemcachedNode> nodes); }
public boolean decodeBoolean(byte[] in) { assert in.length == 1 : "Wrong length for a boolean"; return in[0] == 1; }
private void loadCipher(LinkedList lines) throws Exception { if(lines.size() > 0) {
public State update(String... filePaths) throws RevisionControlException; public PageData getRevisionData(FileSystemPage page, String label) throws Exception; public Collection<VersionInfo> history(FileSystemPage page) throws Exception; public VersionInfo makeVersion(FileSystemPage page, PageData data) throws Exception; public void removeVersion(FileSystemPage page, String versionName) throws Exception; public State getState(String state); public void prune(FileSystemPage page) throws Exception; public State execute(RevisionControlOperation operation, String... filePaths) throws RevisionControlException; public boolean isExternalReversionControlEnabled(); }
public JSONSerialization indented() { builder.indented(); return this; }
public void setup() { MockitoAnnotations.initMocks(this); FilterChain chain = mock(FilterChain.class); final RequestInfo webRequest = new RequestInfo(context, chain, request, null); jstlLocalization = new JstlLocalization(webRequest); converter = new LocaleBasedDoubleConverter(jstlLocalization); bundle = ResourceBundle.getBundle("messages"); Locale.setDefault(Locale.ENGLISH); }
private boolean beanCanBeHandledBy(BeanDefinition beanDefinition, StereotypeHandler stereotypeHandler) { if (!(beanDefinition instanceof AnnotatedBeanDefinition)) return false; AnnotationMetadata metadata = ((AnnotatedBeanDefinition) beanDefinition).getMetadata(); if (!metadata.hasAnnotation(stereotypeHandler.stereotype().getName())) return false; LOGGER.info("found component annotated with @" + stereotypeHandler.stereotype() + ": " + beanDefinition.getBeanClassName()); return true; }
public void buildsHelp() throws Exception { assertBuildsOption("PlainItem", new String[]{"Help=help"}, "-h", "HELP_TOC", "<a href=\"PlainItem\">PlainItem</a><span class=\"pageHelp\">: help</span>"); }
public void shouldUseContainerForNewComponent() throws InterceptionException, IOException { final DogController myDog = new DogController(); InstanceContainer container = new InstanceContainer(myDog); InstantiateInterceptor interceptor = new InstantiateInterceptor(container); final InterceptorStack stack = mockery.mock(InterceptorStack.class); final ResourceMethod method = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations() { { one(stack).next(method, myDog); one(method).getResource(); will(returnValue(new DefaultResourceClass(DogController.class))); } }); interceptor.intercept(stack, method, null); assertTrue(container.isEmpty()); mockery.assertIsSatisfied(); }
synchronized public void incrementPacketsSent() { packetsSent++; }
public void shouldNotDoAnythingIfHasNoClasses() { Collection<String> classNames = emptyList(); new DynamicWebAppBootstrap(classNames).configure(registry); verify(registry, never()).deepRegister(any(Class.class)); }
<T> CASValue<T> getAndLock(String key, int exp, Transcoder<T> tc); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException { if(jersey.isMine(req)) {
public void shouldGetPagesFromPageContent() throws Exception { String page = "<table><tr><td>Suite</td></tr><tr><td>Title</td><td>Test</td></tr><tr><td>Content</td><td>has.*content</td></tr></table>"; assertTrue(runner.getPageListFromPageContent(page)); assertEquals(2, runner.testPageList.size()); }
public void scansLists() { ParserTest.assertScansTokenType(" * item", SymbolType.List, true); ParserTest.assertScansTokenType(" * item", SymbolType.List, true); ParserTest.assertScansTokenType("* item", SymbolType.List, false); }
public void initialHashDoesNothing() throws Exception { buildInstructionsFor("|!-#comment-!|blah|blah|\n"); List<Object> expectedInstructions = list(); assertEquals(expectedInstructions, instructions); }
private static FitNesseContext loadContext(Arguments arguments) throws Exception { Builder builder = new Builder(); ComponentFactory componentFactory = new ComponentFactory(arguments.getRootPath());
private void writeResult(String testName, String resultXml) throws IOException { String finalPath = getXmlFileName(testName); try (Writer fw = new BufferedWriter( new OutputStreamWriter(
MemcachedNode createMemcachedNode(SocketAddress sa, SocketChannel c, int bufSize);  BlockingQueue<Operation> createOperationQueue();  BlockingQueue<Operation> createReadOperationQueue();  BlockingQueue<Operation> createWriteOperationQueue();  long getOpQueueMaxBlockTime();  NodeLocator createLocator(List<MemcachedNode> nodes);  OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon();  boolean useNagleAlgorithm();  Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode();  Transcoder<Object> getDefaultTranscoder();  boolean shouldOptimize();  int getReadBufSize();  HashAlgorithm getHashAlg();  long getMaxReconnectDelay();  AuthDescriptor getAuthDescriptor();  int getTimeoutExceptionThreshold();  MetricType enableMetrics();  MetricCollector getMetricCollector(); }
public void toString_should_return_string_which_contains_the_double_when_value_is_a_double() { Double value = 1.7320508; String current = converter.toString(value); assertEquals(value.toString(), current); }
public void setUp() throws Exception { MockitoAnnotations.initMocks(this); resolver = new DefaultFormatResolver(request, acceptHeaderToFormat); }
public DateMidnight convert(String value, Class<? extends DateMidnight> type, ResourceBundle bundle) { try { DateTime out = new LocaleBasedJodaTimeConverter(localization).convert(value, shortDate());
public final ContentHandler createContentHandler() { try { TransformerHandler handler = saxtf.newTransformerHandler(templates);
private synchronized void setupContainerManager() { containerManager = new ContainerManager( getZKDatabase(),
protected TestResult createEvaluationMessage(String actual, String expected) { TestResult testResult = super.createEvaluationMessage(actual, expected); if (testResult != null) return testResult.negateTestResult(); return null; }
private DateAlteringClock monotonicIncreasingClock() { return new DateAlteringClock(Clock.currentDate()) { private long tick = 0;
SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
public void shouldMatchQueryFromLeftToRight() throws Exception { makeQueryTableAndBuildInstructions("|" + tableType() + ":fixture|argument|\n" + "|x|n|2n|\n" + "|1|2|4|\n" + "|2|3|6|\n"); Map<String, Object> pseudoResults = SlimCommandRunningClient.resultToMap( asList( asList("queryTable_id_0", "OK"), asList("queryTable_id_1", "blah"), asList("queryTable_id_2", asList( asList( asList("x", "1"), asList("n", "3"), asList("2n", "6")))))); evaluateResults(pseudoResults, "[" + headRow +
public void tableWithBadConstructorHasException() throws Exception { getResultsForTable( "|DT:fitnesse.slim.test.TestSlim|badArgument|\n" + "|returnConstructorArgument?|\n" + "|3|\n" ); assertTestResultsContain("Could not invoke constructor"); assertTestResultsContain("expected <DT:fitnesse.slim.test.TestSlim>"); }
public void functionCallWithSequentialArgumentProcessingEmbedded() throws Exception { buildInstructionsFor("|set name|Marisa|department and title;|QA|Tester|\n"); List<CallInstruction> expectedInstructions = list( new CallInstruction("htmlScriptTable_id_0", "htmlScriptTableActor", "setNameDepartmentAndTitle", new Object[]{"Marisa", "QA", "Tester"}) ); assertEquals(expectedInstructions, instructions()); }
private FitClient startClient(Socket socket) throws IOException, InterruptedException { FitClient client = new FitClient(this); client.acceptSocket(socket); return client; }
private void startTestSystemAndExecutePages(Descriptor descriptor, List<WikiPage> testSystemPages) throws IOException, InterruptedException { TestSystem testSystem = null; try { if (!isStopped) {
public static byte[] certAndPrivateKeyToJavaKeyStoreBytes( X509Certificate cert, PrivateKey privateKey, String keyPassword) throws IOException, GeneralSecurityException { KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType()); char[] keyPasswordChars = keyPassword == null ? new char[0] : keyPassword.toCharArray(); keyStore.load(null, keyPasswordChars); keyStore.setKeyEntry( "key", privateKey, keyPasswordChars, new Certificate[] { cert }); ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); keyStore.store(outputStream, keyPasswordChars); outputStream.flush(); byte[] result = outputStream.toByteArray(); outputStream.close(); return result; }
protected SlimTestContextImpl createTestContext(TestPage testPage) { String fullPath = testPage.getFullPath(); SlimScenarioUsagePer usageByPage = usage.getUsageByPage(fullPath); return new SlimCoverageTestContextImpl(usageByPage); }
public void testTestSummary() throws Exception { String summary = formatter.testSummary(new TestSummary(4, 0, 0, 0)); assertSubString("<script>document.getElementById(\"test-summary\").innerHTML =", summary); assertSubString("<strong>Assertions:</strong> 4 right, 0 wrong, 0 ignored, 0 exceptions", summary); assertSubString("document.getElementById(\"test-summary\").className = \"pass\"", summary); summary = formatter.testSummary(new TestSummary(4, 1, 0, 0)); assertSubString("<strong>Assertions:</strong> 4 right, 1 wrong, 0 ignored, 0 exceptions", summary); assertSubString("document.getElementById(\"test-summary\").className = \"fail\"", summary); }
public void toInherit() { } } @Test public void shouldFindAPublicNonStaticNonAnnotatedMethodWithTheSameNameAsTheGivenId() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/Clients/add", "POST"); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("add")))); mockery.assertIsSatisfied(); } @Test public void shouldIgnoreAResourceWithTheWrongWebMethod() throws SecurityException { ResourceMethod method = lookuper.methodFor("/clients/remove", "POST"); assertThat(method, is(Matchers.nullValue())); mockery.assertIsSatisfied(); } @Test public void shouldAcceptAResultWithASpecificWebMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/clients/head", "HEAD"); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("head")))); mockery.assertIsSatisfied(); } static class NiceClients extends Clients { } public void findsInheritedMethodsWithDefaultNames() throws SecurityException, NoSuchMethodException { this.resource = mockery.resource(NiceClients.class); this.lookuper = new DefaultResourceAndMethodLookup(resource); ResourceMethod method = lookuper.methodFor("/NiceClients/toInherit", "POST"); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("toInherit")))); mockery.assertIsSatisfied(); } }
public void allTestingComplete(TimeMeasurement totalTimeMeasurement) throws Exception { super.allTestingComplete(totalTimeMeasurement); if (writerFactory != null) writer = writerFactory.getWriter(context, page, getPageCounts(), suiteTime); VelocityContext velocityContext = new VelocityContext(); velocityContext.put("suiteExecutionReport", suiteExecutionReport); VelocityEngine velocityEngine = VelocityFactory.getVelocityEngine(); Template template = velocityEngine.getTemplate("suiteHistoryXML.vm"); template.merge(velocityContext, writer); writer.close(); }
public void addingAValidDvd() throws Exception { Dvd dvd = new Dvd(); dvd.setDescription("A random description"); dvd.setTitle("Once upon a time"); dvd.setType(DvdType.VIDEO); willAddTheDvd(dvd); controller.add(dvd, null);
public void testBasic() throws IOException, KeeperException, InterruptedException { String name = "/foo"; zk.create(name, name.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); Stat stat; stat = newStat(); zk.getData(name, false, stat); Assert.assertEquals(stat.getCzxid(), stat.getMzxid()); Assert.assertEquals(stat.getCzxid(), stat.getPzxid()); Assert.assertEquals(stat.getCtime(), stat.getMtime()); Assert.assertEquals(0, stat.getCversion()); Assert.assertEquals(0, stat.getVersion()); Assert.assertEquals(0, stat.getAversion()); Assert.assertEquals(0, stat.getEphemeralOwner()); Assert.assertEquals(name.length(), stat.getDataLength()); Assert.assertEquals(0, stat.getNumChildren()); }
public void shouldCallCloseOnClosableTestSystemListener() throws IOException, InterruptedException { WikiPage testPage = addTestPage(suite, "TestPage1", "!define TEST_SYSTEM {A}"); ClosableTestSystemListener listener = mock(ClosableTestSystemListener.class); MultipleTestsRunner runner = new MultipleTestsRunner(asList(testPage), context, testSystemFactory); runner.addTestSystemListener(listener); runner.executeTestPages(); verify(listener).close(); }
public void testGetContent() throws Exception { WikiPagePath alpha = PathParser.parse("AlphaAlpha"); WikiPage a = crawler.addPage(root, alpha, "a"); PageData data = a.getData(); assertEquals("a", data.getContent()); }
public String toString(Object object) { if (object == null) return "null"; return toImageLink((File) callReflectively("toGraphic",new Object[]{},new Class[]{},object));
String defaultTestRunner() { String testSystemType = getTestSystem(); if ("slim".equalsIgnoreCase(testSystemType)) return "fitnesse.slim.SlimService";
private String buildSetTraceMaskRequest(long mask) throws IOException { ByteArrayOutputStream baos = null; DataOutputStream dos = null; try { baos = new ByteArrayOutputStream(); dos = new DataOutputStream(baos); dos.writeBytes("stmk"); dos.writeLong(mask); } finally { IOUtils.closeStream(dos); IOUtils.closeStream(baos); } return new String(baos.toByteArray()); }
public String getVariable(String name) throws Exception { Maybe<String> local = getLocalVariable(name); return local.isNothing() ? getInitializedVariableRoot().getVariable(name) : local.getValue(); }
private static String makeFixtureTable(String table[][]) { StringBuffer buf = new StringBuffer(); buf.append("<table>\n"); for (String[] row : table) { buf.append(" <tr>"); for (String cell : row) { buf.append("<td>").append(cell).append("</td>"); } buf.append("</tr>\n"); } buf.append("</table>\n"); return buf.toString(); }
public void shouldNotComplainAboutEmpty() { assertThat(converter.convert("", BigDecimal.class, bundle), is(nullValue())); }
private ParametersControl build() { return new DefaultParametersControl(originalUri, parameters); }
public void configureAutoUpdateSetting(WikiPage page) throws Exception { PageData data = page.getData(); WikiPageProperties props = data.getProperties(); WikiImportProperty importProps = WikiImportProperty.createFrom(props); if (importProps != null) configureAutoUpdateSetting(importProps, data, page);
public void testComplete(WikiTestPage test, TestSummary testSummary) { LOG.info(new WikiPagePath(test).toString() + " r " + testSummary.getRight() + " w " + testSummary.getWrong() + " " + testSummary.getExceptions()
public void setUp() throws Exception { mRand = new Random(); }
public void testRejection() throws Exception { String testDataPath = System.getProperty("test.data.dir", "src/test/resources/data");
public void startRecord(String tag) throws IOException {} public void endRecord(String tag) throws IOException {} public Index startVector(String tag) throws IOException { int len = readInt(tag); if (len == -1) { return null; } return new BinaryIndex(len); } public void endVector(String tag) throws IOException {} public Index startMap(String tag) throws IOException { return new BinaryIndex(readInt(tag)); } public void endMap(String tag) throws IOException {} }
public void is(Class<?> type, Method method) { addParametersInfo(method); this.strategy = new FixedMethodStrategy(originalUri, type, method, this.supportedMethods, builder.build(), priority); logger.info(originalUri + " -> " + method.getDeclaringClass().getSimpleName() + "." + method.getName() + argumentsToString(method.getParameterTypes()));
public void doExecuteTests() throws Exception { sendPreTestNotification(); performExecution(); exitCode = formatters.getErrorCount(); }
public File compilerInterface(String sbtVersion, File interfaceSrcJar, File xsbtiJar, sbt.ScalaInstance scalaInstance, xsbti.Logger log) { File componentDir = new File(SBT_INC_DIR, sbtVersion); String id = COMPILER_INTERFACE_ID + "-" + scalaInstance.actualVersion() + "-" + JAVA_VERSION; File interfaceDir = new File(componentDir, id); interfaceDir.mkdirs(); File interfaceJar = new File(interfaceDir, COMPILER_INTERFACE_ID + ".jar"); if (!interfaceJar.exists()) { IC.compileInterfaceJar(COMPILER_INTERFACE_ID, interfaceSrcJar, interfaceJar, xsbtiJar, scalaInstance, log); } return interfaceJar; }
public void remove() { } @Path("/clients/head") @Head public void head() { } public void add() { } @Path("/protectMe") protected void protectMe() { } @Path("/staticMe") public static void staticMe() { } } static class NiceClients extends Clients { } @Test public void shouldFindAPublicNonStaticNonAnnotatedMethodWithTheSameNameAsTheGivenId() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/Clients/add", "POST"); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("add")))); mockery.assertIsSatisfied(); } @Test public void shouldIgnoreAResourceWithTheWrongWebMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/clients/remove", "POST"); assertThat(method, is(Matchers.nullValue())); mockery.assertIsSatisfied(); } @Test public void shouldAcceptAResultWithASpecificWebMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/clients/head", "HEAD"); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("head")))); mockery.assertIsSatisfied(); } }
public void verifyGetChildrenSingle() { StringCB parent = createNode(); StringCB child = createNode(parent); path = parent.path; children.add(child.nodeName()); verify(); }
public void execute() throws InterceptionException { LOG.debug("executing stack DefaultRequestExecution"); interceptorStack.add(MultipartInterceptor.class); interceptorStack.add(JerseyResourceLookupInterceptor.class); interceptorStack.add(FlashInterceptor.class); interceptorStack.add(InterceptorListPriorToExecutionExtractor.class); interceptorStack.add(InstantiateInterceptor.class); interceptorStack.add(InstantiateComponentInterceptor.class); interceptorStack.add(ParametersInstantiatorInterceptor.class); interceptorStack.add(DeserializingInterceptor.class); interceptorStack.add(ExceptionHandlerInterceptor.class); interceptorStack.add(ExecuteMethodInterceptor.class); interceptorStack.add(OutjectResult.class); interceptorStack.add(DownloadInterceptor.class); interceptorStack.add(ForwardToDefaultViewInterceptor.class); interceptorStack.next(null, null); }
public void testJdkSplit() throws Exception { assertEquals(6, "hello".split("|").length); assertEquals(1, "hello".split("\\|").length); assertEquals(2, "hel|lo".split("\\|").length); assertEquals(3, "hel||lo".split("\\|").length); }
protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Intent i = getIntent(); prefs = PreferenceManager.getDefaultSharedPreferences(this); mRememberKeyfile = prefs.getBoolean(getString(R.string.keyfile_key), getResources().getBoolean(R.bool.keyfile_default)); new InitTask().execute(i); }
public void acquiredTopic(ByteString topic, Callback<Void> callback, Object ctx) { queuer.pushAndMaybeRun(topic, new AcquireOp(topic, callback, ctx)); }
Map<SocketAddress, Map<String, String>> getStats(); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, int def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key, int hold); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
public void testOutputStreamSuccessNE() throws IOException { File target = new File(tmpdir, "target.txt"); final File tmp = new File(tmpdir, "target.txt.tmp"); target.delete(); assertFalse(target.exists(), "file should not exist"); new AtomicFileWritingIdiom(target, new OutputStreamStatement() { @Override public void write(OutputStream os) throws IOException { os.write("after".getBytes(StandardCharsets.US_ASCII)); assertTrue(tmp.exists(), "implementation of AtomicFileOutputStream has changed, update the test"); } });
public void testJsonObject() { WhalinV1Transcoder transcoder = ((WhalinV1Transcoder)getTranscoder()); String json = "{\"aaaaaaaaaaaaaaaaaaaaaaaaa\":" + "\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}"; transcoder.setCompressionThreshold(8); CachedData cd = transcoder.encode(json); assertFalse("Flags shows JSON was compressed", (cd.getFlags() & (1L << WhalinV1Transcoder.COMPRESSED)) != 0); assertTrue("JSON was incorrectly encoded", Arrays.equals(json.getBytes(), Arrays.copyOfRange(cd.getData(), 1, cd.getData().length))); assertEquals("JSON was harmed, should not have been", json, transcoder.decode(cd));
public static void tearDownAfterClass() { System.clearProperty(ZKAuditProvider.AUDIT_ENABLE); for (int i = 0; i < SERVER_COUNT; i++) { try {
public void testCreatingWatchedEvent() {
int size();  void shutdown();  WatchesSummary getWatchesSummary();  WatchesReport getWatches();  WatchesPathReport getWatchesByPath();  void dumpWatches(PrintWriter pwriter, boolean byPath); }
public synchronized void reloginFromTicketCache(final String loginContextName, LoginContext loginContext) throws LoginException { if (!(isKrbTicket && isUsingTicketCache)) { return; } if (loginContext == null) { throw new LoginException("login must be done first"); } String principalName = getPrincipalName(); try { LOG.info("Logging out " + principalName);
public void shouldReturnHtmlWhenRequestingAnyContentType() { Assert.assertEquals("html", mimeTypeToFormat.getFormat("*/*")); }
private void sendPage(WikiTestPage testPage, FitClient client) throws IOException, InterruptedException { String pageName = page.getPageCrawler().getRelativeName(testPage.getSourcePage()); String testableHtml = testPage.getDecoratedData().getHtml(); String sendableHtml = pageName + "\n" + testableHtml; client.send(sendableHtml); }
public void initHelper() throws Exception { String outputPath = new File(System.getProperty("java.io.tmpdir"), "fitnesse").getAbsolutePath(); helper = new JUnitHelper(new TestRunner(new FitNesseRepository("."), new FitTestEngine(), outputPath));
public void pageTitleWithTypeButNoResourceHasTypeAndTitleButNoLinkOrBreadCrumbs() throws Exception { PageTitle pt = new PageTitle("Title"); assertEquals("Title", pt.getTitle()); assertNull(pt.getLink()); assertEquals("Title", pt.getPageType()); assertEquals(0, pt.getBreadCrumbs().size()); }
<T> T proxify(Class<T> type, MethodInvocation<? super T> handler); }
public void simpleInputAndOutputFailing() throws Exception { makeTables( "!|scenario|echo|input|giving|output|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|script|\n" + "|echo|7|giving|8|\n" ); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("scriptTable_id.0_0", "7") ) ); evaluateExpectations(pseudoResults); String scriptTable = script.getChild(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output], [check, echo, 7, [7] fail(expected [8])]]"; assertEquals(expectedScript, scriptTable); String dtHtml = script.getTable().toString(); assertSubString("<span id=\"test_status\" class=fail>Scenario</span>", dtHtml); assertEquals(0, script.getTestSummary().right); assertEquals(1, script.getTestSummary().wrong); assertEquals(0, script.getTestSummary().ignores); assertEquals(0, script.getTestSummary().exceptions); }
public void testAuthCheck_authorized(final AuthSchema authSchema) throws Exception { setupRootACL(authSchema); try { final HttpURLConnection authTestConn = sendAuthTestCommandRequest(authSchema, true);
public static Collection formatters() throws Exception { WikiPage root = InMemoryPage.makeRoot("RooT"); FitNesseContext context = FitNesseUtil.makeTestContext(root); ChunkedResponse response = mock(ChunkedResponse.class); WikiPageDummy page = new WikiPageDummy("testPage", "testContent"); XmlFormatter.WriterFactory writerFactory = mock(XmlFormatter.WriterFactory.class); TestTextFormatter testTextFormatter = new TestTextFormatter(response); XmlFormatter xmlFormatter = new XmlFormatter(context, page, writerFactory) { @Override protected void writeResults() { } }; TestHtmlFormatter testHtmlFormatter = new TestHtmlFormatter(context, page, mock(PageFactory.class)) { @Override protected void writeData(String output) { } }; PageHistoryFormatter pageHistoryFormatter = new PageHistoryFormatter(context, page, writerFactory) { protected void writeResults() { }; }; return Arrays.asList(new Object[][]{ {testTextFormatter},
public void testSetAndGetACL() throws Exception { create2EmptyNode(zkClient, PARENT_PATH); Assert.assertEquals( String.format("%s Node has open ACL", serverState), Ids.OPEN_ACL_UNSAFE, zkClient.getACL(PARENT_PATH, new Stat())); zkClient.setACL(PARENT_PATH, Ids.READ_ACL_UNSAFE, -1); Assert.assertEquals( String.format("%s Node has world read-only ACL", serverState),
public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize(); }
public void translatesWikiWords() throws Exception { ParserTestHelper.assertTranslatesTo(pageOne, "PageOne", wikiLink("PageOne", "PageOne")); ParserTestHelper.assertTranslatesTo(pageOneTwo, "PageOne2", wikiLink("PageOne.PageOne2", "PageOne2")); ParserTestHelper.assertTranslatesTo(pageOneThree, ".PageOne", wikiLink("PageOne", ".PageOne")); ParserTestHelper.assertTranslatesTo(pageOne, ">PageOne2", wikiLink("PageOne.PageOne2", "&gt;PageOne2")); ParserTestHelper.assertTranslatesTo(pageOneTwoThree, "<PageOne", wikiLink("PageOne", "&lt;PageOne")); }
public void testSubmitFormForLinkToExternalRootThatsMissing() throws Exception { request.addInput("linkName", "SymLink"); request.addInput("linkPath", "file:/testDir/ExternalRoot"); Response response = responder.makeResponse(FitNesseUtil.makeTestContext(root), request); assertEquals(404, response.getStatus()); String content = ((SimpleResponse) response).getContent(); assertSubString("Cannot create link to the file system path 'file:/testDir/ExternalRoot'.", content); assertSubString("Error Occured", content); }
public void testHead() throws Exception { doSimpleRun(passFixtureTable()); assertSubString("<div id=\"test-summary\"><div id=\"progressBar\">Preparing Tests ...</div></div>", results); }
private static void verifyLog(String expectedLog, String log) { String searchString = " - "; int logStartIndex = log.indexOf(searchString); String auditLog = log.substring(logStartIndex + searchString.length()); assertTrue(auditLog.endsWith(expectedLog)); }
public void createSlimServiceFailsFastWhenSlimPortIsNotAvailable() throws Exception { final int slimServerPort = 10258; ServerSocket slimSocket = new ServerSocket(slimServerPort); try { SlimClientBuilder sys = new SlimClientBuilder(root.getData(), getClassPath(root));
public void shouldNotComplainAboutNull() { assertThat(converter.convert(null, Boolean.class, bundle), is(nullValue())); }
public void shouldDeleteHistoryFromRequestForWikiPathWhenPurgeGlobalFalse() throws Exception { request.addInput("purgeGlobal", "false"); assertThatPurgeGlobalIsNotUsed(); }
public void testGetQuotaLimit() { assertEquals(0L, QuotaMetricsUtils.getQuotaLimit(0L, -1L)); assertEquals(1L, QuotaMetricsUtils.getQuotaLimit(-1L, 1L)); assertEquals(0L, QuotaMetricsUtils.getQuotaLimit(-2L, 0L)); }
protected void setUp() throws Exception { String hp = hostPort; hostPort = hostPort + "/chrootclienttest"; System.out.println(hostPort); super.setUp(); LOG.info("STARTING " + getName()); ZooKeeper zk = createClient(hp); try { zk.create("/chrootclienttest", null, Ids.OPEN_ACL_UNSAFE,
public void informAndActivate(Proposal proposal, long designatedLeader) { byte[] proposalData = proposal.packet.getData(); byte[] data = new byte[proposalData.length + 8]; ByteBuffer buffer = ByteBuffer.wrap(data); buffer.putLong(designatedLeader); buffer.put(proposalData); QuorumPacket qp = new QuorumPacket(Leader.INFORMANDACTIVATE, proposal.request.zxid, data, null); sendObserverPacket(qp); }
public void redirectPrefixExecutesClientRedirection() throws ServletException, IOException, NoSuchMethodException { mockery.checking(new Expectations() { { allowing(resource).getType(); will(returnValue(CommonComponentOld.class)); allowing(method).getMethod(); will(returnValue(CommonComponentOld.class.getMethod("base"))); one(config).getForwardFor("CommonComponentOld.base.ok"); will(returnValue("redirect:clientSide")); one(response).sendRedirect("clientSide"); } }); this.result.forward(); mockery.assertIsSatisfied(); }
void setHistoryDepth(int historyDepth);  FileVersion[] getRevisionData(String revision, File... files);  Collection<? extends VersionInfo> history(File... files);  VersionInfo makeVersion(FileVersion... fileVersion) throws IOException;  VersionInfo addDirectory(final FileVersion filePath) throws IOException;  void rename(FileVersion fileVersion, File originalFile) throws IOException;  void delete(FileVersion... files); }
private int byteToIntLittle(byte[] x, int offset) { return ((x[offset] & 255)) | ((x[offset + 1] & 255) << 8) |
public void setupsAreHidden() { String result = ParserTestHelper.translateTo(makePageThatIncludesSetup()); assertContains(result, "class=\"collapsible closed\""); assertContains(result, "<a href=\"PageTwo.SetUp\">"); }
private String buildReference(SourcePage sourcePage) { return sourcePage.getFullName(); }
WikiPage addPage(WikiPage context, WikiPagePath path, String content) throws Exception; WikiPage addPage(WikiPage context, WikiPagePath path) throws Exception; String getRelativeName(WikiPage base, WikiPage page) throws Exception; boolean isRoot(WikiPage page) throws Exception; WikiPage getRoot(WikiPage page) throws Exception; void traverse(WikiPage root, FitNesseTraversalListener pageCrawlerTest) throws Exception; }
public void visitTypeVariable(final String name) { declaration.append(name); endType(); }
public void testPageNotFound() throws Exception { String result = getResultFor("MissingPage"); assertSubString("MissingPage was not found", result); }
<T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by, long def, int exp); Future<Long> asyncIncr(String key, int by, long def, int exp); Future<Long> asyncDecr(String key, long by, long def, int exp); Future<Long> asyncDecr(String key, int by, long def, int exp); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Long> asyncIncr(String key, long by, long def); Future<Long> asyncIncr(String key, int by, long def); Future<Long> asyncDecr(String key, long by, long def); Future<Long> asyncDecr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); CountDownLatch broadcastOp(final BroadcastOpFactory of); CountDownLatch broadcastOp(final BroadcastOpFactory of, Collection<MemcachedNode> nodes);  Set<String> listSaslMechanisms(); }
boolean hasErrored();  OperationException getException();  OperationCallback getCallback();  void cancel();  OperationState getState();  ByteBuffer getBuffer();  void writing();  void writeComplete();  void initialize();  void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data);  MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to);  void timeOut();  boolean isTimedOut();  boolean isTimedOut(long ttlMillis);  boolean isTimedOutUnsent();  long getWriteCompleteTimestamp();  byte[] getErrorMsg();  void addClone(Operation op);  int getCloneCount();  void setCloneCount(int count); }
public String contents() throws Exception { String sentData = FitnesseFixtureContext.sender.sentData(); return Utils.escapeHTML(sentData); }
public void setup() { this.mockery = new VRaptorMockery(); this.result = mockery.mock(PageResult.class); this.provider = mockery.mock(ParametersProvider.class); this.errors = mockery.mock(ValidationErrors.class); this.validator = new Validator(this.provider, this.result, errors); this.stack = mockery.mock(InterceptorStack.class); }
public void testBooleanRetrievalFromPropertyWithWhitespacesAtEnd() { boolean value = true; boolean defaultValue = false; System.setProperty(x509Util.getSslProtocolProperty(), value + " "); ZKConfig conf = new ZKConfig(); boolean result = conf.getBoolean(x509Util.getSslProtocolProperty(), defaultValue); assertEquals(value, result); }
public void clear() { ZooInspectorTreeNode root = (ZooInspectorTreeNode) getRoot(); root.setNumDisplayChildren(0); root.removeAllChildren(); reload(); }
GetsOperation gets(String key, GetsOperation.Callback callback);  GetOperation get(Collection<String> value, GetOperation.Callback cb);  MutatatorOperation mutate(Mutator m, String key, int by, long def, int exp, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb); }
public synchronized void restartLeaderElection(QuorumVerifier qvOLD, QuorumVerifier qvNEW){ if (qvOLD == null || !qvOLD.equals(qvNEW)) { LOG.warn("Restarting Leader Election");
private static void visitFrameTypes(final int n, final Object[] types, final List result) { for (int i = 0; i < n; ++i) { Object type = types[i];
public void tearDown() throws Exception { ct.tearDownAll(); qb.tearDown(); if (qu != null) { qu.tearDown();
public void connect() throws Exception { for (int tries = 0; tryConnect() == false; tries++) { if (tries > 100) throw new SlimError("Could not connect to socket after many retries"); Thread.sleep(50); } reader = new StreamReader(client.getInputStream()); writer = new BufferedWriter(new OutputStreamWriter(client.getOutputStream())); slimServerVersion = reader.readLine(); }
protected void setUp() throws Exception { super.setUp(); client_latch = new CountDownLatch(1); client_dwatch = new SimpleWatcher(client_latch); client = createClient(client_dwatch, client_latch); lsnr_latch = new CountDownLatch(1); lsnr_dwatch = new SimpleWatcher(lsnr_latch); lsnr = createClient(lsnr_dwatch, lsnr_latch); expected = new ArrayList<Integer>(); }
<T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(String mechs[], CallbackHandler cbh) throws OperationException;  Set<String> listSaslMechanisms(); }
public void doRow(Parse row) { executeCalledForRow = false; try { reset();
public Socket createSocket(final String hostName, final int port) throws IOException { LOG.log(Level.FINER, "Creating plain client: " + hostName + ":" + port); return new Socket(hostName, port);
static DERSet createSet(ASN1EncodableVector v, boolean needsSorting) { return v.size() < 1 ? EMPTY_SET : new DERSet(v, needsSorting); }
public void whenPluginsDirectoryDoesNotExist() throws Exception { new PluginsClassLoader().getClassLoader("nonExistingRootDirectory"); assertTrue("didn't cause exception", true); }
public void processResult(int rc, String path, Object ctx, List<String> children, Stat stat) { ((List<Integer>)ctx).add(rc); opsCount.countDown(); }
public void testStart() throws Exception { int clientPort = PortAssignment.unique(); final Properties configZookeeper = new Properties(); configZookeeper.put("clientPort", clientPort + ""); configZookeeper.put("host", "localhost"); configZookeeper.put("ticktime", "4000"); try (ZooKeeperServerEmbedded zkServer = ZooKeeperServerEmbedded .builder()
public <I> void hear(TypeLiteral<I> literal, TypeEncounter<I> encounter) { final List<Method> constructs = new ArrayList<Method>(); final List<Method> destroys = new ArrayList<Method>(); extractLifecycleMethods(literal, constructs, destroys); logger.debug("Registering lifecycle listeners for {}", literal); if (!constructs.isEmpty() || !destroys.isEmpty()) { encounter.register(new LifecycleExecutor(constructs, destroys));
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); pageBuilder = root.getPageCrawler(); pagePath = PathParser.parse("SomePage"); somePage = pageBuilder.addPage(root, pagePath, "has something in it"); responder = new SearchReplaceResponder(); request = new MockRequest(); request.setResource("SomePage"); context = FitNesseUtil.makeTestContext(root); }
protected List<T> addUsingPositionFunction(List<T> source, List<List<T>> result) { int partitionCount = result.size(); List<T> notFound = new ArrayList<>(); for (T item : source) { Optional<Integer> pos = positionFunction.apply(item); if (!pos.isPresent()) { pos = findParentPosition(item); } if (pos.isPresent()) { int index = pos.get(); if (index >= 0 && index < partitionCount) { result.get(index).add(item); } else { notFound.add(item); } } else { notFound.add(item); } } return notFound; }
Object[] getParameters(); Object getResult(); void setResult(Object result); }
private void buildInstructionsFor(String scriptStatements) throws Exception { makeSlimTableAndBuildInstructions(importTableHeader + scriptStatements); }
void updateContent(int row, TestResult testResult); void updateContent(int col, int row, SlimTestResult testResult); void updateContent(int col, int row, SlimExceptionResult exceptionResult); Table asTemplate(CellContentSubstitution substitution) throws SyntaxError;
public static FitNesseContext makeTestContext(WikiPage root, String rootPath, String rootDirectoryName, int port) { Builder builder = new Builder(); builder.root = root; builder.rootPath = rootPath; builder.rootDirectoryName = rootDirectoryName; builder.port = port; FitNesseContext context = builder.createFitNesseContext();
public void testNotEqualsDifferentShapedTree() { Tree tree2 = new ListTree("tree", new Tree[] { new ListTree("a", new Tree[] {new ListTree("c")}), new ListTree("b") }); treesUnEqual(tree,tree2); treesUnEqual(tree,toplessTree); }
public void ContentIsTableOfContents() throws Exception { Assert.assertEquals("!contents", new ExternalSuitePage("somewhere", "MyTest", null, null).getData().getContent()); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); pageBuilder = new PageBuilder(); request = new MockRequest(); responder = new PacketResponder(); context = FitNesseUtil.makeTestContext(root); }
public void run(String argv[]) throws Exception { args(argv); establishConnection(); validateConnection(); process(); closeConnection(); exit(); }
public void testSnapshot() throws Exception { File snapDir = new File(testData, "invalidsnap"); ZooKeeperServer zks = new ZooKeeperServer(snapDir, snapDir, 3000); SyncRequestProcessor.setSnapCount(1000); final int PORT = Integer.parseInt(HOSTPORT.split(":")[1]); ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1); f.startup(zks); LOG.info("starting up the zookeeper server .. waiting"); assertTrue("waiting for server being up", ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT)); ZooKeeper zk = ClientBase.createZKClient(HOSTPORT); try {
public void shouldReturnAnXStreamInstanceWithSupportToLinkConvertersBasedOnReflection() { RestfulSerialization serialization = new RestfulSerialization(null, null, null, null, null, null); XStream xstream = serialization.getXStream(); Converter converter = xstream.getConverterLookup().lookupConverterForType(CustomType.class); assertThat(converter.getClass(), is(typeCompatibleWith(LinkConverter.class))); }
private void givenTestSystem(String testSystem) { whenTestSystemLookedUp().thenReturn(new Maybe<>(testSystem)); }
public static boolean isKnown(int command) { return cmd2String.containsKey(command); }
public int newNameType(final String name, final String desc) { key2.set(NAME_TYPE, name, desc, null); Item result = get(key2); if (result == null) { put122(NAME_TYPE, newUTF8(name), newUTF8(desc)); result = new Item(index++, key2); put(result); } return result.index; }
public void setUp() throws Exception { caller = new StatementExecutor(); caller.create("testSlim", getTestClassName(), new Object[0]); testSlim = (TestSlim) caller.getInstance("testSlim"); }
public void registersJsonExporterForAjaxRequest() throws InterceptionException, IOException { mockery.checking(new Expectations() { { one(info).isAjax(); will(returnValue(true)); one(container).register(Outjecter.class, JsonOutjecter.class); one(stack).next(null, null); } }); interceptor.intercept(stack, null, null); mockery.assertIsSatisfied(); }
public ResourceMethod apply(Route route) { return route.resourceMethod(request, uri); }
protected Update makeUpdate() throws Exception { return null; };
private void addImportAndMake() { statements.add(list("import", "fitnesse.slim.test")); statements.add(list("make", "testSlim", "TestSlim")); }
void setSymbol(String symbolName, String value); void addScenario(String scenarioName, ScenarioTable scenarioTable); ScenarioTable getScenario(String scenarioName); ScenarioTable getScenarioByPatternMatching(String invokingString, CustomComparatorRegistry customComparatorRegistry); Collection<ScenarioTable> getScenarios(); void incrementPassedTestsCount(); void incrementFailedTestsCount(); void incrementErroredTestsCount(); void incrementIgnoredTestsCount(); void increment(ExecutionResult testSummary); void increment(TestSummary testSummary); TestPage getPageToTest(); }
long getPacketsReceived();  long getPacketsSent();  long getOutstandingRequests();  int getSessionTimeout();  void terminateSession();  void terminateConnection();  long getMinLatency();  long getAvgLatency();  long getMaxLatency();  String getLastOperation();  String getLastCxid();  String getLastZxid();  String getLastResponseTime();  long getLastLatency();  void resetCounters(); }
public void testDeleteDirectory() throws Exception { File dir = new File("testdir/dir"); assertTrue(dir.mkdir()); File file = new File(dir,"testChildFile"); assertTrue(file.createNewFile()); DeleteFileResponder responder = new DeleteFileResponder(); request.addInput("filename", "dir"); request.setResource(""); responder.makeResponse(context, request); assertFalse(file.exists()); assertFalse(dir.exists());
public void testTableSorterScript() throws Exception { String content = getResponseContentUsingSearchString("something"); assertSubString("tableSorter = new TableSorter('searchResultsTable', new DateParser(/^(\\w+) (jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec) (\\d+) (\\d+).(\\d+).(\\d+) (\\w+) (\\d+)$/,8,2,3,4,5,6));", content); }
@Test public void translatesBold() { ParserTest.assertTranslatesTo("'''bold text'''", "<b>bold text</b>"); }
public Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) { try {
public void notifyListener() { eventNotification.countDown(); }
public void testWithClasspathOnTestInSuite() throws Exception { WikiPageUtil.addPage(suite, PathParser.parse("TestPage"), "!path jar.jar\n!path /some/dir/with/.class/files\n!|fitnesse.testutil.IgnoreFixture|\n"); String result = getResultFor("SuitePage.TestPage", true); assertSubString("classes", result); assertSubString("jar.jar", result); assertSubString("/some/dir/with/.class/files", result); }
public void testInsertAsFirstRow() throws Exception { Parse firstRow = new Parse("<tr><td>first row</td></tr>", new String[] {"tr", "td"}); table.insertAsFirstRow(firstRow); String expectedTableContents = "<table><tr><td>first row</td></tr><tr><td>eg.Division</td></tr>" + "<tr><td>numerator</td><td>denominator</td><td>quotient()</td></tr>" + "<tr><td>10</td><td>2</td><td>5</td></tr></table>"; assertTable(expectedTableContents); }
public void setUp() throws Exception { testProperties = new Properties(); testProvider = new SymbolProvider(new SymbolType[] {}); loader = new PluginsLoader(new ComponentFactory(testProperties), testProperties); }
public static <T> Matcher<? super T> shouldBe(T value) { return shouldBe(equalTo(value)); }
public void log(Level level, Object message, Throwable e) { org.apache.log4j.Level pLevel = org.apache.log4j.Level.DEBUG; switch (level == null ? Level.FATAL : level) { case DEBUG: pLevel = org.apache.log4j.Level.DEBUG; break; case INFO: pLevel = org.apache.log4j.Level.INFO; break; case WARN: pLevel = org.apache.log4j.Level.WARN; break; case ERROR: pLevel = org.apache.log4j.Level.ERROR; break; case FATAL: pLevel = org.apache.log4j.Level.FATAL; break; default:
private Collection<Route> routesMatchingUriAndMethod(String uri, HttpMethod method) { Collection<Route> routesMatchingMethod = Collections2.filter(routesMatchingUri(uri), allow(method)); if (routesMatchingMethod.isEmpty()) { EnumSet<HttpMethod> allowed = allowedMethodsFor(uri); throw new MethodNotAllowedException(allowed, method.toString()); } return routesMatchingMethod; }
public void handleException(ExceptionResult exceptionResult) { table.appendContent(col, row, exceptionResult); }
public String genJavaHashCode(String fname) { return " ret = "+fname+".toString().hashCode();\n"; }
public void testQuorumPeerListendOnSpecifiedClientIP() throws IOException { long myId = 1; File dataDir = ClientBase.createTmpDir(); int clientPort = PortAssignment.unique(); Map<Long, QuorumServer> peersView = new HashMap<>(); InetAddress clientIP = InetAddress.getLoopbackAddress(); peersView.put(Long.valueOf(myId), new QuorumServer(myId, new InetSocketAddress(clientIP, PortAssignment.unique()), new InetSocketAddress(clientIP, PortAssignment.unique()), new InetSocketAddress(clientIP, clientPort), LearnerType.PARTICIPANT));  QuorumPeer peer1 = new QuorumPeer(peersView, dataDir, dataDir, clientPort, electionAlg, myId, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit); String hostString1 = peer1.cnxnFactory.getLocalAddress().getHostString(); assertEquals(clientIP.getHostAddress(), hostString1);
public TestDescriptor getTest(String name) throws IOException; public List<TestDescriptor> getSuite(String name) throws IOException; public void prepareResultRepository(TestResultRepository resultRepository) throws IOException; }
private void includeScenarioLibrary(WikiPage scenarioLibrary, StringBuilder newPageContent) { newPageContent.append("!include -c ."); PageCrawler pageCrawler = getSourcePage().getPageCrawler(); newPageContent.append(PathParser.render(pageCrawler.getFullPath(scenarioLibrary))); newPageContent.append("\n"); }
private boolean isAEADModeName( String modeName) { return "CCM".equals(modeName) || "EAX".equals(modeName) || "GCM".equals(modeName); }
public void setup() { this.mockery = new VRaptorMockery(); final Localization localization = mockery.localization(); this.jsr303Validator = new JSR303Validator(localization); this.hibernateValidator3 = new HibernateValidator3(localization); mockery.checking(new Expectations() { {
public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) { return mv.visitAnnotation(desc, visible); }
public void multiFunctionCall() throws Exception { statements.add(statement("call", "testSlim", "add", "1", "2")); statements.add(statement("call", "testSlim", "add", "3", "4")); respondsWith(list("3", "7")); }
public void customizedPath() { } @Path("/*/customPath") public void starPath() { } } class InheritanceExample extends MyResource { } @Test public void canTranslateADefaultResource() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); String url = builder.urlFor(MyResource.class, mockery.methodFor(MyResource.class, "notAnnotated").getMethod(), new Object[] {}); assertThat(url, is(equalTo("/MyResource/notAnnotated"))); } @Test public void canTranslateAnnotatedMethod() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); String url = builder.urlFor(MyResource.class, mockery.methodFor(MyResource.class, "customizedPath").getMethod(), new Object[] {}); assertThat(url, is(equalTo("/myPath"))); } @Test public void canTranslateAInheritedResourceMethod() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); String url = builder.urlFor(InheritanceExample.class, mockery.methodFor(MyResource.class, "notAnnotated").getMethod(), new Object[] {}); assertThat(url, is(equalTo("/InheritanceExample/notAnnotated"))); } @Test public void canTranslateAMethodUsingAsteriskAsAPatternMatcher() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); String url = builder.urlFor(MyResource.class, mockery.methodFor(MyResource.class, "starPath").getMethod(), new Object[] {}); assertThat(url, is(equalTo("//customPath"))); } @Test public void usesAsteriskBothWays() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); Method method = mockery.methodFor(MyResource.class, "starPath").getMethod(); String url = builder.urlFor(MyResource.class, method, new Object[] {}); ResourceAndMethodLookup lookup = builder.lookupFor(mockery.resource(MyResource.class)); assertThat(lookup.methodFor(url, "POST").getMethod(), is(equalTo(method))); } @Test public void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); Method method = mockery.methodFor(MyResource.class, "notAnnotated").getMethod(); String url = builder.urlFor(InheritanceExample.class, method, new Object[] {}); ResourceAndMethodLookup lookup = builder.lookupFor(mockery.resource(InheritanceExample.class)); assertThat(lookup.methodFor(url, "POST").getMethod(), is(equalTo(method))); } @Test public void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); Method method = mockery.methodFor(MyResource.class, "customizedPath").getMethod(); String url = builder.urlFor(MyResource.class, method, new Object[] {}); ResourceAndMethodLookup lookup = builder.lookupFor(mockery.resource(MyResource.class)); assertThat(lookup.methodFor(url, "POST").getMethod(), is(equalTo(method))); } }
public void shouldContinueStackIfInterceptorDoesntAcceptMethod() throws Exception { when(interceptor.accepts(method)).thenReturn(false); handler.execute(stack, method, null); verify(interceptor, never()).intercept(stack, method, null); verify(stack).next(method, null); }
Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); }
public void testCanHandleUrlIfPlainRootContext() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getRequestURI(); will(returnValue("/")); one(request).getMethod(); will(returnValue("GET")); one(registry).gimmeThis("/", "GET"); will(returnValue(expected)); }}); ResourceMethod resource = translator.translate(request); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied();
public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public long getNumAliveConnections(); }
public void testTail() throws Exception { formatter.announceNumberTestsToRun(1); formatter.testStarted(page); formatter.testComplete(page, new TestSummary(4, 1, 0, 0)); formatter.allTestingComplete(); assertSubString("<strong>Assertions:</strong>", pageBuffer.toString()); }
public final void visitIntInsn(final int opcode, final int operand) { AttributesImpl attrs = new AttributesImpl(); attrs.addAttribute("", "value", "value", "", Integer.toString(operand)); addElement(AbstractVisitor.OPCODES[opcode], attrs); }
public void testShouldCreateGetterAndSetterForAMethodParameter() throws SecurityException, NoSuchMethodException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException { Class<?> type = creator.typeFor(mockery.method(DogAlike.class.getDeclaredMethod("bark",String.class))); Method getter = type.getDeclaredMethod("getString"); Method setter = type.getDeclaredMethod("setString", String.class); Object instance = type.newInstance(); setter.invoke(instance, "MESSAGE"); MatcherAssert.assertThat((String)getter.invoke(instance), Matchers.is(Matchers.equalTo("MESSAGE"))); mockery.assertIsSatisfied(); }
public void helperWillFailTestsIfNoTestsAreExecuted() throws Exception{ try{ helper.assertSuitePasses("FitNesse.SuiteAcceptanceTests.SuiteSlimTests", "nonExistingFilter"); } catch (AssertionError ae){ assertTrue(ae.getMessage().startsWith("at least one test")); } assertEquals(new HashSet<String>(), new HashSet<>(visitedPages));
int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size); }
private void assertTranslatesDefine(String input, String definition) throws Exception { WikiPage pageOne = new TestRoot().makePage("PageOne"); ParserTest.assertTranslates(pageOne, input, "<span class=\"meta\">variable defined: " + definition + "</span>");
public void errorOccured() { } public void announceNumberTestsToRun(int testsToRun) { } public void setExecutionLogAndTrackingId(String stopResponderId, CompositeExecutionLog log) throws Exception { } public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { } public void newTestStarted(WikiPage test, long time) throws Exception { } public void testOutputChunk(String output) throws Exception { } public void testComplete(WikiPage test, TestSummary testSummary) throws Exception { } public void writeHead(String pageType) throws Exception { } }
public void shouldNotThrowNullPointersOnStatusResult() throws Exception { result.use(status()).movedPermanentlyTo(AController.class).aMethod(); }
public Object convert(String value) { if(value==null) {
protected boolean testableWaitForShutdown(int wait) throws InterruptedException { cnxn.sendThread.join(wait); if (cnxn.sendThread.isAlive()) return false; cnxn.eventThread.join(wait); if (cnxn.eventThread.isAlive()) return false; return true; }
public void testComplete(TestPage page, TestSummary summary, TimeMeasurement timeMeasurement) throws Exception { super.testComplete(page, summary, timeMeasurement); String timeString = new SimpleDateFormat("HH:mm:ss").format(timeMeasurement.startedAtDate()); response.add(String.format("%s %s R:%-4d W:%-4d I:%-4d E:%-4d %s\t(%s)\t%.03f seconds\n", passFail(summary), timeString, summary.right, summary.wrong, summary.ignores, summary.exceptions, page.getName(), getPath(page.getSourcePage()), timeMeasurement.elapsedSeconds()));
public void canReportOnlyLeaves() throws Exception { WikiPage frontPage = createTestPageTree(); request.setResource(frontPageName); request.addInput("Recursive", ""); request.addInput("LeafOnly", ""); SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); assertEquals(2, CountLines(response.getContent()));
public void testSymbolicLinksSave() throws Exception { ByteArrayOutputStream output = saveSomeSymbolicLinks(); String xml = output.toString(); assertHasRegexp("<symbolicLink>\\s*<name>LinkOne</name>\\s*<path>PatH.OnE</path>\\s*</symbolicLink>", xml); assertHasRegexp("<symbolicLink>\\s*<name>LinkTwo</name>\\s*<path>PatH.TwO</path>\\s*</symbolicLink>", xml); }
protected List<SlimAssertion> checkAction(int row) throws SyntaxError { int lastColInAction = table.getColumnCountInRow(row) - 1; table.getCellContents(lastColInAction, row); return invokeAction(1, lastColInAction - 1, row, new ReturnedValueExpectation(lastColInAction, row));
public void process(Object page) { context.put("result", page); try { node.render(context, writer);
private SlimTestResult doSimpleComparison() { if (operation.equals("<") || operation.equals("!>=")) return simpleComparisonMessage(v < arg1);
public void close() throws IOException { super.close(); tempFile.delete(); }
public synchronized int read() throws IOException { boolean toread = true; if (bytebuff.remaining() == 0) {
public void testAddToMethodAddsGivenValueGivenNumberOfTimesToOriginalValue() throws Exception { assertEquals("10", DataType.INTEGER.addTo("10", new Integer(5), 0)); assertEquals("15", DataType.INTEGER.addTo("10", new Integer(5), 1)); assertEquals("20", DataType.INTEGER.addTo("10", new Integer(5), 2)); assertEquals("10.2", DataType.DOUBLE.addTo("10.2", new Double(5.1), 0)); assertEquals("15.3", DataType.DOUBLE.addTo("10.2", new Double(5.1), 1)); assertEquals("20.4", DataType.DOUBLE.addTo("10.2", new Double(5.1), 2)); assertEquals("Hello", DataType.STRING.addTo("Hello", " World", 0)); assertEquals("Hello World", DataType.STRING.addTo("Hello", " World", 1)); assertEquals("Hello World World", DataType.STRING.addTo("Hello", " World", 2)); assertEquals("12/02/2006", DataType.DATE.addTo("12/02/2006", new Integer(5), 0)); assertEquals("12/07/2006", DataType.DATE.addTo("12/02/2006", new Integer(5), 1)); assertEquals("01/01/2007", DataType.DATE.addTo("12/31/2006", new Integer(1), 1)); assertEquals("01/21/2007", DataType.DATE.addTo("12/02/2006", new Integer(5), 10)); }
public void testTestSummaryTestFail() throws Exception { formatter.announceNumberTestsToRun(1); formatter.testStarted(page); formatter.testComplete(page, new TestSummary(4, 1, 0, 0)); formatter.allTestingComplete(); assertSubString("<strong>Assertions:</strong> 4 right, 1 wrong, 0 ignored, 0 exceptions", pageBuffer.toString()); assertSubString("document.getElementById(\"test-summary\").className = \"fail\"", pageBuffer.toString()); }
public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {
public Response makeResponse(FitNesseContext context, Request request) { SimpleResponse response = new SimpleResponse(); String resource = request.getResource(); String version = (String) request.getInput("version"); if (version == null) return new ErrorResponder("missing version").makeResponse(context, request); WikiPagePath path = PathParser.parse(resource); WikiPage page = context.root.getPageCrawler().getPage(path); if (page == null) return new NotFoundResponder().makeResponse(context, request); PageData data = page.getDataVersion(version); page.commit(data); context.recentChanges.updateRecentChanges(data); response.redirect(context.contextRoot, resource); return response; }
public boolean hasCapturedOutput() { return runner.wroteToErrorStream() || runner.wroteToOutputStream(); }
public void incrementIgnoredTestsCount() { testContext.incrementIgnoredTestsCount(); testSummary.setIgnores(testSummary.getIgnores() + 1); }
public String genJavaHashCode(String fname) { return " ret = ("+fname+")?0:1;\n"; }
long getMaxReconnectDelay();  AuthDescriptor getAuthDescriptor();  int getTimeoutExceptionThreshold();  MetricType enableMetrics();  MetricCollector getMetricCollector(); }
public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Bucket bucket = (Bucket) o; if (!name.equals(bucket.name)) return false; if (!nodes.equals(bucket.nodes)) return false; if (!configuration.equals(bucket.configuration)) return false; return true; }
public void testPagesForTestSystemAreSurroundedBySuiteSetupAndTeardown() throws Exception { WikiPage slimPage = addTestPage(suite, "AaSlimTest", simpleSlimDecisionTable); WikiPage setUp = WikiPageUtil.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = WikiPageUtil.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); testPages = new LinkedList<WikiPage>(); testPages.add(setUp); testPages.add(slimPage); testPages.add(testPage); testPages.add(tearDown); MultipleTestsRunner runner = new MultipleTestsRunner(testPages, context, suite, null); Map<Descriptor, LinkedList<TestPage>> map = runner.makeMapOfPagesByTestSystem(); Descriptor fitDescriptor = new Descriptor(testPage.readOnlyData(), false, new ClassPathBuilder().getClasspath(testPage)); Descriptor slimDescriptor = new Descriptor(slimPage.readOnlyData(), false, new ClassPathBuilder().getClasspath(slimPage)); List<TestPage> fitList = map.get(fitDescriptor); List<TestPage> slimList = map.get(slimDescriptor); assertEquals(3, fitList.size()); assertEquals(3, slimList.size()); assertEquals(setUp, fitList.get(0).getSourcePage()); assertEquals(testPage, fitList.get(1).getSourcePage()); assertEquals(tearDown, fitList.get(2).getSourcePage()); assertEquals(setUp, slimList.get(0).getSourcePage()); assertEquals(slimPage, slimList.get(1).getSourcePage()); assertEquals(tearDown, slimList.get(2).getSourcePage()); }
Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
private void checkAuthor(String versionName, String author) throws Exception { VersionInfo version = makeVersionInfo(new File(versionName + ".zip")); assertEquals(author, version.getAuthor()); }
public void execute() throws IOException, InterceptionException { interceptorStack.add(ResourceLookupInterceptor.class); interceptorStack.add(URLParameterExtractorInterceptor.class); interceptorStack.add(InterceptorListPriorToExecutionExtractor.class); interceptorStack.add(instantiator); interceptorStack.add(ParametersInstantiator.class); if(shouldRegisterHibernateValidator) {
public static TestResult ignore() { return new TestResult(ExecutionResult.IGNORE); }
public void slimScenarioXmlFormat() throws Exception { responder.turnOffChunking(); request.addInput("format", "xml"); doSimpleRun(XmlChecker.slimScenarioTable); xmlChecker.assertXmlReportOfSlimScenarioTableIsCorrect(); }
public boolean equals(MatchedPair match){ return (this.fst == match.fst && this.snd == match.snd); }
public void checkSecurityAccess(String target) { if (delegate != null) { delegate.checkSecurityAccess(target);
private WikiPage createServerSideRoot() throws Exception { remoteRoot = InMemoryPage.makeRoot("RooT"); PageCrawler crawler = remoteRoot.getPageCrawler(); crawler.addPage(remoteRoot, PathParser.parse("PageOne"), "page one"); crawler.addPage(remoteRoot, PathParser.parse("PageOne.ChildOne"), "child one"); crawler.addPage(remoteRoot, PathParser.parse("PageTwo"), "page two"); return remoteRoot; }
public OperationFuture<CASValue<Object>> asyncGetAndTouch(final String key, final int exp) { return asyncGetAndTouch(key, exp, transcoder); }
public final BufferedMessage peekReceived() { return receivedBuffer.peek(); }
public void testValidatePath_NotAbsolutePath() { assertThrows(IllegalArgumentException.class, () -> { PathUtils.validatePath("not/valid");
private void logTraceTouchInvalidSession(long sessionId, int timeout) { logTraceTouchSession(sessionId, timeout, "invalid "); }
public void testParentPageNameVariableWithNoParent() throws Exception { crawler.setDeadEndStrategy(new VirtualEnabledPageCrawler()); WikiPage root = crawler.addPage(rootPage, PathParser.parse("RootPage")); WikiPage includedPage = crawler.addPage(rootPage, PathParser.parse("IncludedPage")); WidgetRoot includedRoot = new WidgetRoot(includedPage); assertEquals("IncludedPage", includedRoot.getVariable("PAGE_NAME"));
public void gettingShouldReturnValueIfIndexFound() throws Exception { instance.add("nothing"); instance.add("guilherme"); Object value = accessor.getProperty(null, instance, 1); MatcherAssert.assertThat(value, Matchers.is(Matchers.equalTo((Object) "guilherme"))); }
protected void registerCustomComponents(ComponentRegistry registry) { registry.register(SessionCreator.class, SessionCreator.class); registry.register(SessionFactoryCreator.class, SessionFactoryCreator.class); registry.register(HibernateTransactionInterceptor.class, HibernateTransactionInterceptor.class); }
boolean haveDelivered() { for (BlockingQueue<ByteBuffer> queue : queueSendMap.values()) { final int queueSize = queue.size(); LOG.debug("Queue size: {}", queueSize); if (queueSize == 0) { return true; } } return false; }
public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max); public boolean getResponseCachingEnabled(); public void setResponseCachingEnabled(boolean isEnabled);  public int getConnectionMaxTokens(); public void setConnectionMaxTokens(int val); public int getConnectionTokenFillTime(); public void setConnectionTokenFillTime(int val); public int getConnectionTokenFillCount(); public void setConnectionTokenFillCount(int val); public int getConnectionFreezeTime(); public void setConnectionFreezeTime(int val); public double getConnectionDropIncrease(); public void setConnectionDropIncrease(double val); public double getConnectionDropDecrease(); public void setConnectionDropDecrease(double val); public double getConnectionDecreaseRatio(); public void setConnectionDecreaseRatio(double val); public int getCommitProcMaxReadBatchSize(); public void setCommitProcMaxReadBatchSize(int size); public int getCommitProcMaxCommitBatchSize(); public void setCommitProcMaxCommitBatchSize(int size); public int getRequestThrottleLimit(); public void setRequestThrottleLimit(int requests); public int getRequestThrottleStallTime(); public void setRequestThrottleStallTime(int time); public boolean getRequestThrottleDropStale(); public void setRequestThrottleDropStale(boolean drop); public boolean getRequestStaleLatencyCheck(); public void setRequestStaleLatencyCheck(boolean check); public boolean getRequestStaleConnectionCheck(); public void setRequestStaleConnectionCheck(boolean check);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); public long getFlushDelay(); public void setFlushDelay(long delay); public long getMaxWriteQueuePollTime(); public void setMaxWriteQueuePollTime(long delay); public int getMaxBatchSize(); public void setMaxBatchSize(int size); }
public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) { AnnotationVisitor av = mv.visitAnnotation(desc, visible); return av == null ? av : new RemappingAnnotationAdapter(av, remapper); }
public ContentFilter loadContentFilter() { ContentFilter filter = (ContentFilter) componentFactory.createComponent(ConfigurationParameter.CONTENT_FILTER); if (filter != null) { LOG.info("Content filter installed: " + filter.getClass().getName()); } return filter; }
public void shouldOverrideTheHttpMethodByUsingThe_methodParameter() { when(request.getRequestURI()).thenReturn("/url"); when(request.getParameter("_method")).thenReturn("DELETE"); when(request.getMethod()).thenReturn("POST"); when(router.parse("/url", HttpMethod.DELETE, webRequest)).thenReturn(method); ResourceMethod resource = translator.translate(info); assertThat(resource, is(equalTo(method))); }
protected void setUp() throws Exception { LOG.info("Client test setup"); tmpDir = File.createTempFile("test", ".junit", baseTest); tmpDir = new File(tmpDir + ".dir"); tmpDir.mkdirs(); ServerStats.registerAsConcrete(); ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000); f = new NIOServerCnxn.Factory(33221); f.startup(zks);
void addToProcessingQueue(TestPage testPage) { processingQueue.addLast(testPage); }
public final TestSystem create(Descriptor descriptor) { SlimCoverageTestSystem testSystem = new SlimCoverageTestSystem("slimCoverage", slimTableFactory.copy(), customComparatorRegistry); return testSystem; }
public void shouldUseContainerIfInterceptorAccepts() throws Exception { StaticInterceptorHandler handler = new StaticInterceptorHandler(container,AlwaysAcceptInterceptor.class); handler.execute(stack,method,instance); verify(container).instanceFor(AlwaysAcceptInterceptor.class); verify(mockInterceptor).intercept(stack, method, instance); verify(mockInterceptor, never()).accepts(any(ResourceMethod.class)); }
protected List<File> normalize(List<String> compileSourceRootsList) throws Exception { List<File> newCompileSourceRootsList = new ArrayList<File>(); if (compileSourceRootsList != null) {
public Response makeResponse(FitNesseContext context, Request request) { this.context = context; crawler = context.root.getPageCrawler(); resource = request.getResource(); shouldIncludePaths = request.hasInput("includePaths"); suiteFilter = (String) request.getInput("suiteFilter"); return new PuppetResponse(this); }
public void testPageMatchesQueryWithExcludedSetUps() throws Exception { Map<String, Boolean> attributes = new HashMap<String, Boolean>(); attributes.put("SetUp", false); List<PageType> pageTypes = Arrays.asList(TEST, NORMAL, SUITE); searcher = new AttributeWikiPageFinder(this, pageTypes, attributes, ""); setPageProperty(page, TEST.toString(), "true"); assertTrue(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SetUp")); assertFalse(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("TearDown")); assertTrue(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SuiteSetUp")); assertFalse(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SuiteTearDown")); assertTrue(searcher.pageMatches(page)); }
PageData getData(); PageData getDataVersion(String versionName); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage();
public synchronized void reset() { numberOfElements.set(0); }
public boolean isMatchingTest(WikiPage testPage) throws Exception { PageData data = testPage.getData(); boolean pruned = data.hasAttribute(PageData.PropertyPRUNE); boolean isTest = data.hasAttribute("Test"); return !pruned && isTest &&
public void dump(BiConsumer<String, Object> sink) { sampleGauges(); Enumeration<Collector.MetricFamilySamples> samplesFamilies = collectorRegistry.metricFamilySamples(); while (samplesFamilies.hasMoreElements()) { Collector.MetricFamilySamples samples = samplesFamilies.nextElement();
public void executeAndCheck(String agentName, String agentParameters, String clientName, String clientParameters) throws Exception { WikiPage testPage = WikiPageUtil.addPage(root, PathParser.parse("TestPage"), "!define TEST_SYSTEM {slim}\n" + "!define SLIM_SSL {"+ agentParameters +"}\n" + "!define slim.timeout {10}\n" + "!define slim.pool.size {1}\n" + "!define wiki.protocol.ssl.parameter.class {"+ clientParameters + "}\n" ); WikiPageDescriptor descriptor = new WikiPageDescriptor(testPage, false, false, "test-classes;classes"); descriptor.getExecutionLogListener().addExecutionLogListener(new ConsoleExecutionLogListener()); System.out.print("----------------------------------------------------\n"); System.out.print("SLIM_SSL: " + descriptor.getVariable("SLIM_SSL") + "\n"); System.out.print("slim.timeout: " + descriptor.getVariable("slim.timeout") + "\n"); System.out.print("wiki.protocol.ssl.parameter.class: " + descriptor.getVariable("wiki.protocol.ssl.parameter.class") + "\n"); System.out.print("TEST_SYSTEM: " + descriptor.getVariable("TEST_SYSTEM") + "\n"); SlimClientBuilder clientBuilder = new SlimClientBuilder(descriptor); String testSystemName = clientBuilder.getTestSystemName(); assertEquals("slim:" + "fitnesse.slim.SlimService", testSystemName); SlimCommandRunningClient client = clientBuilder.build(); boolean isConnected; String myName; String peerName; client.start(); try{ isConnected = client.isConnected(); myName = client.getMyName(); peerName = client.getPeerName(); }finally{ client.bye(); client.kill(); } assertTrue("Got connected to client:", isConnected); System.out.print("My Name is: " + myName +"\n"); System.out.print("Peer Name is: " + peerName+"\n"); assertEquals("Client Name", clientName, myName); assertEquals("Agent Name", agentName, peerName);
public static void assertParses(String input, String expected) { Symbol result = Parser.make(null, input).parse(); assertEquals(expected, serialize(result)); }
protected String startQuorum(final int serverCount, Map<String, String> authConfigs, int authServerCount) throws IOException { return this.startQuorum(serverCount, authConfigs, authServerCount, false); }
private void assertHeaderOfXmlDocumentsInResponseIsCorrect() throws Exception { assertEquals("text/xml", response.getContentType()); Document testResultsDocument = getXmlDocumentFromResults(results); xmlChecker.assertXmlHeaderIsCorrect(testResultsDocument); }
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance){} } static class InterceptorUsingConstructorParameters implements StaticInterceptor { public InterceptorUsingConstructorParameters(String xuxu) { xuxu.toString(); } public boolean accepts(ResourceMethod method) { return false; } public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance){} } static class InterceptorUsingConstructorParametersOnAccepts implements StaticInterceptor { private final String xuxu; public InterceptorUsingConstructorParametersOnAccepts(String xuxu) { this.xuxu = xuxu; } public boolean accepts(ResourceMethod method) { return xuxu.contains("o'really?"); } public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance){} } }
public void testPageMatchesQueryWithMultipleAttributes() throws Exception { Map<String, Boolean> attributes = new HashMap<String, Boolean>(); searcher = new AttributeWikiPageFinder(this, Arrays.asList(TEST), attributes, ""); removePageProperty(page, TEST.toString()); attributes.put(TEST.toString(), true); attributes.put("Suite", true); assertFalse(searcher.pageMatches(page)); attributes.put("Suite", false); setPageProperty(page, TEST.toString(), "true"); assertTrue(searcher.pageMatches(page)); attributes.put(TEST.toString(), false); assertFalse(searcher.pageMatches(page)); removePageProperty(page, TEST.toString()); setPageProperty(page, "Suite", "true"); assertFalse(searcher.pageMatches(page)); }
public void testPagesForTestSystemAreSurroundedByRespectiveSuiteSetupAndTeardown() throws Exception { WikiPage slimPage = WikiPageUtil.addPage(testPage, PathParser.parse("SlimPageTest")); WikiPage setUp = WikiPageUtil.addPage(root, PathParser.parse("SuiteSetUp")); WikiPage tearDown = WikiPageUtil.addPage(root, PathParser.parse("SuiteTearDown")); WikiPage setUp2 = WikiPageUtil.addPage(slimPage, PathParser.parse("SuiteSetUp")); WikiPage tearDown2 = WikiPageUtil.addPage(slimPage, PathParser.parse("SuiteTearDown")); ArrayList<WikiPage> testPages = MakeTestPageList(); surrounder.surroundGroupsOfTestPagesWithRespectiveSetUpAndTearDowns(testPages); assertEquals(6, testPages.size()); assertEquals(setUp2, testPages.get(0)); assertEquals(slimPage, testPages.get(1)); assertEquals(tearDown2, testPages.get(2)); assertEquals(setUp, testPages.get(3)); assertEquals(testPage, testPages.get(4)); assertEquals(tearDown, testPages.get(5)); }
private void assertAllPacketsZero(ServerStats serverStats) { Assert.assertEquals(0L, serverStats.getPacketsSent()); Assert.assertEquals(0L, serverStats.getPacketsReceived()); }
public void setup() throws Exception { MockitoAnnotations.initMocks(this); handler = new AppEngineStaticContentHandler(context); }
public void testWrite() throws Exception { final File out1 = File.createTempFile("jdeb", ".ar"); final ArOutputStream os = new ArOutputStream(new FileOutputStream(out1)); os.putNextEntry(new ArEntry("data", 4)); os.write("data".getBytes()); os.close(); out1.delete(); }
public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx){ if(rc != BKException.Code.OK){ fail("Return code is not OK: " + rc); } ls = seq; synchronized(sync){ sync.counter += throttle; sync.notify(); } LOG.info("Current counter: " + sync.counter); }
protected void describeMismatchSafely(ResourceMethod item, Description mismatchDescription) { mismatchDescription.appendText(" an instance of a resource method for method " + item.getMethod().getName() + " declared at " + item.getMethod().getDeclaringClass().getName()); }
private void register(final Class<?> type, ConfigurableListableBeanFactory beanFactory) { registerOn((BeanDefinitionRegistry) beanFactory, type, true); registerFactory(type, beanFactory); }
List<File> findSourceWithFilters() throws Exception { return findSourceWithFilters(getSourceDirectories()); }
public void testPageMatchQueryWithSuites() throws Exception { List<String> pageTypes = Arrays.asList("Test"); Map<String, Boolean> requestInputs = new HashMap<String, Boolean>(); assertTrue(searcher.pageMatchesQuery(page, pageTypes, requestInputs, null, false, false)); assertTrue(searcher.pageMatchesQuery(page, pageTypes, requestInputs, new String[0], false, false)); String[] suites = new String[] { "SuiteTest" }; assertFalse(searcher.pageMatchesQuery(page, pageTypes, requestInputs, suites, false, false)); setUpSuitesProperty(page, "SuiteTest"); assertTrue(searcher.pageMatchesQuery(page, pageTypes, requestInputs, null, false, false)); assertFalse(searcher.pageMatchesQuery(page, pageTypes, requestInputs, new String[0], false, false)); assertTrue(searcher.pageMatchesQuery(page, pageTypes, requestInputs, suites, false, false)); setUpSuitesProperty(page, "SuiteTest, SuiteTest2"); assertTrue(searcher.pageMatchesQuery(page, pageTypes, requestInputs, suites, false, false)); setUpSuitesProperty(page, "SuiteTest2 , SuiteTest3"); assertFalse(searcher.pageMatchesQuery(page, pageTypes, requestInputs, suites, false, false)); suites = new String[] { "SuiteTest2", "SuiteTest3" }; assertTrue(searcher.pageMatchesQuery(page, pageTypes, requestInputs, suites, false, false)); setUpSuitesProperty(page, "SuiteTest, SuiteTest2"); assertFalse(searcher.pageMatchesQuery(page, pageTypes, requestInputs, suites, false, false));
public void testShouldIncrementColumnValuesFromSecondRowForTheGivenColumnName() throws Exception { String fitPage = "<table><tr><td>" + IncrementColumnsValue.class.getName() + "</td><td>numerator</td><td>of type</td><td>int</td><td>by</td><td>5</td></tr>" + "<tr><td>eg.Division</td></tr>" + "<tr><td>numerator</td><td>denominator</td><td>quotient()</td></tr>" + "<tr><td>10</td><td>2</td><td>5</td></tr><tr><td>10</td><td>3</td><td>5</td></tr>" + "<tr><td>10</td><td>3</td><td>5</td></tr></table>"; decorator.doTable(new Parse(fitPage)); TestCaseHelper.assertCounts(TestCaseHelper.counts(2, 1, 0, 0), decorator.counts); }
public void canTranslateAnnotatedMethod() throws NoSuchMethodException { DefaultMethodLookupBuilder builder = new DefaultMethodLookupBuilder(); String url = builder.urlFor(MyResource.class, mockery.methodFor(MyResource.class, "customizedPath").getMethod(), new Object[] {}); assertThat(url, is(equalTo("/myPath"))); mockery.assertIsSatisfied(); }
public boolean isOutputShutdown() { return endPoint.isOutputShutdown(); }
public static FitNesseContext makeTestContext(WikiPage root, String rootPath, String rootDirectoryName, int port, Authenticator authenticator) { Builder builder = new Builder(); builder.root = root; builder.rootPath = rootPath; builder.rootDirectoryName = rootDirectoryName; builder.port = port; builder.authenticator = authenticator; builder.versionsController = new ZipFileVersionsController(); builder.recentChanges = new RecentChangesWikiPage(); builder.testSystemFactory = new MultipleTestSystemFactory(); builder.properties = new Properties(); FitNesseContext context = builder.createFitNesseContext();
public void closeConnection() throws IOException { socket.close(); }
private String getFilters (WikiPage wikiPage) throws Exception { String filters = ""; if (isFiltersAppended()) { PageData data = wikiPage.getData(); WikiPageProperties props = data.getProperties(); String filterText = (props.has("Suites"))? filterText = props.get("Suites") : ""; filters = (filterText != null)? filterText.trim() : ""; } return (filters.length() > 0)? " (" + filters + ")": ""; }
@Test public void terminatedLiteralAddsTerminator() { Scanner scanner = new Scanner(new TestSourcePage(), "stuff\n"); scanner.makeLiteral(SymbolType.Newline); assertTrue(scanner.getCurrent().isType(SymbolType.Newline)); }
public void registerSlimTables(SlimTableFactory slimTableFactory) throws PluginException { } @Override public void registerCustomComparators(CustomComparatorRegistry customComparatorRegistry) throws PluginException { } }
public static void pause(Activity act) {
public void testSetUpAndTearDownExcluded() throws Exception { Map<String, Boolean> attributes = new HashMap<String, Boolean>(); attributes.put("SetUp", false); attributes.put("TearDown", false); List<PageType> pageTypes = Arrays.asList(TEST, SUITE, STATIC); setPageProperty(page, TEST.toString(), "true"); searcher = generateSearcherByPageTypesAndSearchAttributes(pageTypes, attributes); assertTrue(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SetUp")); assertFalse(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("TearDown")); assertFalse(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SuiteSetUp")); assertFalse(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SuiteTearDown")); assertFalse(searcher.pageMatches(page)); }
public int remove(T value) {  rwLock.writeLock().lock(); try { Integer bit = value2Bit.get(value);
public void operationFailed(Object ctx, PubSubException exception) { if (logger != null && failureMsg != null) logger.log(level, failureMsg, exception); exceptions.add(exception); tick(); }
public void testBadConnection() throws Exception { String errorMessage = "FAILURE"; connectionStatusSize = "0000000007"; prepareSessionProcess(); socketOutput.write(errorMessage.getBytes()); int exitValue = process.waitFor(); String stdoutString = new String(stdoutBytes.toByteArray()); assertTrue(exitValue != 0);
public void testResponse() throws Exception { createRequest(); Responder responder = new SavePropertiesResponder(); Response response = responder.makeResponse(FitNesseUtil.makeTestContext(root), request); PageData data = page.getData(); assertTrue(data.hasAttribute("Test")); assertTrue(data.hasAttribute("Properties")); assertTrue(data.hasAttribute("Search")); assertFalse(data.hasAttribute("Edit")); assertTrue(data.hasAttribute("RecentChanges")); assertTrue(data.hasAttribute(PageData.PropertySECURE_READ)); assertFalse(data.hasAttribute(PageData.PropertySECURE_WRITE)); assertTrue(data.hasAttribute(PageData.PropertyPRUNE)); assertEquals("Suite A, Suite B", data.getAttribute(PageData.PropertySUITES)); assertEquals("Help text literal", data.getAttribute(PageData.PropertyHELP)); assertEquals(303, response.getStatus()); assertEquals("/PageOne", response.getHeader("Location")); }
WikiPage makePage(File path, String pageName, WikiPage parent, VariableSource variableSource); boolean supports(File path); }
protected List<String> getClasspathElements() throws Exception { List<String> back = project.getCompileClasspathElements(); back.remove(project.getBuild().getOutputDirectory());
public void testKeySet() throws Exception { properties = new WikiPageProperties(); properties.set("one"); properties.set("two"); properties.set("three"); Set keys = properties.keySet(); assertTrue(keys.contains("one")); assertTrue(keys.contains("two")); assertTrue(keys.contains("three")); assertFalse(keys.contains("four")); }
public void testRegexp() throws Exception { assertMatch("!define xyz {\n123\r\n456\r\n}"); assertMatch("!define abc {1}"); assertMatch("!define abc (1)"); assertMatch("!define x (!define y {123})"); assertMatch("!define x [1]"); assertMatch("!define x (!define y [123])"); assertMatch("!define x [!define y {123}]"); assertNoMatch("!define"); assertNoMatch("!define x"); assertNoMatch(" !define x {1}"); assertNoMatch("!define x {1)"); assertNoMatch("!define x {1]"); assertNoMatch("!define x (1]"); assertNoMatch("!define x (1}"); assertNoMatch("!define x [x)"); assertNoMatch("!define x [x}");
public void testLeftArrowOnPageThatDoesNotExist() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("TestPage")); WikiPage child2 = crawler.addPage(page, PathParser.parse("SubPage2")); AliasLinkWidget w = new AliasLinkWidget(new WidgetRoot(child2), "[[tag][<TestPage.SubPage]]"); assertEquals("tag<a href=\"TestPage.SubPage?edit\">?</a>", w.render()); }
public void testLinkToNonExistentWikiPageOnVirtualPage() throws Exception {
private Set<Artifact> resolveDependencyArtifacts( final Artifact artifact, final ArtifactFilter collectionFilter, final ArtifactFilter resolutionFilter, final List<ArtifactRepository> remoteRepositories, final ArtifactRepository localRepository) { final ArtifactResolutionRequest arr = this.createArtifactResolutionRequest( artifact, collectionFilter, resolutionFilter, remoteRepositories, localRepository);
private HtmlTag makeInputTagWithAccessKey() { HtmlTag input = HtmlUtil.makeInputTag("submit", "submit", "Save"); input.addAttribute("accesskey", "s"); return input; }
static final private String base64Encode(byte b[]) { StringBuilder sb = new StringBuilder(); for (int i = 0; i < b.length;) { int pad = 0; int v = (b[i++] & 0xff) << 16; if (i < b.length) { v |= (b[i++] & 0xff) << 8; } else { pad++; } if (i < b.length) { v |= (b[i++] & 0xff); } else { pad++; } sb.append(encode(v >> 18)); sb.append(encode(v >> 12)); if (pad < 2) { sb.append(encode(v >> 6)); } else { sb.append('='); } if (pad < 1) { sb.append(encode(v)); } else { sb.append('='); } } return sb.toString(); }
double getDoubleArg(); List<Object> getListArg(); Date getDateArg(); Zork getZork(); Integer getIntegerObjectArg(); double getDoubleObjectArg(); char getCharArg(); }
private void replaceAnyOldMatchesWithBetterMatch() { if (thereIsAWorseLHMatchAndNoBetterRHMatch()) replaceLHMatchWithNewBestMatchAndRemoveAnyOldRHMatch(); if (thereIsAWorseRHMatchAndNoLHMatch()) replaceRHMatchWithNewBestMatch();
protected List<String> getClasspathElements() throws Exception { throw new UnsupportedOperationException("USELESS"); }
public void write(int oneByte) throws IOException { bytes++; os.write(oneByte); }
public List<String> scalaDistroArtifactIds() throws Exception { return SCALA_DISTRO_ARTIFACTS; }
public void resetNonMTLSConnCount() { zks.serverStats().resetNonMTLSRemoteConnCount(); zks.serverStats().resetNonMTLSLocalConnCount(); }
public static void Launch(Activity act, String fileName, String keyFile) throws FileNotFoundException { File dbFile = new File(fileName); if ( ! dbFile.exists() ) { throw new FileNotFoundException(); } Intent i = new Intent(act, PasswordActivity.class); i.putExtra(KEY_FILENAME, fileName); i.putExtra(KEY_KEYFILE, keyFile); act.startActivityForResult(i, 0);
public void returnsTheCorrectDefaultResourceMethodIfFound() throws SecurityException, NoSuchMethodException { final ResourceClass resource = mockery.resource(MyResource.class); List<Route> rules = parser.rulesFor(resource); assertThat(rules, hasRouteMatching("/MyResource.findable.logic")); mockery.assertIsSatisfied(); }
public void doExecute() throws Exception { JavaCommand jcmd = null; if (!versionOnly) { jcmd = getScalaCommand(); jcmd.addArgs("-help"); jcmd.addArgs("-X"); jcmd.addArgs("-Y"); jcmd.run(displayCmd); } jcmd = getScalaCommand(); jcmd.addArgs("-version"); jcmd.run(displayCmd); }
public void testFixtureWidgetRendersProperly() throws Exception { assertWidgetRendersToContain("!fixture some.FixtureName", "fixture: some.FixtureName"); }
@Test public void testGetSessions() { Set<Long> s = r.getSessions("path1"); assertEquals(2, s.size()); assertTrue(s.contains(101L)); assertTrue(s.contains(102L)); s = r.getSessions("path2"); assertEquals(1, s.size()); assertTrue(s.contains(201L)); assertNull(r.getSessions("path3")); }
public void startContext(String name, Type type, Object root, ResourceBundle bundle) { OgnlContext context = createOgnlContext(root); context.setTraceEvaluations(true); context.put("rootType", type); context.put("removal", removal); context.put("nullHandler", nullHandler()); context.put(ResourceBundle.class, bundle); context.put("proxifier", proxifier); Ognl.setTypeConverter(context, createAdapter(bundle)); contexts.put(name, context); }
public void join() throws InterruptedException { synchronized(this) { while(!killed) {
private void connectNewPeers(QuorumCnxManager qcm){ if (quorumVerifier != null && lastSeenQuorumVerifier != null) { Map<Long, QuorumServer> committedView = quorumVerifier.getAllMembers();
public void cyclicSymbolicLinkDisplaysAMessage() { createCycle(); PageCrawler pageCrawler = root.getPageCrawler(); WikiPage deepPage = pageCrawler.getPage(PathParser.parse(pageTwoPath + ".SymTwo.SymOne")); List<WikiPage> children = deepPage.getChildren(); assertEquals(0, children.size()); assertEquals("<em>Short circuit! This page references PageTwo, which is already one of the parent pages of this page.</em>", deepPage.getHtml()); }
public static ZipFileVersionInfo makeVersionInfo(File file) { String complexName = makeVersionName(file); Matcher match = COMPEX_NAME_PATTERN.matcher(complexName); String author = ""; Date creationTime = Clock.currentDate(); if (match.find()) { author = match.group(1); if (author == null) author = ""; try { creationTime = makeVersionTimeFormat().parse(match.group(2)); } catch (ParseException e) { throw new IllegalStateException(e); } } return new ZipFileVersionInfo(complexName, author, creationTime, file); }
public void process(WikiPage page) { PageData pageData = page.getData(); String replacedContent = searchPattern.matcher(pageData.getContent()).replaceAll(replacement); pageData.setContent(replacedContent); page.commit(pageData); }
public void call(String fixtureName) { constructFixture(fixtureName); dontReportExceptionsInTheseInstructions.add(callFunction(getTableName(), "table", tableAsList())); if (table.getRowCount() > 2) invokeRows();
public void initialize() { int size=(1+keys.size()) * MIN_RECV_PACKET; for(String s : keys.values()) { size += s.length(); }
public void setup() throws Exception { executor = getListExecutor(); statements = new ArrayList<Object>(); statements.add(Arrays.asList("i1", "import", getTestClassPath())); statements.add(Arrays.asList("m1", "make", "testSlim", testClass)); expectedResults.add(Arrays.asList("i1", "OK")); expectedResults.add(Arrays.asList("m1", "OK")); }
protected Servers LaunchServers(int numServers) throws IOException, InterruptedException { return LaunchServers(numServers, (Integer) null); }
private static boolean shouldDisplayRevisionControlActions(WikiPage wikiPage) throws Exception { if (wikiPage instanceof FileSystemPage) return ((FileSystemPage) wikiPage).isRevisionControlled(); return false; }
public void processResult(int rc, String path, Object ctx) { this.rc = rc; this.path = path; this.expected = (String)ctx; latch.countDown(); }
public void testMakeResponseImportingNonRootPage() throws Exception { MockRequest request = makeRequest(baseUrl + "PageOne"); Response response = responder.makeResponse(new FitNesseContext(testData.localRoot), request); MockResponseSender sender = new MockResponseSender(); sender.doSending(response); String content = sender.sentData(); assertNotNull(testData.pageTwo.getChildPage("ChildOne")); assertSubString("href=\"PageTwo.ChildOne\"", content); assertSubString(">ChildOne<", content); }
private String disgraceClassName() { capitalizeNextWord = true; return disgraceName(); }
public void importWiki(WikiPage page) throws Exception { catalogLocalTree(page); Document remotePageTreeDocument = getPageTree(); new PageXmlizer().deXmlizeSkippingRootLevel(remotePageTreeDocument, page, this); configureAutoUpdateSetting(page); filterOrphans(page); if(shouldDeleteOrphans) removeOrphans(page);
public static boolean isGracefulName(String fixtureName) { Matcher matcher = disgracefulNamePattern.matcher(fixtureName); return !matcher.matches(); }
protected ExecutionLog createExecutionLog(String classPath, String className) throws Exception { String command = buildCommand(className, classPath); client = new CommandRunningFitClient(this, command, context.port, context.socketDealer); return new ExecutionLog(page, client.commandRunner); }
public void testCreateSSLContextWithoutCustomProtocol() throws Exception { SSLContext sslContext = x509Util.getDefaultSSLContext(); Assert.assertEquals(X509Util.DEFAULT_PROTOCOL, sslContext.getProtocol()); }
Transcoder<Object> getTranscoder(); NodeLocator getNodeLocator(); Future<Boolean> append(long cas, String key, Object val); <T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) throws OperationTimeoutException; CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(String mechs[], CallbackHandler cbh) throws OperationException; }
public void testTryWithResourceThrottle() throws Exception { LearnerSyncThrottler throttler = new LearnerSyncThrottler(1, syncType); try { throttler.beginSync(true);
public boolean hasExtension(String extensionName) { return realPage.hasExtension(extensionName); }
abstract void bark(int times); abstract void bark(String phrase); }
public void removeChildPage(String name) throws Exception; public List<WikiPage> getChildren() throws Exception; public String getName() throws Exception; public PageData getData() throws Exception; public PageData getDataVersion(String versionName) throws Exception; public VersionInfo commit(PageData data) throws Exception; public PageCrawler getPageCrawler();
public abstract List<Object> getListArg(); public abstract Date getDateArg(); public abstract Zork getZork(); public abstract Integer getIntegerObjectArg(); public abstract double getDoubleObjectArg(); public abstract char getCharArg(); }
protected void writeResults() throws Exception { writeResults(writerFactory.getWriter(context, getPageForHistory(), finalSummary, currentTestStartTime)); }
public int compare(WikiPage p1, WikiPage p2) { try { WikiPagePath path1 = p1.getPageCrawler().getFullPath(p1);
public void addChildWidgets(String value) throws Exception { getBuilder().addChildWidgets(value, this, false); }
public boolean synced() { return isAlive() && learnerMaster.getCurrentTick() <= tickOfNextAckDeadline; }
void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data);  MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to);  public void timeOut();  public boolean isTimedOut();  public boolean isTimedOut(long ttlMillis); }
public String runTestsAndGenerateHtml(ReadOnlyPageData pageData) throws IOException, InterruptedException { String html = pageData.getHtml(); if (html.length() == 0) client.send(emptyPageContent); else client.send(html); return html; }
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws IOException, InterceptionException { } } public static class Dependency { } @Test(expected = InterceptionException.class) public void shouldComplainWhenUnableToInstantiateAnInterceptor() throws InterceptionException, IOException { handler.execute(null, null, null); } }
public void startServingSubscription(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom, DeliveryEndPoint endPoint, MessageFilter filter, boolean isHubSubscriber) { ActiveSubscriberState subscriber = new ActiveSubscriberState(topic, subscriberId, seqIdToStartFrom .getLocalComponent() - 1, endPoint, filter, isHubSubscriber); enqueueWithoutFailure(subscriber); }
public void add(final InsnList insns) { if (check && (insns == this)) { throw new IllegalArgumentException(); } if (insns.size == 0) { return; } size += insns.size; if (last == null) { first = insns.first; last = insns.last; } else { AbstractInsnNode elem = insns.first; last.next = elem; elem.prev = last; last = insns.last; } cache = null; insns.removeAll(false); }
public boolean doEscaping() { return false; } public String render() throws Exception { return ""; }
void appendCellToRow(int row, String contents) throws Exception; String getUnescapedCellContents(int col, int row); String getCellResult(int col,int row); void appendChildTable(int row, Table table); void setTestStatusOnRow(int row, ExecutionResult testStatus); void setName(String tableName); void setCell(int col, int row, Result response); void appendToCell(int col, int row, Result response); }
public String makeUrl(String wikiWordPath) { return null; }
private String manageSymbolInContent(String content, String message) { String symbolName = isSymbolAssignment(content); if (symbolName != null) { setSymbol(symbolName, message, true); message = String.format("$%s<-[%s]", symbolName, message); } return message; }
public PageData getMeat(String versionName) throws Exception { StringBuffer urlString = new StringBuffer(getThisPageUrl()); urlString.append("?responder=proxy&type=meat"); if(versionName != null) urlString.append("&version=").append(versionName); URL url = new URL(urlString.toString()); PageData data = (PageData) getObjectFromUrl(url); if(data != null) data.setWikiPage(this); return data; }
private void strike(int rollNumber) { if (rollNumber == 18) roll(10);
private SlimTestContextImpl makeTables(String scenarioText, String scriptText) throws Exception { SlimTestContextImpl testContext = new SlimTestContextImpl(new WikiTestPage(root)); String tableText = "!|scenario|" + scenarioText + "|\n" + "\n" + "!|" + SCRIPT_EXTENSION_NAME + "|\n" + "\n" + "!|DT:" + scriptText + "|\n"; WikiPageUtil.setPageContents(root, tableText); TableScanner ts = new HtmlTableScanner(root.getHtml()); Table t = ts.getTable(0); ScenarioTable st = new ScenarioTable(t, "s_id", testContext); t = ts.getTable(1); DiffScriptTable2 dst = new DiffScriptTable2(t, "ds_id", testContext); t = ts.getTable(2); dt = new DecisionTable(t, "did", testContext); assertions.addAll(st.getAssertions()); assertions.addAll(dst.getAssertions()); assertions.addAll(dt.getAssertions()); return testContext; }
private String makeLineEnd() { return isInline ? "" : endl; }
public static void Launch(Activity act, PwGroup group) { Intent i = new Intent(act, GroupActivity.class); if ( group != null ) { i.putExtra(KEY_ENTRY, group.groupId); } act.startActivityForResult(i,0); }
public void shouldHandle404() throws IOException, InterceptionException { mockery.checking(new Expectations() { { one(translator).translate(webRequest); will(throwException(new ResourceNotFoundException())); one(notFoundHandler).couldntFind(request); } }); lookup.intercept(null, null, null); mockery.assertIsSatisfied(); }
public void setUp() throws Exception { SampleFileUtility.makeSampleFiles(); root = InMemoryPage.makeRoot("RootPage"); pageBuilder = new PageBuilder(); pageOnePath = PathParser.parse("PageOne"); pageOneTwoPath = PathParser.parse("PageOne.PageTwo"); context = FitNesseUtil.makeTestContext(root); }
public void areEquals() throws Exception { FixedMethodStrategy first = new FixedMethodStrategy("/uri", list, EnumSet.of(HttpMethod.GET), control, 0, new String[0]); FixedMethodStrategy second = new FixedMethodStrategy("/uri", list, EnumSet.of(HttpMethod.GET), control, 2, new String[0]); FixedMethodStrategy third = new FixedMethodStrategy("/different", list, EnumSet.of(HttpMethod.GET), control, 2, new String[0]); FixedMethodStrategy forth = new FixedMethodStrategy("/uri", list, EnumSet.of(HttpMethod.POST), control, 2, new String[0]); assertThat(first, equalTo(second)); assertThat(first, not(equalTo(third))); assertThat(first, not(equalTo(forth))); }
public static String defaultString(final String str, final String fallback) { return isNullOrEmpty(str) ? fallback : str; }
public void classicRoundUp() throws Exception { assertTrue(approximatelyEqual("3.05", "3.049")); }
protected VariableResolver initializeVariableResolver(Map variables) { variables.putAll(getProject().getProperties()); variables.put("name", getProject().getName()); variables.put("artifactId", getProject().getArtifactId()); variables.put("groupId", getProject().getGroupId()); variables.put("version", getProjectVersion()); variables.put("description", getProject().getDescription()); variables.put("extension", "deb"); variables.put("baseDir", getProject().getBasedir().getAbsolutePath()); variables.put("buildDir", buildDirectory.getAbsolutePath()); variables.put("project.version", getProject().getVersion()); variables.put("url", getProject().getUrl()); return new MapVariableResolver(variables); }
public void getArgumentsFromParameterizedInvocation() throws Exception { makeScenarioTable("|scenario|login user _ password _|name,password|\n"); String[] arguments = st.matchParameters("login user Bob password xyzzy"); assertEquals(2, arguments.length); assertEquals("Bob", arguments[0]); assertEquals("xyzzy", arguments[1]); }
public void shouldAddInterceptorsInOrder() throws InterceptionException, IOException { final Sequence sequence = mockery.sequence("executionSequence"); mockery.checking(new Expectations() { { one(stack).add(ResourceLookupInterceptor.class); inSequence(sequence); one(stack).add(URLParameterExtractorInterceptor.class); inSequence(sequence); one(stack).add(InterceptorListPriorToExecutionExtractor.class); inSequence(sequence); one(stack).add(MultipartInterceptor.class); inSequence(sequence); one(stack).add(instantiator); inSequence(sequence); one(stack).add(ParametersInstantiatorInterceptor.class); inSequence(sequence); one(stack).add(ExecuteMethodInterceptor.class); inSequence(sequence); one(stack).next(null, null); inSequence(sequence); } }); execution.execute(); mockery.assertIsSatisfied(); }
protected void setUp() throws Exception { super.setUp(); BlockingQueue<Runnable> wq = new LinkedBlockingQueue<Runnable>(); es = new ThreadPoolExecutor(10, 10, 5 * 60, TimeUnit.SECONDS, wq); }
private boolean isPossibleOutput( File file ) { if (file == null) { return false; } if (file.exists()) { return file.isFile() && file.canWrite(); } return true; }
String makeFullPathOfTarget(String wikiWordPath); String findParentPath(String targetName); Maybe<SourcePage> findIncludedPage(String pageName); Collection<SourcePage> getChildren(); boolean hasProperty(String propertyKey); String getProperty(String propertyKey); }
public void runTests(TestPage pageToTest) throws IOException { initializeTest(pageToTest); testStarted(pageToTest); try { processAllTablesOnPage(pageToTest);
public Maybe<Symbol> parse(Symbol current, Parser parser) { SymbolType type = current.getType(); String literal = parser.parseLiteral(closeType()); if (parser.atEnd()) return Symbol.nothing; return new Maybe<Symbol>(new Symbol(type, literal)); }
public void newTestStarted(WikiTestPage testedPage) { testResponse = new TestExecutionReport(); setPage(testedPage.getSourcePage()); super.newTestStarted(testedPage); }
public <T> OperationFuture<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc) { return asyncCAS(key, casId, 0, value, tc); }
public void canBuildInstructionsForTableWithVariables() throws Exception { makeDecisionTableAndBuildInstructions( "|DT:fixture|\n" + "|var|func?|\n" + "|3|$V=|\n" + "|$V|9|\n" ); List<Object> expectedInstructions = list( list("decisionTable_id_0", "make", "decisionTable_id", "fixture"), list("decisionTable_id_1", "call", "decisionTable_id", "table", list(list("var", "func?"), list("3", "$V="), list("$V", "9"))), list("decisionTable_id_2", "call", "decisionTable_id", "reset"), list("decisionTable_id_3", "call", "decisionTable_id", "setVar", "3"), list("decisionTable_id_4", "call", "decisionTable_id", "execute"), list("decisionTable_id_5", "callAndAssign", "V", "decisionTable_id", "func"), list("decisionTable_id_6", "call", "decisionTable_id", "reset"), list("decisionTable_id_7", "call", "decisionTable_id", "setVar", "$V"), list("decisionTable_id_8", "call", "decisionTable_id", "execute"), list("decisionTable_id_9", "call", "decisionTable_id", "func") ); assertEquals(expectedInstructions.toString(), instructions.toString()); }
String getState();  String getQuorumAddress();  int getElectionType();  String getElectionAddress();  String getClientAddress();  String getLearnerType();  long getConfigVersion();  String getQuorumSystemInfo();  boolean isPartOfEnsemble();  boolean isLeader(); }
public void surplusErrors() throws Exception { assertTableResults("|2|4|\n", ListUtility.<Object>list(
public void testNoSearchStringBringsUpNoResults() throws Exception { String content = getResponseContentUsingSearchString(""); assertSubString("No pages matched your search criteria.", content); }
void addExpectation(Expectation e); Map<String, ScenarioTable> getScenarios(); void incrementPassedTestsCount(); void incrementFailedTestsCount(); void incrementErroredTestsCount(); void incrementIgnoredTestsCount(); }
private void testKeyfile(String dbAsset, String keyAsset, String password) throws Exception { Context ctx = getContext(); File sdcard = Environment.getExternalStorageDirectory(); String keyPath = sdcard.getAbsolutePath() + "/key"; TestUtil.extractKey(ctx, keyAsset, keyPath); AssetManager am = ctx.getAssets(); InputStream is = am.open(dbAsset, AssetManager.ACCESS_STREAMING); ImporterV3 importer = new ImporterV3(); importer.openDatabase(is, password, keyPath); is.close(); }
public void testMakeNullAuthenticator() throws Exception { Authenticator a = FitNesse.makeAuthenticator(null, new ComponentFactory("blah")); assertTrue(a instanceof PromiscuousAuthenticator); }
public void ignoredCellWithMessageShouldRenderMessageAsIgnored() { HtmlTable.Cell cell = new HtmlTable.Cell("original content"); cell.setTestResult(SlimTestResult.ignore("a message")); assertThat(cell.formatTestResult(), is("<span class=\"ignore\">a message</span>")); }
public static Database GetDb1(Context ctx, boolean forceReload) throws Exception { if ( mDb1 == null || forceReload ) { mDb1 = GetDb(ctx, TEST1_KDB, TEST1_PASSWORD, TEST1_KEYFILE, "/sdcard/test1.kdb"); } return mDb1; }
public void supportsComponentFactoriesForCustomInstantiation() {
public void canInclude() throws Exception { PageCrawler crawler = root.getPageCrawler(); WikiPage includingPage = crawler.addPage(root, PathParser.parse("IncludingPage"), "!include IncludedPage\n"); crawler.addPage(root, PathParser.parse("IncludedPage"), "|a|\n"); TableScanner ts = new TableScanner(includingPage.getData()); assertEquals(1, ts.getTableCount()); Table t = ts.getTable(0); assertEquals("a", t.getCellContents(0, 0)); assertTrue(ts.toWikiText(), ts.toWikiText().indexOf("|a|") != -1); }
public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) { if(rc != BKException.Code.OK) fail("Return code is not OK: " + rc); SyncObj x = (SyncObj) ctx; synchronized (x) { x.counter++;
public static Date readTime(byte[] buf, int offset, Calendar time) { int dw1 = Types.readUByte(buf, offset); int dw2 = Types.readUByte(buf, offset + 1); int dw3 = Types.readUByte(buf, offset + 2); int dw4 = Types.readUByte(buf, offset + 3); int dw5 = Types.readUByte(buf, offset + 4);
public void testRegularExpression() throws Exception { assertTrue("Match 1", Pattern.matches(AnchorMarkerWidget.REGEXP, ".#anchorName")); assertFalse("Match 2", Pattern.matches(AnchorMarkerWidget.REGEXP, ".# anchorName")); assertFalse("Match 3", Pattern.matches(AnchorMarkerWidget.REGEXP, ".#anchor Name")); assertFalse("Match 4", Pattern.matches(AnchorMarkerWidget.REGEXP, "blah.#anchorName")); }
public void describeTo(Description description) { description.appendText("a matching string"); }
public void testIsRunning() throws Exception { context = FitNesseUtil.makeTestContext(null, null, null, FitNesseUtil.PORT); FitNesse fitnesse = context.fitNesse.dontMakeDirs(); assertFalse(fitnesse.isRunning()); fitnesse.start(); assertTrue(fitnesse.isRunning()); fitnesse.stop(); assertFalse(fitnesse.isRunning()); }
public static List<HostPort> parseHostPortList(String hplist) { ArrayList<HostPort> alist = new ArrayList<HostPort>(); for (String hp: hplist.split(",")) { int idx = hp.lastIndexOf(':'); String host = hp.substring(0, idx); int port; try { port = Integer.parseInt(hp.substring(idx + 1)); } catch(RuntimeException e) { throw new RuntimeException("Problem parsing " + hp + e.toString()); } alist.add(new HostPort(host,port)); } return alist; }
public void processResult(int rc, String path, Object ctx, List<ACL> acl, Stat stat); } interface ChildrenCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, List<String> children); } interface StringCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, String name); } interface VoidCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx); } }
private InetSocketAddress resolve(InetSocketAddress address) { try { String curHostString = address.getHostString();
public static <T> Maybe<T> nothingBecause(String nothingReason) { return new Maybe<>(null, nothingReason); }
public String[] matchParameters(String invokingString) { String parameterizedName; if (parameterized) { parameterizedName = table.getCellContents(1, 0); } else { StringBuilder nameBuffer = new StringBuilder(); for (int nameCol = 1; nameCol < colsInHeader; nameCol += 2) nameBuffer.append(table.getCellContents(nameCol, 0)) .append(" _ "); parameterizedName = nameBuffer.toString().trim(); } return getArgumentsMatchingParameterizedName(parameterizedName, invokingString);
Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public T insideRequest(Container firstContainer) { return instanceFor(componentToBeRetrieved, firstContainer); }
public void shouldBeAbleToConvertNumbers() { assertThat(converter.convert("2", Short.class, bundle), is(equalTo((short) 2))); }
public T get(long duration, TimeUnit units) throws InterruptedException, TimeoutException { if(!latch.await(duration, units)) { throw new TimeoutException("Timed out waiting for operation"); } return objRef.get(); }
private void checkRequestLine(Matcher match) throws HttpException { if (!match.find()) throw new HttpException( "The request string is malformed and can not be parsed: '" + requestLine + "'"); if (!allowedMethods.contains(match.group(1))) throw new HttpException("The " + match.group(1)
public Map<String, Object> values() { Map<String, Object> m = new LinkedHashMap<String, Object>(); m.put("avg_" + name, this.getAvg()); m.put("min_" + name, this.getMin()); m.put("max_" + name, this.getMax()); m.put("cnt_" + name, this.getCount()); m.put("sum_" + name, this.getTotal()); return m; }
public void logScalaDependents() { _log.warn(" Expected all dependencies to require Scala version: " + _version); for(String dependString : scalaDependentArtifactStrings) { _log.warn(dependString);
public void checkWithFunction() throws Exception { buildInstructionsFor("|check|function|arg|result|\n"); List<CallInstruction> expectedInstructions = list( new CallInstruction("scriptTable_id_0", "scriptTableActor", "function", new Object[]{"arg"}) ); assertEquals(expectedInstructions, instructions); }
public Object intercept(Object instance, Method method, Object[] args, MethodProxy proxy) throws Throwable { if (resource != null) {
public Integer launchFitNesse(Arguments arguments) throws Exception { loadPlugins(); FitNesseContext context = loadContext(arguments); FitNesse fitnesse = new FitNesse(context); update(arguments, context); return launch(arguments, context, fitnesse); }
private <T> T registerAndGetFromContainer(final Class<T> component, final Class<?> componentToRegister) { return executeInsideRequest(new WhatToDo<T>() { public T execute(RequestInfo request, final int counter) {
protected SslConnection newSslConnection( final Connector connector, final EndPoint endPoint, final SSLEngine engine) { return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine); }
public String toString() { return super.toString() + version + ":" + new String(data)
private void verifyFilesAfterPurge(List<File> logs, boolean exists) { for (File file : logs) { Assert.assertEquals("After purging, file " + file, exists,
public void endMap(TreeMap<?, ?> v, String tag) throws IOException { stream.print("}"); dataSize += 1; isFirst = false; }
public void checkPasses() throws Exception { assertScriptResults("|check|func|3|\n", ListUtility.<List<?>>list(
public void simpleInputAndOutputFailing() throws Exception { makeTables( "!|scenario|echo|input|giving|output|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|DT:EchoGiving|\n" + "|input|output|\n" + "|7|8|\n" ); Map<String, Object> pseudoResults = SlimCommandRunningClient.resultToMap( list( list("decisionTable_did_0/scriptTable_s_id_0", "7") ) ); Assertion.evaluateExpectations(assertions, pseudoResults); String scriptTable = dt.getChildren().get(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output], [check, echo, 7, fail(a=7;e=8)]]"; assertEquals(expectedScript, scriptTable); String dtHtml = dt.getTable().toString(); assertEquals(0, getTestSummary().getRight()); assertEquals(1, getTestSummary().getWrong()); assertEquals(0, getTestSummary().getIgnores()); assertEquals(0, getTestSummary().getExceptions()); }
public void testTapDump() throws Exception { if (TestConfig.isMembase()) { TapClient tc =
Container provide(VRaptorRequest vraptorRequest); void stop(); void start(ServletContext context); }
public void checkin(final String... filePaths) throws RevisionControlException { SVNCommitClient commitClient = this.manager.getCommitClient(); try { final File[] files = files(filePaths);
public boolean isSuccessfullyStarted() { return client.isSuccessfullyStarted(); }
public void serialize(OutputArchive oa) throws IOException { oa.writeLong(zxid, "zxid"); oa.writeInt(digestVersion, "digestVersion"); oa.writeLong(digest, "digest"); }
public void join() { waitForDeathOf(process); timeMeasurement.stop(); exitCode = process.exitValue(); }
public void process(WatchedEvent event) { triggered.countDown(); }
public void testResponseWithMatchesWillReturnPageList() throws Exception { MockRequest request = setupRequest(); request.addInput(PAGE_TYPE, "Test"); String content = invokeResponder(request); String[] titles = { "Page", "Test", "PageOne"}; assertOutputHasRowWithLink(content, titles); request.addInput("Suites", "filter1"); content = invokeResponder(request); assertHasRegexp("Found 1 result for your search", content); String[] titles1 = { "Page", "Test", "Tags", "PageOne" }; assertOutputHasRowWithLink(content, titles1); assertOutputHasRowWithLabels("filter1,filter2"); }
public void testRecursiveQtyConcurrency() throws Exception { WatchManager manager = new WatchManager(); ExecutorService threadPool = Executors.newFixedThreadPool(clientQty); List<Future<?>> tasks = null; CountDownLatch completedLatch = new CountDownLatch(clientQty); try { tasks = IntStream.range(0, clientQty) .mapToObj(__ -> threadPool.submit(() -> iterate(manager, completedLatch))) .collect(Collectors.toList()); completedLatch.await(); } finally { if (tasks != null) { tasks.forEach(t -> t.cancel(true)); } threadPool.shutdownNow(); } int expectedRecursiveQty = (int) manager.getWatch2Paths().values() .stream() .flatMap(paths -> paths.values().stream()) .filter(stats -> stats.hasMode(WatcherMode.PERSISTENT_RECURSIVE)) .count(); assertEquals(expectedRecursiveQty, manager.getRecursiveWatchQty()); }
public void testConnFactoryWithoutOpFactory() throws Exception { try { client = new MemcachedClient(new DefaultConnectionFactory() {
public boolean startsLine(int startAt) { return startsLine(startAt, "\n"); }
public void shouldTellIfItIsASpecificationsSuite() throws Exception { WikiPage setUp = crawler.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = crawler.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); setUpForGetAllTestPages(); String content = "|Suite|\n|Title|Test|\n|Content|.|\n"; suite.commit(new PageData(suite,content)); SuiteContentsFinder finder = new SuiteContentsFinder(suite, null, root); List<WikiPage> testPages = finder.getAllPagesToRunForThisSuite(); assertEquals(2, testPages.size()); assertSame(testPage, testPages.get(1)); assertSame(testPage2, testPages.get(0));
String getSymbol(String symbolName); void setSymbol(String symbolName, String value); void addScenario(String scenarioName, ScenarioTable scenarioTable); ScenarioTable getScenario(String scenarioName); void addExpectation(Expectation e); Map<String, ScenarioTable> getScenarios(); void incrementPassedTestsCount(); void incrementFailedTestsCount(); void incrementErroredTestsCount(); void incrementIgnoredTestsCount(); }
public long getAvgRequestLatency();  public long getMaxRequestLatency();  public long getPacketsReceived();  public long getPacketsSent();  public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress(); }
public void visit(WikiWidget widget) throws Exception { } public void visit(WikiWordWidget widget) throws Exception { widget.renamePageIfReferenced(pageToRename, newName); } public void visit(AliasLinkWidget widget) throws Exception { widget.renamePageIfReferenced(pageToRename, newName); } }
public int getConnectionFreezeTime(); public void setConnectionFreezeTime(int val); public double getConnectionDropIncrease(); public void setConnectionDropIncrease(double val); public double getConnectionDropDecrease(); public void setConnectionDropDecrease(double val); public double getConnectionDecreaseRatio(); public void setConnectionDecreaseRatio(double val); public int getRequestThrottleLimit(); public void setRequestThrottleLimit(int requests); public int getRequestThrottleStallTime(); public void setRequestThrottleStallTime(int time); public boolean getRequestThrottleDropStale(); public void setRequestThrottleDropStale(boolean drop); public boolean getRequestStaleLatencyCheck(); public void setRequestStaleLatencyCheck(boolean check); public boolean getRequestStaleConnectionCheck(); public void setRequestStaleConnectionCheck(boolean check);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); public long getFlushDelay(); public void setFlushDelay(long delay); public long getMaxWriteQueuePollTime(); public void setMaxWriteQueuePollTime(long delay); public int getMaxBatchSize(); public void setMaxBatchSize(int size); }
void rest(int hours); void setLeg(int[] length); } @Test public void shouldNameObjectTypeAsItsSimpleName() throws SecurityException, NoSuchMethodException { assertThat(provider.parameterNamesFor(Horse.class.getMethod("runThrough", Field.class))[0], is(equalTo("field"))); } @Test public void shouldNamePrimitiveTypeAsItsSimpleName() throws SecurityException, NoSuchMethodException { assertThat(provider.parameterNamesFor(Horse.class.getMethod("rest", int.class))[0], is(equalTo("int"))); } @Test public void shouldNameArrayAsItsSimpleTypeName() throws SecurityException, NoSuchMethodException { assertThat(provider.parameterNamesFor(Horse.class.getMethod("setLeg", int[].class))[0], is(equalTo("intList"))); } @Test public void shouldNameGenericCollectionUsingOf() throws SecurityException, NoSuchMethodException { assertThat(provider.parameterNamesFor(Cat.class.getDeclaredMethod("fightWith", List.class))[0], is(equalTo("stringList"))); } static public interface Cat { void fightWith(List<String> cats); } }
public void flush() throws IOException { String record; synchronized (this) { super.flush(); record = this.toString(); super.reset(); } if (record.length() == 0 || record.equals(lineSeparator)) {
private void redirect(final WikiPagePath path, final SimpleResponse response) { String location = PathParser.render(path); if (location == null || location.length() == 0) { response.redirect(context.contextRoot, "root");
public void testAliasLinkRenamed() throws Exception { checkChangesOnPageOne("gunk [[gunk][PageTwo]] gunk", "gunk [[gunk][PageThree]] gunk"); }
private void errorOccurred(Throwable cause) throws IOException { wasInterrupted = true; writeData(String.format("<span class=\"error\">Could not complete testing: %s</span>", cause.toString())); }
public void shouldInstantiateArrayListForListInterface() throws Exception { GenericNullHandler handler = new GenericNullHandler(); List list = handler.instantiate(List.class); assertThat(list, is(notNullValue())); assertThat(list, is(instanceOf(ArrayList.class))); }
private void deserializeItem() { int itemLength = getLength(); String item = getString(itemLength); List<Object> sublist = maybeReadList(item); if (sublist == null) result.add(item);
public boolean visitChildren(Symbol node) { return !node.isType(Alias.symbolType); }
private final void closeElement() throws IOException { if (openElement) { w.write(">\n"); } openElement = false; }
public Class<?> findWidgetClassMatching(String value) { WidgetMatch firstMatch = findFirstMatch(value); return firstMatch == null ? null : firstMatch.getWidgetClass(); }
public void WhenHasTableThenIsTest() throws Exception { assertTrue(makePage("somewhere", "myfile.html", "stuff and <table>").getData().hasAttribute(PageType.TEST.toString())); }
long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
private String chopOffFixture(Class<?> fixtureClass) { return fixtureClass.getName().replaceAll("Fixture", ""); }
public void announceTestSystem(String testSystemName) { this.testSystemName = testSystemName; }
static String translateExceptionMessage(String exceptionMessage) { String tokens[] = exceptionMessage.split(" "); if (tokens[0].equals("COULD_NOT_INVOKE_CONSTRUCTOR")) return "Could not invoke constructor for " + tokens[1]; else if (tokens[0].equals("NO_METHOD_IN_CLASS")) return String.format("Method %s not found in %s", tokens[1], tokens[2]); else if (tokens[0].equals("NO_CONSTRUCTOR")) return String.format("Could not find constructor for %s", tokens[1]); else if (tokens[0].equals("NO_CONVERTER_FOR_ARGUMENT_NUMBER")) return String.format("No converter for %s", tokens[1]); else if (tokens[0].equals("NO_INSTANCE")) return String.format("The instance %s does not exist", tokens[1]); else if (tokens[0].equals("NO_CLASS")) return String.format("Could not find class %s", tokens[1]); else if (tokens[0].equals("MALFORMED_INSTRUCTION")) return String.format("The instruction %s is malformed", exceptionMessage.substring(exceptionMessage.indexOf(" ") + 1)); return exceptionMessage; }
public void tableWithExpression() throws Exception { getResultsForPageContents( "|DT:fitnesse.slim.test.TestSlim|\n" + "|string|getStringArg?|\n" + "|${=3+4=}|7|\n" ); TableScanner ts = new WikiTableScanner(responder.getTestResults()); Table dt = ts.getTable(0); assertEquals("!style_pass(7)", dt.getCellContents(1, 2)); }
private void checkContent() { TextSystem.make().findWhereUsed(currentPage, name -> { WikiPage referencedPage = new WikiWordReference(currentPage, name).getReferencedPage();
protected void addTestSystemListeners(RunNotifier notifier, MultipleTestsRunner testRunner, Class<?> suiteClass, DescriptionFactory descriptionFactory) { testRunner.addTestSystemListener(new JUnitRunNotifierResultsListener(notifier, suiteClass, descriptionFactory)); }
private HtmlTag makeEditForm(String resource, boolean firstTimeForNewPage) throws Exception { HtmlTag form = new HtmlTag("form"); form.addAttribute("name", "f"); form.addAttribute("action", resource); form.addAttribute("method", "post"); form.add(HtmlUtil.makeInputTag("hidden", "responder", "saveData")); form.add(HtmlUtil.makeInputTag("hidden", SAVE_ID, String.valueOf(SaveRecorder.newIdNumber()))); form.add(HtmlUtil.makeInputTag("hidden", TICKET_ID, String.valueOf((SaveRecorder.newTicket())))); if(request.hasInput("redirectToReferer") && request.hasHeader("Referer")) { String redirectUrl = request.getHeader("Referer").toString(); int questionMarkIndex = redirectUrl.indexOf("?"); if(questionMarkIndex > 0) redirectUrl = redirectUrl.substring(0, questionMarkIndex); redirectUrl += "?" + request.getInput("redirectAction").toString(); form.add(HtmlUtil.makeInputTag("hidden", "redirect", redirectUrl)); } form.add(createTextarea(firstTimeForNewPage)); form.add(createButtons()); form.add("<br/>Hints:\n<ul>" + "<li>Use alt+s (Windows) or control+s (Mac OS X) to save your changes. Or, tab from the text area to the \"Save\" button!</li>\n" + "<li>Grab the lower-right corner of the text area to increase its size.</li>\n" + "</ul>"); HtmlTag wizardForm = makeWizardForm(resource); TagGroup group = new TagGroup(); group.add(form); group.add(wizardForm); return group; }
boolean addGlobalSession(long id, int to);  boolean addSession(long id, int to);  boolean touchSession(long sessionId, int sessionTimeout);  void setSessionClosing(long sessionId);  void shutdown();  void removeSession(long sessionId);  boolean isTrackingSession(long sessionId);  public void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  public void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap(); }
private TestExecutionReport makeBadDummyTestResponse() { TestExecutionReport testResponse = new TestExecutionReport(); testResponse.version = "v1"; testResponse.rootPath = "rootPath"; testResponse.getFinalCounts().add(new TestSummary(1, 2, 3, 4)); TestExecutionReport.TestResult result = new TestExecutionReport.TestResult(); testResponse.results.add(result); result.right = "xx"; result.wrong = "22"; result.ignores = "33"; result.exceptions = "44"; result.relativePageName = "relativePageName"; result.content = "wad of HTML content"; return testResponse; }
public void execute() throws Exception { setRequest(new MockRequest()); details(); if (username != null) request.setCredentials(username, password); request.parseRequestUri("/" + uri); WikiPagePath path = PathParser.parse(request.getResource());
public void testExecutionStatusAppears() throws Exception { doSimpleRun(passFixtureTable()); assertHasRegexp("Tests Executed OK", results); }
public void setUp() throws Exception { mockery = new VRaptorMockery(); stack = mockery.mock(InterceptorStack.class); request = mockery.mock(HttpServletRequest.class); result = mockery.mock(HttpResult.class); deserializers = mockery.mock(Deserializers.class); methodInfo = new DefaultMethodInfo(); container = mockery.mock(Container.class); interceptor = new DeserializingInterceptor(request, result, deserializers, methodInfo, container); consumeXml = new DefaultResourceMethod(null, DummyResource.class.getDeclaredMethod("consumeXml")); doesntConsume = new DefaultResourceMethod(null, DummyResource.class.getDeclaredMethod("doesntConsume")); }
public void initNewGroup(String nm, PwGroupId newId) { setId(newId); name = nm; }
synchronized public static void close(String contextPath, String session) { String uri = concat(contextPath, session); TimerTask t = zkSessionTimers.remove(uri); if (t != null) { t.cancel(); } ZooKeeper zk = zkMap.remove(uri); if (zk == null) { return; } try { zk.close();
ChannelBuffer computeDigestAndPackageForSending(long entryId, long lastAddConfirmed, byte[] data) { byte[] bufferArray = new byte[24+macCodeLength]; ByteBuffer buffer = ByteBuffer.wrap(bufferArray); buffer.putLong(ledgerId); buffer.putLong(entryId); buffer.putLong(lastAddConfirmed); buffer.flip(); update(buffer.array(), 0, 24); update(data); byte[] digest = getValueAndReset(); buffer.limit(buffer.capacity()); buffer.position(24); buffer.put(digest); buffer.flip(); return ChannelBuffers.wrappedBuffer(ChannelBuffers.wrappedBuffer(buffer), ChannelBuffers.wrappedBuffer(data)); }
public DefaultXMLSerializer namespace(String uri, String prefix) { this.namespaceUri = uri; this.namespacePrefix = prefix; return this; }
static void verifyThreadTerminated(Thread thread, long millis) throws InterruptedException { thread.join(millis); if (thread.isAlive()) { LOG.error("Thread " + thread.getName() + " : "
public void include() { delegate.include(); throwException(); }
public void asyncCreateLedger(int ensSize, int qSize, QMode mode, byte passwd[], CreateCallback cb, Object ctx ) throws KeeperException, InterruptedException, IOException, BKException { CreateLedgerOp op = new CreateLedgerOp(ensSize, qSize, mode, passwd, cb, ctx); LedgerManagementProcessor lmp = getMngProcessor(); lmp.addOp(op);
public void canExecuteConstructorWhenDoubleArgType() throws Throwable {
public void closeSession(long sessionId) throws KeeperException, InterruptedException { ZooLog.logTextTraceMessage("ZooKeeperServer --- Session to be closed: " + sessionId, ZooLog.SESSION_TRACE_MASK);
public void process(WikiPage p) { items.addAll(getItemsFromPage(p)); }
<T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(String mechs[], CallbackHandler cbh) throws OperationException;  Set<String> listSaslMechanisms(); }
public void cmPluginCalledForWrite() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("TestPage"), "!define CM_SYSTEM {fitnesse.wiki.FileSystemPageTest xxx}"); page.commit(page.getData()); assertEquals(4, cmMethodCalls.size()); assertEquals("edit " + defaultPath + "/RooT/TestPage/content.txt|fitnesse.wiki.FileSystemPageTest xxx", cmMethodCalls.get(0)); assertEquals("update " + defaultPath + "/RooT/TestPage/content.txt|fitnesse.wiki.FileSystemPageTest xxx", cmMethodCalls.get(1)); assertEquals("edit " + defaultPath + "/RooT/TestPage/properties.xml|fitnesse.wiki.FileSystemPageTest xxx", cmMethodCalls.get(2)); assertEquals("update " + defaultPath + "/RooT/TestPage/properties.xml|fitnesse.wiki.FileSystemPageTest xxx", cmMethodCalls.get(3)); }
Result include(String key, Object value); <T extends View> T use(Class<T> view);  boolean used();  Map<String, Object> included();  void forwardTo(String uri);  <T> T forwardTo(Class<T> controller);  <T> T redirectTo(Class<T> controller);  <T> T of(Class<T> controller);  <T> T redirectTo(T controller);  <T> T forwardTo(T controller);  <T> T of(T controller); }
public void testVerboseOption() throws Exception { runner.args(new String[] {"-v", "blah", "80", "blah"}); assertEquals(1, runner.handler.subHandlers.size()); Object o = runner.handler.subHandlers.get(0); assertTrue(o instanceof StandardResultHandler); assertTrue(runner.verbose); }
public static String translateTemplate(VelocityContext velocityContext, String templateFileName) throws Exception { Template template = instance.getVelocityEngine().getTemplate(templateFileName); StringWriter writer = new StringWriter(); template.merge(velocityContext, writer); return writer.toString(); }
public void shouldReplaceOldMatchForSecondTableEvenIfThereIsNoMatchForFirstTable() throws Exception { comparer.tableMatches.add(new HistoryComparer.MatchedPair(3, 2, 1.0)); comparer.setMatchIfItIsTheTablesBestMatch(1,2,1.1); assertEquals(1.1, comparer.tableMatches.get(0).matchScore, .001); assertEquals(1, comparer.tableMatches.size()); }
protected void tearDown() throws Exception { serverList = TestConfig.IPV4_ADDR + ":11211"; super.tearDown(); }
private static boolean matches(Set<String> words, String value) { return words.contains(value); }
private StringBuilder generateConfig(int numServers, int[][] ports, HashSet<Integer> observerIds) { StringBuilder sb = new StringBuilder(); for (int i = 0; i < numServers; i++) { String server = "server." + i + "=localhost:" + ports[i][0] + ":" + ports[i][1] + ":" + (observerIds.contains(i) ? "observer" : "participant") + ";localhost:" + ports[i][2]; sb.append(server + "\n"); } return sb; }
private void doScores() { for(int frame = 0; frame < 10; frame++) {
public T get(long duration, TimeUnit units) throws InterruptedException, TimeoutException { latch.await(duration, units); return obj; }
protected void verify() { try { latch.await(defaultTimeoutMillis, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { fail("unexpected interrupt"); }
public TagGroup makeTailHtml(WikiImporter importer) throws Exception { TagGroup tail = new TagGroup(); tail.add("<a name=\"end\"><hr></a>"); tail.add(HtmlUtil.makeBold("Import complete. ")); addUnmodifiedCount(importer, tail); tail.add(HtmlUtil.BR); addImportedPageCount(importer, tail); addOrphanedPageSection(importer, tail); addAutoUpdateMessage(importer, tail); return tail; }
public void run() { synchronized (markerNode) {
synchronized public void resetLatency() { totalLatency = count = maxLatency = 0; minLatency = Long.MAX_VALUE; }
private DisconnectableZooKeeper createClient(int timeout, CountdownWatcher watcher) throws IOException, InterruptedException { DisconnectableZooKeeper zk = new DisconnectableZooKeeper(HOSTPORT, timeout, watcher); if(!watcher.clientConnected.await(timeout, TimeUnit.MILLISECONDS)) { Assert.fail("Unable to connect to server"); } return zk; }
private void tryProcessInstructions(Socket s) throws Exception { initialize(s); while (true) processOneSetOfInstructions();
public void testReadSystemPropertyIfPagePropertyDoesNotExist() { String pageText = "!define TEST_PROPERTY {foo}\n"; System.setProperty("test.property", "bar"); WikiPage page = makeTestPage(pageText); Descriptor descriptor = new WikiPageDescriptor(page, false, false, getClassPath(page)); assertEquals("foo", descriptor.getVariable("TEST_PROPERTY")); assertEquals("bar", descriptor.getVariable("test.property")); }
private File createFileFromPath(String linkPath) {
private static AssignInstruction createAssignInstruction(String id, List<Object> words) { String symbolName = getWord(words, 2); String value = getWord(words, 3); return new AssignInstruction(id, symbolName, value); }
public void write(OutputStream os) throws IOException { os.write("after".getBytes(StandardCharsets.US_ASCII)); os.flush(); assertTrue(tmp.exists(), "implementation of AtomicFileOutputStream has changed, update the test"); throw new IOException(); }
public void jdkSplit() throws Exception { LevelState previous = new LevelState(); previous = assertLevelState("/home/hub/p/eee/src/main/scala:-1: info: compiling", previous, Level.INFO, null); previous = assertLevelState("Compiling 128 source files to /home/hub/p/eee/target/classes at 1312794546514", previous, Level.INFO, null); previous = assertLevelState("Recompiling 1 files", previous, Level.INFO, null); previous = assertLevelState("/home/hub/p/eee/src/main/scala/Service.scala:72: error: type mismatch;", previous, Level.ERROR, "^"); previous = assertLevelState("found : Unit", previous, Level.ERROR, "^"); previous = assertLevelState("required: () => Any", previous, Level.ERROR, "^"); previous = assertLevelState("f()", previous, Level.ERROR, "^"); previous = assertLevelState(" ^", previous, Level.ERROR, null); previous = assertLevelState( "/home/hub/p/eee/src/main/scala/src/main/scala/Service.scala:79: error: type mismatch;", previous, Level.ERROR, "^"); previous = assertLevelState("found : Unit", previous, Level.ERROR, "^"); previous = assertLevelState("required: () => Any", previous, Level.ERROR, "^"); previous = assertLevelState("f()", previous, Level.ERROR, "^"); previous = assertLevelState("^", previous, Level.ERROR, null); previous = assertLevelState("two errors found", previous, Level.ERROR, null); previous = assertLevelState("------------------------------------------------------------------------", previous, Level.INFO, null); previous = assertLevelState("BUILD ERROR", previous, Level.ERROR, null); previous = assertLevelState("------------------------------------------------------------------------", previous, Level.INFO, null); previous = assertLevelState( "wrap: org.apache.commons.exec.ExecuteException: Process exited with an error: 1(Exit value: 1)", previous,
CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void startClients() throws IOException { for(int i = 0; i < clientCount; i++) { startClient(i);
private void announceTotalTestsToRun(PagesByTestSystem pagesByTestSystem) { int tests = 0; for (LinkedList<WikiPage> listOfPagesToRun : pagesByTestSystem.values()) { tests += listOfPagesToRun.size(); } resultsListener.announceNumberTestsToRun(tests); }
protected void match(List<?> expected, List<?> computed, int col) { if(col >= columnBindings.length) {
public void setup() { this.converter = new PrimitiveShortConverter(); this.bundle = ResourceBundle.getBundle("messages"); }
public Maybe<String> findVariable(String key) { String value; if (key.equals("PAGE_NAME")) value = namedPage.getName(); else if (key.equals("PAGE_PATH")) value = namedPage.getPath(); else return Maybe.noString; return new Maybe<String>(value); }
private void appendFrameTypes(final boolean local, final int n, final Object[] types) { for (int i = 0; i < n; ++i) { Object type = types[i];
private void executeTestPages() throws Exception { Map<TestSystem.Descriptor, LinkedList<WikiPage>> pagesByTestSystem; String suiteQuery = getSuiteQuery(); pagesByTestSystem = makeMapOfPagesByTestSystem(page, root, suiteQuery); for (TestSystem.Descriptor descriptor : pagesByTestSystem.keySet()) executePagesInTestSystem(descriptor, pagesByTestSystem);
public StatsOperation stats(String arg, net.spy.memcached.ops.StatsOperation.Callback cb) { return new StatsOperationImpl(arg, cb); }
public void testParameterInIsoFormatWithSpecificTimezone() { Long result = resolver.resolveOutputTimestamp("2021-01-01T12:00:00+13:00"); assertEquals((Long) 1609455600000L, result); }
default void registerTestRunFactories(TestRunFactoryRegistry runFactoryRegistry) throws PluginException { } default void registerMarkupSystems(MarkUpSystems systems) {} }
public String toString(Map hash) { if (hash == null) { return NULL_VALUE; } HtmlTag table = createTag(hash); return table.html().trim(); }
public State add(String... filePaths) throws RevisionControlException; public State checkin(String... filePaths) throws RevisionControlException; public State checkout(String... filePaths) throws RevisionControlException; public State delete(String... filePaths) throws RevisionControlException; public State revert(String... filePaths) throws RevisionControlException; public State checkState(String... filePaths) throws RevisionControlException; public State update(String... filePaths) throws RevisionControlException; public PageData getRevisionData(FileSystemPage page, String label) throws Exception; public Collection<VersionInfo> history(FileSystemPage page) throws Exception; public VersionInfo makeVersion(FileSystemPage page, PageData data) throws Exception; public void removeVersion(FileSystemPage page, String versionName) throws Exception; public State getState(String state); public void prune(FileSystemPage page) throws Exception; public State execute(RevisionControlOperation operation, String... filePaths) throws RevisionControlException; public boolean isExternalReversionControlEnabled(); }
public static int toMode( String modeString ) { int mode = -1; if (modeString != null && modeString.length() > 0) { mode = Integer.parseInt(modeString, 8); } return mode; }
public void testDeleteWithInvalidVersionNo() throws Exception { final ZooKeeper zk = createClient(); ZooKeeperMain zkMain = new ZooKeeperMain(zk); String cmdstring = "create -s -e /node1 data "; String cmdstring1 = "delete /node1 2";
private HtmlTag makeAttributeRadio(String group, String attribute, boolean checked) throws Exception { HtmlTag radioButton = makeRadioButton(group, attribute); if (checked) radioButton.addAttribute("checked", "checked"); return radioButton; }
public abstract void addOption(String key, String value);  public abstract void addOption(String key, File value);  public abstract void addOption(String key, boolean value);  public abstract void setLogOnly(boolean v);
public void shouldAllowCustomPathResolverWhileForwarding() throws ServletException, IOException { DefaultPageResult view = new DefaultPageResult(request, response, method, fixedResolver); mockery.checking(new Expectations() { { one(request).getRequestDispatcher("fixed"); will(returnValue(dispatcher)); one(dispatcher).forward(request, response); } }); view.forward("ok"); mockery.assertIsSatisfied(); }
public void testChecksNotMatchFilterSuite() throws Exception { SuiteFilter filter = new SuiteFilter(null, "bad", null); WikiPage failSuite = addTestPage(root, "FailSuite", "Bad Test"); PageData data = failSuite.getData(); data.setAttribute(PageData.PropertySUITES, "bad"); data.setAttribute("Suite"); failSuite.commit(data); assertFalse(filter.getFilterForTestsInSuite(failSuite).hasMatchingTests()); }
public void testPageTypePropertiesTestHtml() throws Exception { WikiPage page = WikiPageUtil.addPage(root, PathParser.parse("SomePage")); PageData data = page.getData(); data.setAttribute("Test"); page.commit(data); request.setResource(page.getPageCrawler().getFullPath().toString()); SimpleResponse response = (SimpleResponse) new PropertiesResponder().makeResponse(context, request); String html = response.getContent(); assertSubString("Page type:", html); assertSubString("<input type=\"radio\" id=\"Static\" name=\"PageType\" value=\"Static\"/>", html); assertSubString("<input type=\"radio\" id=\"Test\" name=\"PageType\" value=\"Test\" checked=\"checked\"/>", html); assertSubString("<input type=\"radio\" id=\"Suite\" name=\"PageType\" value=\"Suite\"/>", html); assertSubString("<input type=\"checkbox\" id=\"Prune\" name=\"Prune\"/>", html); }
public void testQuota() throws IOException, InterruptedException, KeeperException, Exception { final ZooKeeper zk = createClient(); final String path = "/a/b/v";
public Response makeResponse(FitNesseContext context, Request request) { response = new SimpleResponse(); resource = request.getResource(); path = PathParser.parse(resource); PageCrawler crawler = context.root.getPageCrawler(); page = crawler.getPage(path, new MockingPageCrawler()); if (page == null) return new NotFoundResponder().makeResponse(context, request); pageData = page.getData(); makeContent(context, request); response.setMaxAge(0); return response; }
public void testRunnerDefault() throws Exception { String pageText = "!define TEST_SYSTEM {slim}\n"; WikiPage page = makeTestPage(pageText); Descriptor defaultDescriptor2 = TestSystem.getDescriptor(page.getData(), false); assertEquals("fitnesse.slim.SlimService", defaultDescriptor2.testRunner); Descriptor defaultDescriptor3 = TestSystem.getDescriptor(page.getData(), true); assertEquals("fitnesse.slim.SlimService", defaultDescriptor3.testRunner); String specifiedPageText = "!define REMOTE_DEBUG_RUNNER {Different runner}"; WikiPage specifiedPage = makeTestPage(specifiedPageText); Descriptor specifiedDescriptor = TestSystem.getDescriptor(specifiedPage.getData(), true); assertEquals("Different runner", specifiedDescriptor.testRunner); }
private Set<String> findStereotypes(Map<String, Set<String>> webInfClassesAnnotationMap, Map<String, Set<String>> basePackagesAnnotationMap, List<String> basePackages) { HashSet<String> results = new HashSet<String>(); addVRaptorStereotypes(results); addWebInfClassesStereotypes(webInfClassesAnnotationMap, results); addBasePackagesStereotypes(basePackagesAnnotationMap, basePackages, results); return results; }
public void emptyHistoryDirectoryShouldShowNoPages() throws Exception { TestHistory history = new TestHistory(resultsDirectory); assertEquals(0, history.getPageNames().size()); }
<T> T movedPermanentlyTo(Class<T> controller);  void unsupportedMediaType(String errorMessage);  void notAcceptable();  void accepted(); }
public void processResult(int rc, String path, Object ctx, int number) { if (path == null) { fail((String.format("the path of getAllChildrenNumber was null."))); } assertEquals(13, number); doneProcessing.countDown(); }
long getSessionId(); int getTimeout(); boolean isClosing(); } interface SessionExpirer { void expire(Session session); long getServerId(); } long createSession(int sessionTimeout);  boolean trackSession(long id, int to);  boolean commitSession(long id, int to);  boolean touchSession(long sessionId, int sessionTimeout);  void setSessionClosing(long sessionId);  void shutdown();  void removeSession(long sessionId);  boolean isTrackingSession(long sessionId);  void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap();  long getLocalSessionCount(); boolean isLocalSessionsEnabled();  Set<Long> globalSessions();  Set<Long> localSessions(); }
public void searchesOnAddedParameters() { vraptor.setParameter("minimum", "12"); assertThat(vraptor.getParameter("minimum"), is(equalTo("12"))); mockery.assertIsSatisfied(); }
public void allTestingComplete(TimeMeasurement totalTimeMeasurement) throws IOException; public void setExecutionLogAndTrackingId(String stopResponderId, CompositeExecutionLog log); public void announceNumberTestsToRun(int testsToRun); public void testSystemStarted(TestSystem testSystem); public void newTestStarted(WikiTestPage test, TimeMeasurement timeMeasurement) throws IOException; public void testOutputChunk(String output) throws IOException; public void testAssertionVerified(Assertion assertion, TestResult testResult); public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); public void testComplete(WikiTestPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws IOException; public void errorOccured(); }
Maybe<String> render(Scanner scanner); boolean sameAs(Token other); }
protected void registerComponents(ComponentRegistry container) { singleInterfaceRegister(StupidTranslator.class, container); singleInterfaceRegister(DefaultResourceRegistry.class, container); singleInterfaceRegister(DefaultDirScanner.class, container); singleInterfaceRegister(WebInfClassesScanner.class, container); singleInterfaceRegister(DefaultInterceptorRegistry.class, container); singleInterfaceRegister(AsmBasedTypeCreator.class, container); singleInterfaceRegister(DefaultMethodLookupBuilder.class, container); singleInterfaceRegister(DefaultPathResolver.class, container); singleInterfaceRegister(ParanamerNameProvider.class, container); singleInterfaceRegister(DefaultConverters.class, container); singleInterfaceRegister(DefaultMethodParameters.class, container); singleInterfaceRegister(DefaultRequestParameters.class, container); singleInterfaceRegister(DefaultInterceptorStack.class, container); singleInterfaceRegister(DefaultRequestExecution.class, container); singleInterfaceRegister(DefaultResult.class, container); singleInterfaceRegister(DefaultPageResult.class, container); singleInterfaceRegister(OgnlParametersProvider.class, container); singleInterfaceRegister(DefaultRequestInfo.class, container); singleInterfaceRegister(DefaultValidator.class, container); container.register(EmptyElementsRemoval.class, EmptyElementsRemoval.class); container.register(ParametersInstantiatorInterceptor.class, ParametersInstantiatorInterceptor.class); container.register(InterceptorListPriorToExecutionExtractor.class, InterceptorListPriorToExecutionExtractor.class); container.register(URLParameterExtractorInterceptor.class, URLParameterExtractorInterceptor.class); container.register(ResourceLookupInterceptor.class, ResourceLookupInterceptor.class); container.register(InstantiateInterceptor.class, InstantiateInterceptor.class); container.register(ExecuteMethodInterceptor.class, ExecuteMethodInterceptor.class); }
public static FitNesseContext makeTestContext(WikiPage root) { FitNesseContext context = new FitNesseContext(root);
