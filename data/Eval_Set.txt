public void startServingSubscription(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom, DeliveryEndPoint endPoint, MessageFilter filter, boolean isHubSubscriber) { lastRequest.add(new StartServingRequest(topic, subscriberId, seqIdToStartFrom, endPoint, filter, isHubSubscriber));
private String replaceSymbolsInString(String arg) { int startingPosition = 0; while (true) { if ("".equals(arg) || null == arg) { break; } Matcher symbolMatcher = SYMBOL_PATTERN.matcher(arg); if (symbolMatcher.find(startingPosition)) { String symbolName = symbolMatcher.group(1); arg = replaceSymbolInArg(symbolMatcher, arg, symbolName); startingPosition = symbolMatcher.start(1); } else { break; } } return arg; }
public void testPathWithVariable() throws Exception { String text = "!define BASE {/my/base/}\n!path ${BASE}*.jar\n"; WidgetRoot root = new WidgetRoot(text, new WikiPageDummy()); String html = root.render(); assertSubString("/my/base/*.jar", html); }
private void releaseQueuedBuffer() { checkIsInEventLoop("releaseQueuedBuffer"); if (queuedBuffer != null) { queuedBuffer.release();
public PwGroupV3 newGroup(String name, PwGroupV3 parent) {
public void shutdown() { synchronized (omap) { for (Map.Entry<TapStream, TapConnectionProvider> me : omap.entrySet()) {
Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
public void handleNullSymbols() throws Exception { caller.setVariable("x", null); Object result = caller.call("testSlim", "echoString", new Object[]{"$x"}); Assert.assertNull(result); }
public void addTestSystemListener(TestSystemListener listener) { testSystemListener.addTestSystemListener(listener); }
public void testCheckAndIncVersionWithNegativeNumber() throws Exception { zks.getZKDatabase().dataTree.createNode("/foo", new byte[0], Ids.OPEN_ACL_UNSAFE, 0, 0, 0, 0); DataNode node = zks.getZKDatabase().dataTree.getNode("/foo"); node.stat = DataTree.createStat(Integer.MIN_VALUE); pLatch = new CountDownLatch(1); processor = new PrepRequestProcessor(zks, new MyRequestProcessor()); SetDataRequest record = new SetDataRequest("/foo", new byte[0], Integer.MIN_VALUE); Request req = createRequest(record, OpCode.setData, false); processor.pRequest(req); pLatch.await(); assertEquals(OpCode.setData, outcome.getHdr().getType()); assertTrue(outcome.getTxn() instanceof SetDataTxn); SetDataTxn setDataTxn = (SetDataTxn) outcome.getTxn(); assertEquals(Integer.MIN_VALUE + 1, setDataTxn.getVersion()); }
void endRecord(Record r, String tag) throws IOException; void startVector(List<?> v, String tag) throws IOException; void endVector(List<?> v, String tag) throws IOException; void startMap(TreeMap<?, ?> v, String tag) throws IOException; void endMap(TreeMap<?, ?> v, String tag) throws IOException; long getDataSize(); }
private HtmlTag buildFeedbackModificationScript() throws Exception { HtmlTag script = new HtmlTag("script"); script.addAttribute("language", "javascript"); script.add("document.getElementById(\"feedback\").innerHTML = '" + getPageFooterInfo(hits) + "'"); return script; }
public void testUnavailableServers() { client.getVersions(); assertEquals(Collections.emptyList(), client.getUnavailableServers()); }
Counter getCounter(String name);  boolean registerGauge(String name, Gauge gauge); static enum DetailLevel {  BASIC,  ADVANCED }  Summary getSummary(String name, DetailLevel detailLevel);  SummarySet getSummarySet(String name, DetailLevel detailLevel); }
public ExtJSJson addTotal(Integer total) { this.total = total; return this; }
public void testMain() throws Exception { assertSubString("<div class=\"main", html); }
public void random() { ArrayList<Client> all = new ArrayList<Client>(repository.all()); Client client = all.get((int) (Math.random() * all.size())); result.use(Results.logic()).redirectClientTo(ClientsController.class).view(client); }
public final void addOp(Operation op) { if (opQueueMaxBlockTimeNs == null) { if (!inputQueue.offer(op))
public boolean removeObserver(ConnectionObserver obs) { return mconn.removeObserver(obs); }
private long mutateWithDefault(Mutator t, String key, int by, long def, int exp) { long rv=mutate(t, key, by, def, exp);
public void stopListening() { if (!isFingerprintInitialized()) { return; } if (cancellationSignal != null) { cancellationSignal.cancel();
public void scala2_12_should_generate_null_for_unsupported_java_versions() { assertNull(ScalaMojoSupport.targetOption("11", new VersionNumber("2.12.11"))); assertNull(ScalaMojoSupport.targetOption("17", new VersionNumber("2.12.11"))); }
private ServerSocket tryCreateServerSocket(int port) throws IOException { ServerSocket socket; try { socket = new ServerSocket(port); } catch (BindException e) { System.out.println("Bind exception on port = " + port); throw e; } return socket; }
private double scoreCellContent(int row, int col) { String content1 = table1.getCellContents(col, row); String content2 = table2.getCellContents(col, row); if (contentMatches(content1, content2)) return 1;
String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); String getCellResult(int col,int row); void appendCellToRow(int row, Table table); void setTestStatusOnRow(int row, boolean testStatus); void setName(String tableName); }
public void init( boolean encrypting,
public void shouldDeleteHistoryFromRequestAndRedirect() throws Exception { StubbedPurgeHistoryResponder responder = new StubbedPurgeHistoryResponder(); request.addInput("days", "30"); SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); assertEquals(30, responder.daysDeleted); assertEquals(303, response.getStatus()); assertEquals("?testHistory", response.getHeader("Location")); }
public void shouldBeAbleToExtractStatus() throws Exception { examiner.type = "status"; examiner.extractValueFromResponse(); assertEquals("42", examiner.getValue()); }
public void testActivatingProperSearch() throws Exception { TestableSearcher searcher = new TestableSearcher(); responder.setSearcher(searcher); responder.setRequest(request); request.addInput("searchType", "something with the word title in it"); new MockResponseSender(responder.makeResponse(new FitNesseContext(root), request)); assertTrue(searcher.titleSearchCalled); request.addInput("searchType", "something with the word content in it"); new MockResponseSender(responder.makeResponse(new FitNesseContext(root), request)); assertTrue(searcher.contentSearchCalled); }
private static void checkIfParentQuota(ZooKeeper zk, String path) throws InterruptedException, KeeperException { final String[] splits = path.split("/"); String quotaPath = Quotas.quotaZookeeper; StringBuilder sb = new StringBuilder(); sb.append(quotaPath); for (int i = 1; i < splits.length - 1; i++) { sb.append("/");
private List<Object> executeInstructions(String instructions) { List<Object> statements = SlimDeserializer.deserialize(instructions);
public void testPagesForTestSystemAreSurroundedBySuiteSetupAndTeardown() throws Exception { WikiPage slimPage = addTestPage(suite, "AaSlimTest", simpleSlimDecisionTable); WikiPage setUp = crawler.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = crawler.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); SuiteContentsFinder finder = new SuiteContentsFinder(suite, root, null); List<WikiPage> testPages = finder.makePageList(); assertEquals(4, testPages.size()); assertEquals(setUp, testPages.get(0)); assertEquals(slimPage, testPages.get(1)); assertEquals(testPage, testPages.get(2)); assertEquals(tearDown, testPages.get(3)); }
public Responder authenticate(FitNesseContext context, Request request, Responder privilegedResponder) { negotiateCredentials(request); return super.authenticate(context, request, privilegedResponder); }
public Maybe<Symbol> parse(Scanner scanner) { SymbolType type = scanner.getCurrentType(); Symbol body = Parser.makeIgnoreFirst(getPage(), scanner, type).parse(); if (scanner.isEnd()) return Symbol.Nothing; return new Maybe<Symbol>(new Symbol(type).add(body)); }
void redirect(String url);  @Deprecated void forward(String url);  @Deprecated void forward(); }
public String getVariable(String key) throws Exception { return parent.getVariable(key); }
public Cipher getCipher(int opmode, byte[] key, byte[] IV, boolean androidOverride) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException { Cipher cipher = Cipher.getInstance("Chacha7539", new BouncyCastleProvider()); cipher.init(opmode, new SecretKeySpec(key, "ChaCha7539"), new IvParameterSpec(IV)); return cipher; }
protected void shutdown() { if (containerManager != null) { containerManager.stop(); } if (cnxnFactory != null) { cnxnFactory.shutdown(); } if (secureCnxnFactory != null) { secureCnxnFactory.shutdown(); } try { adminServer.shutdown();
public void execute() { if (control == null || !control.isDirectory()) { throw new BuildException("You need to point the 'control' attribute to the control directory."); } if (changesIn != null) { if (!changesIn.isFile() || !changesIn.canRead()) { throw new BuildException("The 'changesIn' attribute needs to point to a readable file. " + changesIn + " was not found/readable."); } if (changesOut == null) { throw new BuildException("A 'changesIn' without a 'changesOut' does not make much sense."); } if (!isPossibleOutput(changesOut)) { throw new BuildException("Cannot write the output for 'changesOut' to " + changesOut); } if (changesSave != null && !isPossibleOutput(changesSave)) { throw new BuildException("Cannot write the output for 'changesSave' to " + changesSave); } } else { if (changesOut != null || changesSave != null) { throw new BuildException("The 'changesOut' or 'changesSave' attributes may only be used when there is a 'changesIn' specified."); } } if (dataProducers.size() == 0) { throw new BuildException("You need to provide at least one reference to a tgz or directory with data."); } if (deb == null) { throw new BuildException("You need to point the 'destfile' attribute to where the deb is supposed to be created."); } final File[] controlFiles = control.listFiles(); final DataProducer[] data = new DataProducer[dataProducers.size()]; dataProducers.toArray(data); final Processor processor = new Processor(new Console() { public void println(String s) { if (verbose) { log(s); } } }, null); final PackageDescriptor packageDescriptor; try { packageDescriptor = processor.createDeb(controlFiles, data, deb); log("Created " + deb); } catch (Exception e) { throw new BuildException("Failed to create debian package " + deb, e); } final TextfileChangesProvider changesProvider; try { if (changesOut == null) { return; }
abstract void removeLearnerHandler(LearnerHandler learnerHandler);  abstract void waitForEpochAck(long sid, StateSummary ss) throws IOException, InterruptedException;  abstract void waitForStartup() throws InterruptedException;  abstract long getEpochToPropose(long sid, long lastAcceptedEpoch) throws InterruptedException, IOException;  abstract ZKDatabase getZKDatabase();  abstract void waitForNewLeaderAck(long sid, long zxid) throws InterruptedException;  abstract long getLastProposed();  abstract int getCurrentTick();  abstract int syncTimeout();  abstract int getTickOfNextAckDeadline();  abstract int getTickOfInitialAckDeadline();  abstract long getAndDecrementFollowerCounter();  abstract void processAck(long sid, long zxid, SocketAddress localSocketAddress);  abstract void touch(long sess, int to);  abstract void revalidateSession(QuorumPacket qp, LearnerHandler learnerHandler) throws IOException;  abstract void submitLearnerRequest(Request si);  abstract long startForwarding(LearnerHandler learnerHandler, long lastSeenZxid);  abstract long getQuorumVerifierVersion();  abstract String getPeerInfo(long sid);  abstract byte[] getQuorumVerifierBytes(); abstract QuorumAuthServer getQuorumAuthServer();  abstract void registerLearnerHandlerBean(LearnerHandler learnerHandler, Socket socket);  abstract void unregisterLearnerHandlerBean(LearnerHandler learnerHandler); }
public void testCreateSSLContext_invalidCustomSSLContextClass( X509KeyType caKeyType, X509KeyType certKeyType, String keyPassword, Integer paramIndex) throws Exception { init(caKeyType, certKeyType, keyPassword, paramIndex); assertThrows(X509Exception.SSLContextException.class, () -> { ZKConfig zkConfig = new ZKConfig();
Transcoder<Object> getTranscoder(); NodeLocator getNodeLocator(); Future<Boolean> append(long cas, String key, Object val); Future<Boolean> append(String key, Object val); <T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); <T> Future<Boolean> append(String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); Future<Boolean> prepend(String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<Boolean> prepend(String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, int exp, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); CASResponse cas(String key, long casId, int exp, Object value); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
void errorOutPendingAdds(int rc) { PendingAddOp pendingAddOp; while ((pendingAddOp = pendingAddOps.poll()) != null) { pendingAddOp.submitCallback(rc);
public void config() { this.mockery = new Mockery(); this.method = mockery.mock(ResourceMethod.class); this.resource = mockery.mock(ResourceClass.class); this.config = mockery.mock(Config.class); this.request = mockery.mock(HttpServletRequest.class); this.info =mockery.mock(MethodInfo.class); mockery.checking(new Expectations() { { one(config).getViewPattern(); will(returnValue("/$component/$logic.$result.jsp")); } }); this.resolver = new VRaptor2PathResolver(config, request, info); }
public void dontTryParameterizedForRowWithMultipleCells() throws Exception { SlimTestContextImpl testContext = new SlimTestContextImpl(); WikiPageUtil.setPageContents(root, "" + "!|scenario|login with |name|\n" + "|should not get here|\n" + "\n" + "!|scenario|connect to |name|with password|password|\n" + "|login with username|@name |and Password|@password |\n" + "\n" + "!|script|\n" + "|connect to |Bob| with password| xyzzy|\n"); TableScanner ts = new HtmlTableScanner(root.getHtml()); ScenarioTable st1 = new ScenarioTable(ts.getTable(0), "s1_id", testContext); ScenarioTable st2 = new ScenarioTable(ts.getTable(1), "s2_id", testContext); script = new ScriptTable(ts.getTable(2), "id", testContext); assertions.addAll(st1.getAssertions()); assertions.addAll(st2.getAssertions()); assertions.addAll(script.getAssertions()); List<CallInstruction> expectedInstructions = list( new CallInstruction("scriptTable_id_0/scriptTable_s2_id_0", "scriptTableActor", "loginWithUsernameAndPassword", new Object[]{"Bob", "xyzzy"}) ); assertEquals(expectedInstructions, instructions()); }
public void shoudNotWorkWithClassesThatDoesNotImplementComponentFactory() { Class<?> c = new ComponentFactoryIntrospector().targetTypeForComponentFactory((ZZ.class)); }
public void serve(Socket s) throws IOException {
protected void doSending() throws Exception { data = page.getData(); wikiImportingTraverser = initializeImporter(); HtmlPage htmlPage = makeHtml(); htmlPage.render(response.getWriter()); response.close(); }
public int returnConstructorArg() { return constructorArg; }
public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { try { String value = json.getAsString();
protected void setUp() throws Exception { super.setUp(); List<URI> baseList = Arrays.asList(new URI("http://" + TestConfig.IPV4_ADDR + ":8091/pools")); configProvider = new ConfigurationProviderHTTP(baseList, restUsr, restPwd); assertNotNull(configProvider); }
private boolean addChildHtml(StringBuffer buffer, int depth) throws Exception { boolean addedTag = false; boolean lastAddedWasNonTag = false; int i = 0; for(HtmlElement element : childTags) { if(element instanceof HtmlTag) { if ((i == 0 || lastAddedWasNonTag) && !isInline) buffer.append(endl); buffer.append(((HtmlTag) element).html(depth + 1)); addedTag = true; lastAddedWasNonTag = false; } else { buffer.append(element.html()); lastAddedWasNonTag = true; } i++; } return addedTag; }
void configure(Properties configuration) throws MetricsProviderLifeCycleException;  void start() throws MetricsProviderLifeCycleException;  MetricsContext getRootContext();  void stop(); }
public void setupMocks() { mockery = new Mockery(); result = mockery.mock(PageResult.class); proxifier = mockery.mock(Proxifier.class); }
void startMockServer(int sid) throws IOException { QuorumPeer peer = new QuorumPeer(peers, tmpdir[sid], tmpdir[sid], port[sid], 3, sid, 1000, 2, 2, 2); mockCnxManager = peer.createCnxnManager(); mockCnxManager.listener.start(); }
public void testRemoveAllNoWatcherException(boolean useAsync) throws IOException, InterruptedException, KeeperException { zk1.create("/node1", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); removeAllWatches(zk2, "/node1", WatcherType.Any, false, Code.NOWATCHER, useAsync); }
public void buildsFilter() throws Exception { assertBuildsOption("PlainItem", new String[]{"Suites=F1"}, "-f", "FILTER_TOC", "<a href=\"PlainItem\" class=\"static\">PlainItem (F1)</a>"); }
protected void decodePayload(byte[] pl) { assert pl.length == 0 : "Payload has bytes, but decode isn't overridden"; getCallback().receivedStatus(STATUS_OK); transitionState(OperationState.COMPLETE); }
public void process(WatchedEvent event) { LOG.info(name + " event:" + event.getState() + " " + event.getType() + " " + event.getPath()); if (event.getState() == KeeperState.SyncConnected && startSignal != null && startSignal.getCount() > 0)
private static native byte[] nTransformMasterKey(byte[] password, byte[] salt, int parallelism, long memory, long iterations, byte[] secretKey, byte[] associatedData, long version) throws IOException; }
public void testDeleteCancellation() throws Exception { tryTestSequence(client.delete("x")); }
public void addsValidationMessageWhenSetterFailsWithAValidationException() throws Exception { requestParameterIs(kick, "angryCat.id", "guilherme"); getParameters(kick); assertThat(errors.size(), is(greaterThan(0))); }
private String getLine(int number) throws Exception { String value = null; String pageContent = FitnesseFixtureContext.page.getHtml(); String lineizedContent = convertBreaksToLineSeparators(pageContent); StringTokenizer tokenizedLines = tokenizeLines(lineizedContent); for (int i = number; i != 0; i--) value = tokenizedLines.nextToken(); return value != null ? value.trim() : null; }
private String getInstructionsFromClient() throws IOException { int instructionLength = getLengthToRead(); String instructions = reader.read(instructionLength); return instructions; }
protected void makeZipVersion(FileVersion... fileVersions) throws IOException { if (!exists(fileVersions)) { return; } ZipOutputStream zos = null; File commonBaseDir = commonBaseDir(fileVersions); try { final File zipFile = makeVersionFileName(commonBaseDir, makeVersionName(fileVersions[0]));
public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize(); }
public static int readUShort(InputStream is) throws IOException { byte[] buf = readBytes(is, 2); buf = padOut(buf, 2); return readUShort(buf, 0); }
public void testNullValueACL(@TempDir File tmpDir) throws Exception { ClientBase.setupTestEnv(); ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000); final int PORT = Integer.parseInt(HOSTPORT.split(":")[1]); ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1); f.startup(zks); ZooKeeper zk = ClientBase.createZKClient(HOSTPORT); try {
public void testGetAllChildren() throws Exception { List children = proxy.getChildren(); assertEquals(2, children.size()); WikiPage child = (WikiPage) children.get(0); assertEquals(true, "ChildOne".equals(child.getName()) || "ChildTwo".equals(child.getName())); child = (WikiPage) children.get(1); assertEquals(true, "ChildOne".equals(child.getName()) || "ChildTwo".equals(child.getName())); }
public void errorOccured() { } @Override public void newTestStarted(WikiPage test, long time) throws Exception { } @Override public void setExecutionLogAndTrackingId(String stopResponderId, CompositeExecutionLog log) throws Exception { } @Override public void testComplete(WikiPage test, TestSummary testSummary) throws Exception { System.out.println(new WikiPagePath(test).toString() + " r " + testSummary.right + " w "+ testSummary.wrong + " "+ testSummary.exceptions ); } @Override public void testOutputChunk(String output) throws Exception { } public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { } }
public Object parse(String s) { return new Short(Short.parseShort(s)); }
public List<WikiPage> search(WikiPage page) { List<WikiPage> results = null; for (PageFinder pageFinder: delegates) { if (results == null) { results = pageFinder.search(page); } else { appendFinderResultsToResultList(pageFinder.search(page), results); } } return results; }
public void testEscapedLiteral() throws Exception { PreProcessorLiteralWidget widget = new PreProcessorLiteralWidget(root, "!< <br> >!"); assertEquals("!lit?0?", widget.render()); assertEquals(" &lt;br&gt; ", root.getLiteral(0)); }
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException { if(result.used()) { return; } try { result.use(DefaultPageResult.page()).forward(methodResult.getValue());
public void testSimpleFunctions() throws Exception { assertTrue("doesn't want to apply", update.shouldBeApplied()); assertTrue("wrong starting of message", update.getMessage().startsWith("Installing file: ")); assertTrue("wrong end of message", update.getMessage().endsWith("testFile")); assertEquals("FileUpdate(testFile)", update.getName()); }
public void shouldReturnHtmlWhenRequestingAnyContentType() { Assert.assertEquals("html", mimeTypeToFormat.getFormat("*/*")); }
public void testClientZxidAhead() { ZooKeeperServer zooKeeperServer = new ZooKeeperServer(); final ZKDatabase zkDatabase = new ZKDatabase(mock(FileTxnSnapLog.class)); zooKeeperServer.setZKDatabase(zkDatabase); final ConnectRequest request = new ConnectRequest(); request.setProtocolVersion(1); request.setLastZxidSeen(99L); request.setTimeOut(500); request.setSessionId(123L); request.setPasswd(new byte[]{ 1 }); request.setReadOnly(true); ServerCnxn.CloseRequestException e = assertThrows( ServerCnxn.CloseRequestException.class, () -> zooKeeperServer.processConnectRequest(new MockServerCnxn(), request)); assertEquals(e.getReason(), ServerCnxn.DisconnectReason.CLIENT_ZXID_AHEAD); }
public void testNextChildWhenThereIsNoNext() throws Exception { try {
WikiPage addPage(WikiPage context, WikiPagePath path, String content); WikiPage addPage(WikiPage context, WikiPagePath path); }
public void testWithOnlyMinSessionTimeout() throws Exception { ClientBase.setupTestEnv(); final int CLIENT_PORT_QP1 = PortAssignment.unique(); final int CLIENT_PORT_QP2 = PortAssignment.unique(); String quorumCfgSection = "server.1=127.0.0.1:" + PortAssignment.unique() + ":" + PortAssignment.unique() + "\nserver.2=127.0.0.1:" + PortAssignment.unique() + ":" + PortAssignment.unique(); final int minSessionTimeOut = 15000; final String configs = "minSessionTimeout=" + minSessionTimeOut + "\n"; MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection, configs); MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection, configs); q1.start(); q2.start(); Assert.assertTrue("waiting for server 1 being up", ClientBase .waitForServerUp("127.0.0.1:" + CLIENT_PORT_QP1, CONNECTION_TIMEOUT)); Assert.assertTrue("waiting for server 2 being up", ClientBase .waitForServerUp("127.0.0.1:" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT)); QuorumPeer quorumPeer = q1.main.quorumPeer; final int maxSessionTimeOut = quorumPeer.tickTime * 20; Assert.assertEquals("minimumSessionTimeOut is not considered", minSessionTimeOut, quorumPeer.getMinSessionTimeout()); Assert.assertEquals("maximumSessionTimeOut is wrong", maxSessionTimeOut, quorumPeer.getMaxSessionTimeout());
public Integer convert(String value, Class type, ResourceBundle bundle) { if (value == null || value.equals("")) { return null; } try { return Integer.valueOf(value);
GetOperation get(Collection<String> keys, GetOperation.Callback cb);  MutatorOperation mutate(Mutator m, String key, int by, long def, int exp, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(StoreType t, String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  SASLMechsOperation saslMechs(OperationCallback cb);  SASLAuthOperation saslAuth(String[] mech, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  SASLStepOperation saslStep(String[] mech, byte[] challenge, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  Collection<Operation> clone(KeyedOperation op); }
public void testDeserializable() throws Exception { byte[] data = { -84, -19, 0, 5, 116, 0, 5, 104, 101, 108, 108, 111 }; assertEquals("hello", ex.deserialize(data)); }
int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); MemcachedConnection getConnection(); void setConnection(MemcachedConnection connection); }
public CommandResponse run(ZooKeeperServer zkServer, Map<String, String> kwargs) { CommandResponse response = initializeResponse(); if (zkServer instanceof QuorumZooKeeperServer) { QuorumPeer peer = ((QuorumZooKeeperServer) zkServer).self; QuorumPeer.ZabState zabState = peer.getZabState(); QuorumVerifier qv = peer.getQuorumVerifier(); QuorumPeer.QuorumServer voter = qv.getVotingMembers().get(peer.getMyId()); boolean voting = ( voter != null && voter.addr.equals(peer.getQuorumAddress()) && voter.electionAddr.equals(peer.getElectionAddress()) ); response.put("myid", zkServer.getConf().getServerId()); response.put("is_leader", zkServer instanceof LeaderZooKeeperServer); response.put("quorum_address", peer.getQuorumAddress()); response.put("election_address", peer.getElectionAddress()); response.put("client_address", peer.getClientAddress()); response.put("voting", voting); long lastProcessedZxid = zkServer.getZKDatabase().getDataTreeLastProcessedZxid(); response.put("last_zxid", "0x" + ZxidUtils.zxidToString(lastProcessedZxid)); response.put("zab_epoch", ZxidUtils.getEpochFromZxid(lastProcessedZxid)); response.put("zab_counter", ZxidUtils.getCounterFromZxid(lastProcessedZxid)); response.put("zabstate", zabState.name().toLowerCase()); } else { response.put("voting", false); response.put("zabstate", ""); } return response; }
private void assertThatPurgeGlobalIsNotUsed() throws Exception { request.addInput("days", "0"); StubbedPurgeHistoryResponder responderSpy = spy(new StubbedPurgeHistoryResponder()); WikiPagePath expectedPath = new WikiPagePath(request.getResource().split("\\.")); SimpleResponse response = (SimpleResponse) responderSpy.makeResponse(context, request); assertEquals(303, response.getStatus()); assertEquals("?testHistory", response.getHeader("Location")); verify(responderSpy).deleteTestHistoryOlderThanDays(resultsDirectory, 0, expectedPath); }
private void write(Node node, int tabs) throws Exception { if (node instanceof Element) write((Element) node, tabs);
public void listWithOneElement() throws Exception { list.add("hello"); check(); }
public Object instantiate(Target<?> target, Parameters parameters) { try { return multiInstantiator.instantiate(target, parameters);
public void testFindNestedEnd() throws FitParseException { assertEquals(0, Parse.findMatchingEndTag("</t>",0,"t",0)); assertEquals(7, Parse.findMatchingEndTag("<t></t></t>",0,"t",0)); assertEquals(14, Parse.findMatchingEndTag("<t></t><t></t></t>",0,"t",0)); }
String getHtml(); String getVariable(String name); String getFullPath(); }
ParsedPage getParsedPage(); List<String> getClasspaths(); List<String> getXrefPages(); String getContent(); String getAttribute(String attribute); boolean hasAttribute(String attribute); WikiPageProperties getProperties(); WikiPage getWikiPage(); }
boolean pageExists(WikiPage context, WikiPagePath path) throws Exception; WikiPagePath getFullPathOfChild(WikiPage parent, WikiPagePath childPath) throws Exception; WikiPagePath getFullPath(WikiPage page) throws Exception; WikiPage addPage(WikiPage context, WikiPagePath path, String content) throws Exception; WikiPage addPage(WikiPage context, WikiPagePath path) throws Exception; String getRelativeName(WikiPage base, WikiPage page) throws Exception; boolean isRoot(WikiPage page) throws Exception; WikiPage getRoot(WikiPage page) throws Exception; void traverse(WikiPage root, TraversalListener pageCrawlerTest) throws Exception; WikiPage getSiblingPage(WikiPage page, WikiPagePath pathRelativeToSibling) throws Exception; }
public void testHtml() throws Exception { XRefWidget widget = new XRefWidget(wroot, "!see SomePage"); assertHasRegexp("<b>See: <a href=.*SomePage</a></b>", widget.render()); widget = new XRefWidget(wroot, "!see NoPage"); assertHasRegexp("<b>See: NoPage<a href=.*>?</a></b>", widget.render());
public static String translateToHtml(WikiPage page, String input, VariableSource variableSource) { Symbol list = Parser.make(new ParsingPage(page), input, variableSource).parse(); return new Translator(page, list, variableSource).translate(); }
public InputStream getData() throws IOException { return new ByteArrayInputStream(data); }
public void errorOccured() { latestTestTime = null; super.errorOccured(); }
public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels) { mv.visitLookupSwitchInsn(dflt, keys, labels); if (constructor) { popValue();
private int doFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) { mBuffered = 0; int outputSize = engineGetOutputSize(inputLen); int updateAmt = nativeUpdate(mCtxPtr, input, inputOffset, inputLen, output, outputOffset, outputSize); int finalAmt = nativeDoFinal(mCtxPtr, output, outputOffset + updateAmt, outputSize - updateAmt); return updateAmt + finalAmt; }
String getVariable(String name); ClassPath getClassPath();  String getContent();  String getHtml(); }
protected void processAllTablesOnPage(TestPage testPage) throws TestExecutionException { throw new UnsupportedOperationException(); }
public ObserveOperation observe(String key, long casId, int index, ObserveOperation.Callback cb) { return new ObserveOperationImpl(key, casId, index, cb); }
public IBinder onBind(Intent intent) {
public Object next() { if (next == null) { throw new NoSuchElementException(); } AbstractInsnNode result = next; prev = result; next = result.next; return result; }
private void doSimpleDealing() throws Exception { seeker = new SimpleSocketSeeker(); ticket = dealer.seekingSocket(seeker); doner = new SimpleDoner(); dealer.dealSocketTo(ticket, doner); }
private void print(String key, long number) { print(key, "" + number); }
public void testInstallOnly() throws Exception { Arguments args = new Arguments(); args.setInstallOnly(true); FitNesse fitnesse = mockFitNesse(); new FitNesseMain().launch(args, context); verify(fitnesse, never()).start(); }
public void visit(final String name, final Object value) { ++size; if (named) { bv.putShort(cw.newUTF8(name)); } if (value instanceof String) { bv.put12('s', cw.newUTF8((String) value));
Symbol getSyntaxTree(); ParsingPage getParsingPage(); String translateToHtml(Symbol syntaxTree); List<String> getClasspaths(); List<String> getXrefPages(); }
private void runInternal(boolean displayCmd) throws Exception { String[] argArray = args.toArray(new String[args.size()]); if(displayCmd) { requester.getLog().info("cmd : " + mainClassName + "(" + StringUtils.join(argArray, ",")+")"); } MainHelper.runMain(mainClassName, args, _cl); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); context = FitNesseUtil.makeTestContext(root); PageBuilder pageBuilder = root.getPageCrawler(); page = pageBuilder.addPage(root, PathParser.parse("ComparedPage"), "original content"); PageData data = page.getData(); firstVersion = page.commit(data).getName(); WikiPageProperties properties = data.getProperties(); properties.set(PageData.PropertySUITES, "New Page tags"); data.setContent("new stuff"); secondVersion = page.commit(data).getName(); data.setContent("even newer stuff"); page.commit(data); request = new MockRequest(); request.setResource("ComparedPage"); mockedComparer = mock(VersionComparer.class); responder = new VersionComparerResponder(mockedComparer); responder.testing = true; }
SASLAuthOperation saslAuth(String[] mech, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  SASLStepOperation saslStep(String[] mech, byte[] challenge, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  Collection<Operation> clone(KeyedOperation op); }
private Map<Descriptor, LinkedList<WikiPage>> mapWithAllPagesButSuiteSetUpAndTearDown() { Map<Descriptor, LinkedList<WikiPage>> pagesByTestSystem = new HashMap<Descriptor, LinkedList<WikiPage>>(); for (WikiPage wikiPage : pages) { if (!SuiteContentsFinder.isSuiteSetupOrTearDown(wikiPage)) { Descriptor descriptor = descriptorFactory.create(wikiPage); getOrMakeListWithinMap(pagesByTestSystem, descriptor).add(wikiPage); } } return pagesByTestSystem; }
public static void dump(String host, int port) { Socket s = null; try { byte[] reqBytes = new byte[4];
static TarArchiveEntry defaultFileEntryWithName( final String fileName ) { TarArchiveEntry entry = new TarArchiveEntry(fileName, true); entry.setUserId(ROOT_UID); entry.setUserName(ROOT_NAME); entry.setGroupId(ROOT_UID); entry.setGroupName(ROOT_NAME); entry.setMode(TarArchiveEntry.DEFAULT_FILE_MODE); return entry; }
public static Descriptor getDescriptor(PageData data, boolean isRemoteDebug) throws Exception { String testSystemName = getTestSystem(data); String testRunner = getTestRunner(data); String commandPattern = getCommandPattern(data, isRemoteDebug); String pathSeparator = getPathSeparator(data); return new Descriptor(testSystemName, testRunner, commandPattern, pathSeparator); }
protected void wasCancelled() { cb.receivedStatus(CANCELLED); }
public StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, StoreOperation.Callback cb) { return new StoreOperationImpl(storeType, key, flags, exp, data, 0, cb); }
private void addEchoInt(String id, String number) { statements.add(list(id, "call", "testSlim", "echoInt", number)); }
public void testGetLastColumn() { assertEquals("", WikiPageLineProcessingUtil.getLastColumn("not valid line ensure|keyword")); assertEquals(" ", WikiPageLineProcessingUtil.getLastColumn("|ensure|keyword| |")); assertEquals("check value", WikiPageLineProcessingUtil.getLastColumn("|check|keyword|check value|")); assertEquals("check not value", WikiPageLineProcessingUtil.getLastColumn("|check not|keyword|check not value|")); assertEquals("keyword", WikiPageLineProcessingUtil.getLastColumn("|note|keyword|")); }
public void doCells(Parse cells) { for (int i = 0; cells != null; i++) {
public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) { if (filter.apply(path)) { paths.add(path); } return FileVisitResult.CONTINUE; }
private Symbol lastChild() { return childAt(children.size() - 1); }
void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); MemcachedConnection getConnection(); void setConnection(MemcachedConnection connection); }
public void testInstallOnly() throws Exception { Arguments args = new Arguments(); args.setInstallOnly(true); FitNesse fitnesse = mock(FitNesse.class); new FitNesseMain().launch(args, context, fitnesse); verify(fitnesse, never()).start(); }
public <T> T provideForRequest(RequestInfo request, Execution<T> execution) { VRaptorRequestHolder.setRequestForCurrentThread(request); REQUEST.start(); try { return execution.insideRequest(container);
private void exitLoop(boolean doPopScope) { loopSet.pop(); loopAndSwitchSet.pop(); if (doPopScope) { popScope();
public void testReadWriteIntZero() { testReadWriteInt((byte) 0); }
public void convertDate() throws Exception { assertConverts(new DateConverter(), "05-May-2009"); }
public void warn(F0<String> msg) { if (log.isWarnEnabled()) { log.warn(msg.apply());
public long lastModified(String path) { return files.get(path).lastModified; }
public void testSimpleUsage() throws Exception { ByteArrayInputStream input = new ByteArrayInputStream("content".getBytes()); response.setBody(input, 7); response.sendTo(this); assertTrue(closed); ResponseParser result = new ResponseParser(new ByteArrayInputStream(output.toByteArray())); assertEquals(200, result.getStatus()); assertEquals(7 + "", result.getHeader("Content-Length")); assertEquals("content", result.getBody()); }
protected void assertQueryResults(String queryRows, List<Object> queryResults, String table) throws Exception { makeQueryTableAndBuildInstructions(queryTableHeader + queryRows); Map<String, Object> pseudoResults = SlimClient.resultToMap(list( list("queryTable_id_0", "OK"), list("queryTable_id_1", "blah"), list("queryTable_id_2", queryResults) ) ); testContext.evaluateExpectations(pseudoResults); org.junit.Assert.assertEquals(table, qt.getTable().toString()); }
public boolean theTablesMatch(double score) { return score >= MIN_MATCH_SCORE; }
public void receivedStatus(OperationStatus status) {
public void decisionTableWithExecuteThatThrowsDoesShowsException() throws Exception { getResultsForPageContents( "|DT:fitnesse.slim.test.DecisionTableExecuteThrows|\n" + "|x?|\n" + "|1|\n" ); assertEquals(1, responder.getTestSummary().exceptions); assertTestResultsContain("EXECUTE_THROWS"); }
abstract void revalidateSession(QuorumPacket qp, LearnerHandler learnerHandler) throws IOException;  abstract void submitLearnerRequest(Request si);  abstract long startForwarding(LearnerHandler learnerHandler, long lastSeenZxid);  abstract long getQuorumVerifierVersion();  abstract String getPeerInfo(long sid);  abstract byte[] getQuorumVerifierBytes(); abstract QuorumAuthServer getQuorumAuthServer();  abstract void registerLearnerHandlerBean(final LearnerHandler learnerHandler, Socket socket);  abstract void unregisterLearnerHandlerBean(final LearnerHandler learnerHandler); }
void runTests(TestPage pageToTest) throws IOException, InterruptedException;  boolean isSuccessfullyStarted();  void addTestSystemListener(TestSystemListener listener); }
boolean isCancelled();  boolean hasErrored();  OperationException getException();  OperationCallback getCallback();  void cancel();  OperationState getState();  ByteBuffer getBuffer();  void writeComplete();  void initialize();  void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data);  MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to);  public void timeOut();  public boolean isTimedOut();  public boolean isTimedOut(long ttlMillis); }
protected TestRun createRun(PagesByTestSystem pagesByTestSystem) { return new PerTestSystemTestRun(pagesByTestSystem); }
public void should_leave_table_contents_alone_when_not_slim_test_system() { givenTestSystem("fit"); slimTableDefaultColoring.handleParsedSymbol(table, variableSource); verify(table, never()).getChildren(); }
protected void registerComponents(ComponentRegistry container) { super.registerComponents(container); container.register(MethodLookupBuilder.class, VRaptor2MethodLookupBuilder.class); container.register(PathResolver.class, VRaptor2PathResolver.class); container.register(Config.class, VRaptor2Config.class); container.register(ParameterNameProvider.class, LogicAnnotationWithParanamerParameterNameProvider.class); container.register(RequestExecution.class, VRaptor2RequestExecution.class); container.register(PageResult.class, ViewsPropertiesPageResult.class); container.register(ExecuteAndViewInterceptor.class, ExecuteAndViewInterceptor.class); container.register(HibernateValidatorPluginInterceptor.class,HibernateValidatorPluginInterceptor.class); container.register(Converters.class, VRaptor2Converters.class); container.register(ValidatorInterceptor.class,ValidatorInterceptor.class); container.register(ViewInterceptor.class,ViewInterceptor.class); container.register(ComponentInfoProvider.class, DefaultComponentInfoProvider.class); container.register(OutjectionInterceptor.class,OutjectionInterceptor.class); container.register(AjaxInterceptor.class, AjaxInterceptor.class); container.register(Validator.class, MessageCreatorValidator.class); container.register(ValidationErrors.class, BasicValidationErrors.class); }
public void setup() { cleanup(); FileUtil.createDir(dir); FileUtil.createFile(dir+"/license", licenseText); }
public void xmlForSingleTestPageNameIsParenthetic() throws Exception { request.setResource("SuitePage.TestOne"); request.addInput("format", "xml"); String results = runSuite(); Document testResultsDocument = getXmlDocumentFromResults(results); Element testResultsElement = testResultsDocument.getDocumentElement(); assertEquals("testResults", testResultsElement.getNodeName()); NodeList resultList = testResultsElement.getElementsByTagName("result"); assertEquals(1, resultList.getLength()); Element result = (Element) resultList.item(0); String pageName = XmlUtil.getTextValue(result, "relativePageName"); assertEquals("(TestOne)", pageName); }
public void testVersionConversion() { assertEquals("should match", "1.0", Utils.convertToDebianVersion("1.0", null)); assertEquals("should match", "1.0~SNAPSHOT", Utils.convertToDebianVersion("1.0+SNAPSHOT", null)); assertEquals("should match", "1.0~20130217215714", Utils.convertToDebianVersion("1.0+SNAPSHOT", new Date(1361134634000L))); }
public Set<Watcher> materialize( Watcher.Event.KeeperState state, Watcher.Event.EventType type, String clientPath) { Set<Watcher> result = new HashSet<Watcher>(); switch (type) { case None: result.add(defaultWatcher); boolean clear = disableAutoWatchReset && state != Watcher.Event.KeeperState.SyncConnected; synchronized (dataWatches) { for (Set<Watcher> ws : dataWatches.values()) { result.addAll(ws); } if (clear) { dataWatches.clear(); } } synchronized (existWatches) { for (Set<Watcher> ws : existWatches.values()) { result.addAll(ws); } if (clear) { existWatches.clear(); } } synchronized (childWatches) { for (Set<Watcher> ws : childWatches.values()) { result.addAll(ws); } if (clear) { childWatches.clear(); } } return result; case NodeDataChanged: case NodeCreated: synchronized (dataWatches) { addTo(dataWatches.remove(clientPath), result); } synchronized (existWatches) { addTo(existWatches.remove(clientPath), result); } break; case NodeChildrenChanged: synchronized (childWatches) { addTo(childWatches.remove(clientPath), result); } break; case NodeDeleted: synchronized (dataWatches) { addTo(dataWatches.remove(clientPath), result); }
public void removeWatchers(Collection<String> selectedNodes) {
public void isCapableOfInstantiatingCustomTypesInAListSettingItsInternalValue() throws OgnlException { Ognl.setValue("legs[0].color", context, myCat, "red"); assertThat(myCat.legs.get(0).color, is(equalTo("red"))); mockery.assertIsSatisfied(); }
void handleRead(ByteBuffer data);  MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to);  public void timeOut();  public boolean isTimedOut();  public boolean isTimedOut(long ttlMillis); }
public void testSingleOperation() { Operation op = buildOp(TestConfig.PORT_NUMBER); assertEquals(CheckedOperationTimeoutException.class.getName() + ": test - failing node: " + TestConfig.IPV4_ADDR + ":"
private HtmlTag makeHeadingTag(final boolean addSubPageWarning, final String qualifiedPageName) { HtmlTag h3Tag = new HtmlTag("H3"); if (addSubPageWarning) { h3Tag.add("Warning, this page contains one or more subpages."); h3Tag.add(HtmlUtil.BR); } h3Tag.add("Are you sure you want to delete " + qualifiedPageName + "?"); return h3Tag; }
protected List<SlimAssertion> show(int row) { int lastCol = table.getColumnCountInRow(row) - 1; return invokeAction(1, lastCol, row, new ShowActionExpectation(0, row));
public void visitTableSwitchInsn(final int min, final int max, final Label dflt, final Label[] labels) { mv.visitTableSwitchInsn(min, max, dflt, labels); if (constructor) { popValue();
public void shouldReturnErrorPageIfCompareFails() throws Exception { when(mockedComparer.compare("testRoot/TestFolder/firstFakeFile", "testRoot/TestFolder/secondFakeFile")).thenReturn(false); SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); assertEquals(400, response.getStatus()); assertHasRegexp("Comparison Failed. Try different files.", response.getContent()); }
public void setupEach() throws Exception { zk = ClientBase.createZKClient(hostPort); }
public static void main(String[] args) { if (args.length < 3) { usage(); return; } String host = args[0]; int port = Integer.parseInt(args[1]); String op = args[2]; if (op.equalsIgnoreCase("gettracemask")) { getTraceMask(host, port);
public void testRegexp() throws Exception { assertMatchEquals(" *Item1", " *Item1"); assertMatchEquals(" *Item1\n *Item2", " *Item1\n *Item2"); assertMatchEquals(" * Item1\n * Item2\n", " * Item1\n * Item2\n"); assertMatchEquals(" *Item1\n *Item1a", " *Item1\n *Item1a"); assertMatchEquals("*Item1 *Item1a", null); assertMatchEquals(". *Item1", null); assertMatchEquals(" 1Item1", " 1Item1"); assertMatchEquals("\nWikiTextExample *hello\n", null); assertMatches(" * 50 ways to leave your lover."); }
protected String getPageFooterInfo(int hits) throws Exception { return "Found " + hits + " results for your search."; }
public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency(); }
abstract SocketAddress getRemoteSocketAddress(); abstract SocketAddress getLocalSocketAddress(); abstract void cleanup(); abstract void close(); abstract void wakeupCnxn(); abstract void enableWrite(); abstract void enableReadWriteOnly(); abstract void doTransport(int waitTimeOut, List<Packet> pendingQueue, LinkedList<Packet> outgoingQueue) throws IOException, InterruptedException; abstract void testableCloseSocket() throws IOException; }
public void shouldExcludeNonPrimitiveFieldsFromACollection() { Order order = new Order(new Client("guilherme silveira"), 15.0, "pack it nicely, please", new Item("name", 12.99)); serialization.from(Arrays.asList(order, order), "orders").serialize(); assertThat(result(), not(containsString("<items>"))); assertThat(result(), not(containsString("<name>name</name>"))); assertThat(result(), not(containsString("<price>12.99</price>"))); }
int getRowCount(); int getColumnCountInRow(int rowIndex); String toString(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); }
public void testBadMethod() throws Exception { appendToMessage("DELETE /resource HTTP/1.1\r\n"); appendToMessage("\r\n"); parseMessage(); assertNotNull("no exception was thrown", exception); assertEquals("The DELETE method is not currently supported", exception.getMessage()); }
File getFile();  String getFileName();  String getCompleteFileName();
private static FitNesseContext loadContext(Arguments arguments) throws Exception { FitNesseContext context = new FitNesseContext(); context.port = arguments.getPort(); context.rootPath = arguments.getRootPath(); ComponentFactory componentFactory = new ComponentFactory(context.rootPath); context.rootPageName = arguments.getRootDirectory(); context.rootPagePath = context.rootPath + "/" + context.rootPageName; RevisionController revisioner = componentFactory.loadRevisionController(); context.root = componentFactory.getRootPage(FileSystemPage.makeRoot(context.rootPath, context.rootPageName, revisioner)); context.responderFactory = new ResponderFactory(context.rootPagePath); context.logger = makeLogger(arguments); context.authenticator = makeAuthenticator(arguments.getUserpass(), componentFactory); context.htmlPageFactory = componentFactory.getHtmlPageFactory(new HtmlPageFactory()); extraOutput = componentFactory.loadResponderPlugins(context.responderFactory); extraOutput += componentFactory.loadWikiWidgetPlugins(); extraOutput += componentFactory.loadWikiWidgetInterceptors(); extraOutput += componentFactory.loadContentFilter(); WikiImportTestEventListener.register(); return context; }
public void buildFullySpecifiedTestSystemName() throws Exception { WikiPage testPage = pageBuilder.addPage(root, PathParser.parse("TestPage"), "!define TEST_SYSTEM {system}\n" + "!define TEST_RUNNER {runner}\n"); String testSystemName = TestSystem.getDescriptor(testPage, null, false).getTestSystemName(); Assert.assertEquals("system:runner", testSystemName); }
public void shouldBeAbleToExtractHeaders() throws Exception { FitnesseFixtureContext.sender = new MockResponseSender(); FitnesseFixtureContext.sender.send("Headers \r\n\r\n bleh".getBytes()); examiner.type = "headers"; examiner.extractValueFromResponse(); assertEquals("Headers \r\n", examiner.getValue()); }
public void testAssertionVerified(Assertion assertion, TestResult testResult) { } @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) { } @Override public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) { } }
void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(String mechs[], CallbackHandler cbh) throws OperationException; }
public void setUp() throws Exception { super.setUp(); String childPage = "ChildPage"; WikiPageUtil.addPage(root, PathParser.parse(childPage)); request.setResource(childPage); }
private void visitShort(final short value) { buf.append("(short)").append(value); }
public void args(String[] args) throws Exception { CommandLine commandLine = new CommandLine("[-v] [-debug] [-xml file] [-suiteFilter filter] [-excludeSuiteFilter excludeFilter] [-credentials userpass] host port pageName"); if (!commandLine.parse(args)) usage(); host = commandLine.getArgument("host"); port = Integer.parseInt(commandLine.getArgument("port")); pageName = commandLine.getArgument("pageName"); if (commandLine.hasOption("v")) verbose = true; if (commandLine.hasOption("debug")) debug = true; if (commandLine.hasOption("xml")) outputFileName = commandLine.getOptionArgument("xml", "file"); if (commandLine.hasOption("suiteFilter")) suiteFilter = commandLine.getOptionArgument("suiteFilter", "filter"); if (commandLine.hasOption("excludeSuiteFilter")) excludeSuiteFilter = commandLine.getOptionArgument("excludeSuiteFilter", "excludeFilter"); if (commandLine.hasOption("credentials")) credentials = commandLine.getOptionArgument("credentials", "userpass");
public void shouldComplainAboutInvalidIndex() { converter.convert("3200", MyCustomEnum.class, bundle); assertThat(errors.get(0), is(VRaptorMatchers.error("", "3200 is not a valid option."))); }
public synchronized void register(Watcher watcher) { this.watcher = watcher; }
public void setup() throws Exception { executor = getListExecutor(); statements = new ArrayList<Object>(); statements.add(Arrays.asList("i1", "import", getTestClassPath())); statements.add(Arrays.asList("m1", "make", "testSlim", testClass)); expectedResults.add(Arrays.asList("i1", "OK")); expectedResults.add(Arrays.asList("m1", "OK")); }
public void testIsClosed() { serverSideSocket.isClosed(); Assert.assertFalse(serverSideSocket.isModeKnown()); }
private HtmlTag makeAttributeCheckboxesHtml(String label, String[] attributes, PageData pageData) throws Exception { HtmlTag div = new HtmlTag("div"); div.addAttribute("style", "float: left; width: 180px;"); div.add(label); for (String attribute : attributes) { div.add(HtmlUtil.BR); div.add(makeAttributeCheckbox(attribute, pageData)); } div.add(HtmlUtil.BR); div.add(HtmlUtil.BR); return div; }
public Maybe<String> findVariable(String name) { Maybe<String> result = findSpecialVariableValue(name); if (!result.isNothing()) return result; if(variableSource instanceof UrlPathVariableSource){ result = ((UrlPathVariableSource) variableSource).findUrlVariable(name); if (!result.isNothing()) return result; } result = findVariableInPages(name); if (!result.isNothing()) return result; return findVariableInContext(name); }
public void scriptTableWithBadConstructor() throws Exception { getResultsForPageContents("!|Script|NoSuchClass|\n"); assertTestResultsContain("<span class=\"error\">Could not invoke constructor for NoSuchClass"); }
private void reject(int row) { addExpectation(new RejectActionExpectation(getInstructionNumber(), 0, row)); int lastCol = table.getColumnCountInRow(row) - 1; invokeAction(1, lastCol, row); }
public void setup() { this.mockery = new Mockery(); this.interceptor = new AjaxInterceptor(outjecter, response, info); }
public void run() { if (logger.isDebugEnabled()) logger.debug("Consuming message that is out of order for msgId: " + msg.getMsgId().getLocalComponent()); ConcurrencyUtils.put(consumeQueue, false); }
void sendPacket(ClientCnxn.Packet p) throws IOException { sendPktAndFlush(p); }
public void shouldBeAbleToDeleteSomeTestHistory() throws Exception { responder.setTodaysDate(new Date()); File pageDirectory = addPageDirectory("SomePage"); addTestResult(pageDirectory, "20090402000000_1_0_0_0"); addTestResult(pageDirectory, "20090602000000_1_0_0_0"); history.readHistoryDirectory(resultsDirectory); PageHistory pageHistory = history.getPageHistory("SomePage"); assertEquals(2, pageHistory.size()); int days = 30; responder.deleteTestHistoryOlderThan(days); history.readHistoryDirectory(resultsDirectory); pageHistory = history.getPageHistory("SomePage"); assertEquals(1, pageHistory.size()); deleteDirectory(pageDirectory); }
public void hasClassShouldSayNoOnOtherClasses() throws ParserException { NodeList tree = parseToTree("<div class='fooe foor'>content</div>"); assertFalse(nodeHasClass(tree.elementAt(0), "foo")); }
HttpFuture<List<View>> asyncGetViews(final String designDocumentName); View getView(final String designDocumentName, final String viewName); List<View> getViews(final String designDocumentName);
private void doSimpleEdit() throws Exception { crawler.addPage(root, PathParser.parse("EditPage")); addRequestParameters(); response = responder.makeResponse(new FitNesseContext(root), request); }
public void removeVersion(final FileSystemPage page, final String versionName) { final String versionFileName = makeVersionFileName(page, versionName); final File versionFile = new File(versionFileName); versionFile.delete(); }
public String findVariable(SourcePage page, String name, String defaultValue) { Maybe<String> result = findVariable(page, name); return result.isNothing() ? defaultValue : result.getValue(); }
public void addFile(FileVersion... fileVersions) throws IOException { for (FileVersion fileVersion : fileVersions) { InputStream input = null;
public void addsAPrefixToMethodsWhenTheControllerAndTheMethodAreAnnotatedWithEmptyPath() throws Exception { ResourceMethod method = router.parse("/prefix", HttpMethod.POST, request); assertThat(method.getMethod(), is(equalTo(PathAnnotatedController.class.getMethod("withEmptyPath")))); mockery.assertIsSatisfied(); }
static boolean isIPv6HexCompressedAddress(final String input) { return IPV6_HEX_COMPRESSED_PATTERN.matcher(input).matches(); }
public void testClosedSocketMidResponse() throws Exception { MockRequest request = new MockRequest(); Response response = expediter.createGoodResponse(request); socket.close(); response.sendTo(expediter); }
public static final Token newToken(int ofKind) { switch(ofKind) {
public static void logWarn(String mess, String location) { formatLine(System.out, mess, location); System.out.flush(); }
public void testSetupDecoratorMustThrowInvalidInputExceptionIfTimeRangeIsNotSpecified() throws ParseException { try {
private void evaluateRow(List<List<Object>> tableResults, int resultRow) { List<Object> rowList = tableResults.get(resultRow); for (int col = 0; col < rowList.size(); col++) { int tableRow = resultRow + 1;
public void acceptOutputFirst(String output) throws IOException; public void testComplete(TestSummary testSummary) throws IOException; public void exceptionOccurred(Throwable e); public void testAssertionVerified(Assertion assertion, TestResult testResult); public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); }
protected void checkArguments() { super.checkArguments(); includeHtml |= request.hasInput("includehtml"); }
public void errorOccured() { } public void announceNumberTestsToRun(int testsToRun) { } public void setExecutionLogAndTrackingId(String stopResponderId, CompositeExecutionLog log) throws Exception { } public void announceStartTestSystem(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { } public void announceStartNewTest(WikiPage test) throws Exception { } public void processTestOutput(String output) throws Exception { } public void processTestResults(WikiPage test, TestSummary testSummary) throws Exception { } public void writeHead(String pageType) throws Exception { } }
public void slimPortPoolSizeCanBeModified() throws Exception { Descriptor descriptor = mock(Descriptor.class); when(descriptor.getVariable("slim.pool.size")).thenReturn("20"); for (int i = 1; i < 25; i++) assertEquals(8085 + (i % 20), new SlimClientBuilder(descriptor).getSlimPort());
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); pageBuilder = new PageBuilder(); PageData data = root.getData(); root.commit(data); suite = pageBuilder.addPage(root, PathParser.parse("SuitePageName"), "The is the test suite\n"); testPage = pageBuilder.addPage(suite, PathParser.parse("TestPage"), "My test and has some content"); surrounder = new PageListSetUpTearDownSurrounder(root); }
private static String bodyClass(String state) { return state == CollapsibleRule.OpenState ? "collapsable" : "hidden"; }
public void getsChildren() { TestRoot root = new TestRoot(); WikiPage page = root.makePage("PageOne"); root.makePage(page, "PageTwo"); root.makePage(page, "PageThree"); WikiSourcePage source = new WikiSourcePage(page); ArrayList<String> names = new ArrayList<String>(); for (SourcePage child: source.getChildren()) names.add(child.getName()); assertEquals(2, names.size()); assertTrue(names.contains("PageTwo")); assertTrue(names.contains("PageThree")); }
public String get(String name) { WikiPageProperty child = getProperty(name); return child == null ? null : child.getValue(); }
private String readAuditLog(ByteArrayOutputStream os) throws IOException { return readAuditLog(os, 1).get(0); }
public T intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) { try { method.invoke(delegate.of(controllerType), args); } catch (Exception e) { throw new ResultException(e); } throw new ValidationException(errors); }
public void onEachFile( InputStream input, String filename, String linkname, String user, int uid, String group, int gid, int mode, long size ) throws IOException { } @Override public void onEachLink(String path, String linkName, boolean symlink, String user, int uid, String group, int gid) throws IOException { } private class Invocation { private String dirname; private String linkname; private String user; private int uid; private String group; private int gid; private int mode; private long size; private Invocation( String dirname, String linkname, String user, int uid, String group, int gid, int mode, long size ) throws IOException { this.dirname = dirname; this.linkname = linkname; this.user = user; this.uid = uid; this.group = group; this.gid = gid; this.mode = mode; this.size = size; } } } }
private void throwPendingException() throws IOException { if (pendingException != null) { IOException e = pendingException;
public void shouldKnowIfTheTwoFilesAreTheSameFile() throws Exception { FileUtil.createFile("TestFolder/FileOne", "this is file one"); boolean compareWorked = comparer.compare("TestFolder/FileOne", "TestFolder/FileOne"); assertFalse(compareWorked); FileUtil.deleteFileSystemDirectory("TestFolder"); }
String toString(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); }
public void DefineVariableInLinkIsPreserved() throws Exception { String content = "http://localhost/${somepath}/something"; String newContent = ParserTestHelper.roundTrip(new TestSourcePage(), content); assertEquals(content, newContent); }
public void notAnnotated() { } @Path("/myPath") public void customizedPath() { } @Path("/*/customPath") public void starPath() { } } class InheritanceExample extends MyResource { } @Test public void usesAsteriskBothWays() throws NoSuchMethodException { router.add(new PathAnnotationRules(mockery.resource(MyResource.class))); Method method = mockery.methodFor(MyResource.class, "starPath").getMethod(); String url = router.urlFor(MyResource.class, method, new Object[] {}); assertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method))); mockery.assertIsSatisfied(); } @Test public void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException { router.add(new PathAnnotationRules(mockery.resource(MyResource.class))); router.add(new PathAnnotationRules(mockery.resource(InheritanceExample.class))); Method method = mockery.methodFor(MyResource.class, "notAnnotated").getMethod(); String url = router.urlFor(InheritanceExample.class, method, new Object[] {}); assertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method))); mockery.assertIsSatisfied(); } @Test public void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException { router.add(new PathAnnotationRules(mockery.resource(MyResource.class))); Method method = mockery.methodFor(MyResource.class, "customizedPath").getMethod(); String url = router.urlFor(MyResource.class, method, new Object[] {}); assertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method))); mockery.assertIsSatisfied(); } }
public void testLastModifiedTime() throws Exception { WikiPage page = pageBuilder.addPage(root, PathParser.parse("SomePage"), "some text"); page.commit(page.getData()); long now = Clock.currentTimeInMillis(); Date lastModified = page.getData().getProperties().getLastModificationTime(); assertTrue(now - lastModified.getTime() <= 5000); }
private void createFakeJarFileResources() throws IOException { FileUtil.createFile(GradleSupport.TEST_CLASSES_DIR + "/Resources/FitNesseRoot/files/TestFile","") ; FileUtil.createFile(GradleSupport.TEST_CLASSES_DIR + "/Resources/FitNesseRoot/files/BestFile","") ; FileUtil.createFile(GradleSupport.TEST_CLASSES_DIR + "/Resources/FitNesseRoot/SpecialFile",""); }
public SlimCommandRunningClient build() throws IOException { CommandRunner commandRunner = new MockCommandRunner(); final String slimArguments = buildArguments(); createSlimService(slimArguments); return new SlimCommandRunningClient(commandRunner, determineSlimHost(), getSlimPort()); }
public <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException { try { return asyncGetBulk(keys, tc).get(
private void addCellsForMethodNamesAndReturnTypes(List<Method> publicMethods, StringBuffer headerRow, StringBuffer valueRow) { for(Iterator<Method> m = publicMethods.iterator(); m.hasNext();) {
private ArtifactResolutionRequest createArtifactResolutionRequest(final Artifact artifact, final ArtifactFilter collectionFilter, final ArtifactFilter resolutionFilter, final List<ArtifactRepository> remoteRepositories, final ArtifactRepository localRepository) { final ArtifactResolutionRequest arr = new ArtifactResolutionRequest(); arr.setArtifact(artifact); arr.setCollectionFilter(collectionFilter); arr.setResolutionFilter(resolutionFilter); arr.setResolveRoot(false); arr.setResolveTransitively(true); arr.setRemoteRepositories(remoteRepositories); arr.setLocalRepository(localRepository); return arr; }
public static boolean isIgnoreAllTestsException(Throwable t) { return t != null && t.getClass().toString().contains("IgnoreAllTests"); }
abstract long getAndDecrementFollowerCounter();  abstract void processAck(long sid, long zxid, SocketAddress localSocketAddress);  abstract void touch(long sess, int to);  abstract void revalidateSession(QuorumPacket qp, LearnerHandler learnerHandler) throws IOException;  abstract void submitLearnerRequest(Request si);  abstract long startForwarding(LearnerHandler learnerHandler, long lastSeenZxid);  abstract long getQuorumVerifierVersion();  abstract String getPeerInfo(long sid);  abstract byte[] getQuorumVerifierBytes(); abstract QuorumAuthServer getQuorumAuthServer();  abstract void registerLearnerHandlerBean(LearnerHandler learnerHandler, Socket socket);  abstract void unregisterLearnerHandlerBean(LearnerHandler learnerHandler); }
public abstract void addJvmArgs(String... args);  public abstract void addArgs(String... args);  public abstract void addOption(String key, String value);  public abstract void addOption(String key, File value);  public abstract void addOption(String key, boolean value);  public abstract void setLogOnly(boolean v);
public void approximatelyEquals() throws Exception { assertExpectationMessage("~= 3.0", "2.95", "pass(2.95~=3.0)"); }
public void testClearSign() throws Exception { final InputStream ring = getClass().getClassLoader().getResourceAsStream("org/vafer/gpg/secring.gpg"); assertNotNull(ring); final String inputStr = "TEST1 \n-TEST2 \n \nTEST3 \n"; final byte[] input = inputStr.getBytes("UTF-8"); final String expectedOutputStr = "-----BEGIN PGP SIGNED MESSAGE-----\n" + "Hash: SHA1\n" + "\n" + "TEST1\n" + "- -TEST2\n" + "\n" + "TEST3\n" + "-----BEGIN PGP SIGNATURE-----\n" + "Version: BCPG v1.48\n" + "\n" + "iEYEARECABAFAkax1rgJEHM9pIAuB02PAABIJgCghFmoCJCZ0CGiqgVLGGPd/Yh5\n" + "FQQAnRVqvI2ij45JQSHYJBblZ0Vv2meN\n" + "=aAAT\n" + "-----END PGP SIGNATURE-----\n"; final byte[] expectedOutput = expectedOutputStr.getBytes("UTF-8"); final ByteArrayOutputStream os = new ByteArrayOutputStream(); PGPSigner signer = new PGPSigner(ring, "2E074D8F", "test"); signer.clearSign(new ByteArrayInputStream(input), os); final byte[] output = fixCRLF(os.toByteArray()); final int from = expectedOutputStr.indexOf("iEYEAREC"); final int until = expectedOutputStr.indexOf("=aAAT") + 5; Arrays.fill(output, from, until, (byte) '?'); Arrays.fill(expectedOutput, from, until, (byte) '?'); assertEquals(new String(expectedOutput), new String(output)); }
public void canProvideAllApplicationScopedComponents() { Class<?>[] components = new Class[] { ServletContext.class, UrlToResourceTranslator.class, Router.class, TypeCreator.class, InterceptorRegistry.class, Proxifier.class, ParameterNameProvider.class, Converters.class, EmptyElementsRemoval.class, NoRoutesConfiguration.class }; checkAvailabilityFor(true, components); mockery.assertIsSatisfied(); }
public void shouldRemoveFlashIncludedParameters() throws Exception { mockery.checking(new Expectations() { { one(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS); will(returnValue(Collections.singletonMap("Abc", 1002))); one(session).removeAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS); ignoring(anything()); } }); interceptor.intercept(stack, null, null); mockery.assertIsSatisfied(); }
protected InstructionResult executeInternal(InstructionExecutor executor) throws SlimException { Object result = executor.callAndAssign(symbolName, instanceName, methodName, args); return new InstructionResult(getId(), result); }
private String nestedTableWithCellAndRow(String cellContent, String firstRow) { return "<table border=\"1\" cellspacing=\"0\">"+ HtmlElement.endl + "\t" + firstRow + HtmlElement.endl +
public Map<String, Object> values() { Map<String, Object> m = new LinkedHashMap<>(); m.putAll(counter.values()); m.put("p50_" + name, Math.round(this.histogram.getSnapshot().getMedian())); m.put("p95_" + name, Math.round(this.histogram.getSnapshot().get95thPercentile())); m.put("p99_" + name, Math.round(this.histogram.getSnapshot().get99thPercentile())); m.put("p999_" + name, Math.round(this.histogram.getSnapshot().get999thPercentile())); return m; }
public void testKeyWithReturn() throws Exception { try { Object val = client.get("Key\r");
public void setUp() throws Exception { PropertyResourceBundle delegate = new PropertyResourceBundle(new ByteArrayInputStream("abc=def".getBytes())); bundle = new SafeResourceBundle(delegate); }
private void proposeSetData(QuorumPacket qp, long zxid, String data, int version) throws IOException { qp.setType(Leader.PROPOSAL); qp.setZxid(zxid); TxnHeader hdr = new TxnHeader(4, 1414, qp.getZxid(), 55, ZooDefs.OpCode.setData); SetDataTxn sdt = new SetDataTxn("/foo", data.getBytes(), version); ByteArrayOutputStream baos = new ByteArrayOutputStream(); OutputArchive boa = BinaryOutputArchive.getArchive(baos); boa.writeRecord(hdr, null); boa.writeRecord(sdt, null); qp.setData(baos.toByteArray()); }
public void testConversation(LeaderConversation conversation) throws Exception { Socket pair[] = getSocketPair(); Socket leaderSocket = pair[0]; Socket followerSocket = pair[1]; File tmpDir = File.createTempFile("test", "dir"); tmpDir.delete(); tmpDir.mkdir(); LeadThread leadThread = null; Leader leader = null; try { QuorumPeer peer = createQuorumPeer(tmpDir);
String getTestSystemType(); String getClassPath(); boolean runInProcess(); boolean isDebug();
private void includeScenarioLibrariesIfAny(LibraryFilter libraryFilter) throws Exception { List<WikiPage> uncles = PageCrawlerImpl.getAllUncles("ScenarioLibrary", testPage.getSourcePage()); List<WikiPage> filteredUncles = filter(uncles, libraryFilter); if (filteredUncles.size() > 0) includeScenarioLibraries(filteredUncles);
public Object getObject() throws Exception { return new MemcachedClient(connectionFactoryBuilder.build(), AddrUtil.getAddresses(servers)); }
public boolean isLocalSession(long sessionId) { return localSessionTracker != null && localSessionTracker.isTrackingSession(sessionId);
public void runFromConfig(QuorumPeerConfig config) { LOG.info("Starting quorum peer from peer config"); this.config = config; run(); }
public void testFitnesseLook() throws Exception { Responder responder = new RenameFileConfirmationResponder(); SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); String content = response.getContent(); assertSubString("<link rel=\"stylesheet\" type=\"text/css\" href=\"/files/css/fitnesse.css\" media=\"screen\"/>", content); }
public void tearDown() throws Exception { } public void testPageIsCreated() throws Exception { log.publish(); assertTrue(errorLogsParentPage.hasChildPage(testPage.getName())); } public void testErrorLogContentIsReplaced() throws Exception { WikiPage errorLogPage = root.getPageCrawler().addPage(root, PathParser.parse("ErrorLogs.TestPage")); PageData data = errorLogPage.getData(); data.setContent("old content"); errorLogPage.commit(data); log.publish(); String content = errorLogPage.getData().getContent(); assertNotSubString("old content", content); } public void testBasicContent() throws Exception { String content = getGeneratedContent(); assertSubString("'''Command: '''", content); assertSubString("!-some command-!", content); assertSubString("'''Exit code: '''", content); assertSubString("123", content); assertSubString("'''Date: '''", content); assertSubString("'''Time elapsed: '''", content); } private String getGeneratedContent() throws Exception { log.publish(); WikiPage errorLogPage = errorLogsParentPage.getChildPage(testPage.getName()); String content = errorLogPage.getData().getContent(); return content; } public void testNoExtraLogTextWasGenerated() throws Exception { String content = getGeneratedContent(); assertNotSubString("Exception", content); assertNotSubString("Standard Error", content); assertNotSubString("Standard Output", content); } public void testStdout() throws Exception { runner.setOutput("standard output that got printed"); String content = getGeneratedContent(); assertSubString("'''Standard Output:'''", content); assertSubString("standard output that got printed", content); } public void testStderr() throws Exception { runner.setError("standard error that got printed"); String content = getGeneratedContent(); assertSubString("'''Standard Error:'''", content); assertSubString("standard error that got printed", content); } public void testException() throws Exception { log.addException(new Exception("I made this")); String content = getGeneratedContent(); assertSubString("'''Internal Exception:'''", content); assertSubString("I made this", content); } public void testExecutionReport_Ok() throws Exception { WikiPageDummy wikiPageDummy = new WikiPageDummy("This.Is.Not.A.Real.Location"); MockCommandRunner mockCommandRunner = new MockCommandRunner(); ExecutionLog executionLog = new ExecutionLog(wikiPageDummy, mockCommandRunner); ExecutionStatus result; if (executionLog.exceptionCount() > 0) result = ExecutionStatus.ERROR; else if (executionLog.hasCapturedOutput()) result = ExecutionStatus.OUTPUT; else result = ExecutionStatus.OK; assertSame(ExecutionStatus.OK, result); } public void testExecutionReport_Output() throws Exception { WikiPageDummy wikiPageDummy = new WikiPageDummy("This.Is.Not.A.Real.Location"); MockCommandRunner mockCommandRunner = new MockCommandRunner(); mockCommandRunner.setOutput("I wrote something here"); ExecutionLog executionLog = new ExecutionLog(wikiPageDummy, mockCommandRunner); ExecutionStatus result; if (executionLog.exceptionCount() > 0) result = ExecutionStatus.ERROR; else if (executionLog.hasCapturedOutput()) result = ExecutionStatus.OUTPUT; else result = ExecutionStatus.OK; assertSame(ExecutionStatus.OUTPUT, result); } public void testExecutionReport_Error() throws Exception { WikiPageDummy wikiPageDummy = new WikiPageDummy("This.Is.Not.A.Real.Location"); MockCommandRunner mockCommandRunner = new MockCommandRunner(); ExecutionLog executionLog = new ExecutionLog(wikiPageDummy, mockCommandRunner); executionLog.addException(new RuntimeException("I messed up")); ExecutionStatus result; if (executionLog.exceptionCount() > 0) result = ExecutionStatus.ERROR; else if (executionLog.hasCapturedOutput()) result = ExecutionStatus.OUTPUT; else result = ExecutionStatus.OK; assertSame(ExecutionStatus.ERROR, result); } }
public void removeExtraElements() {
public void setUp() throws Exception { super.setUp();
public void scansLastModified() { ParserTest.assertScansTokenType("!lastmodified", "LastModified", true); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); context = FitNesseUtil.makeTestContext(root); suite = WikiPageUtil.addPage(root, PathParser.parse("SuitePage"), "This is the test suite\n"); }
public int hashCode() { return this.getString().hashCode(); }
public static void Launch( Activity act, String fileName) throws FileNotFoundException { Launch(act, fileName, ""); }
public void shouldComplainAboutInvalidNumber() { try { converter.convert("---", Integer.class, bundle);
public void newTestStarted(TestPage test, TimeMeasurement timeMeasurement) { currentTestStartTime = timeMeasurement.startedAt(); appendHtmlToBuffer(getPage().getData().getHeaderPageHtml()); }
public void register(Class<Formatter> clazz) { registrar.registerFormatter(clazz); LOG.info("Loaded formatter " + clazz.getName()); }
public void shouldDecapitalizeSomeCharsUntilItFindsOneUppercasedForListsAndArraysForBoundedGenericElements() throws NoSuchMethodException, SecurityException, NoSuchFieldException { Assert.assertEquals("bigDecimalList",interceptor.nameFor(getField("bigsLimited"))); }
private HtmlTag makeYesForm(String filename) { HtmlTag yesForm = HtmlUtil.makeFormTag("get", "/" + resource); yesForm.add(HtmlUtil.makeInputTag("submit", "", "Yes")); yesForm.add(HtmlUtil.makeInputTag("hidden", "responder", "deleteFile")); yesForm.add(HtmlUtil.makeInputTag("hidden", "filename", filename)); return yesForm; }
private void initializeFileContents(String firstFilePath, String secondFilePath) throws IOException, SAXException, InvalidReportException { String content = getFileContent(firstFilePath); firstFileContent = content == null ? "" : content; content = getFileContent(secondFilePath); secondFileContent = content == null ? "" : content; }
public void add(Op op) throws IllegalArgumentException { setOrCheckOpKind(op.getKind()); ops.add(op); }
public SignatureVisitor visitInterfaceBound() { v.visitInterfaceBound(); return this; }
public void simpleNameWithUnnamedArgument() throws Exception { makeTables( "!|scenario|f|a||b|\n" + "|function|@a||@b|\n" + "\n" + "!|script|\n" + "|f|1||2|\n" ); List<Object> expectedInstructions = list( list("scriptTable_id_0/scriptTable_s_id_0", "call", "scriptTableActor", "function", "1", "2") ); assertEquals(expectedInstructions, instructions); }
private void flushBuffer() { if (buffer.length() != 0 && currentLogLevel != null) { switch (currentLogLevel) {
public void onCreateMenu(ContextMenu menu, ContextMenuInfo menuInfo) { super.onCreateMenu(menu, menuInfo); if (!readOnly) { menu.add(0, MENU_DELETE, 0, R.string.menu_delete);
protected void loadPage(String pageName, FitNesseContext context) { WikiPagePath path = PathParser.parse(pageName); if (RecentChanges.RECENT_CHANGES.equals(path)) { page = context.recentChanges.toWikiPage(context.root);
public synchronized void waitForReadOnlyConnected(long timeout) throws InterruptedException, TimeoutException { long expire = Time.currentElapsedTime() + timeout; long left = timeout; while (!readOnlyConnected && left > 0) { wait(left); left = expire - Time.currentElapsedTime(); } if (!readOnlyConnected) { throw new TimeoutException(
void updateContent(int col, int row, SlimExceptionResult exceptionResult); Table asTemplate(CellContentSubstitution substitution) throws SyntaxError;
private String getHref(WikiPage wikiPage) throws Exception { return PathParser.render(wikiPage.getPageCrawler().getFullPath(wikiPage)); }
private String imageSrc() { if (expanded) return collapsableOpenImg;
private ScriptTable makeScriptTable(String tableText) throws Exception { WikiPageUtil.setPageContents(root, tableText); TableScanner ts = new HtmlTableScanner(root.getData().getHtml()); Table t = ts.getTable(0); testContext = new SlimTestContextImpl(); return new HtmlScriptTable(t, "id", testContext); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); pageBuilder = new PageBuilder(); }
public void shouldNotDealWithDirectoryOutsideFilesFolder() throws Exception { request.setResource("/files/../../"); Responder responder = FileResponder.makeResponder(request, FitNesseUtil.base); Response response = responder.makeResponse(context, request); assertTrue(responder instanceof ErrorResponder); assertEquals(400, response.getStatus()); }
View getView(final String designDocumentName, final String viewName); List<View> getViews(final String designDocumentName);
public VersionInfo commit(PageData data) throws Exception; public PageCrawler getPageCrawler(); public WikiPage getHeaderPage() throws Exception; public WikiPage getFooterPage() throws Exception;
private Constant get(final Constant key) { return (Constant) get((Object) key); }
public void setup() { this.converter = new BigIntegerConverter(); }
private double compareTables(int leftTableIndex, int rightTableIndex) { Table table1 = leftHandScanner.getTable(leftTableIndex); Table table2 = rightHandScanner.getTable(rightTableIndex); return compareTables(table1, table2); }
public void setupCustomizedEnv() { ZooKeeperServer.setDigestEnabled(true); ZooKeeperServer.setSerializeLastProcessedZxidEnabled(true); }
private boolean allows(T resource, Method method) { try { List<br.com.caelum.vraptor.rest.Transition> transitions = resource.getRelations(restfulie);
public void settingShouldNullifyUpToIndexAndIgnoreRemoval() throws Exception { final Long[] l = new Long[] {}; when(typeConverter.convertValue(anyMap(), any(), (Member) any(Member.class), anyString(), any(), any(Class.class))).thenReturn(22L); accessor.setProperty(context, l, 1, 22L); assertThat(instance.simpleNode[0], is(nullValue())); assertThat(instance.simpleNode[1], is(equalTo(22L))); }
public int[] sum() { return new int[] {a[0]+b[0], a[1]+b[1]}; }
public String toString() { return super.toString() + ":" + (data == null ? "null" : new String(data))
<T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public LearnerSnapshotThrottler createLearnerSnapshotThrottler( int maxConcurrentSnapshots, long maxConcurrentSnapshotTimeout) { return new LearnerSnapshotThrottler( maxConcurrentSnapshots, maxConcurrentSnapshotTimeout);
private void createTestPageTree() throws Exception {
public void testUTF16LE() throws Exception { InformationInputStream informationStream = new InformationInputStream(getStream("utf16le-lf.txt")); Utils.copy(informationStream, new ByteArrayOutputStream());
protected void setUp() throws Exception { context = FitNesseUtil.makeTestContext(); context.port = FitNesseUtil.port; fitnesse = new FitNesse(context); fitnesse.start(); }
public DERObject toASN1Object() { ASN1EncodableVector v = new ASN1EncodableVector(); v.add(iv); v.add(paramSet); return new DERSequence(v); }
public Object convert(String value) { if(value==null) {
public boolean pageExists(String pageName) { WikiPage root = FitnesseFixtureContext.root; WikiPagePath pagePath = PathParser.parse(pageName); WikiPage thePage = root.getPageCrawler().getPage(root, pagePath); return thePage != null; }
public Object callAndAssign(String symbolName, String instanceName, String methodsName, Object... arguments) throws SlimException { List<Object> list = ListUtility.<Object>list(instruction.getId(), CallAndAssignInstruction.INSTRUCTION, symbolName, instanceName, methodsName); addArguments(list, arguments); statementsAsList.add(list); return null; }
<T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
public ResourceBundle get() { return localization.getBundle(); }
public void testShouldReportErrorMsgIfDeleteOperationFails() throws Exception { final String errorMsg = "Cannot delete files from Revision Control"; revisionController.delete(contentAndPropertiesFilePathFor(FS_PARENT_PAGE)); expectLastCall().andThrow(new RevisionControlException(errorMsg)); replay(revisionController); createPage(FS_PARENT_PAGE); request.setResource(FS_PARENT_PAGE); invokeResponderAndCheckSuccessStatus(); assertSubString(errorMsg, response.getContent()); }
public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; VersionNumber that = (VersionNumber) o; return major == that.major && minor == that.minor
private String makeRequestUrl() { String requestUrl = "/" + pageName + "?responder=suite"; if (suiteFilter != null) requestUrl += "&suiteFilter=" + suiteFilter; if (excludeSuiteFilter != null) requestUrl += "&excludeSuiteFilter=" + excludeSuiteFilter; requestUrl += "&format=xml"; return requestUrl; }
private void includeScenarioLibraries(List<WikiPage> uncles) { Collections.reverse(uncles); testPage.setScenarioLibraries(uncles); }
public void shouldAddInterceptorsInOrder() throws InterceptionException, IOException { final Sequence sequence = mockery.sequence("executionSequence"); mockery.checking(new Expectations() { { one(stack).add(ResourceLookupInterceptor.class); inSequence(sequence); one(stack).add(InterceptorListPriorToExecutionExtractor.class); inSequence(sequence); one(stack).add(instantiator); inSequence(sequence); one(stack).add(Validator.class); inSequence(sequence); one(stack).add(ExecuteAndViewInterceptor.class); inSequence(sequence); one(stack).next(null, null); inSequence(sequence); } }); execution.execute(); mockery.assertIsSatisfied(); }
private void addEntry(final File wcPath) throws SVNException { this.manager.getWCClient().doAdd(wcPath, false, wcPath.isDirectory(), true, false); }
public void registerExtraParametersFromAcessedUrlWithGreedyParameters() throws SecurityException, NoSuchMethodException { DefaultParametersControl control = new DefaultParametersControl("/clients/{pathToFile*}"); mockery.checking(new Expectations() { { one(request).setParameter("pathToFile", new String[] {"my/path/to/file"}); } }); control.fillIntoRequest("/clients/my/path/to/file", request); mockery.assertIsSatisfied(); }
public long loadDataBase() throws IOException { long zxid = snapLog.restore(dataTree, sessionsWithTimeouts, commitProposalPlaybackListener); initialized = true; return zxid; }
protected void assertOrderedNodeNames(String[] names, String[] expected) { int size = names.length; SortedSet<ZNodeName> nodeNames = new TreeSet<>(); for (String name : names) { nodeNames.add(new ZNodeName(name)); } Assert.assertEquals( "The SortedSet does not have the expected size!", nodeNames.size(), expected.length); int index = 0; for (ZNodeName nodeName : nodeNames) { String name = nodeName.getName();
public Writer getWriter(FitNesseContext context, WikiPage page, TestSummary counts, long time) throws Exception { File resultPath = new File(PageHistory.makePageHistoryFileName(context, page, counts, time)); File resultDirectory = new File(resultPath.getParent()); resultDirectory.mkdirs(); File resultFile = new File(resultDirectory, resultPath.getName()); return new FileWriter(resultFile); }
protected void configure(Properties properties) throws Exception { serviceName = properties.getProperty("NegotiateAuthenticator.serviceName", null); serviceNameType = new Oid(properties.getProperty("NegotiateAuthenticator.serviceNameType", GSSName.NT_HOSTBASED_SERVICE.toString())); String mechanismProperty = properties.getProperty("NegotiateAuthenticator.mechanism", null); mechanism = mechanismProperty == null ? null : new Oid(mechanismProperty); stripRealm = Boolean.parseBoolean(properties.getProperty("NegotiateAuthenticator.stripRealm", "true")); }
public JSONSerialization withCallback(final String callbackName) { return new XStreamJSONSerialization(response, extractor, initializer) { @Override
public static List<String> createSuiteList(FitNesseContext context) { List<String> SuiteList = new ArrayList<String>(); SuiteList = createTree(SuiteList, context, "/", "Suite"); if ((SuiteList.size() > 0)) { return SuiteList;
CASResponse cas(String key, long casId, int exp, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); CountDownLatch broadcastOp(final BroadcastOpFactory of); CountDownLatch broadcastOp(final BroadcastOpFactory of, Collection<MemcachedNode> nodes);  Set<String> listSaslMechanisms(); }
public void test10Wide5DeepSerialize() throws KeeperException, InterruptedException, IOException { serializeTree(5, 10, 20); }
private void handleRealmCallback(RealmCallback rc) { LOG.debug("QuorumLearner supplied realm: {}", rc.getDefaultText()); rc.setText(rc.getDefaultText()); }
public void testDifferentStringHashDifferently() throws Exception { String hash1 = crypter.encrypt("123456"); String hash2 = crypter.encrypt("abcdef"); assertFalse(hash1.equals(hash2)); }
protected List<SlimAssertion> invokeAction(int startingCol, int endingCol, int row, SlimExpectation expectation) { String actionName = getActionNameStartingAt(startingCol, endingCol, row); List<SlimAssertion> assertions = new ArrayList<>(); String[] args = getArgumentsStartingAt(startingCol + 1, endingCol, row, assertions); assertions.add(makeAssertion(callFunction(getTableType() + "Actor", actionName, (Object[]) args), expectation)); return assertions; }
public void write(byte[] buffer) throws IOException { bytes += buffer.length; os.write(buffer); }
public void setUp() throws Exception { context = FitNesseUtil.makeTestContext(null, ".", "testFitnesseRoot", 80); }
public void tableWithBadVariableHasException() throws Exception { getResultsForPageContents( "|DT:fitnesse.slim.test.TestSlim|\n" + "|noSuchVar|\n" + "|3|\n" ); assertTestResultsContain("!style_error(Method setNoSuchVar[1] not found in fitnesse.slim.test.TestSlim.)"); }
public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException { if (!(req instanceof HttpServletRequest) || !(res instanceof HttpServletResponse)) { throw new ServletException( "VRaptor must be run inside a Servlet environment. Portlets and others aren't supported."); } HttpServletRequest webRequest = (HttpServletRequest) req; HttpServletResponse webResponse = (HttpServletResponse) res; if (staticHandler.requestingStaticFile(webRequest)) { staticHandler.deferProcessingToContainer(chain, webRequest, webResponse); return; } RequestInfo request = new RequestInfo(servletContext, webRequest, webResponse);
private WikiPage createServerSideRoot() throws Exception { remoteRoot = InMemoryPage.makeRoot("RooT"); PageCrawler crawler = remoteRoot.getPageCrawler(); crawler.addPage(remoteRoot, PathParser.parse("PageOne"), "page one"); crawler.addPage(remoteRoot, PathParser.parse("PageOne.ChildOne"), "child one"); crawler.addPage(remoteRoot, PathParser.parse("PageTwo"), "page two"); return remoteRoot; }
public Object intercept(T proxy, java.lang.reflect.Method method, Object[] args, br.com.caelum.vraptor.proxy.SuperMethod superMethod) { TransitionBuilder.this.method = method; parameters = args; return null; };
public void testComplete(WikiTestPage test, TestSummary testSummary) throws IOException { super.testComplete(test, testSummary); writeResults(); }
public void testResyncBySnapThenDiffAfterFollowerCrashes() throws IOException, InterruptedException, KeeperException, Throwable { followerResyncCrashTest(false); }
protected void onResume() { super.onResume();
private synchronized void init() { if (!init) { if (!upgradeFromSQL()) {
public void pageDirectoryWithOneResultShouldShowOneHistoryRecord() throws Exception { addPageDirectoryWithOneResult("SomePage", "20090418123103_1_2_3_4"); TestHistory history = new TestHistory(resultsDirectory); PageHistory pageHistory = history.getPageHistory("SomePage"); assertEquals(1, pageHistory.getFailures()); assertEquals(0, pageHistory.getPasses()); Date date = dateFormat.parse("20090418123103"); assertEquals(date, pageHistory.getMinDate()); assertEquals(date, pageHistory.getMaxDate()); assertEquals(1, pageHistory.size()); TestResultRecord testResultRecord = pageHistory.get(date); assertEquals(date, testResultRecord.getDate()); assertEquals(new TestSummary(1, 2, 3, 4), testResultRecord.toTestSummary()); }
public WikiPage getFooterPage() throws Exception { return PageCrawlerImpl.getInheritedPage("PageFooter", this); }
public void testWatchesLeak(boolean sessionTimedout) throws Exception { NIOServerCnxnFactory serverCnxnFactory = mock(NIOServerCnxnFactory.class); final SelectionKey sk = new FakeSK(); MockSelectorThread selectorThread = mock(MockSelectorThread.class); when(selectorThread.addInterestOpsUpdateRequest(any(SelectionKey.class))).thenAnswer(new Answer<Boolean>() { @Override public Boolean answer(InvocationOnMock invocation) throws Throwable { SelectionKey sk = (SelectionKey) invocation.getArguments()[0]; NIOServerCnxn nioSrvCnx = (NIOServerCnxn) sk.attachment(); sk.interestOps(nioSrvCnx.getInterestOps()); return true; } }); ZKDatabase database = new ZKDatabase(null); database.setlastProcessedZxid(2L); QuorumPeer quorumPeer = mock(QuorumPeer.class); FileTxnSnapLog logfactory = mock(FileTxnSnapLog.class);
protected void onStop() { backupManager.dataChanged(); super.onStop(); }
public static TestResult fail(String message) { return new TestResult(null, null, message, ExecutionResult.FAIL); }
public void testTake1() throws Exception { String dir = "/testTake1"; String testString = "Hello World"; final int numClients = 1; ZooKeeper[] clients = new ZooKeeper[numClients]; DistributedQueue[] queueHandles = new DistributedQueue[numClients]; for (int i = 0; i < clients.length; i++) { clients[i] = createClient(); queueHandles[i] = new DistributedQueue(clients[i], dir, null); } queueHandles[0].offer(testString.getBytes()); byte[] dequeuedBytes = queueHandles[0].take(); assertEquals(new String(dequeuedBytes), testString); }
public int getTrafficClass() throws SocketException { return getSocketAllowUnknownMode().getTrafficClass(); }
private void insertPagesOfThisGroup(LinkedList<WikiPage> pageGroup) { pageList.addAll(pageGroup); }
public void testClose() throws IOException { serverSideSocket.close(); Assert.assertFalse(serverSideSocket.isModeKnown()); }
public final void startElement( final String namespaceURI, final String localName, final String qName, final Attributes list) throws SAXException { if (subdocument) { subdocumentHandler.startElement(namespaceURI,
@Test public void translatesNewlines() { ParserTest.assertTranslatesTo("hi\nmom", "hi<br/>mom"); }
@Test public void translatesLiteral() { ParserTestHelper.assertTranslatesTo("!-stuff-!", "stuff"); ParserTestHelper.assertTranslatesTo("!-''not italic''-!", "''not italic''"); ParserTestHelper.assertTranslatesTo("!-break\n-!|", "break\n|"); }
public void supportsComponentFactoriesForCustomInstantiation() {
public void tearDown() throws Exception { } public void testRegexp() throws Exception { assertMatch("!define xyz {\n123\r\n456\r\n}"); assertMatch("!define abc {1}"); assertMatch("!define abc (1)"); assertMatch("!define x (!define y {123})"); assertMatch("!define x [1]"); assertMatch("!define x (!define y [123])"); assertMatch("!define x [!define y {123}]"); assertNoMatch("!define"); assertNoMatch("!define x"); assertNoMatch(" !define x {1}"); assertNoMatch("!define x {1)"); assertNoMatch("!define x {1]"); assertNoMatch("!define x (1]"); assertNoMatch("!define x (1}"); assertNoMatch("!define x [x)"); assertNoMatch("!define x [x}");
private Result resultFromMessage(String contents) { int colon = contents.indexOf(":"); if (colon == -1) return null; String code = contents.substring(0, colon); String message = contents.substring(colon + 1); if (code.equalsIgnoreCase("error")) return error(message);
void doIO(SelectionKey k) throws InterruptedException { try { if (!isSocketOpen()) {
public void testIsNotUnderRevisionControl() throws Exception { assertTrue("Files in Unknown State should not be under revision control", SVNState.UNKNOWN.isNotUnderRevisionControl()); assertFalse("Files in Checked In State should be under revision control", SVNState.VERSIONED.isNotUnderRevisionControl()); assertTrue("Files in Added State should not be under revision control", SVNState.ADDED.isNotUnderRevisionControl()); assertFalse("Files in Deleted State should be under revision control", SVNState.DELETED.isNotUnderRevisionControl()); }
FlushOperation flush(int delay, OperationCallback operationCallback);  GetOperation get(String key, GetOperation.Callback callback);  GetsOperation gets(String key, GetsOperation.Callback callback);  GetOperation get(Collection<String> value, GetOperation.Callback cb);  MutatatorOperation mutate(Mutator m, String key, int by, long def, int exp, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb); }
public void method() { } } @Before public void setup() { this.mockery = new VRaptorMockery(); this.result = mockery.mock(PageResult.class); this.info = mockery.mock(ComponentInfoProvider.class); this.stack = mockery.mock(InterceptorStack.class); this.interceptor = new ViewInterceptor(result, info); } @Test public void shouldForward() throws SecurityException, InterceptionException, NoSuchMethodException { this.method = mockery.methodFor(VRaptor2Component.class, "method"); mockery.checking(new Expectations() { { one(info).shouldShowView(method); will(returnValue(true)); one(result).forwardTo(); } }); interceptor.intercept(null, this.method, null); mockery.assertIsSatisfied(); } @Test public void shouldInvokeNextIfVRaptor3Resource() throws SecurityException, InterceptionException, NoSuchMethodException { this.method = mockery.methodFor(VRaptor3Resource.class, "method"); final VRaptor3Resource instance = new VRaptor3Resource(); mockery.checking(new Expectations() { { one(stack).next(method, instance); } }); interceptor.intercept(stack, this.method, instance); mockery.assertIsSatisfied(); } class MyThrowable extends RuntimeException{ private static final long serialVersionUID = 1L; } @Test public void doesNothingInAViewlessMethodResource() throws SecurityException, InterceptionException, NoSuchMethodException { this.method = mockery.methodFor(VRaptor2Component.class, "method"); mockery.checking(new Expectations() { { one(info).shouldShowView(method); will(returnValue(false)); } }); interceptor.intercept(null, this.method, null); mockery.assertIsSatisfied(); } }
public void shouldLoadEntityUsingId() throws Exception { when(provider.parameterNamesFor(method.getMethod())).thenReturn(new String[] {"entity"}); when(request.getParameter("entity.id")).thenReturn("123"); Entity expectedEntity = new Entity(); when(session.get(Entity.class, 123L)).thenReturn(expectedEntity); when(session.getSessionFactory()).thenReturn(sessionFactory); when(sessionFactory.getClassMetadata(any(Class.class))).thenReturn(classMetadata); when(classMetadata.getIdentifierPropertyName()).thenReturn("id"); when(classMetadata.getIdentifierType()).thenReturn(type); when(type.getReturnedClass()).thenReturn(Long.class); interceptor.intercept(stack, method, instance); verify(request).setAttribute("entity", expectedEntity); verify(stack).next(method, instance); }
protected ASMifierMethodVisitor createASMifierMethodVisitor() { return new ASMifierMethodVisitor(); }
public StatementExecutorInterface getStatementExecutor() throws Exception { return new StatementExecutor(); }
protected void onDestroy() { mLM.cleanUp(); super.onDestroy(); }
public void xmlFormat() throws Exception { request.addInput("format", "xml"); doSimpleRun(passFixtureTable()); assertEquals("text/xml", response.getContentType()); Document testResultsDocument = getXmlDocumentFromResults(results); Element testResultsElement = testResultsDocument.getDocumentElement(); assertEquals("testResults", testResultsElement.getNodeName()); String version = XmlUtil.getTextValue(testResultsElement, "FitNesseVersion"); assertEquals(new FitNesseVersion().toString(), version); Element result = XmlUtil.getElementByTagName(testResultsElement, "result"); Element counts = XmlUtil.getElementByTagName(result, "counts"); assertCounts(counts, "1", "0", "0", "0"); String content = XmlUtil.getTextValue(result, "content"); assertSubString("PassFixture", content); String relativePageName = XmlUtil.getTextValue(result, "relativePageName"); assertEquals("TestPage", relativePageName); }
public boolean onPreferenceChange(Preference preference, Object newValue) { Boolean value = (Boolean) newValue; if ( ! value.booleanValue() ) { FileDbHelper helper = App.fileDbHelper; helper.deleteAllKeys(); } return true; }
static public void logRequest(char rp, Request request, String header, long traceMask) { if (!doLog(traceMask)) { return; } RuntimeException re = new RuntimeException(); StackTraceElement ste = re.getStackTrace()[1]; String location = ZooLog.stackTrace2Location(ste); logRequestText(rp, request, header, traceMask, location); }
private String[] extractNamesFromMatcher(Matcher matcher) { String[] arguments = new String[matcher.groupCount()]; for (int i = 0; i < arguments.length; i++) { arguments[i] = matcher.group(i + 1); } return arguments; }
private void copy(File src, File dst) throws IOException { InputStream in = new FileInputStream(src); OutputStream out = new FileOutputStream(dst);
public void doTable(Parse table) { String[] args = this.getArgs(); doActionOnSemaphore(args[1], args[0], table.at(0, 0)); super.doTable(table); }
public <T> T provideForRequest(RequestInfo request, Execution<T> execution) { if (springListenerAlreadyCalled()) { return execution.insideRequest(getContainer()); } VRaptorRequestHolder.setRequestForCurrentThread(request); T result; try { ServletContext context = request.getServletContext(); HttpServletRequest webRequest = request.getRequest(); requestListener.requestInitialized(new ServletRequestEvent(context, webRequest)); try { result = execution.insideRequest(getContainer()); } finally { requestListener.requestDestroyed(new ServletRequestEvent(context, webRequest)); } } finally { VRaptorRequestHolder.resetRequestForCurrentThread(); } return result; }
public void setup() throws NoSuchMethodException { this.mockery = new Mockery(); this.provider = mockery.mock(ParametersProvider.class); this.requestResult = new RequestResult(); this.stack = mockery.mock(InterceptorStack.class); this.parameters = new MethodParameters(); }
public static String unescapeHTML(String value) { for (int i = 0; i < specialHtmlChars.length; i++) value = value.replaceAll(specialHtmlEscapes[i], specialHtmlChars[i]); return value; }
public void testCreate2(boolean useAsync) throws Exception { CreateOptions options = CreateOptions.newBuilder(Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT).build(); List<Op> ops = Arrays.asList( Op.create("/multi0", new byte[0], options), Op.create("/multi1", new byte[0], options), Op.create("/multi2", new byte[0], options)); List<OpResult> results = multi(zk, ops, useAsync); for (int i = 0; i < ops.size(); i++) { CreateResult createResult = (CreateResult) results.get(i); assertEquals(ops.get(i).getPath(), createResult.getPath()); assertEquals(ZooDefs.OpCode.create2, createResult.getType(), createResult.getPath()); assertNotNull(createResult.getStat(), createResult.getPath()); assertNotEquals(0, createResult.getStat().getCzxid(), createResult.getPath()); } zk.getData("/multi0", false, null); zk.getData("/multi1", false, null); zk.getData("/multi2", false, null); }
void include(String result);  void redirect(String url); }
public void testPendingSessionQueueSize() throws Exception { setupProcessors(0, 0);
public void testNoCompression() throws Exception { project.executeTarget("no-compression"); File deb = new File("target/test-classes/test.deb"); assertTrue("package not build", deb.exists()); final AtomicBoolean found = new AtomicBoolean(false); ArchiveWalker.walkData(deb, new ArchiveVisitor<TarArchiveEntry>() { public void visit(TarArchiveEntry entry, byte[] content) throws IOException { found.set(true); } }, Compression.NONE); assertTrue("tar file not found", found.get()); }
private <T> T newInstance(Class<T> clazz) throws PluginException { try { return clazz.newInstance();
public void testOutofElection() { HashMap<Long, Vote> outofelection = new HashMap<>(); outofelection.put(1L, new Vote(0x0, 5, ZxidUtils.makeZxid(15, 0), 0xa, 0x17, ServerState.FOLLOWING)); outofelection.put(2L, new Vote(0x0, 5, ZxidUtils.makeZxid(15, 0), 0xa, 0x17, ServerState.FOLLOWING)); outofelection.put(4L, new Vote(0x1, 5, ZxidUtils.makeZxid(15, 0), 0xa, 0x18, ServerState.FOLLOWING)); Vote vote = new Vote(0x1, 5, ZxidUtils.makeZxid(15, 0), 0xa, 0x18, ServerState.LEADING); outofelection.put(5L, vote); Notification n = new Notification(); n.version = vote.getVersion(); n.leader = vote.getId(); n.zxid = vote.getZxid(); n.electionEpoch = vote.getElectionEpoch(); n.state = vote.getState(); n.peerEpoch = vote.getPeerEpoch(); n.sid = 5L;
public void closedRightIntervalComparison() throws Exception { Expectation expectation = makeDummyExpectation(" 2.1 < _ <= 5.9"); assertEquals("!style_pass(2.1<4.3<=5.9)", expectation.createEvaluationMessage("4.3", "", "")); assertEquals("!style_fail(2.1<2.1<=5.9)", expectation.createEvaluationMessage("2.1", "", "")); assertEquals("!style_pass(2.1<5.9<=5.9)", expectation.createEvaluationMessage("5.9", "", "")); assertEquals("!style_fail(2.1<8.3<=5.9)", expectation.createEvaluationMessage("8.3", "", "")); }
public synchronized void write(byte[] b, int off, int len) { if (!makeSpace(len)) {
protected int compile(File sourceDir, File outputDir, List<String> classpathElements, boolean compileInLoop) throws Exception, InterruptedException { getLog().warn("Using older form of compile"); return compile(Arrays.asList(sourceDir.getAbsolutePath()), outputDir, classpathElements, compileInLoop); }
MutablePicoContainer makeChildContainer() { this.appContainer = appContainer.makeChildContainer(); return appContainer; }
private List<WikiPage> reinsertPagesViaSetUpTearDownGroups(Map<String, List<WikiPage>> pageSetUpTearDownGroups) { List<WikiPage> pageList = new LinkedList<WikiPage>(); for (Map.Entry<String, List<WikiPage>> entry : pageSetUpTearDownGroups.entrySet()) { pageList.addAll(insertSetUpTearDownPageGroup(entry.getKey(), entry.getValue())); } return pageList; }
public Calendar convert(String value, Class type, List<ValidationMessage> errors, ResourceBundle bundle) { if (value == null || value.equals("")) { return null; } Locale locale = jstlWrapper.findLocale(request); if (locale == null) { locale = Locale.getDefault(); } DateFormat format = DateFormat.getDateInstance(DateFormat.SHORT, locale); try { Date date = format.parse(value);
boolean hasWriteOp();  void addOp(Operation op);  void insertOp(Operation o);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
public void startSending() throws IOException { try { doSending();
private void countResult(TestResultRecord summary) { ExecutionResult result = ExecutionResult.getExecutionResult(summary.getWikiPageName(), summary); if (result == ExecutionResult.FAIL || result == ExecutionResult.ERROR) failures++;
public List<? extends Object> getPlugins() throws PluginException { return createList(); }
boolean isZKServerRunning() { return zkServer == null || !zkServer.isRunning(); }
public MutatorOperation mutate(Mutator m, String key, long by, long def, int exp, OperationCallback cb) { return new MutatorOperationImpl(m, key, by, def, exp, cb); }
public void newTestStarted(WikiTestPage test) throws IOException; public void testOutputChunk(String output) throws IOException; public void testAssertionVerified(Assertion assertion, TestResult testResult); public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); public void testComplete(WikiTestPage test, TestSummary testSummary) throws IOException; public void errorOccurred(Throwable cause); }
public FileSystemPage makeRootPage(String rootPath, String rootPageName) { File rootFile = rootPath != null ? new File(rootPath) : null; return new FileSystemPage(rootFile, rootPageName, versionsController, new FileSystemSubWikiPageFactory(rootFile), variableSource); }
void setMaxClientCnxnsPerHost(int max);  int getMinSessionTimeout();  void setMinSessionTimeout(int min);  int getMaxSessionTimeout();  void setMaxSessionTimeout(int max); boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public static Binding create(Fixture fixture, String name) throws Throwable { Binding binding = null; if(name.startsWith("=")) binding = new SaveBinding(); else if(name.endsWith("=")) binding = new RecallBinding(); else if(regexMethodPattern.matcher(name).matches()) binding = new RegexQueryBinding(); else if(methodPattern.matcher(name).matches()) binding = new QueryBinding(); else if(fieldPattern.matcher(name).matches()) binding = new SetBinding(); if(binding == null) binding = new NullBinding(); else binding.adapter = makeAdapter(fixture, name); return binding; }
public void commandShouldUseDifferentDefaultPort() throws Exception { Arguments args = new Arguments("-c", "someCommand"); assertNotNull(args); assertEquals(Arguments.DEFAULT_COMMAND_PORT, args.getPort()); }
public void testGetPageThatStartsWithDot() throws Exception { WikiPage page1 = crawler.addPage(root, PathParser.parse("PageOne"), "page one"); WikiPage child1 = crawler.addPage(root, PathParser.parse("PageOne.ChildOne"), "child one"); assertSame(page1, crawler.getPage(page1, pageOnePath)); assertSame(child1, crawler.getPage(page1, childOnePath)); assertSame(page1, crawler.getPage(child1, pageOnePath)); }
public void process(WatchedEvent event) { LOG.info("<<<EVENT>>> " + clientId + " - WatchedEvent: " + event);
public void setUp() throws Exception { processor = new MockCommitProcessor(); }
public void testHammerSuper() throws Throwable { try { final int threadCount = 5;
public void testComplete_shouldCountTestResults() throws Exception { TimeMeasurement timeMeasurement = new TimeMeasurement().start().stop(); formatter.testComplete(page, right, timeMeasurement); formatter.testComplete(page, wrong, timeMeasurement); formatter.testComplete(page, exception, timeMeasurement); formatter.allTestingComplete(); assertEquals(3, formatter.testCount); assertEquals(2, formatter.failCount); assertEquals(2, BaseFormatter.finalErrorCount); }
public void givenNonNullHead_HeadIsPrepended() throws Exception { tag.head = "head"; assertEquals("head<aTag/>" + endl, tag.html()); }
public void testBitSet() { BitHashSet bset = new BitHashSet(0); WatcherOrBitSet bitSet = new WatcherOrBitSet(bset); assertEquals(0, bitSet.size()); Integer bit = 1; assertFalse(bitSet.contains(1)); assertFalse(bitSet.contains(bit)); bset.add(bit); assertTrue(bitSet.contains(1)); assertTrue(bitSet.contains(bit)); assertEquals(1, bitSet.size()); }
public void storeResult(String val) { System.out.println("Big store result: " + val); }
void setSyncLimit(int syncLimit);  int getTick();  String getState();  String getQuorumAddress();  int getElectionType();  String getElectionAddress();  String getClientAddress();  String getLearnerType();  long getConfigVersion();  String getQuorumSystemInfo();  boolean isPartOfEnsemble();  boolean isLeader(); }
public void shouldNotDeserializeIfHasNoContentType() throws Exception { when(request.getContentType()).thenReturn(null); methodInfo.setParameters(new Object[2]); final DefaultResourceMethod consumesAnything = new DefaultResourceMethod(null, DummyResource.class.getDeclaredMethod("consumesAnything")); interceptor.intercept(stack, consumesAnything, null); assertEquals(methodInfo.getParameters()[0], null); assertEquals(methodInfo.getParameters()[1], null); verify(stack).next(consumesAnything, null); }
public void shouldCallMethodOnInstallLibraryWhenMethodIsNotFoundInAFixture() { createFixtureInstance(echoLibraryName()); FileSupport library = createFileSupportLibrary(); assertNotNull(library); Object result = statementExecutor.call(INSTANCE_NAME, deleteMethodName(), "filename.txt"); assertEquals(voidMessage(), result); assertTrue(library.deleteCalled()); }
private Object deserialize() { SerializingTranscoder tc = new SerializingTranscoder(); CachedData d = new CachedData(this.getItemFlags(), this.getValue(), CachedData.MAX_SIZE); Object rv = null; rv = tc.decode(d); return rv; }
public void run() { while (keepRunning) { CacheRequest obj;
private int twoBallsInFrame(int firstBall) { return rolls[firstBall] + rolls[firstBall + 1]; }
public <T> Serializer from(T object) { if (object == null) { throw new NullPointerException("You can't serialize null objects"); } if (Collection.class.isInstance(object)) { throw new IllegalArgumentException("It's not possible to serialize colections yet. " + "Create a class that wraps this collections by now."); } Class<?> type = object.getClass(); String name = extractor.nameFor(type); xstream.alias(name, type); excludeNonPrimitiveFields(type); this.toSerialize = object; return this; }
public Object convert(String value, Class type, List errors, ResourceBundle bundle) { if(value==null || value=="") { return 0D; } try { return Double.parseDouble(value);
protected int[] startQuorum(final int serverCount, StringBuilder connectStr, Map<String, String> authConfigs, int authServerCount) throws IOException { final int clientPorts[] = new int[serverCount]; StringBuilder sb = new StringBuilder(); for (int i = 0; i < serverCount; i++) { clientPorts[i] = PortAssignment.unique(); String server = String.format( "server.%d=localhost:%d:%d:participant", i, PortAssignment.unique(), PortAssignment.unique()); sb.append(server + "\n"); connectStr.append("127.0.0.1:" + clientPorts[i]); if (i < serverCount - 1) { connectStr.append(","); } } String quorumCfg = sb.toString();
public List<Message> validateProperty(Object object, String property, Class<?>... groups) { logger.warn("You are willing to validate an object, but there is no bean validation engine " + "registered. Please add the jars of some implementation of Bean Validator."); return emptyList(); }
public void DirectoryOfDirectoryOfHtmlFilesIsExternalSuitePage() throws Exception { fileSystem.makeFile("./somepath/ExternalSuite/subsuite/myfile.html", "stuff"); WikiPage page = fileSystemPageFactory.makeChildPage("ExternalSuite", rootPage); assertEquals(ExternalSuitePage.class, page.getClass()); }
public boolean isMatchingTest(WikiPage testPage) throws Exception { return false; }
private Symbol makeListBody(Parser parser) { while (!parser.peek(new SymbolType[]{SymbolType.Whitespace}).isEmpty()) { parser.moveNext(1); } return parser.parseTo(SymbolType.Newline, 1); }
Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
private void addCellsForColumnFixture(StringBuffer tableTemplate, List<Field> publicFields, List<Method> publicMethods) { StringBuffer headerRow = new StringBuffer("|"); StringBuffer valueRow = new StringBuffer("|"); addCellsForFieldNamesAndTypes(publicFields, headerRow, valueRow); addCellsForMethodNamesAndReturnTypes(publicMethods, headerRow, valueRow); tableTemplate.append(headerRow).append("\n").append(valueRow).append("\n"); }
int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String literalize(String s); String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); }
public void testUsageOnRootPageDoesntCrash() throws Exception { AliasLinkWidget w = new AliasLinkWidget(new WidgetRoot(root), "[[here][PageOne]]"); try { w.render();
public String substringFrom(int startAt) { return input.substring(startAt, offset); }
public void loadFromFile(InputStream is) throws IOException, InvalidDBVersionException { int sig1 = Types.readInt(is); int sig2 = Types.readInt(is); if ( ! matchesHeader(sig1, sig2) ) { throw new InvalidDBVersionException(); } long version = Types.readUInt(is); if ( ! validVersion(version) ) { throw new InvalidDBVersionException(); } boolean done = false; while ( ! done ) { done = readHeaderField(is);
public void testLoadKeyStoreWithWrongFileType() throws Exception {
public void genCCode(FileWriter h, FileWriter c) throws IOException { try { for (JField f : mFields) {
public TestRun createRun(List<WikiPage> pages) { PagesByTestSystem pagesByTestSystem = getPagesByTestSystem(pages); return createRun(pagesByTestSystem); }
public Response fail(String message) { return super.pass(message); }
public void testRenameParentPage() throws Exception { PageData pageTwoChildData = subWiki_pageTwo_pageTwoChild.getData(); pageTwoChildData.setContent("gunk .SubWiki.PageTwo gunk"); subWiki_pageTwo_pageTwoChild.commit(pageTwoChildData); renamer = new PageReferenceRenamer(root, subWiki_pageTwo, "PageThree"); renamer.renameReferences(); String updatedContent = subWiki_pageTwo_pageTwoChild.getData().getContent(); assertEquals("gunk .SubWiki.PageThree gunk", updatedContent); }
public HtmlTag makeCollapsableSection(HtmlElement title, HtmlElement content) { String id = random.nextLong() + "";
int getMaxConcurrentSnapSyncs();  void setMaxConcurrentSnapSyncs(int maxConcurrentSnapSyncs);  int getMaxConcurrentDiffSyncs();  void setMaxConcurrentDiffSyncs(int maxConcurrentDiffSyncs); }
public void testUncaughtException() throws Exception { MyThread t1 = new MyThread("Test-Thread"); t1.start(); Assert.assertTrue("Uncaught exception is not properly handled.", runningLatch.await(10000, TimeUnit.MILLISECONDS)); runningLatch = new CountDownLatch(1); MyCriticalThread t2 = new MyCriticalThread("Test-Critical-Thread"); t2.start(); Assert.assertTrue("Uncaught exception is not properly handled.", runningLatch.await(10000, TimeUnit.MILLISECONDS));
private void buildIncludeDirective(String pagePathName, String arg) { newPageContent.append("\n!include ") .append(arg)
public void testDoenstChokeOnMissingPassword() throws Exception { startParsing(); writeToPipe("GET /abc?something HTTP/1.1\r\n"); writeToPipe("Authorization: Basic " + Base64.encode("Aladin") + "\r\n"); writeToPipe("\r\n"); finishParsing(); try {
public void ok() { response.setStatus(HttpServletResponse.SC_OK); result.use(Results.nothing()); }
public NodeLocator createLocator(List<MemcachedNode> nodes) { return new ArrayModNodeLocator(nodes, getHashAlg()); }
public void setUp() throws Exception { suitePageName = "SuitePage"; root = InMemoryPage.makeRoot("RooT"); crawler = root.getPageCrawler(); crawler.addPage(root, PathParser.parse("TestPageOne"), "TestPageOne has some testing content and a child"); crawler.addPage(root, PathParser.parse("TestPageOne.ChildPage"), "ChildPage is a child of TestPageOne"); crawler.addPage(root, PathParser.parse("TestPageTwo"), "TestPageTwo has a bit of content too"); request = new MockRequest(); request.setResource(suitePageName); context = FitNesseUtil.makeTestContext(root); context.root = root; runner = new SuiteSpecificationRunner(root, context); }
public void testDeleteRecursiveCli() throws IOException, InterruptedException, CliException, KeeperException { final ZooKeeper zk = createClient();
private String makeInvisibleSection(String body) { HtmlTag section = new HtmlTag("div", body); section.addAttribute("class", "invisible"); return section.html(); }
XmlSerializer exclude(String... names); void serialize(); XmlSerializer include(String fieldName); XmlSerializer addMethod(String methodName); XmlSerializer from(String prefix, Collection collection); XmlSerializer namespace(String uri, String prefix); }
int getWatchCount();  long approximateDataSize();  int countEphemerals(); }
public int selectorCount() { return task.selectorCount(); }
private Document buildRssHeader() throws Exception { Document rssDocument = XmlUtil.newDocument(); Element rssDocumentElement = rssDocument.createElement("rss"); rssDocument.appendChild(rssDocumentElement); channelElement = rssDocument.createElement("channel"); rssDocumentElement.setAttribute("version", "2.0"); rssDocumentElement.appendChild(channelElement); return rssDocument; }
public void init(FilterConfig cfg) throws ServletException { servletContext = cfg.getServletContext(); BasicConfiguration config = new BasicConfiguration(servletContext); init(config.getProvider(), new DefaultStaticContentHandler(servletContext)); logger.info("VRaptor 3.2.0-SNAPSHOT successfuly initialized"); }
void shutdown();  String getAnonymousAuthBucket(); }
public void testLsrNonexistantZnodeCommand() throws Exception { final ZooKeeper zk = createClient(); ZooKeeperMain zkMain = new ZooKeeperMain(zk); zkMain.executeLine("create /b"); zkMain.executeLine("create /b/c"); LsCommand cmd = new LsCommand(); cmd.setZk(zk); cmd.parse("ls -R /b/c/d".split(" ")); try { runCommandExpect(cmd, new ArrayList<String>());
private void exitLoop() { loopSet.pop(); loopAndSwitchSet.pop(); }
public void testDivide() throws Exception { page.setMainContent(HtmlPage.BreakPoint); page.divide(); assertNotSubString("</html>", page.preDivision); assertSubString("</html>", page.postDivision); assertNotSubString(HtmlPage.BreakPoint, page.preDivision); assertNotSubString(HtmlPage.BreakPoint, page.postDivision); }
String getContent();  String getHtml(); }
private static void printHelpAndExit(int exitCode, Options options) { HelpFormatter help = new HelpFormatter(); help.printHelp(120, "TxnLogToolkit [-dhrvc] <txn_log_file_name> (-z <zxid>)", "", options, ""); System.exit(exitCode); }
public void tearDown() throws Exception { } @Override protected String getRegexp () { return EvaluatorWidget.REGEXP; } public void testMatches() throws Exception { assertMatches("${=X=}"); assertMatches("${=xyz=}"); assertMatches("${= X =}"); assertMatches("${= 1 + 1 =}"); assertMatches("${= ${ONE} + ${TWO} =}"); } public void testSimpleTermOneDigit () throws Exception { assertEquals("8", new EvaluatorWidget(widgetRoot, "${= 8 =}").render()); } public void testSimpleTermMultiDigit () throws Exception { assertEquals("42", new EvaluatorWidget(widgetRoot, "${= 42 =}").render()); } public void testSimpleTermMultiDigitDecimal () throws Exception { assertEquals("42.24", new EvaluatorWidget(widgetRoot, "${= 42.24 =}").render()); } public void testSimpleTermScientific () throws Exception { assertEquals("1200", new EvaluatorWidget(widgetRoot, "${= 1.2E+3 =}").render()); } public void testSimpleTermSigned () throws Exception { assertEquals("-123", new EvaluatorWidget(widgetRoot, "${= -123 =}").render()); } public void testAddition () throws Exception { assertEquals("3", new EvaluatorWidget(widgetRoot, "${= 1 + 2 =}").render()); } public void testAdditionWithNegativeUnarySigns () throws Exception { assertEquals("-3", new EvaluatorWidget(widgetRoot, "${= -1 + -2 =}").render()); } public void testAdditionWithMixedSigns () throws Exception { assertEquals("-1", new EvaluatorWidget(widgetRoot, "${= 1 + -2 =}").render()); } public void testSubtraction () throws Exception { assertEquals("2", new EvaluatorWidget(widgetRoot, "${= 3 - 1 =}").render()); } public void testMultiplication () throws Exception { assertEquals("12", new EvaluatorWidget(widgetRoot, "${= 3 * 4 =}").render()); } public void testDivision () throws Exception { assertEquals("2.5", new EvaluatorWidget(widgetRoot, "${= 5 / 2 =}").render()); } public void testExponent () throws Exception { EvaluatorWidget eval = new EvaluatorWidget(widgetRoot, "${= 3^3 =}"); assertHasRegexp("^26.9+[0-9]$", eval.render()); } public void testSine () throws Exception { assertSubString("1.8509", new EvaluatorWidget(widgetRoot, "${= 1 + sin 45 =}").render()); } public void testCosine () throws Exception { assertSubString("1.1542", new EvaluatorWidget(widgetRoot, "${= 1 + cos 30 =}").render()); } public void testTangent () throws Exception { assertSubString("-5.4053", new EvaluatorWidget(widgetRoot, "${= 1 + tan 30 =}").render()); } public void testParentheses () throws Exception { assertEquals("9", new EvaluatorWidget(widgetRoot, "${= (1 + 2) * 3 =}").render()); } public void testNoParentheses () throws Exception { assertEquals("7", new EvaluatorWidget(widgetRoot, "${= 1 + 2 * 3 =}").render()); } public void testInvalidExpression() throws Exception { EvaluatorWidget eval = new EvaluatorWidget(widgetRoot, "${= x =}"); assertSubString("invalid expression: x", eval.render()); } public void testRenderTwice() throws Exception { EvaluatorWidget eval = new EvaluatorWidget(widgetRoot, "${= 2 + 2 =}"); assertEquals("4", eval.render()); assertEquals("4", eval.render()); } public void testAsWikiText() throws Exception { EvaluatorWidget eval = new EvaluatorWidget(widgetRoot, "${= 1 + 2 * 3 / 4 =}"); assertEquals("${=1 + 2 * 3 / 4=}", eval.asWikiText()); } }
public void shouldAllowCustomPathResolverWhileIncluding() throws ServletException, IOException { PageResult view = new PageResult(request, response, method, fixedResolver); mockery.checking(new Expectations() { { one(request).getRequestDispatcher("fixed"); will(returnValue(dispatcher)); one(dispatcher).include(request, response); } }); view.include("ok"); mockery.assertIsSatisfied(); }
public void canProvideAllApplicationScopedComponents() { List<Class<?>> components = Arrays.asList(ServletContext.class, UrlToResourceTranslator.class, Router.class, TypeCreator.class, InterceptorRegistry.class, ParameterNameProvider.class, Converters.class, EmptyElementsRemoval.class, NoRoutesConfiguration.class, ResourceNotFoundHandler.class); checkAvailabilityFor(true, components); checkAvailabilityFor(true, BaseComponents.getApplicationScoped().keySet()); mockery.assertIsSatisfied(); }
private List<SlimTable> createSlimTables(TableScanner tableScanner) { List<SlimTable> allTables = new LinkedList<SlimTable>(); for (Table table : tableScanner) { String tableId = "" + allTables.size(); SlimTable slimTable = makeSlimTable(table, tableId, this); if (slimTable != null) { allTables.add(slimTable); } } return allTables; }
public void announceStartTestSystem(String testSystemName, String testRunner) throws Exception { HtmlTag outputTitle = new HtmlTag("h2", String.format("Test System: %s", testSystemName)); outputTitle.addAttribute("class", "centered"); testResultsGroup.add(outputTitle); writeData(String.format("<h3>%s</h3>\n", testSystemName + ":" + testRunner)); }
public Result include(String key, Object value) { if (logger.isDebugEnabled()) { logger.debug("including attribute {}: {}", key, value); } includedAttributes.put(key, value); request.setAttribute(key, value); return this; }
public void DirectoryOfHtmlFilesIsExternalSuitePageChild() throws Exception { fileSystem.makeFile(new File("./somepath/ExternalSuite/subsuite/myfile.html"), "stuff"); ExternalSuitePage page = (ExternalSuitePage) rootPage.addChildPage("ExternalSuite"); WikiPage child = page.getChildren().get(0); assertEquals(ExternalSuitePage.class, child.getClass()); assertEquals("subsuite", child.getName()); }
private void init() { if (!init) { if (!upgradeFromSQL()) {
public void acceptResults(Counts counts) { this.counts.add(counts); }
public boolean containsQuorum(HashSet<Long> set){ HashMap<Long, Long> expansion = new HashMap<Long, Long>();  if(set.size() == 0) return false; else LOG.info("Set size: " + set.size()); for(long sid : set){ Long gid = serverGroup.get(sid); if(!expansion.containsKey(gid)) expansion.put(gid, serverWeight.get(sid)); else { long totalWeight = serverWeight.get(sid) + expansion.get(gid); expansion.put(gid, totalWeight); } }  boolean majPerGroup = true; for(long gid : expansion.keySet()) { LOG.info("gid: " + expansion.get(gid)); if(expansion.get(gid) <= (groupWeight.get(gid) / 2) ) majPerGroup = false; } if((expansion.size() > (numGroups / 2)) && majPerGroup){ LOG.info("Positive set size: " + set.size());
public void shouldNotThrowNullPointersOnJsonResult() throws Exception { result.use(json()).withoutRoot().from("abc").exclude("aaa").include("aaa").serialize(); }
public void testInsertRowAfter() { Parse errorCell = new Parse("td", "error", null, null); Parse row = new Parse("tr", null, errorCell, null); fixture.insertRowAfter(simpleTable.parts.more, row); assertEquals("<tr>", simpleTable.parts.more.more.tag); assertEquals("error", simpleTable.parts.more.more.parts.body); }
protected List<List<String>> tableAsList() { List<List<String>> tableArgument = new ArrayList<>(); int rows = table.getRowCount(); for (int row = 1; row < rows; row++) tableArgument.add(tableRowAsList(row)); return tableArgument; }
public void testRemoval() throws Exception { PageData data = pageOne.getData(); WikiPageProperty symLinks = data.getProperties().set("SymbolicLinks"); symLinks.set("SymLink", "PageTwo"); pageOne.commit(data); assertNotNull(pageOne.getChildPage("SymLink")); request.addInput("removal", "SymLink"); Response response = responder.makeResponse(new FitNesseContext(root), request); checkRedirectToProperties(response); assertNull(pageOne.getChildPage("SymLink")); }
protected String createEvaluationMessage(String actual, String expected) { try { table.appendCellToRow(row, actual); } catch (Throwable e) { return failMessage(actual, SlimTestSystem.exceptionToString(e)); } return expected; }
public KeyedOperation touch(String key, int expiration, OperationCallback cb) { throw new UnsupportedOperationException("Touch is not supported for " + "ASCII protocol");
public void run() { PwDatabase pm = (PwDatabaseV3) mDb.pm;
public File image() { return new File(getResource("/filecontroller_test/baby_seal.jpg")); }
public User find(String login) { String hql = "from User u where u.login = :login"; Query query = session.createQuery(hql).setParameter("login", login); return (User) query.uniqueResult(); }
public static WikiPage makeRoot(String path, String name, RevisionController revisioner) throws Exception { return new FileSystemPage(path, name, null, revisioner); }
public synchronized int size(){ return watchTable.size(); }
public static void main(String[] args) throws Exception { System.out.println("***************************************"); System.out.println("THIS TEST RUNNER HAS BEEN DEPRECATED!!!"); System.out.println("Use java -jar fitnesse.jar -c \"REST-COMMAND\" instead."); System.out.println("***************************************"); TestRunner runner = new TestRunner(); runner.run(args); System.exit(runner.exitCode()); }
public void init() throws IOException { configFile = createTempFile(); }
void addLibraryToClasspath(Set<String> classpath) throws Exception { classpath.add(FileUtils.pathOf(getLibraryJar(), useCanonicalPath)); }
public static TypeAdapter on(Fixture fixture, Field field) { TypeAdapter a = on(fixture, field.getType()); a.target = fixture; a.field = field; return a; }
protected WikiPage createChildPage(final String name) throws Exception { return new FileSystemPage(getFileSystemPath(), name, this, this.versionsController); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root");
public WikiPage addPage(WikiPage context, WikiPagePath path) throws Exception; public String getRelativeName(WikiPage base, WikiPage page) throws Exception; public boolean isRoot(WikiPage page) throws Exception; public WikiPage getRoot(WikiPage page) throws Exception; public void traverse(WikiPage root, FitNesseTraversalListener pageCrawlerTest) throws Exception; }
public void pageWithNoTables() throws Exception { crawler.addPage(root, PathParser.parse("SimplePage"), "simple content"); request.setResource("SimplePage"); SimpleResponse response = makeResponse(); assertEquals(200, response.getStatus()); assertEquals("{\"tables\": []}", response.getContent()); }
public void shutdown() {
KeyStore loadKeyStore() throws IOException, GeneralSecurityException;  KeyStore loadTrustStore() throws IOException, GeneralSecurityException; }
protected static void exit(int exitCode) { System.exit(exitCode); }
public boolean pauseCnxn(final long ms) { final CountDownLatch initiatedPause = new CountDownLatch(1); new Thread() { public void run() { synchronized (cnxn) { try { try { cnxn.sendThread.testableCloseSocket(); } catch (IOException e) { e.printStackTrace(); } finally { initiatedPause.countDown(); } Thread.sleep(ms); } catch (InterruptedException e) { } } } }.start(); try { return initiatedPause.await(ms, TimeUnit.MILLISECONDS);
public void testGenerateJSON() throws IOException { File[] files = new File[2]; final File file1 = mock(File.class); when(file1.getName()).thenReturn("testDir"); when(file1.isDirectory()).thenReturn(true); when(file1.getCanonicalPath()).thenReturn("/tmp/testDir"); final File file2 = mock(File.class); when(file2.getName()).thenReturn("test"); when(file2.isDirectory()).thenReturn(false); when(file2.getCanonicalPath()).thenReturn("/tmp/test"); files[0]=file1; files[1]=file2; String output = Fs.generateJSON(files); String expectedOutput = "[{\"file\":\"testDir\",\"type\":\"D\",\"path\":\"/tmp/testDir\"}," + "{\"file\":\"test\",\"type\":\"F\",\"path\":\"/tmp/test\"}]"; Assertions.assertEquals(expectedOutput, output); }
@Test public void testReadArrayOffsetLength() throws Exception { assertEquals(1, in.read(bs, 2, 1)); byte[] expected = new byte[] { (byte) 1, (byte) 2, DATA_BYTES[0], (byte) 4 }; assertArrayEquals(expected, bs); }
public void start() throws Exception; public void stop() throws Exception; }
public void setup() { this.mockery = new Mockery(); this.converters = mockery.mock(Converters.class); this.myCat = new Cat(); OgnlRuntime.setNullHandler(Object.class, new ReflectionBasedNullHandler()); OgnlRuntime.setPropertyAccessor(List.class, new ListAccessor()); this.context = (OgnlContext) Ognl.createDefaultContext(myCat); context.setTraceEvaluations(true);
public FitClient build() { String testRunner = getTestRunner(); String command = buildCommand(getCommandPattern(), testRunner, classPath); Map<String, String> environmentVariables = createClasspathEnvironment(classPath); CommandRunningFitClient.CommandRunningStrategy runningStrategy = fastTest ? new CommandRunningFitClient.InProcessCommandRunner(testRunner) : new CommandRunningFitClient.OutOfProcessCommandRunner(command, environmentVariables); client = new CommandRunningFitClient(testRunner, this, context.port, context.socketDealer, runningStrategy); setExecutionLog(new ExecutionLog(page, client.commandRunner)); return client; }
public void shouldAddInterceptorsInOrder() throws InterceptionException, IOException { execution.execute(); InOrder order = inOrder(stack); order.verify(stack).add(ResourceLookupInterceptor.class); order.verify(stack).add(FlashInterceptor.class); order.verify(stack).add(InterceptorListPriorToExecutionExtractor.class); order.verify(stack).add(MultipartInterceptor.class); order.verify(stack).add(instantiator); order.verify(stack).add(ParametersInstantiatorInterceptor.class); order.verify(stack).add(DeserializingInterceptor.class); order.verify(stack).add(ExecuteMethodInterceptor.class); order.verify(stack).add(OutjectResult.class); order.verify(stack).add(DownloadInterceptor.class); order.verify(stack).add(ForwardToDefaultViewInterceptor.class); order.verify(stack).next(null, null); }
private List<Assertion> checkNotAction(int row) { int lastColInAction = table.getColumnCountInRow(row) - 1; table.getCellContents(lastColInAction, row); return invokeAction(1, lastColInAction - 1, row, new RejectedValueExpectation(lastColInAction, row));
abstract void registerLearnerHandlerBean(final LearnerHandler learnerHandler, Socket socket);  abstract void unregisterLearnerHandlerBean(final LearnerHandler learnerHandler); }
public void testGetChildren() throws Exception { pageBuilder.addPage(pageTwo, PathParser.parse("ChildOne"), "child one"); pageBuilder.addPage(pageTwo, PathParser.parse("ChildTwo"), "child two"); List<?> children = symPage.getChildren(); assertEquals(2, children.size()); assertEquals(SymbolicPage.class, children.get(0).getClass()); assertEquals(SymbolicPage.class, children.get(1).getClass()); }
private List<ACL> removeDuplicates(List<ACL> acl) { LinkedList<ACL> retval = new LinkedList<ACL>(); for (ACL a : acl) { if (!retval.contains(a)) { retval.add(a); } } return retval; }
public void testPathSeparatorVariable() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("TestPage"), "!path fitnesse.jar\n" + "!path my.jar"); PageData data = page.getData(); data.addVariable("PATH_SEPARATOR", "|"); page.commit(data); String expected = "fitnesse.jar" + "|" + "my.jar"; assertEquals(expected, builder.getClasspath(root.getChildPage("TestPage"))); }
private void buildInstructionsFor(String scriptStatements) throws Exception { makeSlimTableAndBuildInstructions(installTableHeader + scriptStatements); }
private VRaptorRequest createRequest() { HttpServletRequest request = mockery.mock(HttpServletRequest.class, "req" + counter++); HttpServletResponse response = mockery.mock(HttpServletResponse.class, "res" + counter++); return new VRaptorRequest(context, request, response); }
public final void processLine(String line) { try { ForkLogLevel newLogLevel = ForkLogLevel.level(line);
private void purgeHistory(Request request) { int days = getDaysInput(request); deleteTestHistoryOlderThanDays(days); }
public String inputString() throws Exception { StringBuffer buffer = new StringBuffer(); boolean first = true; for(Iterator iterator = inputs.keySet().iterator(); iterator.hasNext();) { String key = (String) iterator.next(); String value = (String) inputs.get(key); if(!first) buffer.append("&"); buffer.append(key).append("=").append(URLEncoder.encode(value, "UTF-8")); first = false; } return buffer.toString(); }
public void flush() throws IOException { String record; synchronized (this) { super.flush(); record = this.toString(); super.reset(); } if (record.length() == 0 || record.equals(lineSeparator)) {
public void processRequest(Request request) { if (stopped) { return; } if (LOG.isDebugEnabled()) { LOG.debug("Processing request:: " + request); } queuedRequests.add(request); if (!isWaitingForCommit()) { wakeup();
void processObserverRequest(Request request) { ((FollowerRequestProcessor) firstProcessor).processRequest(request, false); }
public void writeHead(String pageType) throws Exception { htmlPage = buildHtml(pageType); htmlPage.setMainContent(HtmlPage.BreakPoint); htmlPage.divide(); writeData(htmlPage.preDivision + makeSummaryPlaceHolder().html()); }
public int findLength(String text) { String candidate = text + "."; int offset = "<>^.".indexOf(candidate.substring(0, 1)) >= 0 ? 1 : 0; while (offset < candidate.length()) { int dot = candidate.indexOf(".", offset); int word = wikiWordLength(candidate.substring(offset, dot)); if (word == 0) return offset > 1 ? offset - 1 : 0; if (offset + word < dot) return offset + word; offset = dot + 1; } return text.length(); }
String getCellContents(int columnIndex, int rowIndex); void appendToCell(int col, int row, String message); int getRowCount(); int getColumnCountInRow(int rowIndex); String toString(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); }
public void setUp() throws Exception { versionsController = new ZipFileVersionsController(); FileSystemPageFactory fileSystemPageFactory = new FileSystemPageFactory(new DiskFileSystem(), versionsController); root = fileSystemPageFactory.makeRootPage("TestDir", "RooT"); page = (FileSystemPage) WikiPageUtil.addPage(root, PathParser.parse("PageOne"), "original content"); PageData data = page.getData(); firstVersion = VersionInfo.makeVersionInfo(data); secondVersion = page.commit(data); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); crawler = root.getPageCrawler(); pageOne = crawler.addPage(root, PathParser.parse(pageOnePath), pageOneContent); pageTwo = crawler.addPage(root, PathParser.parse(pageTwoPath), pageTwoContent); symPage = new SymbolicPage("SymPage", pageTwo, pageOne, null); }
public boolean visit(final Symbol node) { if (node.isType(SymbolType.Text) || node.isType(Literal.symbolType) || node.isType(Whitespace)) { sb.append(node.getContent()); } return true; }
public boolean isDone() {
public void registerChannel(SocketChannel ch, SelectionKey selectionKey) { throw new UnsupportedOperationException(); }
public void shouldAcceptMultipart() throws Exception { when(request.getContentType()).thenReturn("multipart/form-data"); when(request.getMethod()).thenReturn("POST"); assertThat(interceptor.accepts(method), equalTo(true)); }
private List<WikiPage> addTestPages() { addChildPage(root, SUITE_SETUP_NAME); addChildPage(root, SUITE_TEARDOWN_NAME); WikiPage slimSuite1 = addChildPage(suite, "SlimPage1Suite"); addChildPage(slimSuite1, "SlimPage1Test"); addChildPage(slimSuite1, SUITE_TEARDOWN_NAME); WikiPage slimSuite2 = addChildPage(suite, "SlimPage2Suite"); addChildPage(slimSuite2, "SlimPage2Test"); WikiPage slimSuite3 = addChildPage(suite, "SlimPage3Suite"); addChildPage(slimSuite3, "SlimPage3Test"); addChildPage(slimSuite2, SUITE_SETUP_NAME); return makeTestPageList(); }
private String couldNotInvokeConstructorException(String className, Object[] args) { return exceptionToString(new SlimError(format( "message:<<%s %s[%d]>>", SlimServer.COULD_NOT_INVOKE_CONSTRUCTOR, className,
public void addDataNode(String path, DataNode node) { nodes.put(path, node); }
public XmlSerializer from(String prefix, Collection collection) { this.prefixTag= prefix; this.analyzing = collection; return this; }
public void supportsGreaterLengthArrays() { String[] values = new String[] {"guilherme","silveira"}; vraptor.setParameter("name", values); assertThat(vraptor.getParameterValues("name"), is(equalTo(values))); mockery.assertIsSatisfied(); }
public void testPageMatchesQueryWithExcludedTearDowns() throws Exception { Map<String, Boolean> attributes = new HashMap<String, Boolean>(); attributes.put("TearDown", false); List<PageType> pageTypes = Arrays.asList(SUITE, TEST, STATIC); searcher = generateSearcherByPageTypesAndSearchAttributes(pageTypes, attributes); setPageProperty(page, TEST.toString()); assertTrue(searcher.pageMatches(page)); page = WikiPageUtil.addPage(root, PathParser.parse("SetUp")); assertTrue(searcher.pageMatches(page)); page = WikiPageUtil.addPage(root, PathParser.parse("TearDown")); assertFalse(searcher.pageMatches(page)); page = WikiPageUtil.addPage(root, PathParser.parse("SuiteSetUp")); assertTrue(searcher.pageMatches(page)); page = WikiPageUtil.addPage(root, PathParser.parse("SuiteTearDown")); assertFalse(searcher.pageMatches(page)); }
public void visitCode() { } public void visitFrame(final int type, final int nLocal, final Object[] local, final int nStack, final Object[] stack) { } public void visitInsn(final int opcode) { } public void visitIntInsn(final int opcode, final int operand) { } public void visitVarInsn(final int opcode, final int var) { } public void visitTypeInsn(final int opcode, final String type) { } public void visitFieldInsn(final int opcode, final String owner, final String name, final String desc) { } public void visitMethodInsn(final int opcode, final String owner, final String name, final String desc) { } public void visitJumpInsn(final int opcode, final Label label) { } public void visitLabel(final Label label) { } public void visitLdcInsn(final Object cst) { } public void visitIincInsn(final int var, final int increment) { } public void visitTableSwitchInsn(final int min, final int max, final Label dflt, final Label[] labels) { } public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels) { } public void visitMultiANewArrayInsn(final String desc, final int dims) { } public void visitTryCatchBlock(final Label start, final Label end, final Label handler, final String type) { } public void visitLocalVariable(final String name, final String desc, final String signature, final Label start, final Label end, final int index) { } public void visitLineNumber(final int line, final Label start) { } public void visitMaxs(final int maxStack, final int maxLocals) { } public void visit(final String name, final Object value) { } public void visitEnum(final String name, final String desc, final String value) { } public AnnotationVisitor visitAnnotation(final String name, final String desc) { return this; } public AnnotationVisitor visitArray(final String name) { return this; } }
public void testStarted(TestPage testPage) throws IOException { formatters.testStarted(testPage); }
public void singlePageFinder() throws Exception { sut = new AndPageFinder(); setupMockWithEmptyReturnValue(); sut.add(delegate); sut.search(page); verify(delegate, times(1)).search(page); }
public synchronized boolean addChild(String child) { if (children == null) {
public void checkDefaultIsCached() { DefaultInteraction d = new DefaultInteraction(); assertTrue(CachedInteraction.class.isAssignableFrom(d.getClass())); }
private void ensureXmlResultFileDoesNotExist(TestSummary counts) throws IOException { String resultsFileName = String.format("%s/TestPage/20081205011900_%d_%d_%d_%d.xml", context.getTestHistoryDirectory(), counts.getRight(), counts.getWrong(), counts.getIgnores(), counts.getExceptions()); xmlResultsFile = new File(resultsFileName); if (xmlResultsFile.exists()) FileUtil.deleteFile(xmlResultsFile);
public String getStartTime();  public long getMinRequestLatency();  public double getAvgRequestLatency();  public long getMaxRequestLatency();  public long getPacketsReceived();  public long getPacketsSent();  public long getFsyncThresholdExceedCount();  public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max); public boolean getResponseCachingEnabled(); public void setResponseCachingEnabled(boolean isEnabled);  public int getConnectionMaxTokens(); public void setConnectionMaxTokens(int val); public int getConnectionTokenFillTime(); public void setConnectionTokenFillTime(int val); public int getConnectionTokenFillCount(); public void setConnectionTokenFillCount(int val); public int getConnectionFreezeTime(); public void setConnectionFreezeTime(int val); public double getConnectionDropIncrease(); public void setConnectionDropIncrease(double val); public double getConnectionDropDecrease(); public void setConnectionDropDecrease(double val); public double getConnectionDecreaseRatio(); public void setConnectionDecreaseRatio(double val);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); }
public void shutdown() { finished = true; queuedRequests.clear(); queuedRequests.add(Request.requestOfDeath); nextProcessor.shutdown(); }
public void testIncludeOneSetupTearDownInsideOfSuiteWhenIncludingAll() { properties.setProperty("ALL_UNCLE_SUITE_SETUPS", "true"); testIncludeSetupTearDownInsideOfSuite(); }
public void shouldBeAbleToConvertNumbers() { assertThat((Byte) converter.convert("7", byte.class, bundle), is(equalTo((byte) 7))); }
void removeChildPage(String name); List<WikiPage> getChildren(); String getName(); PageData getData(); ReadOnlyPageData readOnlyData(); Collection<VersionInfo> getVersions(); PageData getDataVersion(String versionName); String getHtml(); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage(); }
public void testInvalidKeyBlank() throws Exception { try { Object val = client.get("");
public void testPathSeparatorVariable() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("TestPage"), "!define PATH_SEPARATOR {|}\n" + "!path fitnesse.jar\n" + "!path my.jar"); PageData data = page.getData(); page.commit(data); String expected = "fitnesse.jar" + "|" + "my.jar"; assertEquals(expected, builder.getClasspath(root.getChildPage("TestPage"))); }
public String toHtml() { if (secondResponse != null) { return response.toHtml() + secondResponse.toHtml(); } else if (response != null) { return contents + " " + response.toHtml(); } return contents; }
public void testGetStatsSizes() throws Exception { if (isMembase()) { return; }
public static int compareBytes(byte[] b1, int off1, int len1, byte[] b2, int off2, int len2) { int i; for (i = 0; i < len1 && i < len2; i++) { if (b1[off1 + i] != b2[off2 + i]) { return b1[off1 + i] < b2[off2 + i] ? -1 : 1; } } if (len1 != len2) { return len1 < len2 ? -1 : 1; } return 0; }
public void operationFailed(Object ctx, PubSubException exception) { if (LOGGER.isDebugEnabled()) LOGGER.error("cross-region unsubscribes failed for topic " + topic.toStringUtf8(), exception);
boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  void resetNonMTLSConnCount();  void resetAuthFailedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public void prepareFolder() throws Exception { String tempDir = temporaryFolder.getRoot().getAbsolutePath(); repository = new JavaFormatter.FolderResultsRepository(tempDir, "."); }
public void testDigestMatchesDuringSnapSync() throws Exception { triggerSync(true);
public void translatesTestTablesIntoLiteralTables() throws Exception { DecisionTable dt = makeDecisionTableAndBuildInstructions("!" + simpleDecisionTable); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("decisionTable_id_0", "OK"), list("decisionTable_id_1", VoidConverter.VOID_TAG), list("decisionTable_id_2", VoidConverter.VOID_TAG),
public static void main(String args[]) { if (args.length == 2) { ZooKeeperServer.main(args); return; } QuorumPeerConfig.parse(args); if (!QuorumPeerConfig.isStandalone()) { runPeer(new QuorumPeer.Factory() {
public void write(byte[] buf, int offSet, int len) throws IOException { out.write(buf, offSet, len); }
public void add(Collection<? extends Message> messages) { throw new ValidationError(new ArrayList<Message>(messages)); }
public String generateHtmlFromWiki(String passOrFail) throws Exception { PageBuilder pageBuilder = new PageBuilder(); String pageText = "|myTable|\n" + "La la\n" + "|NewTable|\n" + "|!style_" + passOrFail + "(a)|b|c|\n" + "La la la"; WikiPage myPage = pageBuilder.addPage(root, PathParser.parse("MyPage"), pageText); PageData myData = myPage.getData(); String html = myData.getHtml(); return html; }
private void render(String widgetText , String html) throws Exception { PlainTextTableWidget widget = new PlainTextTableWidget(new MockWidgetRoot(), widgetText); assertEquals(html, widget.render().replaceAll("\n", "").replaceAll("\r", "")); }
public void sendResponse(ReplyHeader h, Record r, String tag, String cacheKey, Stat stat, int opCode) { try { sendBuffer(serialize(h, r, tag, cacheKey, stat, opCode));
public void testShouldHandleInvalidInputExceptionIfThrownBySetUpMethod() throws Exception { String fitPage = "<table>" + geWrongDecoratorHTMLRow() + "<tr><td>" + TestFixture.class.getName() + "</td></tr></table>"; Fixture decorator = new Fixture(); decorator.doTables(new Parse(fitPage)); TestCaseHelper.assertCounts(TestCaseHelper.counts(0, 0, 0, 1), decorator.counts); }
public static HtmlTag makeLink(String href, HtmlElement content) { HtmlTag link = new HtmlTag("a"); link.addAttribute("href", href); link.add(content); return link; }
private ZooKeeper createClient() throws KeeperException, IOException,InterruptedException{ clientConnected=new CountDownLatch(1); ZooKeeper zk = new ZooKeeper(hostPort, 30000, this); if(!clientConnected.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS)){ fail("Unable to connect to server"); } return zk; }
public void testGetAllHostStrings() { List<InetSocketAddress> addresses = getAddressList(); List<String> hostStrings = getHostStrings(addresses); MultipleAddresses multipleAddresses = new MultipleAddresses(addresses); Assert.assertTrue(CollectionUtils.isEqualCollection(hostStrings, multipleAddresses.getAllHostStrings())); multipleAddresses.addAddress(addresses.get(addresses.size() - 1)); Assert.assertTrue(CollectionUtils.isEqualCollection(hostStrings, multipleAddresses.getAllHostStrings())); }
private Method findMethod(Class<? extends Object> type, String name, Class<? extends Object> baseType, Class<?>... params) { try { return type.getDeclaredMethod(name, params);
public void tearDown() throws Exception { LOG.info("TearDown started"); cht.tearDownAll(); LOG.info("Shutting down server 1"); shutdown(s1); LOG.info("Shutting down server 2"); shutdown(s2); LOG.info("Shutting down server 3"); shutdown(s3); LOG.info("Shutting down server 4"); shutdown(s4); LOG.info("Shutting down server 5"); shutdown(s5); for (String hp : hostPort.split(",")) { assertTrue("waiting for server down", ClientBase.waitForServerDown(hp, ClientBase.CONNECTION_TIMEOUT)); LOG.info("{} is no longer accepting client connections", hp); } JMXEnv.tearDown(); }
public void shouldMatchPatternLazily() throws Exception { DefaultParametersControl wrong = new DefaultParametersControl("/clients/{client.id}/"); DefaultParametersControl right = new DefaultParametersControl("/clients/{client.id}/subtask/"); String uri = "/clients/3/subtask/"; assertThat(wrong.matches(uri), is(false)); assertThat(right.matches(uri), is(true));
public void testMaxInProcessingDeadWatchers() { MyDeadWatcherListener listener = new MyDeadWatcherListener(); int delayMs = 1000; listener.setDelayMs(delayMs); WatcherCleaner cleaner = new WatcherCleaner(listener, 1, 60, 1, 1); cleaner.start(); listener.setCountDownLatch(new CountDownLatch(2)); long startTime = Time.currentElapsedTime(); cleaner.addDeadWatcher(1); cleaner.addDeadWatcher(2); long time = Time.currentElapsedTime() - startTime; System.out.println("time used " + time); Assert.assertTrue(Time.currentElapsedTime() - startTime >= delayMs); Assert.assertTrue(listener.wait(5000)); }
public void copyAndAppendLastRow(int numberOfTimes) { if (numberOfTimes > 0 && tableHasMoreThanTwoRows()) {
public void shouldInvokeAIs() { Client c = client(1L); c.ugly=true; assertThat((Boolean) evaluator.get(c, "client.ugly"), is(equalTo(true))); }
public Collection<V> values() { return Collections.emptySet(); }
public static String fail(String key) { return formatTestRecord(ExecutionResult.FAIL, key); }
public boolean isInfoEnabled() { return(l4jLogger.isInfoEnabled()); }
private void addInstructionResultss(Element instructionsElement) { for (Object instruction : instructions) { addInstructionResult(instructionsElement, instruction);
void addSession(long id, int to);  boolean touchSession(long sessionId, int sessionTimeout);  void shutdown();  void removeSession(long sessionId); void checkSession(long sessionId) throws KeeperException.SessionExpiredException; }
public void onEachDir( String dirname, String linkname, String user, int uid, String group, int gid, int mode, long size ) throws IOException { invocations.add(new Invocation(dirname, linkname, user, uid, group, gid, mode, size)); }
private String disgraceMethodNameIfNecessary() { if (isGraceful()) { return disgraceMethodName();
public static int readInt(InputStream is) throws IOException { byte[] buf = readBytes(is, 4); buf = padOut(buf, 4); return readInt(buf, 0); }
public void start(CommandRunningFitClient fitClient, int ticketNumber) throws IOException { makeCommandRunner(ticketNumber); commandRunner.asynchronousStart(); timeoutThread = new Thread(new TimeoutRunnable(fitClient), "FitClient timeout"); timeoutThread.start(); earlyTerminationThread = new Thread(new EarlyTerminationRunnable(fitClient, commandRunner), "FitClient early termination"); earlyTerminationThread.start(); }
public void canHandleUrlIfNonRootContext() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(RequestInfo.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getContextPath(); will(returnValue("/custom_context")); one(request).getRequestURI(); will(returnValue("/custom_context/url")); one(request).getMethod(); will(returnValue("GET")); one(router).parse("/url", HttpMethod.GET,webRequest); will(returnValue(expected)); one(request).getParameter("_method"); will(returnValue(null)); }}); ResourceMethod resource = translator.translate(info); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied();
public void done() throws Exception { checkForPulse(); FitProtocol.writeSize(0, fitInput); isDoneSending = true; }
String genCsharpHashCode(String fname) { return " ret = " + capitalize(fname) + ".GetHashCode();\n"; }
public Operation newOp(final MemcachedNode n, final CountDownLatch latch) { return new VersionOperation( new OperationCallback() {
public Fixture empty() { return new GridFixture(new Object[][] {}); }
public static String formatDate(Date date) { String formattedDate = makeDateFormat().format(date) + " at " + makeTimeFormat().format(date); return formattedDate; }
public static String makePageHtml(WikiTestPage page) { StringBuffer buffer = new StringBuffer(); buffer.append(getHeaderPageHtml(page.getSourcePage())); buffer.append(page.getHtml()); return buffer.toString(); }
synchronized public void run() { try { while (running) { currentTime = System.currentTimeMillis(); if (nextExpirationTime > currentTime) { this.wait(nextExpirationTime - currentTime); continue; } SessionSet set; set = sessionSets.remove(nextExpirationTime); if (set != null) { for (SessionImpl s : set.sessions) { sessionsById.remove(s.sessionId); expirer.expire(s); } } nextExpirationTime += expirationInterval; } } catch (InterruptedException e) { LOG.error("Unexpected interruption", e); } LOG.info("SessionTrackerImpl exited loop!"); }
public void definesManyTablesCurlyOnEndOfLineSpaceBefore() { checkMultipleTables(" ", 15); }
public void addSeedMaterial(byte[] inSeed) { synchronized (this) {
private String createPackageConffilesFile(final List<String> conffiles) { StringBuilder content = new StringBuilder(); if (conffiles != null && !conffiles.isEmpty()) { for (String nextFileName : conffiles) { content.append(nextFileName).append("\n"); } } return content.toString(); }
protected void registerComponents(ComponentRegistry container) { for (Class type : new Class[] { StupidTranslator.class, DefaultRouter.class, DefaultResourceNotFoundHandler.class, DefaultDirScanner.class, DefaultInterceptorRegistry.class, DefaultMethodLookupBuilder.class, DefaultPathResolver.class, ParanamerNameProvider.class, DefaultConverters.class, DefaultMethodInfo.class, DefaultRequestParameters.class, DefaultInterceptorStack.class, DefaultRequestExecution.class, DefaultResult.class, OgnlParametersProvider.class, DefaultMethodInfo.class, DefaultValidator.class, JstlLocalization.class, NoRoutesConfiguration.class,WebInfClassesScanner.class }) { singleInterfaceRegister(type, container); } container.register(ForwardToDefaultViewInterceptor.class, ForwardToDefaultViewInterceptor.class); container.register(LogicResult.class, DefaultLogicResult.class); container.register(RequestResult.class, RequestResult.class); container.register(PageResult.class, DefaultPageResult.class); container.register(TypeCreator.class, AsmBasedTypeCreator.class); container.register(EmptyElementsRemoval.class, EmptyElementsRemoval.class); container.register(ParametersInstantiatorInterceptor.class, ParametersInstantiatorInterceptor.class); container.register(InterceptorListPriorToExecutionExtractor.class, InterceptorListPriorToExecutionExtractor.class); container.register(URLParameterExtractorInterceptor.class, URLParameterExtractorInterceptor.class); container.register(ResourceLookupInterceptor.class, ResourceLookupInterceptor.class); container.register(InstantiateInterceptor.class, InstantiateInterceptor.class); container.register(ExecuteMethodInterceptor.class, ExecuteMethodInterceptor.class); }
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException { if (result.used()) { logger.debug("Request already dispatched and commited somewhere else, not forwarding."); return; }
public void handleDecryptedResult(String value) {
String genCDecl(String name) { return " " + mCName + " "+name+";\n"; }
public void findsInheritedMethodsWithDefaultNames() throws SecurityException, NoSuchMethodException { StereotypedClass childResource = mockery.resource(NiceClients.class); router.register(childResource); ResourceMethod method = router.parse("/niceClients/toInherit", HttpMethod.POST, request); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("toInherit")))); mockery.assertIsSatisfied(); }
int getMinSessionTimeout();  void setMinSessionTimeout(int min);  int getMaxSessionTimeout();  void setMaxSessionTimeout(int max); boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  void resetNonMTLSConnCount();  void resetAuthFailedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
protected HtmlTag createTag(Map<?, ?> hash) {
public void traverse(TraversalListener<? super WikiPage> listener) { _traverse(context, listener); }
String determineSlimHost() { String slimHost = getPageData().getVariable("SLIM_HOST"); return slimHost == null ? "localhost" : slimHost; }
public void restart(int id) throws IOException { start(id); assertTrue( "Waiting for server up",
private Short decodeShort(byte[] data) { return Short.valueOf((short) decodeInteger(data).intValue()); }
public void errorOut(){ LOG.info("Erroring out pending entries"); for (Enumeration<CompletionKey> e = addCompletions.keys() ; e.hasMoreElements() ;) { CompletionKey key = e.nextElement(); Completion<WriteCallback> ac = addCompletions.remove(key); if(ac != null){ completionSemaphore.release(); ac.cb.writeComplete(-1, key.ledgerId, key.entryId, ac.ctx); } } LOG.info("Finished erroring out pending add entries"); for (Enumeration<CompletionKey> e = readCompletions.keys() ; e.hasMoreElements() ;) { CompletionKey key = e.nextElement(); Completion<ReadEntryCallback> ac = readCompletions.remove(key); if(ac != null){ completionSemaphore.release(); ac.cb.readEntryComplete(-1, key.ledgerId, key.entryId, null, ac.ctx); } } LOG.info("Finished erroring out pending read entries"); }
public void shouldReturnBasePackagesArrayWhenInitParamHasLeadingAndTrailingSpaces() throws ServletException { when(context.getInitParameter(BasicConfiguration.BASE_PACKAGES_PARAMETER_NAME)).thenReturn(" \nsome.package\n "); assertThat(config.getBasePackages(), is(new String[] {"some.package"})); }
public void canBuildInstructionsForSimpleDecisionTable() throws Exception { makeDynamicDecisionTableAndBuildInstructions(simpleDynamicDecisionTable); int n = 0; List<Instruction> expectedInstructions = list( new MakeInstruction(id(n++), TABLE_INSTANCE_NAME, "fixture", new Object[]{"argument"}), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "table", new Object[]{list(list("var", "func?"), list("3", "5"), list("7", "9"))}), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "beginTable"), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "reset"), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "set", new Object[]{"var", "3"}), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "execute"), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "get", new Object[]{"func"}), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "reset"), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "set", new Object[]{"var", "7"}), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "execute"), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "get", new Object[]{"func"}), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "endTable") ); assertEquals(expectedInstructions, instructions); }
private static String base64Encode(byte[] b) { StringBuilder sb = new StringBuilder(); for (int i = 0; i < b.length; ) { int pad = 0; int v = (b[i++] & 0xff) << 16; if (i < b.length) { v |= (b[i++] & 0xff) << 8; } else { pad++; } if (i < b.length) { v |= (b[i++] & 0xff); } else { pad++; } sb.append(encode(v >> 18)); sb.append(encode(v >> 12)); if (pad < 2) { sb.append(encode(v >> 6)); } else { sb.append('='); } if (pad < 1) { sb.append(encode(v)); } else { sb.append('='); } } return sb.toString(); }
private void assertDefinesValue(String input, String name, String definedValue) throws Exception { WikiPage pageOne = new TestRoot().makePage("PageOne"); PageData data = new PageData(pageOne, input); pageOne.commit(data); assertEquals(definedValue, new VariableFinder(new ParsingPage(pageOne)).findVariable(name).getValue());
void setTickTime(int tickTime);  int getMaxClientCnxnsPerHost();  void setMaxClientCnxnsPerHost(int max);  int getMinSessionTimeout();  void setMinSessionTimeout(int min);  int getMaxSessionTimeout();  void setMaxSessionTimeout(int max); boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size); }
public void cantCreateInstanceIfConstructorArgumentCountIncorrect() throws Exception { String result = (String) caller.create("x", "fitnesse.slim.test.TestSlim", new Object[]{"3","4"}); assertException("message:<<COULD_NOT_INVOKE_CONSTRUCTOR fitnesse.slim.test.TestSlim[2]>>", result); }
public void testTestability() throws Exception { TestableZooKeeper zk = createClient(); try { LOG.info(zk.testableLocalSocketAddress());
public WikiPage getReferencedPage() throws Exception { String theWord = expandPrefix(wikiWord); WikiPage parentPage = currentPage.getParent(); return parentPage.getPageCrawler().getPage(PathParser.parse(theWord)); }
private File createFileFromPath(String linkPath) { String pathToFile = EnvironmentVariableTool.replace(linkPath.substring(7)); return new File(pathToFile); }
protected TestResult markField(int tableRow, int matchedRow, int col, QueryResults queryResults) { if (col >= fieldNames.size()) return null;
public void testAddingResponders() throws Exception { factory.addResponder("custom", WikiPageResponder.class); assertResponderTypeMatchesInput("custom", WikiPageResponder.class); }
public void testExtendingQuorumWithNewMembers() throws Exception { int serverCount = 3; String config = generateNewQuorumConfig(serverCount); QuorumPeerTestBase.MainThread[] mt = new QuorumPeerTestBase.MainThread[serverCount]; List<String> joiningServers = new ArrayList<>(); for (int i = 0; i < serverCount; ++i) { mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false); mt[i].start(); joiningServers.add(serverAddress.get(i)); } for (int i = 0; i < serverCount; ++i) { assertTrue(ClientBase.waitForServerUp("127.0.0.1:" + clientPorts.get(i), CONNECTION_TIMEOUT), "waiting for server " + i + " being up"); } for (int i = 0; i < serverCount; ++i) { verifyQuorumConfig(i, joiningServers, null); verifyQuorumMembers(mt[i]); } Map<Integer, String> oldServerAddress = new HashMap<>(serverAddress); List<String> newServers = new ArrayList<>(joiningServers); config = updateExistingQuorumConfig(Arrays.asList(3, 4), new ArrayList<>()); newServers.add(serverAddress.get(3)); newServers.add(serverAddress.get(4)); serverCount = serverAddress.size(); assertEquals(serverCount, 5, "Server count should be 5 after config update.");
void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
protected void initializeTest(TestPage testPage) { testContext = createTestContext(testPage); stopTestCalled = false; }
public void testGetByAddress() { try { byte[] byteAddress = new byte[]{1, 2, 3, 4};
private DecisionTable makeDecisionTable(String tableText) throws Exception { WikiPageUtil.setPageContents(root, tableText); TableScanner ts = new HtmlTableScanner(root.getData().getHtml()); Table t = ts.getTable(0); testContext = new MockSlimTestContext(); DecisionTable dt = new DecisionTable(t, "id", testContext); return dt; }
public Object savePageWithContent(String pageName, String content) { final PageBuilder pageBuilder = rootPage.getPageCrawler(); lastUsedPage = pageBuilder.addPage(rootPage, PathParser.parse(pageName)); final PageData data = lastUsedPage.getData(); data.setContent(content); return lastUsedPage.commit(data); }
public synchronized void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException { if (LOG.isDebugEnabled()) { LOG.debug("Checking session 0x" + Long.toHexString(sessionId)); } SessionImpl session = sessionsById.get(sessionId); if (session == null) { throw new KeeperException.UnknownSessionException(); } if (session.isClosing()) { throw new KeeperException.SessionExpiredException(); } if (session.owner == null) { session.owner = owner;
public ContextConfigurator withClassLoader(ClassLoader classLoader) { this.classLoader = classLoader; return this; }
void registerSymbolTypes(SymbolProvider symbolProvider) throws PluginException; void registerWikiPageFactories(WikiPageFactoryRegistry wikiPageFactoryRegistry) throws PluginException; void registerFormatters(FormatterRegistry registrar) throws PluginException; void registerTestSystemFactories(TestSystemFactoryRegistry testSystemFactoryRegistry) throws PluginException; void registerSlimTables(SlimTableFactory slimTableFactory) throws PluginException; void registerCustomComparators(CustomComparatorRegistry customComparatorRegistry) throws PluginException; }
abstract void waitForNewLeaderAck(long sid, long zxid) throws InterruptedException;  abstract long getLastProposed();  abstract int getCurrentTick();  abstract int syncTimeout();  abstract int getTickOfNextAckDeadline();  abstract int getTickOfInitialAckDeadline();  abstract long getAndDecrementFollowerCounter();  abstract void processAck(long sid, long zxid, SocketAddress localSocketAddress);  abstract void touch(long sess, int to);  abstract void revalidateSession(QuorumPacket qp, LearnerHandler learnerHandler) throws IOException;  abstract void submitLearnerRequest(Request si);  abstract long startForwarding(LearnerHandler learnerHandler, long lastSeenZxid);  abstract long getQuorumVerifierVersion();  abstract String getPeerInfo(long sid);  abstract byte[] getQuorumVerifierBytes(); abstract QuorumAuthServer getQuorumAuthServer();  abstract void registerLearnerHandlerBean(final LearnerHandler learnerHandler, Socket socket);  abstract void unregisterLearnerHandlerBean(final LearnerHandler learnerHandler); }
void setupResend();  void fillWriteBuffer(boolean optimizeGets);  void transitionWriteItem();  Operation getCurrentReadOp();  Operation removeCurrentReadOp();  Operation getCurrentWriteOp();  Operation removeCurrentWriteOp();  boolean hasReadOp();  boolean hasWriteOp();  void addOp(Operation op);  void insertOp(Operation o);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
private void testInvalidCommand(String cmdString, int exitCode) throws Exception { final ZooKeeper zk = createClient(); ZooKeeperMain zkMain = new ZooKeeperMain(zk); zkMain.cl.parseCommand(cmdString);
public void setUp() throws Exception { File testDir = new File("TestDir"); testDir.mkdir(); root = InMemoryPage.makeRoot("RooT"); crawler = root.getPageCrawler(); errorLogsParentPage = crawler.addPage(root, PathParser.parse("ErrorLogs")); request = new MockRequest(); responder = new TestResponder(); responder.setFastTest(true); context = FitNesseUtil.makeTestContext(root); receiver = new FitSocketReceiver(0, context.socketDealer); context.port = receiver.receiveSocket(); clock = monotonicIncreasingClock(); }
public void shouldAddInterceptorsInOrder() throws InterceptionException, IOException { final Sequence sequence = mockery.sequence("executionSequence"); mockery.checking(new Expectations() { { one(stack).add(ResourceLookupInterceptor.class); inSequence(sequence); one(stack).add(URLParameterExtractorInterceptor.class); inSequence(sequence); one(stack).add(InterceptorListPriorToExecutionExtractor.class); inSequence(sequence); one(stack).add(instantiator); inSequence(sequence); one(stack).add(ParametersInstantiatorInterceptor.class); inSequence(sequence); one(stack).add(HibernateValidatorPluginInterceptor.class); inSequence(sequence); one(stack).add(ResultSupplierInterceptor.class); inSequence(sequence); one(stack).add(ValidatorInterceptor.class); inSequence(sequence); one(stack).add(ExecuteAndViewInterceptor.class); inSequence(sequence); one(stack).add(OutjectionInterceptor.class); inSequence(sequence); one(stack).add(AjaxInterceptor.class); inSequence(sequence); one(stack).add(ViewInterceptor.class); inSequence(sequence); one(stack).next(null, null); inSequence(sequence); } }); execution.execute(); mockery.assertIsSatisfied(); }
private void makeCommandRunner() { String fitArguments = hostName + SPACE + port + SPACE + ticketNumber; String commandLine = command + SPACE + fitArguments; this.commandRunner = new CommandRunner(commandLine, "", environmentVariables); }
public void testReset() { addDataPoints(); testCounterSet.reset(); Map<String, Object> values = testCounterSet.values(); assertEquals("There should be 10 values in the set", 10, values.size()); assertEquals("avg_key1_test should =0", 0D, values.get("avg_key1_test")); assertEquals("min_key1_test should =0", 0L, values.get("min_key1_test")); assertEquals("max_key1_test should =0", 0L, values.get("max_key1_test")); assertEquals("cnt_key1_test should =0", 0L, values.get("cnt_key1_test")); assertEquals("sum_key1_test should =0", 0L, values.get("sum_key1_test")); assertEquals("avg_key2_test should =0", 0D, values.get("avg_key2_test")); assertEquals("min_key2_test should =0", 0L, values.get("min_key2_test")); assertEquals("max_key2_test should =0", 0L, values.get("max_key2_test")); assertEquals("cnt_key2_test should =0", 0L, values.get("cnt_key2_test")); assertEquals("sum_key2_test should =0", 0L, values.get("sum_key2_test"));
public void instructionsForQueryTable() throws Exception { makeQueryTableAndBuildInstructions(queryTableHeader); List<Instruction<? extends InstructionExecutor>> expectedInstructions = list( new MakeInstruction("queryTable_id_0", "queryTable_id", "fixture", new Object[]{"argument"}), new CallInstruction("queryTable_id_1", "queryTable_id", "table", new Object[]{list(list("n", "2n"))}), new CallInstruction("queryTable_id_2", "queryTable_id", "query") ); org.junit.Assert.assertEquals(expectedInstructions, instructions); }
RouteBuilder with(HttpMethod method);  RouteBuilder with(Set<HttpMethod> methods);  RouteBuilder withPriority(int priority); Route build(); }
public void random() { ArrayList<Client> all = new ArrayList<Client>(database.all()); Client client = all.get((int) (Math.random() * all.size())); result.use(Results.logic()).redirectServerTo(ClientsController.class).view(client); }
public void shouldBeAbleToSubtractDaysFromDates() throws Exception { Date date = makeDate("20090616171615"); responder.setTodaysDate(date); Date resultDate = responder.getDateDaysEarlier(10); Date tenDaysEarlier = makeDate("20090606171615"); assertEquals(tenDaysEarlier, resultDate); }
public void remove() { } @Path("/clients/head") @Head public void head() { } public void add() { } @Path("/protectMe") protected void protectMe() { } @Path("/staticMe") public static void staticMe() { } public void toInherit() { } } @Test public void shouldFindAPublicNonStaticNonAnnotatedMethodWithTheSameNameAsTheGivenId() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/Clients/add", HttpMethod.POST); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("add")))); mockery.assertIsSatisfied(); } @Test public void shouldIgnoreAResourceWithTheWrongWebMethod() throws SecurityException { ResourceMethod method = lookuper.methodFor("/clients/remove", HttpMethod.POST); assertThat(method, is(Matchers.nullValue())); mockery.assertIsSatisfied(); } @Test public void shouldAcceptAResultWithASpecificWebMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/clients/head", HttpMethod.HEAD); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("head")))); mockery.assertIsSatisfied(); } static class NiceClients extends Clients { } public void findsInheritedMethodsWithDefaultNames() throws SecurityException, NoSuchMethodException { this.resource = mockery.resource(NiceClients.class); this.lookuper = new DefaultResourceAndMethodLookup(resource); ResourceMethod method = lookuper.methodFor("/NiceClients/toInherit", HttpMethod.POST); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("toInherit")))); mockery.assertIsSatisfied(); } }
public void setUp() throws Exception { executor = mock(InstructionExecutor.class); nameTranslator = mock(NameTranslator.class); when(executor.callAndAssign(anyString(), anyString(), anyString(), anyVararg())).thenReturn(RESULT); when(nameTranslator.translate(anyString())).thenAnswer(returnsFirstArg()); }
private void assertScriptResults(String scriptStatements, List<List<?>> scriptResults, String table) throws Exception { buildInstructionsFor(scriptStatements); List<List<?>> resultList = ListUtility.<List<?>>list(list("htmlScriptTable_id_0", "OK")); resultList.addAll(scriptResults); Map<String, Object> pseudoResults = SlimCommandRunningClient.resultToMap(resultList); SlimAssertion.evaluateExpectations(assertions, pseudoResults); assertEquals(table, Utils.unescapeWiki(st.getTable().toString())); }
private byte[] decompress(byte[] in) { assert in != null; ByteArrayInputStream bis=new ByteArrayInputStream(in); ByteArrayOutputStream bos=new ByteArrayOutputStream(); GZIPInputStream gis; try { gis = new GZIPInputStream(bis); byte[] buf=new byte[8192]; int r=-1; while((r=gis.read(buf)) > 0) { bos.write(buf, 0, r); } } catch (IOException e) { throw new RuntimeException("Error decompressing data", e); } return bos.toByteArray(); }
protected Object executeInternal(InstructionExecutor executor) throws SlimException { throw new SlimException(format("message:<<INVALID_STATEMENT: %s>>", operation)); }
public <T> T redirectTo(Class<T> controller) { return use(logic()).redirectTo(controller); }
public void instructionsForScriptTable() throws Exception { buildInstructionsFor("||\n"); assertEquals(0, assertions.size()); }
public void testAbsolutePath() throws Exception { path = makePath(".ParentPage.ChildPage"); assertTrue(path.isAbsolute()); assertEquals("ParentPage", path.getFirst()); assertEquals("ChildPage", path.getRest().getFirst()); assertTrue(path.getRest().getRest().isEmpty()); }
public EnumSet<HttpMethod> allowedMethodsFor(String uri) { EnumSet<HttpMethod> allowed = EnumSet.noneOf(HttpMethod.class); for (Route route : routesMatchingUri(uri)) { allowed.addAll(route.allowedMethods()); } return allowed; }
public static List<ACL> parse(String aclString) { List<ACL> acl; String acls[] = aclString.split(","); acl = new ArrayList<ACL>(); for (String a : acls) { int firstColon = a.indexOf(':'); int lastColon = a.lastIndexOf(':'); if (firstColon == -1 || lastColon == -1 || firstColon == lastColon) { System.err.println(a + " does not have the form scheme:id:perm"); continue; } ACL newAcl = new ACL(); newAcl.setId(new Id(a.substring(0, firstColon), a.substring( firstColon + 1, lastColon))); newAcl.setPerms(getPermFromString(a.substring(lastColon + 1))); acl.add(newAcl); } return acl; }
public boolean removeWatcher(String path, Watcher watcher) {
public void testFailOnMissingSrcFailFileMissing() throws IOException { try { data.setSrc(missingFile);
public static File fallbackCacheLocation(File file) { return new File(new File(file.getParent(), "analysis"), file.getName()); }
public void testLeadingDigit() { check("2 words","twoWords"); }
String replace() { Pattern symbolPattern = Pattern.compile("\\$([a-zA-Z]\\w*)"); int startingPosition = 0; while (true) { Matcher symbolMatcher = symbolPattern.matcher(stringToReplace.substring(startingPosition)); if (symbolMatcher.find()) { startingPosition += replaceSymbol(symbolMatcher); } else break; } return stringToReplace; }
public int read() throws IOException { if (finished) { return ((o_buffer == null) || (index == o_buffer.length)) ? -1 : o_buffer[index++] & 0xFF; } if ((o_buffer != null) && (index < o_buffer.length)) { return o_buffer[index++] & 0xFF; } index = 0; o_buffer = null; int num_read; while (o_buffer == null) { if ((num_read = in.read(i_buffer)) == -1) { try { o_buffer = cipher.doFinal(); } catch (Exception e) { throw new IOException(e.getMessage()); } finished = true; break; } o_buffer = cipher.update(i_buffer, 0, num_read); } return read(); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); context = FitNesseUtil.makeTestContext(root); testSummary = new TestSummary(1,2,3,4); testPage = new WikiTestPage(root.addChildPage("TestPage")); writer = new StringWriter(); formatter = new CachingSuiteXmlFormatter(context,root, writer); testTime = DateTimeUtil.getTimeFromString("10/8/1988 10:52:12"); }
public Interceptor[] interceptorsFor(ResourceMethod method, Container container) { List<Interceptor> list = new ArrayList<Interceptor>(); for (Class<? extends Interceptor> type : interceptors) { Interceptor instance = container.instanceFor(type); if (instance.accepts(method)) { list.add(instance); } } return list.toArray(new Interceptor[list.size()]); }
public void execute() throws InterceptionException { LOG.debug("executing stack DefaultRequestExecution"); interceptorStack.add(MultipartInterceptor.class); interceptorStack.add(JerseyResourceLookupInterceptor.class); interceptorStack.add(FlashInterceptor.class); interceptorStack.add(InterceptorListPriorToExecutionExtractor.class); interceptorStack.add(InstantiateInterceptor.class); interceptorStack.add(InstantiateComponentInterceptor.class); interceptorStack.add(ParametersInstantiatorInterceptor.class); interceptorStack.add(DeserializingInterceptor.class); interceptorStack.add(ExceptionHandlerInterceptor.class); interceptorStack.add(ExecuteMethodInterceptor.class); interceptorStack.add(OutjectResult.class); interceptorStack.add(DownloadInterceptor.class); interceptorStack.add(ForwardToDefaultViewInterceptor.class); interceptorStack.next(null, null); }
public void testDuplicatedTxn() throws Exception { long peerZxid; db.txnLog.add(createProposal(getZxid(0, 1))); db.txnLog.add(createProposal(getZxid(1, 1))); db.txnLog.add(createProposal(getZxid(1, 2))); db.txnLog.add(createProposal(getZxid(1, 1))); db.txnLog.add(createProposal(getZxid(1, 2)));
private HtmlTag movePageForm() throws Exception { TagGroup group = new TagGroup(); group.add(HtmlUtil.BR); group.add(makeHeaderTag("Move:")); group.add("Moving this page will find all references and change them accordingly."); group.add(makeMovePageForm()); return group; }
protected void runPages(TestRun run, final RunNotifier notifier) { MultipleTestsRunner testRunner = createTestRunner(run, context, debugMode); addTestSystemListeners(notifier, testRunner, suiteClass, getDescriptionFactory()); addExecutionLogListener(notifier, testRunner, suiteClass); System.setProperty(SystemExitSecurityManager.PREVENT_SYSTEM_EXIT, String.valueOf(preventSystemExit)); try { executeTests(testRunner);
protected Response responseWith(String content) throws Exception { SimpleResponse response = new SimpleResponse(); response.setContentType(getContentType()); response.setContent(content); return response; }
public void analyze(Class<?> type) { List<Class<? extends Interceptor>> interceptors = new ArrayList<Class<? extends Interceptor>>(); if (type.isAnnotationPresent(Intercepts.class)) { if (Interceptor.class.isAssignableFrom(type)) { logger.debug("Found interceptor for " + type); interceptors.add((Class<Interceptor>) type); } else if (InterceptorSequence.class.isAssignableFrom(type)) { logger.debug("Found interceptor sequence for " + type); interceptors.addAll(parseSequence(type)); } else { logger.error("Annotation " + Intercepts.class + " found in " + type + " but this is neither an Interceptor nor an InterceptorSequence. Ignoring"); } } if (!interceptors.isEmpty()) registry.register(interceptors);
protected void evaluateReturnValues(Map<String, Object> returnValues) throws Exception { } private class ScriptActionExpectation extends Expectation { private ScriptActionExpectation(int instructionNumber, int col, int row) { super(null, instructionNumber, col, row); } protected String createEvaluationMessage(String value, String originalValue) { if (value == null) return failMessage(originalValue, "Returned null value."); else if (value.equals(VoidConverter.VOID_TAG) || value.equals("null")) return originalValue; else if (value.equals(BooleanConverter.FALSE)) return fail(originalValue); else if (value.equals(BooleanConverter.TRUE)) return pass(originalValue); else return originalValue; } } private class EnsureActionExpectation extends Expectation { public EnsureActionExpectation(int instructionNumber, int col, int row) { super(null, instructionNumber, col, row); } protected String createEvaluationMessage(String value, String originalValue) { return (value != null && value.equals(BooleanConverter.TRUE)) ? pass(originalValue) : fail(originalValue); } } private class RejectActionExpectation extends Expectation { public RejectActionExpectation(int instructionNumber, int col, int row) { super(null, instructionNumber, col, row); } protected String createEvaluationMessage(String value, String originalValue) { if (value == null) return pass(originalValue); else return value.equals(BooleanConverter.FALSE) ? pass(originalValue) : fail(originalValue); } } private class ShowActionExpectation extends Expectation { public ShowActionExpectation(int instructionNumber, int col, int row) { super(null, instructionNumber, col, row); } protected String createEvaluationMessage(String value, String originalValue) { try { table.appendCellToRow(row, String.format("|!style_ignore(%s)", value)); } catch (Throwable e) { return failMessage(value, SlimTestSystem.exceptionToString(e)); } return originalValue; } } private class ArgumentExpectation extends Expectation { private ArgumentExpectation(int instructionNumber, int col, int row) { super(null, instructionNumber, col, row); } protected String createEvaluationMessage(String value, String originalValue) { return replaceSymbolsWithFullExpansion(originalValue); } } }
private void assertBuilds(String page, String[] properties, String option, String variable, String result) throws Exception { Symbol contents = new Symbol(new Contents()); contents.add(new Symbol(SymbolType.Text, option)); contents.evaluateVariables(new String[] {variable},new TestVariableSource(variable, "true")); ContentsItemBuilder builder = new ContentsItemBuilder(contents, 1); assertEquals("<li>" + HtmlElement.endl + "\t" + result + HtmlElement.endl + "</li>" + HtmlElement.endl, builder.buildItem(new WikiSourcePage(withProperties(new TestRoot().makePage(page), properties))).html());
protected HtmlTag makeSaveButton() { HtmlTag saveButton = HtmlUtil.makeInputTag("submit", "save", "Save"); saveButton.addAttribute("tabindex", "2"); saveButton.addAttribute("accesskey", "s"); return saveButton; }
private void noDropConectionTest(QuorumPeer s) { Leader.Proposal p = new Leader.Proposal(); p.addQuorumVerifier(s.getQuorumVerifier());
public void canHandleComposedUrlIfNonRootContext() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(RequestInfo.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getContextPath(); will(returnValue("/custom_context")); one(request).getRequestURI(); will(returnValue("/custom_context/products/1")); one(request).getMethod(); will(returnValue("GET")); one(registry).parse("/products/1", HttpMethod.GET,webRequest); will(returnValue(expected)); one(request).getParameter("_method"); will(returnValue(null)); }}); ResourceMethod resource = translator.translate(info); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied();
public boolean isEmpty() { return getFullList().isEmpty(); }
public void scenarioExtraArgumentsAreIgnored() throws Exception { makeTables( "!|scenario|echo|input|giving|output||output2|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|script|\n" + "|echo|7|giving|7|\n" ); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("scriptTable_id_0/scriptTable_s_id_0", "7") ) ); evaluateExpectations(pseudoResults); String scriptTable = script.getChild(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output, , output2], [check, echo, 7, pass(7)]]"; assertEquals(expectedScript, scriptTable); String dtHtml = script.getTable().toString(); assertSubString("<span id=\"test_status\" class=pass>Scenario</span>", dtHtml); assertEquals(1, script.getTestSummary().right); assertEquals(0, script.getTestSummary().wrong); assertEquals(0, script.getTestSummary().ignores); assertEquals(0, script.getTestSummary().exceptions); }
public void testInvalidSnapCount() throws Exception { final int CLIENT_PORT = 3181; MainThread main = new MainThread(CLIENT_PORT); main.start(); Assert.assertTrue("waiting for server being up", ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT, CONNECTION_TIMEOUT)); Assert.assertEquals(SyncRequestProcessor.getSnapCount(), 2); main.shutdown();
private FitNesseContext loadContext(Arguments arguments) throws Exception { Properties properties = loadConfigFile(arguments.getConfigFile());
public Object intercept(Object instance, Method method, Object[] args, MethodProxy proxy) throws Throwable { String url = builder.urlFor(type, method, args); request.getRequestDispatcher(url).forward(request, response); return null; }
public void stopTimeout() { mAct.sendBroadcast(new Intent(TimeoutIntents.CANCEL)); }
public void canParseUSDateFormat() throws ParseException {
private int tryGetLength() { int lengthSize = 6; String lengthString = serialized.substring(index, index + lengthSize); int length = Integer.parseInt(lengthString); index += lengthSize; Integer next; while ((next = maybeReadDigit()) != null) length = length * 10 + next; checkForColon("Length"); return length; }
public void write(byte[] buffer, int offset, int count) throws IOException { super.write(buffer, offset, count); }
public void visit(final String name, final Object value) { buf.setLength(0); buf.append("av").append(id).append(".visit("); ASMifierAbstractVisitor.appendConstant(buf, name); buf.append(", "); ASMifierAbstractVisitor.appendConstant(buf, value); buf.append(");\n"); text.add(buf.toString()); }
public void shouldAcceptsWithMultipart() throws Exception { when(request.getContentType()).thenReturn("multipart/form-data"); when(request.getMethod()).thenReturn("POST"); assertThat(interceptor.accepts(method), equalTo(true)); }
void followLeader() throws InterruptedException { zk.registerJMX(new FollowerBean(this, zk), self.jmxLocalPeerBean); try { InetSocketAddress addr = null;
private boolean addChildHtml(StringBuffer buffer, int depth) throws Exception { boolean addedTag = false; boolean lastAddedWasNonTag = false; int i = 0; for (HtmlElement element : childTags) { if (element instanceof HtmlTag) { if ((i == 0 || lastAddedWasNonTag) && !isInline) buffer.append(endl); buffer.append(((HtmlTag) element).html(depth + 1)); addedTag = true; lastAddedWasNonTag = false; } else { buffer.append(element.html()); lastAddedWasNonTag = true; } i++; } return addedTag; }
public void serialize() { super.serialize(); writer.append(callbackName).append("(").append(out.getBuffer()).append(")"); writer.close(); }
public Future<Boolean> flush(final int delay) { final AtomicReference<Boolean> flushResult= new AtomicReference<Boolean>(null); final ConcurrentLinkedQueue<Operation> ops= new ConcurrentLinkedQueue<Operation>(); CountDownLatch blatch = broadcastOp(new BroadcastOpFactory(){ public Operation newOp(final MemcachedNode n, final CountDownLatch latch) { Operation op=opFact.flush(delay, new OperationCallback(){ public void receivedStatus(OperationStatus s) { flushResult.set(s.isSuccess()); } public void complete() { latch.countDown(); }}); ops.add(op); return op; }}); return new OperationFuture<Boolean>(blatch, flushResult) { @Override
public static void parse(String[] args) { if(instance!=null) return; try { if (args.length != 1) {
public void run() { PwGroup parent = mEntry.parent;
public String render() throws Exception { StringBuffer html = new StringBuffer(); for(int i = 0; i < level; i++) html.append("\t"); html.append("<li>").append(childHtml()).append("</li>\n"); return html.toString(); }
public void safeProcessResult(int rc, String path, Object ctx, byte[] data, Stat stat) { synchronized (this) { if (rc == KeeperException.Code.OK.intValue()) {
public void commandArgCallsExecuteSingleCommand() throws Exception { context.withParameter(ConfigurationParameter.OMITTING_UPDATES, "true"); context.withParameter(ConfigurationParameter.COMMAND, "command"); FitNesse fitNesse = mock(FitNesse.class); when(fitNesse.start()).thenReturn(true); context = spy(context); doAnswer(fitNesseContextWith(fitNesse)).when(context).makeFitNesseContext(); int exitCode = new FitNesseMain().launchFitNesse(context); assertThat(exitCode, is(0)); verify(fitNesse, never()).start(); verify(fitNesse, times(1)).executeSingleCommand("command", System.out); verify(fitNesse, times(1)).stop(); }
public void testDeleteFuture() throws Exception { String key="deleteFuture"; assertNull(client.get(key)); client.set(key, 5, "test1value"); assertEquals("test1value", client.get(key)); Future<Boolean> f=client.delete(key); assertNull(client.get(key)); assertTrue("Deletion didn't return true", f.get()); assertFalse("Second deletion returned true", client.delete(key).get());
public void scenarioExtraArgumentsAreIgnored() throws Exception { makeTables( "!|scenario|echo|input|giving|output||output2|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|script|\n" + "|echo|7|giving|7|\n" ); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("scriptTable_id.0_0", "7") ) ); evaluateExpectations(pseudoResults); String scriptTable = script.getChild(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output, , output2], [check, echo, 7, pass(7)]]"; assertEquals(expectedScript, scriptTable); String dtHtml = script.getTable().toString(); assertSubString("<span id=\"test_status\" class=pass>Scenario</span>", dtHtml); assertEquals(1, script.getTestSummary().right); assertEquals(0, script.getTestSummary().wrong); assertEquals(0, script.getTestSummary().ignores); assertEquals(0, script.getTestSummary().exceptions); }
public Maybe<String> render(Scanner scanner) { scanner.moveNext(); if (!scanner.isType(TokenType.Whitespace)) return Maybe.noString; String titleText = new Translator(getPage()).translateIgnoreFirst(scanner, TokenType.Newline); if (scanner.isEnd()) return Maybe.noString; String bodyText = new Translator(getPage()).translateIgnoreFirst(scanner, TokenType.EndSection); if (scanner.isEnd()) return Maybe.noString; return new Maybe<String>(generateHtml(titleText, bodyText)); }
public void compress(Writer out, boolean linebreak, boolean munge, boolean warn) throws IOException { this.linebreak = linebreak; this.munge = munge; this.warn = warn; buildSymbolTree(); mungeSymboltree(); StringBuffer sb = printSymbolTree(); out.write(sb.toString()); }
private List<E> findCycle() { E node = get(graph.keySet(), 0); List<E> cycle = Lists.newArrayList(); do { cycle.add(node); } while(!cycle.contains(node = get(graph.get(node), 0))); return cycle.subList(cycle.indexOf(node), cycle.size()); }
public void testLoadPEMTrustStoreAutodetectStoreFileType( X509KeyType caKeyType, X509KeyType certKeyType, String keyPassword, Integer paramIndex) throws Exception { init(caKeyType, certKeyType, keyPassword, paramIndex);
private void assertExpectationMessage(String expected, String value, String message) throws Exception { WikiWidgetTable t = new WikiWidgetTable(new TableWidget(null, "")); SlimTable slimTable = new DecisionTable(t, "id"); SlimTable.Expectation expectation = slimTable.makeReturnedValueExpectation(expected, 0, 0, 0); assertEquals(message, unescape(expectation.createEvaluationMessage(value, expected))); }
public void testBuildDataWithFileSet() throws Exception { Processor processor = new Processor(new Console() { public void println(String s) { } }, null); Project project = new Project(); project.setCoreLoader(getClass().getClassLoader()); project.init(); FileSet fileset = new FileSet(); fileset.setDir(new File(getClass().getResource("deb/data").toURI())); fileset.setIncludes("**/*"); fileset.setProject(project); StringBuilder md5s = new StringBuilder(); processor.buildData(new DataProducer[] { new DataProducerFileSet(fileset) }, new File("target/data.tar"), md5s, "gz"); assertTrue("empty md5 file", md5s.length() > 0); assertFalse("windows path separator found", md5s.indexOf("\\") != -1); }
public void visitLdcInsn(final Object cst) { if ((cst instanceof Long) || (cst instanceof Double)) { minSize += 3; maxSize += 3; } else { minSize += 2; maxSize += 3; } if (mv != null) { mv.visitLdcInsn(cst);
public void testProtocolVersion(boolean fipsEnabled) throws Exception { System.setProperty(quorumX509Util.getFipsModeProperty(), Boolean.toString(fipsEnabled)); System.setProperty(quorumX509Util.getSslProtocolProperty(), "TLSv1.2"); q1 = new MainThread(1, clientPortQp1, quorumConfiguration, SSL_QUORUM_ENABLED); q2 = new MainThread(2, clientPortQp2, quorumConfiguration, SSL_QUORUM_ENABLED); q1.start(); q2.start(); assertTrue(ClientBase.waitForServerUp("127.0.0.1:" + clientPortQp1, CONNECTION_TIMEOUT)); assertTrue(ClientBase.waitForServerUp("127.0.0.1:" + clientPortQp2, CONNECTION_TIMEOUT)); System.setProperty(quorumX509Util.getSslProtocolProperty(), "TLSv1.1");
public String findMaxPrefix(final String path) { Objects.requireNonNull(path, "Path cannot be null"); final String[] pathComponents = StringUtils.split(path, '/'); readLock.lock(); try { TrieNode parent = rootNode;
public Maybe<SourcePage> findIncludedPage(String pageName) { return includedPage != null ? new Maybe<SourcePage>(includedPage) : Maybe.<SourcePage>nothingBecause("missing"); }
public void color(Parse cells, boolean right) throws Exception { while (cells != null) { if (right)
public void shouldRegisterComponentUsingAllPossibleSupertypes() { mockery.checking(new Expectations(){{ one(scanner).getTypesWithMetaAnnotation(Stereotype.class); will(returnValue(Arrays.asList(ArrayListSubclass.class))); one(registry).register(ArrayListSubclass.class, ArrayListSubclass.class); one(registry).register(ArrayList.class, ArrayListSubclass.class); one(registry).register(List.class, ArrayListSubclass.class); one(registry).register(Collection.class, ArrayListSubclass.class); one(registry).register(Iterable.class, ArrayListSubclass.class); one(registry).register(Cloneable.class, ArrayListSubclass.class); one(registry).register(Serializable.class, ArrayListSubclass.class); one(registry).register(RandomAccess.class, ArrayListSubclass.class); one(registry).register(AbstractList.class, ArrayListSubclass.class); one(registry).register(AbstractCollection.class, ArrayListSubclass.class); one(registry).register(List.class, ArrayListSubclass.class); one(registry).register(Collection.class, ArrayListSubclass.class); }}); registrar.registerFrom(scanner); mockery.assertIsSatisfied(); }
public void testSyncUnsubscribeWithoutSubscription() throws Exception { boolean unsubscribeSuccess = false; try { subscriber.unsubscribe(ByteString.copyFromUtf8("mySyncUnsubTopic"), ByteString.copyFromUtf8("1")); } catch (ClientNotSubscribedException e) { unsubscribeSuccess = true; } catch (Exception ex) { unsubscribeSuccess = false; } assertTrue(unsubscribeSuccess); }
public void putVariable(SourcePage page, String name, Maybe<String> value) { String key = page.getFullName(); if (!cache.containsKey(key)) cache.put(key, new HashMap<String, Maybe<String>>()); cache.get(key).put(name, value); }
public void testReloadSnapshotWithMissingParent() throws Exception { final String hostPort = HOST + PortAssignment.unique();
public Responder authenticate(FitNesseContext context, Request request, Responder privilegedResponder) throws Exception { request.getCredentials(); String username = request.getAuthorizationUsername(); String password = request.getAuthorizationPassword(); if (isAuthenticated(username, password)) return privilegedResponder;
private String runSuite() throws IOException { Response response = responder.makeResponse(context, request); MockResponseSender sender = new MockResponseSender(); sender.doSending(response); String results = sender.sentData(); return results; }
protected void doWriteObject(ObjectOutputStream out) throws IOException { out.writeFloat(loadFactor); out.writeInt(data.length); out.writeInt(size); for (MapIterator it = mapIterator(); it.hasNext();) { out.writeObject(it.next());
public void historyDirectoryWithTwoPageDirectoriesShouldShowTwoPages() throws Exception { addPageDirectoryWithOneResult("PageOne", "20090418123103_1_2_3_4"); addPageDirectoryWithOneResult("PageTwo", "20090418123103_1_2_3_4"); TestHistory history = new TestHistory(resultsDirectory); assertEquals(2, history.getPageNames().size()); assertTrue(history.getPageNames().contains("PageOne")); assertTrue(history.getPageNames().contains("PageTwo")); }
public void setup() { this.mockery = new VRaptorMockery(); this.result = mockery.mock(Result.class); this.info = mockery.mock(MethodInfo.class); this.instance = null; this.method = mockery.mock(ResourceMethod.class); this.stack = mockery.mock(InterceptorStack.class); this.interceptor = new OutjectResult(result, info); mockery.checking(new Expectations() { {
public void shouldComplainAboutInvalidNumber() { try { converter.convert("---", short.class, bundle);
public void oneInput() throws Exception { makeTables( "!|scenario|myScenario|input|\n" + "|function|@input|\n" + "\n" + "!|script|\n" + "|myScenario|7|\n" ); List<CallInstruction> expectedInstructions = asList(new CallInstruction("scriptTable_id_0/scriptTable_s_id_0", "scriptTableActor", "function", new Object[]{"7"})); assertEquals(expectedInstructions, instructions()); }
public void saveMatchIfBest(int leftTableIndex, int rightTableIndex, double score) { new BestMatchSaver(leftTableIndex, rightTableIndex, score).saveOnlyBestMatch(); }
public void addTableType(String nameOrPrefix, Class<? extends SlimTable> tableClass) { if (tableTypes.get(nameOrPrefix) != null) { throw new IllegalStateException("A table type named '" + nameOrPrefix + "' already exists"); } tableTypes.put(nameOrPrefix.toLowerCase().replaceAll(":", ""), tableClass); }
String getFullPath(); String getContent(); boolean targetExists(String wikiWordPath); String makeFullPathOfTarget(String wikiWordPath); String findParentPath(String targetName); Maybe<SourcePage> findIncludedPage(String pageName); Collection<SourcePage> getChildren(); boolean hasProperty(String propertyKey); String getProperty(String propertyKey); String makeUrl(String wikiWordPath); }
public void method(@Load Entity entity) { } public void managed(@Load(managed=true) Entity entity) { } } }
<T> CASValue<T> getAndLock(String key, int exp, Transcoder<T> tc); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public TestResult evaluateExpectation(Object returnValue) { TestResult testResult; if (returnValue == null) { testResult = TestResult.ignore("Test not run"); } else { String value; value = returnValue.toString(); testResult = evaluationMessage(value, originalContent); } if (testResult != null) { table.updateContent(col, row, testResult); getTestContext().increment(testResult.getExecutionResult()); } return testResult; }
private void wakeupCnxn() { if (needSasl.get()) { waitSasl.release(); } if (outgoingQueue != null) { outgoingQueue.add(WakeupPacket.getInstance());
public Collection<Dependency> elements(MavenProjectAdapter project) throws DependencyResolutionRequiredException { return project.getSystemDependencies(); }
void header(String key, String value); void methodNotAllowed(EnumSet<HttpMethod> allowedMethods);  void notModified();  void movedPermanentlyTo(String url);  <T> T movedPermanentlyTo(Class<T> controller);  void unsupportedMediaType(String errorMessage);  void notAcceptable(); }
int getRowCount(); int getColumnCountInRow(int row); void substitute(int col, int row, String content); int addRow(List<String> list); void addColumnToRow(int row, String content); void appendChildTable(int row, Table table); void updateContent(int row, TestResult testResult); void updateContent(int col, int row, SlimTestResult testResult); void updateContent(int col, int row, ExceptionResult exceptionResult); Table asTemplate(CellContentSubstitution substitution) throws SyntaxError;
public static List<ACL> parse(String aclString) { List<ACL> acl; String[] acls = aclString.split(","); acl = new ArrayList<ACL>(); for (String a : acls) { int firstColon = a.indexOf(':'); int lastColon = a.lastIndexOf(':'); if (firstColon == -1 || lastColon == -1 || firstColon == lastColon) { System.err.println(a + " does not have the form scheme:id:perm"); continue; } ACL newAcl = new ACL(); newAcl.setId(new Id(a.substring(0, firstColon), a.substring(firstColon + 1, lastColon))); newAcl.setPerms(getPermFromString(a.substring(lastColon + 1))); acl.add(newAcl); } return acl; }
Counter getCounter(String name);  void registerGauge(String name, Gauge gauge);  void unregisterGauge(String name); static enum DetailLevel {  BASIC,  ADVANCED }  Summary getSummary(String name, DetailLevel detailLevel);  SummarySet getSummarySet(String name, DetailLevel detailLevel); }
private MultipleTestsRunner createTestRunner(List<WikiPage> pages, FitNesseContext context) { final PagesByTestSystem pagesByTestSystem = new PagesByTestSystem(pages, context.root); MultipleTestsRunner runner = new MultipleTestsRunner(pagesByTestSystem, context.runningTestingTracker, context.testSystemFactory, context.variableSource); runner.setRunInProcess(debugMode); return runner; }
@Test public void translatesEvaluators() { String line = "axb"; line = line.replace("x", "$"); ParserTest.assertTranslatesTo("${= 8 =}", "8"); ParserTest.assertTranslatesTo("${=42.24=}", "42.24"); ParserTest.assertTranslatesTo("${=1.2E+3=}", "1200"); ParserTest.assertTranslatesTo("${=-123=}", "-123"); ParserTest.assertTranslatesTo("${=%d:3.2=}", "3"); ParserTest.assertTranslatesTo("${==}", ""); ParserTest.assertTranslatesTo("${= =}", ""); ParserTest.assertTranslatesTo("${=3+4=}", "7"); ParserTest.assertTranslatesTo("${=abort=}", "<span class=\"meta\">invalid expression: abort</span>"); }
public static void sendSlimHeader(OutputStream writer, String header) throws IOException {
public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max); public boolean getResponseCachingEnabled(); public void setResponseCachingEnabled(boolean isEnabled);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); }
public void prepare() { fileSystem = new MemoryFileSystem(); variableSource = new SystemVariableSource(); rootPage = new FileSystemPageFactory(fileSystem, new SimpleFileVersionsController(fileSystem), variableSource).makePage(null, "RooT", null); }
private ZooInspectorManagerImpl getInspectorManagerImpl(ZooKeeper zooKeeper) throws IOException { ZooInspectorManagerImpl manager = new ZooInspectorManagerImpl(); manager.zooKeeper = zooKeeper; manager.connected = true; manager.encryptionManager = new BasicDataEncryptionManager(); return manager; }
public void testImportedPageIndication() throws Exception { pageRenderingSetUp(); page = pageBuilder.addPage(root, PathParser.parse("SamplePage")); PageData data = page.getData(); WikiImportProperty importProperty = new WikiImportProperty("blah"); importProperty.addTo(data.getProperties()); page.commit(data); String content = getContentAfterSpecialImportHandling(); assertSubString("<body class=\"imported\">", content); }
public Collection<VersionInfo> history(FileSystemPage page) throws Exception { File dir = new File(page.getFileSystemPath()); File[] files = dir.listFiles(); Set<VersionInfo> versions = new HashSet<VersionInfo>(); if (files != null) for (File file : files) if (isVersionFile(file)) versions.add(new VersionInfo(makeVersionName(file))); return versions; }
private String removeQueryString(String uri) { return uri.replaceAll("\\?.+", ""); }
public void saveOnlyTheBestMatches() { for (int matchIndex = 0; matchIndex < tableMatches.size(); matchIndex++) { for (int secondMatchIndex = matchIndex + 1; secondMatchIndex < tableMatches.size(); secondMatchIndex++) {
public void setUp() throws Exception { String testDataPath = System.getProperty("test.data.dir", "build/test/data"); System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY, "org.apache.zookeeper.server.NettyServerCnxnFactory"); System.setProperty(ZKClientConfig.ZOOKEEPER_CLIENT_CNXN_SOCKET, "org.apache.zookeeper.ClientCnxnSocketNetty"); System.setProperty(ZKClientConfig.SECURE_CLIENT, "true"); System.setProperty(clientX509Util.getSslAuthProviderProperty(), "x509"); System.setProperty(clientX509Util.getSslKeystoreLocationProperty(), testDataPath + "/ssl/testKeyStore.jks"); System.setProperty(clientX509Util.getSslKeystorePasswdProperty(), "testpass"); System.setProperty(clientX509Util.getSslTruststoreLocationProperty(), testDataPath + "/ssl/testTrustStore.jks"); System.setProperty(clientX509Util.getSslTruststorePasswdProperty(), "testpass"); System.setProperty("javax.net.debug", "ssl"); System.setProperty("zookeeper.authProvider.x509", "org.apache.zookeeper.server.auth.X509AuthenticationProvider"); String host = "localhost"; int port = PortAssignment.unique(); hostPort = host + ":" + port; serverFactory = ServerCnxnFactory.createFactory(); serverFactory.configure(new InetSocketAddress(host, port), maxCnxns, true); super.setUp(); }
public void testRenameFailWhenNonSym() throws Exception { prepareSymlinkOnPageOne(); request.addInput("newname", "ChildOne"); Response response = invokeResponder(); assertEquals(412, response.getStatus()); }
public long getPacketsReceived();  public long getPacketsSent();  public long getFsyncThresholdExceedCount();  public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize(); }
public void messageScanned(Object ctx, Message recvMessage) { Message pubMsg = pubMsgs.get(0); if (!HelperMethods.areEqual(recvMessage, pubMsg)) { throw (failureException = new RuntimeException("Scanned message not equal to expected")); } pubMsgs.remove(0); if (pubMsgs.isEmpty()) { LinkedBlockingQueue<Boolean> statusQueue = (LinkedBlockingQueue<Boolean>) ctx;
public void testTestSummaryTestPass() throws Exception { formatter.announceNumberTestsToRun(1); formatter.newTestStarted(page); formatter.testComplete(page, new TestSummary(4, 0, 0, 0)); formatter.allTestingComplete(null); assertSubString("<script>document.getElementById(\"test-summary\").innerHTML =", pageBuffer.toString()); assertSubString("<strong>Assertions:</strong> 4 right, 0 wrong, 0 ignored, 0 exceptions", pageBuffer.toString()); assertSubString("document.getElementById(\"test-summary\").className = \"pass\"", pageBuffer.toString()); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root"); instructions = new ArrayList<Object>(); clearTestSummary(); }
private void notestConnections() throws KeeperException, IOException, InterruptedException { ZooKeeper zk; for(int i = 0; i < 2000; i++) { if (i % 100 == 0) {
public void testShouldThrowNoSuchMethodExceptionIfGivenParseDelgateClassDoesNotHavePublicParseMethod() throws Exception { try { TypeAdapter.registerParseDelegate(Class.class, ProtectedParseMethod.class);
public String toString() { return "(" + id + ", " + Long.toHexString(zxid) + ", " + Long.toHexString(peerEpoch) + ")"; }
NodeLocator getNodeLocator(); Future<Boolean> append(long cas, String key, Object val); <T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by); long decr(String key, int by); long incr(String key, int by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void testFourLetterWords() throws Exception { verify("ruok", "imok"); verify("envi", "java.version"); verify("stat", "Outstanding"); verify("srvr", "Outstanding"); verify("cons", "queued"); verify("dump", "Session"); verify("wchs", "watches"); verify("wchp", ""); verify("wchc", ""); verify("srst", "reset"); verify("crst", "reset"); verify("stat", "Outstanding"); verify("srvr", "Outstanding"); verify("cons", "queued"); TestableZooKeeper zk = createClient(); String sid = "0x" + Long.toHexString(zk.getSessionId()); verify("stat", "queued"); verify("srvr", "Outstanding"); verify("cons", sid); verify("dump", sid); zk.getData("/", true, null); verify("stat", "queued"); verify("srvr", "Outstanding"); verify("cons", sid); verify("dump", sid); verify("wchs", "watching 1"); verify("wchp", sid); verify("wchc", sid); zk.close(); verify("ruok", "imok"); verify("envi", "java.version"); verify("stat", "Outstanding"); verify("srvr", "Outstanding"); verify("cons", "queued"); verify("dump", "Session"); verify("wchs", "watch"); verify("wchp", ""); verify("wchc", ""); verify("srst", "reset"); verify("crst", "reset"); verify("stat", "Outstanding"); verify("srvr", "Outstanding"); verify("cons", "queued"); }
public void decryptData(final String encryptedValue) { if (!isFingerprintInitialized()) { if (fingerPrintCallback != null) { fingerPrintCallback.onException(); } return; } try {
public InputStream getInputStream(File file) throws IOException { return new ByteArrayInputStream(files.get(file.getPath()).payload.getBytes(FileUtil.CHARENCODING)); }
public void testFindReferencingPages() throws Exception { whereUsed = new WhereUsedPageFinder(pageOne, this); List<WikiPage> resultList = whereUsed.search(root); assertEquals(2, resultList.size()); assertEquals(pageTwo, resultList.get(0)); whereUsed = new WhereUsedPageFinder(pageTwo, this); resultList = whereUsed.search(root); assertEquals(1, resultList.size()); whereUsed = new WhereUsedPageFinder(pageThree, this); resultList = whereUsed.search(root); assertEquals(0, resultList.size()); }
public void precompiledScenarioWidgetsAreCreatedOnlyOnce() throws Exception { WikiPage suitePage = crawler.addPage(root, PathParser.parse("MySuite"), "my suite content"); SlimTestSystem sys = new HtmlSlimTestSystem(suitePage, dummyListener); assertSame(sys.getPreparsedScenarioLibrary(), sys.getPreparsedScenarioLibrary()); }
public void NewParserDefine() throws Exception { runNewParser(definePageContent); }
public void error(String message, String sourceName, int line, String lineSource, int lineOffset) { if (line < 0) { errors.add("\n[ERROR] " + message);
public void testGetFullPath() throws Exception { assertEquals(page1Path, page1.getPageCrawler().getFullPath(page1)); assertEquals(page2Path, page2.getPageCrawler().getFullPath(page2)); assertEquals(child1FullPath, child1.getPageCrawler().getFullPath(child1)); assertEquals(grandChild1FullPath, grandChild1.getPageCrawler().getFullPath(grandChild1)); assertEquals(PathParser.parse(""), crawler.getFullPath(root)); }
public void testMultiGetChildrenMixedAuthenticationCorrectFirst() throws KeeperException, InterruptedException { List<ACL> writeOnly = Collections.singletonList(new ACL(ZooDefs.Perms.WRITE, new Id("world", "anyone"))); zk.create("/foo_auth", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); zk.create("/foo_auth/bar", null, Ids.READ_ACL_UNSAFE, CreateMode.PERSISTENT); zk.create("/foo_no_auth", null, writeOnly, CreateMode.PERSISTENT);
public void shouldSetNotFoundStatus() throws Exception { status.notFound(); verify(response).setStatus(404); }
protected void killSession(long sessionId, long zxid) { zkDb.killSession(sessionId, zxid); if (LOG.isTraceEnabled()) { ZooTrace.logTraceMessage(LOG, ZooTrace.SESSION_TRACE_MASK, "ZooKeeperServer --- killSession: 0x" + Long.toHexString(sessionId)); } if (sessionTracker != null) { sessionTracker.removeSession(sessionId);
public void clientRedirectingWillRedirectToTranslatedUrl() throws NoSuchMethodException, IOException { final String url = "custom_url"; mockery.checking(new Expectations() { { one(builder).urlFor(MyComponent.class, MyComponent.class.getDeclaredMethod("base")); will(returnValue(url)); one(response).sendRedirect(url); } }); logicResult.redirectClientTo(MyComponent.class).base(); mockery.assertIsSatisfied(); }
private native long nDecryptInit(byte[] key, byte[] iv); @Override protected void engineSetMode(String mode) throws NoSuchAlgorithmException { if ( ! mode.equals("CBC") ) { throw new NoSuchAlgorithmException("This only supports CBC mode"); } } @Override protected void engineSetPadding(String padding) throws NoSuchPaddingException { if ( ! mIsInited ) { NativeLib.init(); } if ( padding.length() == 0 ) { return; } if ( ! padding.equals("PKCS5Padding") ) { throw new NoSuchPaddingException("Only supports PKCS5Padding."); } mPadding = true; } @Override protected byte[] engineUpdate(byte[] input, int inputOffset, int inputLen) { int maxSize = engineGetOutputSize(inputLen); byte output[] = new byte[maxSize]; int updateSize = update(input, inputOffset, inputLen, output, 0); if ( updateSize == maxSize ) { return output; } else {
private void replaceAnyOldMatchesWithBetterMatch() { if (thereIsAWorseLHMatchAndNoBetterRHMatch()) replaceLHMatchWithNewBestMatchAndRemoveAnyOldRHMatch(); if (thereIsAWorseRHMatchAndNoLHMatch()) replaceRHMatchWithNewBestMatch();
public void testProtocolVersion() throws Exception { System.setProperty(quorumX509Util.getSslProtocolProperty(), "TLSv1.2"); q1 = new MainThread(1, clientPortQp1, quorumConfiguration, SSL_QUORUM_ENABLED); q2 = new MainThread(2, clientPortQp2, quorumConfiguration, SSL_QUORUM_ENABLED); q1.start(); q2.start(); Assert.assertTrue(ClientBase.waitForServerUp("127.0.0.1:" + clientPortQp1, CONNECTION_TIMEOUT)); Assert.assertTrue(ClientBase.waitForServerUp("127.0.0.1:" + clientPortQp2, CONNECTION_TIMEOUT)); System.setProperty(quorumX509Util.getSslProtocolProperty(), "TLSv1.1");
public void write(HttpServletResponse response) throws IOException { download.write(response); }
public void shouldBeAbleToDeserializeADogWithDeserializerAdapter() throws Exception { List<JsonDeserializer> deserializers = new ArrayList<JsonDeserializer>(); deserializers.add(new DogDeserializer()); deserializer = new GsonDeserialization(provider, deserializers); InputStream stream = new ByteArrayInputStream("{'dog':{'name':'Renan Reis','age':'0'}}".getBytes()); when(provider.parameterNamesFor(bark.getMethod())).thenReturn(new String[] { "dog" }); when(provider.parameterNamesFor(bark.getMethod())).thenReturn(new String[] { "dog" }); Object[] deserialized = deserializer.deserialize(stream, bark); assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(Dog.class))); Dog dog = (Dog) deserialized[0]; assertThat(dog.name, is("Renan")); assertThat(dog.age, is(25)); }
private boolean packagesContains(List<String> basePackages, String clazz) { for (String basePackage : basePackages) { if (clazz.startsWith(basePackage)) { return true; } } return false; }
public void shouldAddAllResourcesToACommonList() { final Resource myResource = mockery.mock(Resource.class); mockery.checking(new Expectations() { { one(builder).lookupFor(myResource); will(returnValue(null)); } }); registry.register(Arrays.asList(myResource)); assertThat(registry.all(), Matchers.hasItem(myResource)); mockery.assertIsSatisfied(); }
double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
private void finalCount() throws Exception { Counts counts = fitServer.getCounts(); TestSystem.TestSummary testSummary = new TestSystem.TestSummary( counts.right, counts.wrong, counts.ignores, counts.exceptions ); handler.acceptFinalCount(testSummary); }
public static String makeExceptionString(Throwable e) { StringBuffer buffer = new StringBuffer(); buffer.append(e.toString()).append("\n"); StackTraceElement[] stackTreace = e.getStackTrace(); for(int i = 0; i < stackTreace.length; i++) buffer.append("\t" + stackTreace[i]).append("\n"); return buffer.toString(); }
public void assign(final String name, final Object value) { inner.assign(name, value); }
private boolean removeWatches(Map<String, Set<Watcher>> pathVsWatcher, Watcher watcher, String path, boolean local, int rc, Set<Watcher> removedWatchers) throws KeeperException { if (!local && rc != Code.OK.intValue()) { throw KeeperException .create(KeeperException.Code.get(rc), path); } boolean success = false;
public void LoadData(Context ctx, InputStream is, String password, String keyfile, UpdateStatus status, boolean debug) throws IOException, InvalidDBException { BufferedInputStream bis = new BufferedInputStream(is); if ( ! bis.markSupported() ) { throw new IOException("Input stream does not support mark."); }
protected void processWikiPageDataBeforeGeneratingHtml(PageData pageData) throws Exception { testSystem = new SlimTestSystem(pageData.getWikiPage(), this); String classPath = new ClassPathBuilder().getClasspath(page); log = testSystem.getExecutionLog(classPath, "fitnesse.slim.SlimService"); testSystem.start(); testSystem.setFastTest(fastTest); testSystem.sendPageData(pageData); testSystem.bye(); }
public Matcher string(final String delimiter) { if (firsts == null) { firsts = Collections.singletonList(delimiter.charAt(0)); } matches.add((input, symbols, match) -> { if (input.matches(delimiter, match.getLength())) match.addLength(delimiter.length()); else match.noMatch(); }); return this; }
public InetAddress[] getAllByName(String name) throws UnknownHostException { throw new UnknownHostException(); }
private DERObjectIdentifier decodeOID( String name, Hashtable lookUp) { if (Strings.toUpperCase(name).startsWith("OID.")) { return new DERObjectIdentifier(name.substring(4)); } else if (name.charAt(0) >= '0' && name.charAt(0) <= '9') { return new DERObjectIdentifier(name); } DERObjectIdentifier oid = (DERObjectIdentifier)lookUp.get(Strings.toLowerCase(name)); if (oid == null) { throw new IllegalArgumentException("Unknown object id - " + name + " - passed to distinguished name"); } return oid; }
public void testComplete(WikiPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws Exception { super.testComplete(test, testSummary, timeMeasurement); writeResults(); }
public Descriptor create(WikiPage page) { return new WikiPageDescriptor(page.readOnlyData(), debug, remoteDebug, classPath); }
private void doSimpleDealing() throws Exception { seeker = new SimpleSocketSeeker(); int ticket = dealer.seekingSocket(seeker); doner = new SimpleDoner(); dealer.dealSocketTo(ticket, doner); }
WikiPage getSiblingPage(WikiPage page, WikiPagePath pathRelativeToSibling); WikiPage findAncestorWithName(WikiPage page, String name); WikiPage getClosestInheritedPage(WikiPage context, String pageName);
public void whenResourceIsCacheableAddMaxAge() { CacheableOrder cacheable = new CacheableOrder(); handler.handle(cacheable);
public void testMixedReadAndTransaction(boolean useAsync) throws Exception { zk.create("/node", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); try { List<OpResult> multiRead = multi(zk, Arrays.asList(
public static String getScenarioNameFromAlternatingCells(Table table, int endingCol, int row) throws SyntaxError { String actionName = getActionNameStartingAt(table, 0, endingCol, row); String simpleName = actionName.replace(SEQUENTIAL_ARGUMENT_PROCESSING_SUFFIX, ""); return Disgracer.disgraceClassName(simpleName); }
public void shouldUseCollectionConverterWhenItExists() { String expectedResult = "[\"testing\"]"; List<JsonSerializer> adapters = new ArrayList<JsonSerializer>(); adapters.add(new CollectionSerializer()); VRaptorGsonBuilder builder = new VRaptorGsonBuilder(new DefaultJsonSerializers(adapters), serializee); GsonJSONSerialization serialization = new GsonJSONSerialization(response, extractor, initializer, builder, serializee); serialization.withoutRoot().from(new MyCollection()).serialize(); assertThat(result(), is(equalTo(expectedResult))); }
static void printUsage() { System.out.print("Usage:\tjava -cp <classpath> com.yahoo.zookeeper." + "version.util.VerGen maj.min.micro rev buildDate"); System.exit(1); }
public void testArgumentsDefaults() throws Exception { makeArgs(new String[]{}); assertEquals(80, args.getPort()); assertEquals(".", args.getRootPath()); assertEquals("FitNesseRoot", args.getRootDirectory()); assertEquals(null, args.getLogDirectory()); assertEquals(false, args.isOmittingUpdates()); assertEquals(14, args.getDaysTillVersionsExpire()); assertEquals(null, args.getUserpass()); assertFalse(args.isOmittingHistory()); }
private void addPageXmlToElement(Document document, Element context, WikiPage page) throws Exception { if(pageMeetsConditions(page)) context.appendChild(createXmlFromPage(document, page));
String getHtml(); String getContent(); String getAttribute(String attribute); boolean hasAttribute(String attribute); WikiPageProperties getProperties(); WikiPage getWikiPage(); }
default void registerFormatters(FormatterRegistry registrar) throws PluginException { } default void registerTestSystemFactories(TestSystemFactoryRegistry testSystemFactoryRegistry) throws PluginException { } default void registerSlimTables(SlimTableFactory slimTableFactory) throws PluginException { } default void registerCustomComparators(CustomComparatorRegistry customComparatorRegistry) throws PluginException { } }
public void testTestRunnerWithVariable() throws Exception { String specifiedPageText = "!define TEST_RUNNER (${MY_RUNNER}.rb)\n" + "!define MY_RUNNER {rubyslim}\n"; WikiPage specifiedPage = makeTestPage(specifiedPageText); Descriptor descriptor = new Descriptor(specifiedPage.readOnlyData(), false, getClassPath(specifiedPage)); assertEquals("rubyslim.rb", descriptor.getTestRunner()); }
public void x() throws Exception { assertTrue(approximatelyEqual("3.05", "3.049")); }
public void parseIncludesWithVariable() { Symbol result = parse("!define x {PageOne}\n!include ${x}"); assertEquals("PageOne", result.childAt(2).childAt(1).getContent()); result = parse("!define x {Page}\n!define y {One}\n!include ${x}${y}"); assertEquals("PageOne", result.childAt(4).childAt(1).getContent()); }
private void register(final Class<?> type, boolean customComponent) { registerOn(type, customComponent); registerFactory(type); }
public void testIsSingleWikiWord() throws Exception { assertTrue(WikiWordPath.isSingleWikiWord("WikiWord")); assertFalse(WikiWordPath.isSingleWikiWord("notWikiWord")); assertFalse(WikiWordPath.isSingleWikiWord("NotSingle.WikiWord")); }
private String makeDirectoryListingPage(String pageName, String filename, FitNesseContext context) { HtmlPage page = context.pageFactory.newPage(); page.setTitle("Delete File(s)"); page.setPageTitle(new PageTitle("Delete File", resource + filename, "/")); page.put("resource", resource); makeConfirmationHTML(page, filename, context); page.setMainTemplate("deleteConfirmation"); return page.html(); }
String[] list(String path); String getContent(String path) throws IOException; InputStream getInputStream(String path) throws IOException; void delete(String path); long lastModified(String path); }
public void processResult(int rc, String path, Object ctx, List<String> children, Stat stat); } interface Create2Callback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, String name, Stat stat); } interface StringCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, String name); } interface VoidCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx); } interface MultiCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, List<OpResult> opResults); } }
public void shouldUseVRaptor3AlgorithmIfNotAVRaptor2Component() { final Resource resource = mockery.resource(NonVRaptorComponent.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("id", HttpMethod.POST), is(equalTo(new DefaultResourceAndMethodLookup(resource).methodFor( "id", HttpMethod.POST)))); mockery.assertIsSatisfied(); }
<T> T instanceFor(Class<T> type);  <T> boolean canProvide(Class<T> type); }
private static String substring(String s, int startingIndex, int endingIndex) { return s.substring(startingIndex + 1, endingIndex); }
MetricType enableMetrics();  MetricCollector getMetricCollector();  long getAuthWaitTime(); }
private void reportStreams(boolean report) { if (report) { System.out.print(recordedOutStream.toString());
private List<ACL> removeDuplicates(List<ACL> acl) { List<ACL> retval = new LinkedList<ACL>(); if (acl != null) { for (ACL a : acl) { if (!retval.contains(a)) { retval.add(a); } } } return retval; }
public void testExecutionStatusError() throws Exception { responder.setFastTest(false); doSimpleRun(crashFixtureTable()); assertEquals("Errors Occurred", getExecutionStatusMessage()); assertEquals("error", getExecutionStatusStyle()); }
public File takeSnapshot(boolean syncSnap) throws IOException { return takeSnapshot(syncSnap, true, false); }
public int getMaxSessionTimeout();  public int getInitLimit();  public int getSyncLimit();  public int getTick();  public String getState();  public String getQuorumAddress();  public int getElectionType(); }
protected FileSupport createFileSupportLibrary() { String instanceName = "library" + library++; statementExecutor.create(instanceName, fileSupportName(), new Object[] {}); return (FileSupport) statementExecutor.getInstance(instanceName); }
public void testConnectHostlessPrincipalBadServer() throws Exception { String serverPrincipal = hostServerPrincipal.substring(0, hostServerPrincipal.lastIndexOf("@")); Map<String, String> authConfigs = new HashMap<>(); authConfigs.put(QuorumAuth.QUORUM_SASL_AUTH_ENABLED, "true"); authConfigs.put(QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED, "true"); authConfigs.put(QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED, "true"); authConfigs.put(QuorumAuth.QUORUM_KERBEROS_SERVICE_PRINCIPAL, serverPrincipal); String connectStr = startQuorum(3, authConfigs, 3); CountdownWatcher watcher = new CountdownWatcher(); ZooKeeper zk = new ZooKeeper(connectStr, ClientBase.CONNECTION_TIMEOUT, watcher); watcher.waitForConnected(ClientBase.CONNECTION_TIMEOUT); for (int i = 0; i < 10; i++) { zk.create("/" + i, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); } zk.close(); String quorumCfgSection = mt.get(0).getQuorumCfgSection(); StringBuilder sb = new StringBuilder(); sb.append(quorumCfgSection); int myid = mt.size() + 1; final int clientPort = PortAssignment.unique(); String server = String.format("server.%d=localhost:%d:%d:participant", myid, PortAssignment.unique(), PortAssignment.unique()); sb.append(server + "\n"); quorumCfgSection = sb.toString(); authConfigs.put(QuorumAuth.QUORUM_LEARNER_SASL_LOGIN_CONTEXT, "QuorumLearnerMissingHost"); MainThread badServer = new MainThread(myid, clientPort, quorumCfgSection, authConfigs); badServer.start(); watcher = new CountdownWatcher(); connectStr = "127.0.0.1:" + clientPort; zk = new ZooKeeper(connectStr, ClientBase.CONNECTION_TIMEOUT, watcher); try { watcher.waitForConnected(ClientBase.CONNECTION_TIMEOUT / 3);
public void testLoadPKCS12TrustStore( X509KeyType caKeyType, X509KeyType certKeyType, String keyPassword, Integer paramIndex) throws Exception { init(caKeyType, certKeyType, keyPassword, paramIndex);
private void refreshUser() { this.user = (User) session.getAttribute(CURRENT_USER); }
private ZSession createSession(String expire) { WebResource wr = sessionsr.queryParam("op", "create") .queryParam("expire", expire); Builder b = wr.accept(MediaType.APPLICATION_JSON); ClientResponse cr = b.post(ClientResponse.class, null); assertEquals(ClientResponse.Status.CREATED, cr .getClientResponseStatus()); return cr.getEntity(ZSession.class); }
public void testRegularExpression() throws Exception { assertMatchEquals("abc--123--def", "--123--"); assertNoMatch("------"); }
protected List<SlimAssertion> instructionsForRow(int row) throws SyntaxError { String firstCell = table.getCellContents(0, row).trim(); List<SlimAssertion> assertions; String match; if (firstCell.equalsIgnoreCase(getStartKeyword())) assertions = startActor(row); else if (firstCell.equalsIgnoreCase(getCheckKeyword())) assertions = checkAction(row); else if (firstCell.equalsIgnoreCase(getCheckNotKeyword())) assertions = checkNotAction(row); else if (firstCell.equalsIgnoreCase(getRejectKeyword())) assertions = reject(row); else if (firstCell.equalsIgnoreCase(getEnsureKeyword())) assertions = ensure(row); else if (firstCell.equalsIgnoreCase(getShowKeyword())) assertions = show(row); else if (firstCell.equalsIgnoreCase(getNoteKeyword())) assertions = note(row); else if ((match = ifSymbolAssignment(0, row)) != null) assertions = actionAndAssign(match, row); else if (firstCell.isEmpty()) assertions = note(row); else if (firstCell.trim().startsWith("#") || firstCell.trim().startsWith("*")) assertions = note(row); else {
public static FitNesseContext makeTestContext(WikiPage root, int port, Authenticator authenticator, Properties properties) { return makeTestContext(root, createTemporaryFolder().getPath(), FitNesseUtil.base, port, authenticator, properties); }
public void certficateReloadTest() throws Exception { final Properties configZookeeper = getServerConfig(); try (ZooKeeperServerEmbedded zkServer = ZooKeeperServerEmbedded .builder()
private void sendPage(WikiTestPage testPage, FitClient client) throws IOException, InterruptedException { String pageName = page.getPageCrawler().getRelativeName(testPage.getSourcePage()); String testableHtml = testPage.getDecoratedData().getHtml(); String sendableHtml = pageName + "\n" + testableHtml; client.send(sendableHtml); }
public void parsesEmptyFrontMatter() { ParserTestHelper.assertParses("---\n---\n", "SymbolList[FrontMatter[SymbolList]]"); }
public void testABunchOfCancelledOperations() throws Exception { final String k = "bunchOCancel"; Collection<Future<?>> futures = new ArrayList<Future<?>>(); for (int i = 0; i < 1000; i++) { futures.add(client.set(k, 5, "xval")); futures.add(client.asyncGet(k)); } OperationFuture<Boolean> sf = client.set(k, 5, "myxval"); GetFuture<Object> gf = client.asyncGet(k); for (Future<?> f : futures) { f.cancel(true); } assertTrue(sf.get()); assert sf.getStatus().isSuccess(); assertEquals("myxval", gf.get()); assert gf.getStatus().isSuccess(); }
public void testReceiveMessage() throws Exception { ss = new SocketService(portNumber, new EchoService()); Socket s = new Socket("localhost", portNumber); BufferedReader br = TestUtility.GetBufferedReader(s); PrintStream ps = TestUtility.GetPrintStream(s); ps.println("MyMessage"); String answer = br.readLine(); s.close(); ss.close(); assertEquals("MyMessage", answer); }
public Matcher startLineOrCell() { matches.add(new ScanMatch() { public Maybe<Integer> match(ScanString input, SymbolStream symbols, int offset) { return input.startsLine(offset) || symbols.get(0).isStartCell() || (symbols.get(0).isType(SymbolType.Whitespace) && (symbols.get(1).isStartCell() || symbols.get(1).isLineType())) ? new Maybe<Integer>(0) : Maybe.noInteger; } }); return this; }
public void shouldAccessArray() { Client c = client(1L); c.favoriteColors = new String[] {"blue", "red"}; assertThat((String) evaluator.get(c, "client.favoriteColors[1]"), is(equalTo("red"))); }
public void setup() { this.mockery = new Mockery(); this.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class)); this.rules = new DefaultRouter(); }
public long decr(String key, int by) { return mutate(MutatorOperation.Mutator.decr, key, by); }
private void dispatchEvent(EventType eventType) { logger.debug("Dispatching event:{}", eventType); synchronized (listeners) { if (listeners.size() > 0) {
public void testBindColumnToFieldSymbol() throws Exception { Fixture.setSymbol("Symbol", "42"); Parse table = new Parse("<table><tr><td>field=</td></tr><tr><td>Symbol</td></tr></table>"); Parse rows = table.parts; fixture.doRows(rows); Binding binding = fixture.columnBindings[0]; assertNotNull(binding); assertEquals(Binding.RecallBinding.class, binding.getClass()); Field field = binding.adapter.field; assertNotNull(field); assertEquals("field", field.getName()); assertEquals(42, fixture.field); }
public LinkMethod get(Object key) { return new LinkMethod((Class<?>) key); }
public static <T, U extends T, V extends BlockingQueue<T>> void put(V queue, U value) { try { queue.put(value);
void appendCellToRow(int row, String contents); String getUnescapedCellContents(int col, int row); String getCellResult(int col,int row); void appendChildTable(int row, Table table); void setTestStatusOnRow(int row, ExecutionResult testStatus); void setName(String tableName); void setCell(int col, int row, Result response); void appendToCell(int col, int row, Result response); }
public void toInherit() { } } @Test public void shouldFindNonAnnotatedNonStaticPublicMethodWithComponentNameInVariableCamelCaseConventionAsURI() throws Exception { ResourceMethod method = router.parse("/clients/add", HttpMethod.POST, request); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("add")))); mockery.assertIsSatisfied(); } @Test public void shouldIgnoreAResourceWithTheWrongWebMethod() throws SecurityException { ResourceMethod method = router.parse("/clients/remove", HttpMethod.POST, request); assertThat(method, is(Matchers.nullValue())); mockery.assertIsSatisfied(); } @Test public void shouldAcceptAResultWithASpecificWebMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = router.parse("/clients/head", HttpMethod.HEAD, request); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("head")))); mockery.assertIsSatisfied(); } static class NiceClients extends Clients { } @Test public void findsInheritedMethodsWithDefaultNames() throws SecurityException, NoSuchMethodException { ResourceClass childResource = mockery.resource(NiceClients.class); router.register(childResource); ResourceMethod method = router.parse("/niceClients/toInherit", HttpMethod.POST, request); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("toInherit")))); mockery.assertIsSatisfied(); } }
public void testAddStoppable() { StoppedRecorder stoppableA = new StoppedRecorder(); StoppedRecorder stoppableB = new StoppedRecorder(); RunningTestingTracker tracker = new RunningTestingTracker(); tracker.addStartedProcess("1", stoppableA); tracker.addStartedProcess("2", stoppableB); tracker.stopAllProcesses(); assertTrue(stoppableA.wasStopped()); assertTrue(stoppableB.wasStopped()); }
public void closeAll() {
private void validateConnection() { if (isConnected()) { slimServerVersion = Double.parseDouble(slimServerVersionMessage.replace("Slim -- V", ""));
<T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(final CallbackHandler cbh) throws OperationException; }
public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { testSystemFullName = (testSystemName + ":" + testRunner).replaceAll("\\\\", "/"); String tag = String.format("<h3>%s</h3>\n", testSystemFullName); HtmlTag insertScript = HtmlUtil.makeAppendElementScript(TEST_SUMMARIES_ID, tag); writeData(insertScript.html());
void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public void resetStatistics() { ServerStats serverStats = zks.serverStats(); serverStats.resetRequestCounters(); serverStats.resetLatency(); }
public void cancel() { if ( mTimer != null ) { mTimer.cancel(); } timeout = false; }
private static List<Long> generateRandomHashes(int count) { ArrayList<Long> list = new ArrayList<>(count); for (int i = 0; i < count; i++) { list.add(rand.nextLong()); } return list; }
private void setMockContent(WikiPage localPage) throws Exception { PageData data = localPage.getData(); data.setContent(mockContent); localPage.commit(data); }
public String toString(Object object) { if (object == null) return "null"; return callReflectively("toTable",new Object[]{},new Class[]{},object).toString(); }
public static File createFile(String path, String content) throws IOException { return createFile(path, new ByteArrayInputStream(content.getBytes())); }
public void shouldNotAcceptAnythingButValidTicketNumber() throws IOException, InterruptedException { SocketAccepter accepter = mock(SocketAccepter.class); SocketServer server = new SocketCatcher(accepter, 1234); MockSocket socket = new MockSocket("GET /?responder=fake&ticket=1234 HTTP/1.1\r\n\r\n"); server.serve(socket); }
public void testPageTypePropertiesHtml() throws Exception { WikiPage page = WikiPageUtil.addPage(root, PathParser.parse("SomePage")); PageData data = page.getData(); SimpleResponse response = (SimpleResponse) new PropertiesResponder().makeResponse(context, request); String html = response.getContent(); assertSubString("Page type:", html); assertSubString("<input type=\"radio\" id=\"Static\" name=\"PageType\" value=\"Static\" checked=\"checked\"/>", html); assertSubString("<input type=\"radio\" id=\"Test\" name=\"PageType\" value=\"Test\"/>", html); assertSubString("<input type=\"radio\" id=\"Suite\" name=\"PageType\" value=\"Suite\"/>", html); assertSubString("<input type=\"checkbox\" id=\"Prune\" name=\"Prune\"/>", html); }
public void resetObserverConnectionStats() { synchronized (observingLearners) { for (LearnerHandler lh : observingLearners) {
public Long update(E elem, int timeout) { Long prevExpiryTime = elemMap.get(elem); long now = System.currentTimeMillis(); Long newExpiryTime = roundToNextInterval(now + timeout); if (newExpiryTime.equals(prevExpiryTime)) {
public static SimpleDateFormat dateFormat() { return new SimpleDateFormat("yyyyMMddHHmmss"); }
public void start() throws IOException { timeoutThread = new Thread(new TimeoutRunnable(fitClient), "FitClient timeout"); timeoutThread.setDaemon(true); timeoutThread.start(); earlyTerminationThread = new Thread(new EarlyTerminationRunnable(fitClient, commandRunner), "FitClient early termination"); earlyTerminationThread.setDaemon(true); earlyTerminationThread.start(); }
public Response makeResponse(FitNesseContext context, Request request) throws Exception { SimpleResponse response = new SimpleResponse(); WikiPage page = getWikiPageFromContext(context, request.getResource()); if (page == null) return new NotFoundResponder().makeResponse(context, request); String html = makeHtml(context, request, page); response.setContent(html); response.setMaxAge(0); return response; }
public void serialize() { try { Object root = serializee.getRoot();
public void testConstructorDoesNotLeaveTheObjectInAnUnstableState() throws Exception { assertInvalidInputException(INT_DATA_TYPE, "xyz"); assertInvalidInputException(INT_DATA_TYPE, "1.2"); assertInvalidInputException(DOUBLE_DATA_TYPE, "1.2E"); }
public Future<Long> asyncIncr(String key, int by) { return asyncMutate(Mutator.incr, key, by, 0, -1); }
public static String reconfig(ZooKeeper zk, List<String> joiningServers, List<String> leavingServers, List<String> newMembers, long fromConfig) throws KeeperException, InterruptedException { byte[] config = null; for (int j = 0; j < 30; j++) { try { config = zk.reconfig(joiningServers, leavingServers, newMembers, fromConfig, new Stat()); break; } catch (KeeperException.ConnectionLossException e) { if (j < 29) { Thread.sleep(1000); } else {
public void testComplete_clones_TestSummary_Objects() throws Exception{ WikiPageDummy secondPage=new WikiPageDummy("SecondPage", null); secondPage.setParent(new WikiPageDummy("root", null)); TestSummary ts=new TestSummary(5,6,7,8); TimeMeasurement timeMeasurement = new TimeMeasurement().start(); jf.testComplete(buildNestedTestPage(), ts, timeMeasurement.stop()); ts.right=11; ts.wrong=12; ts.ignores=13; ts.exceptions=14; jf.testComplete(new WikiTestPage(secondPage), ts, timeMeasurement.stop()); assertEquals(new TestSummary(5,6,7,8), jf.getTestSummary("ParentTest.ChildTest")); }
public void testShouldDisplayRevisionControlActionMenuHeaderIfWikiIsUnderRevisionControl() throws Exception { String pageName = "UnderVersionControlPage"; expect(revisionController.isExternalReversionControlEnabled()).andReturn(true); expect(revisionController.execute(STATE, contentAndPropertiesFilePath(ROOT + "/ExternalRoot/" + pageName))).andReturn(VERSIONED); replay(revisionController); createRoot(); root.addChildPage(pageName); String html = requestPage(pageName).getContent(); assertRevisionControlHeaderPresent(html); }
private void leaveInstance(Vote v) { LOG.debug( "About to leave FLE instance: leader={}, zxid=0x{}, my id={}, my state={}", v.getId(), Long.toHexString(v.getZxid()), self.getId(), self.getPeerState()); recvqueue.clear(); }
public void notLessThanComparison() throws Exception { assertExpectationMessage(" !< 5.9 ", "8", "pass(8!<5.9)"); assertExpectationMessage(" !< 5.9 ", "5.9", "pass(5.9!<5.9)"); assertExpectationMessage(" !< 5.9 ", "3.6", "fail(3.6!<5.9)"); }
void addScenario(String scenarioName, ScenarioTable scenarioTable); ScenarioTable getScenario(String scenarioName); void addExpectation(SlimTable.Expectation e); Map<String, ScenarioTable> getScenarios(); }
public <T> Converter<T> to(Class<T> type) { Converter<?> vraptor2Convterter = findVRaptor2Converter(type); return (Converter<T>) (vraptor2Convterter == null ? delegateConverters.to(type) : vraptor2Convterter); }
private HtmlTag makeFrontPageLink() { HtmlUtil.ActionLink link = new HtmlUtil.ActionLink("/FrontPage", "FrontPage"); link.setQuery(null); return link.getHtml(); }
public byte[] take() throws KeeperException, InterruptedException { Map<Long, String> orderedChildren;
public void sendError(int sc) throws IOException { if (sc == 404) { notFound(req);
public boolean onPreferenceChange(Preference preference, Object newValue) { App.getDB().initSearch(); return true; }
public List<String> getClasspaths() throws Exception { Symbol tree = getSyntaxTree(); return new Paths(new HtmlTranslator(new WikiSourcePage(wikiPage), parsingPage)).getPaths(tree); }
protected void removeLocalSession(long sessionId) { if (localSessionTracker == null) { return; } localSessionTracker.removeSession(sessionId); }
public PackageDescriptor createDeb( final File[] pControlFiles, final DataProducer[] pData, final File pOutput, String compression ) throws PackagingException, InvalidDescriptorException { File tempData = null; File tempControl = null; try { tempData = File.createTempFile("deb", "data");
public void visitEnd() { if (!subroutineHeads.isEmpty()) { markSubroutines(); if (LOGGING) { log(mainSubroutine.toString()); Iterator it = subroutineHeads.values().iterator(); while (it.hasNext()) { Subroutine sub = (Subroutine) it.next(); log(sub.toString()); } } emitCode(); }
Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(String username, String password) throws OperationException; }
public static void startFitnesse(WikiPage root) { context = makeTestContext(root); context.port = port; startFitnesseWithContext(context); }
public void checkSecurityAccess(String target) { if (delegate != null) { delegate.checkSecurityAccess(target);
String genCsharpWriteWrapper(String fname, String tag) { return (mUnwrapMethod == null) ? " a_.Write" + mMethodSuffix + "(" + fname + "," + tag + ");\n"
public void nextBytes(byte[] bytes) { generator.nextBytes(bytes); }
public void hear(TypeLiteral literal, TypeEncounter encounter) { provider.addType(literal.getRawType()); }
public void closeSubscription(ByteString topic, ByteString subscriberId) throws ServiceDownException;  public void asyncCloseSubscription(ByteString topic, ByteString subscriberId, Callback<Void> callback, Object context); }
void findWhereUsed(WikiPage page, Consumer<String> takeWhereUsed); String changeReferences(WikiPage page, Function<String, Optional<String>> changeReference); static TextSystem make() { return new TextSystemV2(); }
protected synchronized void popAndRunNext(ByteString topic) { Queue<Runnable> ops = topic2ops.get(topic); if (!ops.isEmpty()) ops.remove(); if (!ops.isEmpty()) scheduler.submit(ops.peek());
Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by); long decr(String key, int by); long incr(String key, int by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void tearDown() throws Exception { serverFactory.shutdown(); zs.shutdown(); Assert.assertTrue("waiting for server down", ClientBase.waitForServerDown(HOSTPORT,
private void createAndRegisterGaugeSet(final String name, final Map<String, Number> metricsMap, final AtomicInteger callCount) { final GaugeSet gaugeSet = () -> { callCount.addAndGet(1); return metricsMap; }; provider.getRootContext().registerGaugeSet(name, gaugeSet); }
public void setUp() throws Exception { } public void tearDown() throws Exception { } public void testGetValueFor() throws Exception { assertEquals(0, Base64.getValueFor((byte)'A')); assertEquals(26, Base64.getValueFor((byte)'a')); assertEquals(52, Base64.getValueFor((byte)'0')); } public void testDecodeNothing() throws Exception { assertEquals("", Base64.decode("")); } public void testDecodeOneChar() throws Exception { assertEquals("a", Base64.decode("YQ==")); } public void testDecodeTwoChars() throws Exception { assertEquals("a:", Base64.decode("YTo=")); } public void testDecodeLongSample() throws Exception { assertEquals("Aladdin:open sesame", Base64.decode("QWxhZGRpbjpvcGVuIHNlc2FtZQ==")); } public void testEncodeNothing() throws Exception { assertEquals("", Base64.encode("")); } public void testEncodeOneChar() throws Exception { assertEquals("YQ==", Base64.encode("a")); } public void testEncodeTwoChars() throws Exception { assertEquals("YTo=", Base64.encode("a:")); } public void testEncodeThreeChars() throws Exception { assertEquals("YWJj", Base64.encode("abc")); } public void testEncodeLongSample() throws Exception { assertEquals("QWxhZGRpbjpvcGVuIHNlc2FtZQ==", Base64.encode("Aladdin:open sesame")); } }
public void passAndReturnListWithVariable() throws Exception { statements.add(list("id1", "callAndAssign", "v", "testSlim", "addTo", "3", "4")); statements.add(list("id2", "call", "testSlim", "echoList", list("$v"))); respondsWith(list(list("id1", "7"), list("id2", list("7")))); }
public void simpleXmlFormat() throws Exception { request.addInput("format", "xml"); doSimpleRun(passFixtureTable()); xmlChecker.assertFitPassFixtureXmlReportIsCorrect(); }
public void shutdown() { if (localSessionTracker != null) { localSessionTracker.shutdown(); } globalSessionTracker.shutdown(); }
private void resetWidgetDataList() { for(int i = 0; i < widgetDataArray.length; i++) widgetDataArray[i].match = null;
TestSystem create(Descriptor descriptor, TestSystemListener listener) throws IOException; }
private void adjust( byte[] a, int aOff, byte[] b) { int x = (b[b.length - 1] & 0xff) + (a[aOff + b.length - 1] & 0xff) + 1; a[aOff + b.length - 1] = (byte)x; x >>>= 8; for (int i = b.length - 2; i >= 0; i--) {
GetOperation get(Collection<String> value, GetOperation.Callback cb);  MutatatorOperation mutate(Mutator m, String key, int by, long def, int exp, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb); }
public void withDefaultPageTypeAndPageNameForNormalThenNoAttributeShouldBeSet() throws Exception { request.addInput("name", "NormalPage"); responder.makeResponse(context, request); getChildPage("NormalPage"); assertFalse(isSuite()); assertFalse(isTest()); }
public Authenticator makeAuthenticator(String authenticationParameter) throws Exception { Authenticator authenticator = new PromiscuousAuthenticator(); if (authenticationParameter != null) { if (new File(authenticationParameter).exists()) authenticator = new MultiUserAuthenticator(authenticationParameter); else { String[] values = authenticationParameter.split(":"); authenticator = new OneUserAuthenticator(values[0], values[1]); } } return getAuthenticator(authenticator); }
public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) { CommandResponse response = initializeResponse(); response.put("initial_configuration", zkServer.getInitialConfig()); return response; }
public String toString() { return super.toString() + " Exp: " + exp; }
private void getUpdateFilesFromJarFile() throws IOException { Update update = new FileUpdate("Resources/updateList", new File(context.getRootPagePath())); update.doUpdate(); update = new FileUpdate("Resources/updateDoNotCopyOverList", new File(context.getRootPagePath())); update.doUpdate(); }
private void simpleTextOfLeave(Parse table, StringBuffer returnText) { returnText.append(table.tag).append(table.text()).append(table.end); }
private FitNesseContext testContextWithAuthentication(String username, String password) throws Exception { FitNesseContext testContext = FitNesseUtil.makeTestContext(root); testContext.port = FitNesseUtil.port; testContext.authenticator = new OneUserAuthenticator(username, password); return testContext; }
private Map<WikiPageIdentity, List<TestPage>> addSuiteSetUpAndTearDownToAllTestSystems(Map<WikiPageIdentity, List<WikiPage>> pagesByTestSystem) { Map<WikiPageIdentity, List<TestPage>> orderedPagesByTestSystem = new HashMap<>(pagesByTestSystem.size()); if (!pagesByTestSystem.isEmpty()) { PageListSetUpTearDownSurrounder surrounder = new PageListSetUpTearDownSurrounder(root); for (Map.Entry<WikiPageIdentity, List<WikiPage>> pages : pagesByTestSystem.entrySet()) orderedPagesByTestSystem.put(pages.getKey(), asTestPages(surrounder.surroundGroupsOfTestPagesWithRespectiveSetUpAndTearDowns(pages.getValue()))); } return orderedPagesByTestSystem; }
public void testClearingSymbols() throws Exception { Fixture.setSymbol("blah", "blah"); assertEquals("blah", Fixture.getSymbol("blah")); Fixture.ClearSymbols(); assertEquals(null, Fixture.getSymbol("blah")); }
void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps(); }
public void testSuiteSetUpAndTearDownIsCalledIfSingleTestIsRun() throws Exception { WikiPage suitePage = crawler.addPage(root, PathParser.parse("TestSuite"), classpathWidgets()); WikiPage testPage = crawler.addPage(suitePage, PathParser.parse("TestPage"), outputWritingTable("Output of TestPage")); crawler.addPage(suitePage, PathParser.parse(SuiteResponder.SUITE_SETUP_NAME), outputWritingTable("Output of SuiteSetUp")); crawler.addPage(suitePage, PathParser.parse(SuiteResponder.SUITE_TEARDOWN_NAME), outputWritingTable("Output of SuiteTearDown")); WikiPagePath testPagePath = crawler.getFullPath(testPage); String resource = PathParser.render(testPagePath); request.setResource(resource); Response response = responder.makeResponse(context, request); MockResponseSender sender = new MockResponseSender(response); results = sender.sentData(); assertEquals("Output Captured", getExecutionStatusMessage()); assertHasRegexp("ErrorLog", results); WikiPage errorLog = crawler.getPage(errorLogsParentPage, testPagePath); String errorLogContent = errorLog.getData().getContent(); assertHasRegexp("Output of SuiteSetUp", errorLogContent); assertHasRegexp("Output of TestPage", errorLogContent); assertHasRegexp("Output of SuiteTearDown", errorLogContent); }
private static String trim(String line) { char[] chars = line.toCharArray(); int len = chars.length; while (len > 0) { if (!Character.isWhitespace(chars[len - 1])) { break; } len--; } return line.substring(0, len); }
public void passingMessage() throws Exception { assertExpectationMessage("expected", "expected", "!style_pass(expected)"); }
protected void addToClasspath(String groupId, String artifactId, String version, Set<String> classpath) throws Exception { addToClasspath(groupId, artifactId, version, classpath, true); }
public void correctAttributeWhenNameHasTestButAttributeIsNormal() throws Exception { request.addInput("name", "TestChildPage"); request.addInput("pagetype", "Normal"); responder.makeResponse(context, request); getChildPage("TestChildPage"); assertFalse(isTest()); assertFalse(isSuite()); }
public boolean isFailed() { return (saslState == SaslState.FAILED); }
private WikiPageDummy buildNestedTestPage() throws Exception { WikiPageDummy wp=new WikiPageDummy("ChildTest",null); WikiPageDummy parent=new WikiPageDummy("ParentTest",null); wp.setParent(parent); parent.setParent(new WikiPageDummy("root")); return wp; }
public void includeSetupsAndTeardownsAndLibrariesBelowASuite() throws Exception { WikiPage suitePage = testPage; TestPage testPage = new TestPage(subTestPage); SetupTeardownAndLibraryIncluder.includeSetupsTeardownsAndLibrariesBelowTheSuite(testPage, suitePage); String html = testPage.getDecoratedData().getHtml(); assertSubString(".SetUp", html); assertSubString("setup", html); assertSubString(".TearDown", html); assertSubString("teardown", html); assertSubString("sub test page", html); assertSubString("class=\"collapsible closed\"", html); assertSubString("scenario library 3", html); assertNotSubString(".SuiteSetUp", html); assertNotSubString("suiteSetUp", html); assertNotSubString(".SuiteTearDown", html); assertNotSubString("suitTearDown", html); assertNotSubString("scenario library 1", html); assertNotSubString("scenario library 2", html); }
public <T extends View> T onErrorUse(Class<T> view) { if(!this.errors.isEmpty()) { throw new ValidationError(errors); } return new MockResult().use(view); }
Object call(String instanceName, String methodName, Object... arguments) throws SlimException; } }
public void shouldNotProxifyJavaLangObjectMethods() throws Exception { Proxifier proxifier = new ObjenesisProxifier(); Object proxy = proxifier.proxify(ObjenesisProxifierTest.class, new MethodInvocation() { public Object intercept(Object proxy, Method method, Object[] args, SuperMethod superMethod) { Assert.fail("should not call this Method interceptor"); return null; } }); new Mirror().on(proxy).invoke().method("finalize").withoutArgs(); }
public void remove() { versionsController.delete(new FileVersion() { @Override
public void testShouldPassIfActualExecutionTimeIsEqualToMinTime() throws Exception { String fitPage = "<table><tr><td>fit.decorator.TimeRange</td><td>20</td><td>milliseconds min and max</td>" + "<td>25</td><td>milliseconds</td></tr><tr><td>eg.Division</td></tr>" + "<tr><td>numerator</td><td>denominator</td><td>quotient()</td></tr>" + "<tr><td>10</td><td>2</td><td>5</td></tr><tr><td>12.6</td><td>3</td><td>4.2</td></tr>" + "<tr><td>100</td><td>4</td><td>25</td></tr></table>"; Counts expected = TestCaseHelper.counts(5, 0, 0, 0); executeAndAssert(expected, fitPage, new TimeRange(stopWatch)); }
public Result include(Object value) { String key = this.extractor.nameFor(value.getClass()); return include(key, value); }
public void onCreateMenu(ContextMenu menu, ContextMenuInfo menuInfo) { menu.add(0, MENU_OPEN, 0, R.string.menu_open); }
public String formatError(String message) { return translate(new Symbol(SymbolType.Meta).add(message)); }
public List<Object> query() { List<Object> table = list(); File folder = new File("FitNesseRoot/files/testProgress/"); File[] listOfFiles = folder.listFiles(); for (int i = 1; i < listOfFiles.length; i++) { List<String> test = list("Test", listOfFiles[i].getName()); List<Object> row = list(test); table.add(row); } return table; }
public void testAutoUpdatingTurnedOn() throws Exception { MockRequest request = makeRequest(baseUrl); responder.setRequest(request); responder.data = new PageData(new WikiPageDummy()); responder.initializeImporter(); assertFalse(responder.getImporter().getAutoUpdateSetting()); request.addInput("autoUpdate", "1"); responder.initializeImporter(); assertTrue(responder.getImporter().getAutoUpdateSetting()); }
private void assertException(String message, String result) { assertTrue(result, result.indexOf(SlimServer.EXCEPTION_TAG) != -1 && result.indexOf(message) != -1); }
protected void writeResults() { } }; TimeMeasurement totalTimeMeasurement = mock(TimeMeasurement.class); when(totalTimeMeasurement.elapsed()).thenReturn(77L); formatter.allTestingComplete(totalTimeMeasurement); assertThat(formatter.testResponse.getTotalRunTimeInMillis(), is(77L)); } }
public void shoudRegisterResourcesInRouter() { Router router = getFromContainer(Router.class); ResourceClass dummyResourceClass = new DefaultResourceClass(ResourceInTheClasspath.class); assertThat(router.allResources(), hasItem(dummyResourceClass)); }
protected Leader makeLeader() throws IOException { return new Leader(this, new LeaderZooKeeperServer(dataDir, dataLogDir, this));
protected void registerComponents(ComponentRegistry container) { logger.debug("Registering base pico container related implementation components"); for (Class<?> type : new Class[] { DefaultResourceTranslator.class, DefaultRouter.class, DefaultResourceNotFoundHandler.class, DefaultDirScanner.class, DefaultInterceptorRegistry.class, DefaultPathResolver.class, DefaultProxifier.class, ParanamerNameProvider.class, DefaultConverters.class, DefaultMethodInfo.class, DefaultInterceptorStack.class, DefaultRequestExecution.class, DefaultResult.class, OgnlParametersProvider.class, DefaultMethodInfo.class, DefaultValidator.class, JstlLocalization.class, NoRoutesConfiguration.class,WebInfClassesScanner.class, PathAnnotationRoutesCreator.class,PathAnnotationRoutesCreator.class, EmptyResult.class}) { singleInterfaceRegister(type, container); } container.register(ForwardToDefaultViewInterceptor.class, ForwardToDefaultViewInterceptor.class); container.register(LogicResult.class, DefaultLogicResult.class); container.register(PageResult.class, DefaultPageResult.class); container.register(TypeCreator.class, AsmBasedTypeCreator.class); container.register(EmptyElementsRemoval.class, EmptyElementsRemoval.class); container.register(ParametersInstantiatorInterceptor.class, ParametersInstantiatorInterceptor.class); container.register(InterceptorListPriorToExecutionExtractor.class, InterceptorListPriorToExecutionExtractor.class); container.register(MultipartInterceptor.class, MultipartInterceptor.class); container.register(URLParameterExtractorInterceptor.class, URLParameterExtractorInterceptor.class); container.register(ResourceLookupInterceptor.class, ResourceLookupInterceptor.class); container.register(InstantiateInterceptor.class, InstantiateInterceptor.class); container.register(ExecuteMethodInterceptor.class, ExecuteMethodInterceptor.class); }
protected void logRunException(Exception e) { if(shuttingDown) {
public void shouldFailValidationWithAsciiEmpty() { StringUtils.validateKey("", false); }
public void tableMethodReturnsNull() throws Exception { assertTableResults("|2|4|\n", null, "[[pass(Table:fixture), ignore(No results from table)], [2, 4]]"
public static State instance(String state) { State revisionControlState = states.get(state); if (revisionControlState == null) revisionControlState = UNKNOWN; return revisionControlState; }
public void execute() throws Exception { setRequest(new MockRequest()); details(); if (username != null) request.setCredentials(username, password); request.parseRequestUri("/" + uri); WikiPagePath path = PathParser.parse(request.getResource());
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root"); FitNesseUtil.makeTestContext(root); crawler = root.getPageCrawler(); request = new MockRequest(); responder = new EditResponder(); }
public int read(byte[] buffer) throws IOException { bytes += buffer.length; return is.read(buffer); }
public void pageImportError(WikiPage page, Exception e) { errors.add(e); }
protected void processWord( byte[] in, int inOff) { X[xOff++] = (in[inOff] & 0xff) << 24 | (in[inOff + 1] & 0xff) << 16 | (in[inOff + 2] & 0xff) << 8 | in[inOff + 3] & 0xff; if (xOff == 16) {
private void registerRequestScopedComponentsOn(DefaultListableBeanFactory beanFactory) { registerOn(beanFactory, RequestResult.class); registerOn(beanFactory, ParametersInstantiatorInterceptor.class); registerOn(beanFactory, DefaultMethodParameters.class); registerOn(beanFactory, DefaultRequestParameters.class); registerOn(beanFactory, InterceptorListPriorToExecutionExtractor.class); registerOn(beanFactory, URLParameterExtractorInterceptor.class); registerOn(beanFactory, DefaultInterceptorStack.class); registerOn(beanFactory, DefaultRequestExecution.class); registerOn(beanFactory, ResourceLookupInterceptor.class); registerOn(beanFactory, InstantiateInterceptor.class); registerOn(beanFactory, DefaultResult.class); registerOn(beanFactory, ExecuteMethodInterceptor.class); registerOn(beanFactory, DefaultPageResult.class); registerOn(beanFactory, ForwardToDefaultViewInterceptor.class); registerOn(beanFactory, DefaultLogicResult.class); registerOn(beanFactory, OgnlParametersProvider.class); registerOn(beanFactory, DefaultRequestInfo.class); registerOn(beanFactory, DefaultValidator.class); registerOn(beanFactory, DefaultLogicResult.class); registerOn(beanFactory, DefaultResourceNotFoundHandler.class); registerOn(beanFactory, VRaptorRequestProvider.class, true); registerOn(beanFactory, HttpServletRequestProvider.class, true); registerOn(beanFactory, HttpServletResponseProvider.class, true); registerOn(beanFactory, HttpSessionProvider.class, true); registerOn(beanFactory, JstlLocalization.class); beanFactory.registerSingleton(SpringBasedContainer.class.getName(), container); }
public void newTestStarted(TestPage test, TimeMeasurement timeMeasurement) throws Exception { for (BaseFormatter formatter : formatters) formatter.newTestStarted(test, timeMeasurement);
public void shouldThrowExceptionWhenUnableToParse() { mockery.checking(new Expectations() { { exactly(2).of(request).getAttribute("javax.servlet.jsp.jstl.fmt.locale.request"); will(returnValue("pt_br")); } }); try { converter.convert("25:dd:88", Time.class, bundle);
public void setup() { zks = spy(new ZooKeeperServer()); zks.sessionTracker = mock(SessionTracker.class); ZKDatabase db = mock(ZKDatabase.class); when(zks.getZKDatabase()).thenReturn(db); DataNode node = new DataNode(new byte[1], null, mock(StatPersisted.class)); when(db.getNode(anyString())).thenReturn(node); Set<String> ephemerals = new HashSet<>(); ephemerals.add("/crystalmountain"); ephemerals.add("/stevenspass"); when(db.getEphemerals(anyLong())).thenReturn(ephemerals); nextProcessor = mock(RequestProcessor.class); ServerMetrics.getMetrics().resetAll(); }
private void assertAllPacketsZero(ServerStats serverStats) { assertEquals(0L, serverStats.getPacketsSent()); assertEquals(0L, serverStats.getPacketsReceived()); }
private void writeObject(String name, UUID uuid) throws IllegalArgumentException, IllegalStateException, IOException { byte[] data = Types.UUIDtoBytes(uuid); writeObject(name, Base64.encodeToString(data, Base64.NO_WRAP)); }
void close(); Socket getSocket();
public List getFixtureNames(WikiPage page) throws Exception { return getInheritedItems(page, new HashSet(89)); }
private Parse addTable(Parse embeddedTables, Parse rows) { embeddedTables.more = makeEmbeddedRows(rows); return embeddedTables.more; }
public boolean compareDigest(TxnHeader header, Record txn, TxnDigest digest) { return dataTree.compareDigest(header, txn, digest); }
public final void begin(final String name, final Attributes attrs) { int major = Integer.parseInt(attrs.getValue("major")); int minor = Integer.parseInt(attrs.getValue("minor")); cw = new ClassWriter(computeMax ? ClassWriter.COMPUTE_MAXS : 0); Map vals = new HashMap(); vals.put("version", new Integer(minor << 16 | major)); vals.put("access", attrs.getValue("access")); vals.put("name", attrs.getValue("name")); vals.put("parent", attrs.getValue("parent")); vals.put("source", attrs.getValue("source")); vals.put("signature", attrs.getValue("signature")); vals.put("interfaces", new ArrayList()); push(vals);
public void receiveMessage(ChannelBuffer message) { try { while(message.readable() && !throttled) {
public void testValues() { addDataPoints(); Map<String, Object> values = testCounterSet.values(); Assert.assertEquals("There should be 10 values in the set", 10, values.size()); Assert.assertEquals("avg_key1_test should =0.5", 0.5D, values.get("avg_key1_test")); Assert.assertEquals("min_key1_test should =0", 0L, values.get("min_key1_test")); Assert.assertEquals("max_key1_test should =1", 1L, values.get("max_key1_test")); Assert.assertEquals("cnt_key1_test should =2", 2L, values.get("cnt_key1_test")); Assert.assertEquals("sum_key1_test should =1", 1L, values.get("sum_key1_test")); Assert.assertEquals("avg_key2_test should =3.5", 3.5, values.get("avg_key2_test")); Assert.assertEquals("min_key2_test should =2", 2L, values.get("min_key2_test")); Assert.assertEquals("max_key2_test should =5", 5L, values.get("max_key2_test")); Assert.assertEquals("cnt_key2_test should =4", 4L, values.get("cnt_key2_test")); Assert.assertEquals("sum_key2_test should =14", 14L, values.get("sum_key2_test")); }
private static Object defaultToStringTypeIfNull(Object type) { if (type == null) type = STRING; return type; }
private void enterScope(ScriptOrFnScope scope) { scopes.push(scope); }
public void send(byte[] bytes) throws Exception { if(bytesSent < 500) output.write(bytes); bytesSent += bytes.length; }
public void setUp() throws Exception { mockery = new Mockery(); dao = mockery.mock(UserDao.class); userInfo = new UserInfo();
protected FixtureWithNamedSystemUnderTestBase createNamedFixture() throws Exception { createFixtureInstance(namedFixtureName()); return (FixtureWithNamedSystemUnderTestBase) getVerifiedInstance(); }
void makeFile(File file, String content) throws IOException; void makeFile(File file, InputStream content) throws IOException; void makeDirectory(File path) throws IOException; boolean exists(File file); String[] list(File path); String getContent(File file) throws IOException; InputStream getInputStream(File file) throws IOException; void delete(File path); long lastModified(File file); void rename(File file, File originalFile) throws IOException; boolean isDirectory(File file); }
public void testRunsAtIntervals() throws Exception { ScheduleImpl schedule = new ScheduleImpl(250); Counter counter = new Counter(); schedule.add(counter); schedule.start(); Thread.sleep(700); schedule.stop(); assertTrue(counter.count >= 3); }
public Date getLastModificationTime() throws Exception { String dateStr = get(PageData.PropertyLAST_MODIFIED); if (dateStr == null) return new Date();
void saslCompleted() { needSasl.set(false); waitSasl.release(); }
public void shouldThrowExceptionForInvalidString() { try { converter.convert("not a boolean!", Boolean.class, bundle);
public void testLoadEncryptedPrivateKeyFromKeyStoreWithoutPassword() throws GeneralSecurityException, IOException { if (!x509TestContext.isKeyStoreEncrypted()) { throw new GeneralSecurityException();
private boolean isQuorumServerSaslAuthRequired() { return quorumServerSaslAuthRequired; }
public CachedData encode(String o) { throw new RuntimeException("Not invoked."); }
public void setup() { this.mockery = new Mockery(); this.builder = mockery.mock(MethodLookupBuilder.class); final HttpServletRequest webRequest = mockery.mock(HttpServletRequest.class); final HttpServletResponse webResponse = mockery.mock(HttpServletResponse.class); final VRaptorRequest request = new VRaptorRequest(null, webRequest, webResponse); this.picoContainer = new PicoBuilder().withCaching().build(); mockery.checking(new Expectations() { { one(builder).lookupFor(with(VRaptorMatchers.resource(VRaptorInfo.class))); } }); this.container = new PicoBasedContainer(picoContainer, request, new DefaultResourceRegistry(builder)); }
public Boolean convert(String value, Class<? extends Boolean> type, ResourceBundle bundle) { if (isNullOrEmpty(value)) { return null; } value = value.toUpperCase(); if (matches(IS_TRUE, value)) { return true; } else if (matches(IS_FALSE, value)) { return false; } throw new ConversionError(MessageFormat.format(bundle.getString("is_not_a_valid_boolean"), value)); }
public void testFromPropertyValue() { assertEquals(KeyStoreFileType.PEM, KeyStoreFileType.fromPropertyValue("PEM")); assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromPropertyValue("JKS")); assertEquals(KeyStoreFileType.PKCS12, KeyStoreFileType.fromPropertyValue("PKCS12")); assertEquals(KeyStoreFileType.BCFKS, KeyStoreFileType.fromPropertyValue("BCFKS")); assertNull(KeyStoreFileType.fromPropertyValue("")); assertNull(KeyStoreFileType.fromPropertyValue(null)); }
public InputStream txt() throws FileNotFoundException { return FileController.class.getResourceAsStream("/filecontroller_test/test.txt"); }
Object createInstance(List<String> paths, String className, Object[] args) throws IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException; MethodExecutionResult findAndInvoke(String method, Object instance, Object... args) throws Throwable; Object methodInvoke(Method method, Object instance, Object... args) throws Throwable; }
@Test public void translatesPreformats() { ParserTest.assertTranslatesTo("{{{stuff}}}", "<pre>stuff</pre>" + HtmlElement.endl); ParserTest.assertTranslatesTo("{{{''stuff''}}}", "<pre>''stuff''</pre>" + HtmlElement.endl); }
public void shouldGetVersionForClassInJarWithVersion() { assertTrue("Version not retrieved for java.lang.reflect.Method", enricher.getVersion(java.lang.reflect.Method.class).contains(javaVersion));
public void testBadUsage() throws KeeperException, InterruptedException { for (CreateMode createMode : CreateMode.values()) { try { zk.create("/foo", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, createMode, new Stat(), createMode.isTTL() ? 0 : 100); fail("should have thrown IllegalArgumentException"); } catch (IllegalArgumentException dummy) {
public void testLeaderConversation(LeaderConversation conversation) throws Exception { Socket[] pair = getSocketPair(); Socket leaderSocket = pair[0]; Socket followerSocket = pair[1]; File tmpDir = File.createTempFile("test", "dir", testData); tmpDir.delete(); tmpDir.mkdir(); LeadThread leadThread = null; Leader leader = null; try { QuorumPeer peer = createQuorumPeer(tmpDir);
private void createDataDirFiles(AtomicInteger offset, int limit, boolean createPrecedingLogFile, File version_2, List<File> snaps, List<File> logs) throws IOException { int counter = offset.get() + (2 * limit); if (createPrecedingLogFile) { counter++; } offset.set(counter); for (int i = 0; i < limit; i++) {
public void shouldUseParameterNameBeforeTryingHttpRealMethod() throws Exception { when(request.getMethod()).thenReturn("dElEtE"); when(request.getParameter("_method")).thenReturn("post"); assertEquals(HttpMethod.POST, HttpMethod.of(request)); }
public Request prepare(ResourceMethod method, HttpServletRequest request, HttpServletResponse response) { RequestContextListener requestListener = new RequestContextListener(); requestListener.requestInitialized(new ServletRequestEvent(servletContext, request)); return instanceFor(Request.class); }
public void set(ViewResponseWithDocs viewResponse, BulkFuture<Map<String, Object>> oper, OperationStatus s) { objRef.set(viewResponse); multigetRef.set(oper); status = s; }
public void setUp() throws Exception { super.setUp(); SimpleDateFormat dateFormat = new SimpleDateFormat(FitNesseContext.recentChangesDateFormat); date = dateFormat.format(new Date()); SimpleDateFormat rfcDateFormat = new SimpleDateFormat(FitNesseContext.rfcCompliantDateFormat); rfcDate = rfcDateFormat.format(new Date()); hostName = java.net.InetAddress.getLocalHost().getHostName(); Locale.setDefault(Locale.US); }
public void singleResultShouldShowPassFailBar() throws Exception { addPageDirectory("TestPage"); File pageDirectory = addPageDirectory("TestPage"); addTestResult(pageDirectory, "20090503110451_30_20_3_0"); makeResponse(); StringBuilder expected = new StringBuilder(); for (int i = 0; i < 30; i++) { expected.append("<td id=\"element\" class=\"pass\">&nbsp</td>"); } expected.append(".*"); for (int i = 0; i < 20; i++) { expected.append("<td id=\"element\" class=\"fail\">&nbsp</td>"); } assertHasRegexp(expected.toString(), response.getContent()); }
public void testReconfigWithAnotherOutstandingChange() throws Exception { QuorumPeerConfig.setReconfigEnabled(true); QuorumPeerConfig.setStandaloneEnabled(false); QuorumPeer qp = new QuorumPeer(); QuorumVerifier quorumVerifierMock = mock(QuorumVerifier.class); when(quorumVerifierMock.getAllMembers()).thenReturn(LeaderBeanTest.getMockedPeerViews(qp.getId())); qp.setQuorumVerifier(quorumVerifierMock, false); FileTxnSnapLog snapLog = new FileTxnSnapLog(tmpDir, tmpDir); LeaderZooKeeperServer lzks = new LeaderZooKeeperServer(snapLog, qp, new ZKDatabase(snapLog)); qp.leader = new Leader(qp, lzks); lzks.sessionTracker = new MySessionTracker(); ZooKeeperServer.setDigestEnabled(true); processor = new PrepRequestProcessor(lzks, new MyRequestProcessor()); Record record = new CreateRequest("/foo", "data".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT.toFlag()); pLatch = new CountDownLatch(1); processor.pRequest(createRequest(record, OpCode.create, false)); assertTrue("request hasn't been processed in chain", pLatch.await(5, TimeUnit.SECONDS)); String newMember = "server.0=localhost:" + PortAssignment.unique() + ":" + PortAssignment.unique() + ":participant"; record = new ReconfigRequest(null, null, newMember, 0); pLatch = new CountDownLatch(1); processor.pRequest(createRequest(record, OpCode.reconfig, true)); assertTrue("request hasn't been processed in chain", pLatch.await(5, TimeUnit.SECONDS)); assertEquals(outcome.getHdr().getType(), OpCode.reconfig);
public void nullResultsForNullTable() throws Exception { assertQueryResults("", fitnesse.util.ListUtility.list(), "[" +
public <T> T redirectTo(final Class<T> type) { return proxifier.proxify(type, new MethodInvocation<T>() { public Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {
private void connectNewPeers(QuorumCnxManager qcm){ if (quorumVerifier != null && lastSeenQuorumVerifier != null) { Map<Long, QuorumServer> committedView = quorumVerifier.getAllMembers();
public void submitRequest(Request si) { enqueueRequest(si); }
public String getHtml() throws Exception { return processHTMLWidgets(getContent(), wikiPage); }
public void visitIntInsn(final int opcode, final int operand) { buf.setLength(0); buf.append("mv.visitIntInsn(").append(OPCODES[opcode]).append(", ").append( opcode == Opcodes.NEWARRAY ? TYPES[operand] : Integer.toString(operand)).append(");\n"); text.add(buf.toString()); }
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
public void methodReturnsVoid() throws Exception { String retval = caller.call("testSlim", "nilad"); assertEquals("VOID", retval); }
public void start() { } static private void recursiveDelete(File dir) { if (!dir.isDirectory()) { dir.delete(); return; } for(File f: dir.listFiles()) { recursiveDelete(f); } dir.delete(); } public void stop() { if (LOG.isDebugEnabled()) { LOG.debug("Stopping peer " + serverId); } if (peer != null) { peer.shutdown(); } if (logDir != null) { recursiveDelete(logDir); } if (snapDir != null) { recursiveDelete(snapDir); } }  public static String[] createServer(InstanceManager im, int i) throws NoAvailableContainers, DuplicateNameException, InterruptedException, KeeperException { return createServer(im, i, true); }  public static String[] createServer(InstanceManager im, int i, boolean leaderServes) throws NoAvailableContainers, DuplicateNameException, InterruptedException, KeeperException { im.assignInstance("server"+i, QuorumPeerInstance.class, Integer.toString(i) + " " + leaderServes, 50); return im.getStatus("server"+i, 3000).split(","); }  public static void startInstance(InstanceManager im, String quorumHostPort, int index) throws InterruptedException, KeeperException, NoAssignmentException { im.resetStatus("server" + index); im.reconfigureInstance("server"+index, quorumHostPort + " start"); im.getStatus("server" + index, 5000); }  public static void stopInstance(InstanceManager im, int index) throws InterruptedException, KeeperException, NoAssignmentException { im.resetStatus("server" + index); im.reconfigureInstance("server"+index, Integer.toString(index) + " stop"); im.getStatus("server" + index, 3000); } }
private void includeSuiteTeardownPage() throws Exception { include(PageData.SUITE_TEARDOWN_NAME, "-teardown"); }
private void multipart() { if (!isMultipart) { isMultipart = true;
<T> T redirectTo(Class<T> controller);  <T> T of(Class<T> controller);  <T> T redirectTo(T controller);  <T> T forwardTo(T controller);  <T> T of(T controller);  void nothing();  void notFound();  void permanentlyRedirectTo(String uri);  <T> T permanentlyRedirectTo(Class<T> controller);  <T> T permanentlyRedirectTo(T controller); }
public Value ternaryOperation(final AbstractInsnNode insn, final Value value1, final Value value2, final Value value3) { return new SourceValue(1, insn); }
private void registerRequestScopedComponentsOn(DefaultListableBeanFactory beanFactory) { registerOn(beanFactory, RequestResult.class); registerOn(beanFactory, ParametersInstantiatorInterceptor.class); registerOn(beanFactory, DefaultMethodParameters.class); registerOn(beanFactory, DefaultRequestParameters.class); registerOn(beanFactory, InterceptorListPriorToExecutionExtractor.class); registerOn(beanFactory, URLParameterExtractorInterceptor.class); registerOn(beanFactory, DefaultInterceptorStack.class); registerOn(beanFactory, DefaultRequestExecution.class); registerOn(beanFactory, ResourceLookupInterceptor.class); registerOn(beanFactory, InstantiateInterceptor.class); registerOn(beanFactory, DefaultResult.class); registerOn(beanFactory, ExecuteMethodInterceptor.class); registerOn(beanFactory, DefaultPageResult.class); registerOn(beanFactory, ForwardToDefaultViewInterceptor.class); registerOn(beanFactory, DefaultLogicResult.class); registerOn(beanFactory, OgnlParametersProvider.class); registerOn(beanFactory, DefaultRequestInfo.class); registerOn(beanFactory, DefaultValidator.class); registerOn(beanFactory, VRaptorRequestProvider.class, true); registerOn(beanFactory, HttpServletRequestProvider.class, true); registerOn(beanFactory, HttpServletResponseProvider.class, true); registerOn(beanFactory, HttpSessionProvider.class, true); beanFactory.registerSingleton(SpringBasedContainer.class.getName(), container);
public void shouldBeAbleToConvertByOrdinal() { assertThat((MyCustomEnum) converter.convert("1", MyCustomEnum.class, errors, bundle), is(equalTo(MyCustomEnum.SECOND))); }
public void checking(ExpectationBuilder expectations) { mockery.checking(expectations); }
void header(String key, String value); void methodNotAllowed(EnumSet<HttpMethod> allowedMethods);  void notModified();  void movedPermanentlyTo(String url);  <T> T movedPermanentlyTo(Class<T> controller);  void unsupportedMediaType(String errorMessage);  void notAcceptable();  void accepted(); }
public void setup() { this.mockery = new Mockery(); this.builder = mockery.mock(MethodLookupBuilder.class); final MutableRequest webRequest = mockery.mock(MutableRequest.class); final HttpServletResponse webResponse = mockery.mock(HttpServletResponse.class); final RequestInfo request = new RequestInfo(null, webRequest, webResponse); this.picoContainer = new PicoBuilder().withCaching().build(); mockery.checking(new Expectations() { { one(builder).lookupFor(with(VRaptorMatchers.resource(VRaptorInfo.class))); } }); this.container = new PicoBasedContainer(picoContainer, request, new DefaultResourceRegistry(builder)); }
public void testCnxManagerListenerThreadConfigurableRetry() throws Exception { final Map<Long,QuorumServer> unresolvablePeers = new HashMap<>(); final long myid = 1L; unresolvablePeers.put(myid, new QuorumServer(myid, "unresolvable-domain.org:2182:2183;2181")); final QuorumPeer peer = new QuorumPeer(unresolvablePeers, ClientBase.createTmpDir(), ClientBase.createTmpDir(), 2181, 3, myid, 1000, 2, 2, 2); final QuorumCnxManager cnxManager = peer.createCnxnManager(); final QuorumCnxManager.Listener listener = cnxManager.listener; final AtomicBoolean errorHappend = new AtomicBoolean(); listener.setSocketBindErrorHandler(() -> errorHappend.set(true)); listener.start();
public void testSkip_HitEnd() throws Exception { for (int i = 0; i < DATA_BYTES.length - 1; i++) { in.read(); } assertEquals(1L, in.skip(2L)); assertEquals(-1, in.read()); }
private void givenTestSystem(String testSystem) { whenTestSystemLookedUp().thenReturn(new Maybe<>(testSystem)); }
public void LoadData(Context ctx, String filename, String password, String keyfile) throws IOException, InvalidKeyFileException, FileNotFoundException, InvalidPasswordException, InvalidDBSignatureException, Kdb4Exception, InvalidDBVersionException { LoadData(ctx, filename, password, keyfile, new UpdateStatus(), !Importer.DEBUG); }
public boolean isGroupSearchable(PwGroup group, boolean omitBackup) { return group != null; }
private ScopedBindingBuilder bindToConstructor(Class requiredType, Class componentType) { if (componentType.isAnnotationPresent(Cacheable.class)) { return binder.bind(requiredType).annotatedWith(Cacheable.class).toConstructor(componentType.getDeclaredConstructors()[0]); } return binder.bind(requiredType).toConstructor(componentType.getDeclaredConstructors()[0]); }
final private int jj_ntk() { if ((jj_nt=token.next) == null) return (jj_ntk = (token.next=token_source.getNextToken()).kind);
public void errorOccured() { } public void newTestStarted(WikiPage test, TimeMeasurement timeMeasurement) throws Exception { } public void setExecutionLogAndTrackingId(String stopResponderId, CompositeExecutionLog log) throws Exception { } public void testComplete(WikiPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws Exception { System.out.println(new WikiPagePath(test).toString() + " r " + testSummary.right + " w " + testSummary.wrong + " " + testSummary.exceptions); } public void testOutputChunk(String output) throws Exception { } public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { } }
private static String removeUnprocessedLiterals(String cellText) { Matcher matcher = PreProcessorLiteralWidget.pattern.matcher(cellText); while (matcher.find()) { String replacement = matcher.group(1); cellText = cellText.replace(matcher.group(), replacement); } return cellText; }
public void shouldCallMethodOnInstallLibraryWhenMethodIsNotFoundInAFixture() { createFixtureInstance(echoLibraryName()); FileSupport library = createFileSupportLibrary(); assertNotNull(library); Object result = statementExecutor.call(INSTANCE_NAME, "delete", "filename.txt"); assertEquals(voidMessage(), result); assertTrue(library.deleteCalled()); }
public void translatesTodays() { ParserTestHelper.assertTranslatesTo("!today", "04 Mar, 2002"); ParserTestHelper.assertTranslatesTo("!today -t", "04 Mar, 2002 15:06"); ParserTestHelper.assertTranslatesTo("!today -xml", "2002-03-04T15:06:07"); ParserTestHelper.assertTranslatesTo("!today (MMM)", "Mar"); ParserTestHelper.assertTranslatesTo("!today (dd MMM)", "04 Mar"); ParserTestHelper.assertTranslatesTo("!today (dd MMM" , "04 Mar"); ParserTestHelper.assertTranslatesTo("!today -t.", "04 Mar, 2002 15:06."); ParserTestHelper.assertTranslatesTo("!today -xml.", "2002-03-04T15:06:07."); ParserTestHelper.assertTranslatesTo("!today (MMM" , "Mar"); }
private String pageDescription(PageResult result) { String description = result.title(); if ("".equals(description)) description = "The test"; return description; }
public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) { this.testSystem = testSystem; }
public void iinc(final int local, final int amount) { mv.visitIincInsn(local, amount); }
public <T> Future<T> decode(final Transcoder<T> tc, final CachedData cachedData) { TranscodeService.Task<T> task = new TranscodeService.Task<T>(new Callable<T>() { public T call() { return tc.decode(cachedData); } }); if (tc.asyncDecode(cachedData)) { this.pool.execute(task); } return task; }
protected String contentFrom(FitNesseContext context, Request request, WikiPage requestedPage) { return prepareResponseDocument(context).html(); }
public void receivedStatus(OperationStatus status) { for (GetOperation.Callback c : allCallbacks) { c.receivedStatus(status);
void stop();  Request prepare(ResourceMethod method, HttpServletRequest request, HttpServletResponse response);  <T> T instanceFor(Class<T> type); }
private String render(boolean isSuite) throws Exception { this.isSuite = isSuite; if (isTestPage()) includeSetupAndTeardownPages(); return pageData.getHtml(); }
public void returnsNullWhenInstantiatingAStringForWhichThereAreNoParameters() throws Exception { thereAreNoParameters(); final ResourceMethod method = string; Object[] params = provider.getParametersFor(method, errors, null); assertArrayEquals(new Object[] {null}, params); }
private String cacheMapToString(Map<File, File> cacheMap) throws Exception { String analysisMap = ""; boolean addComma = false; for (Map.Entry<File, File> entry : cacheMap.entrySet()) { if (addComma) analysisMap += ","; analysisMap += entry.getKey().getAbsolutePath(); analysisMap += ":"; analysisMap += entry.getValue().getAbsolutePath(); addComma = true; } return analysisMap; }
public void testAddChildPageWithMissingParent() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("WikiMail.BadSubject0123"), ""); assertNotNull(page); assertEquals("BadSubject0123", page.getName()); assertEquals(PathParser.parse("WikiMail.BadSubject0123"), crawler.getFullPath(page)); }
public void addOperation(int which, Operation o) { QueueAttachment qa=connections[which]; o.initialize(); qa.addOp(o); addedQueue.offer(qa); Selector s=selector.wakeup(); assert s == selector : "Wakeup returned the wrong selector."; getLogger().debug("Added %s to %d", o, which); }
private void setSockOpts(Socket sock) throws SocketException { sock.setTcpNoDelay(true); sock.setKeepAlive(tcpKeepAlive); sock.setSoTimeout(this.socketTimeout); }
public abstract List<String> getChildren(String nodePath); }
public void tearDown() throws Exception { ct.tearDownAll(); qb.tearDown(); }
private void checkPageOneRedirectToProperties(Response response) { assertEquals(303, response.getStatus()); assertEquals(response.getHeader("Location"), "/PageOne?properties"); }
<T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key, int hold); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
private String parseOption(Matcher match) { return match.group(1); }
private boolean isSlim(PageData pageData) throws Exception { String testSystem = pageData.getVariable("TEST_SYSTEM"); boolean isSlim = "slim".equalsIgnoreCase(testSystem); return isSlim; }
void start() throws IOException; Map<String, Object> invokeAndGetResponse(List<Instruction> statements) throws IOException; void connect() throws IOException; void bye() throws IOException; void kill() throws IOException; ExecutionLogListener getExecutionLogListener(); }
public String toHtml(Translator translator, Symbol symbol) { String user = translator.getPage().getProperty(PageData.LAST_MODIFYING_USER); String date = translator.getPage().getProperty(PageData.PropertyLAST_MODIFIED); return translator.formatMessage( "Last modified " +
public void fromGarbageString_shouldCreateEmptyMap() throws Exception { assertConvertsTo("sdfwewdfsdfwefsdfsdfswe", list()); }
public void doCommit(PageData data) throws Exception { data.setLastModificationTime(new Date()); saveContent(data.getContent()); saveAttributes(data.getProperties()); PageVersionPruner.pruneVersions(this, loadVersions()); }
public void error() throws Exception { assertTableResults("|2|4|\n", ListUtility.<Object>list(
public void addNotMyVbucketNode(MemcachedNode node) { notMyVbucketNodes.add(node); }
protected HashEntry createEntry(HashEntry next, int hashCode, Object key, Object value) { return new ReferenceEntry(this, next, hashCode, key, value); }
public void testFixTrailersNone() throws ParseException { String setUpHtml = "<html><title>setup</title><body>"+ "<table><tr><td>SetUp</td></tr></table>"+ "</body></html>"; Parse setUp2 = new Parse(setUpHtml); ParseUtility.fixTrailers(setUp2,tables); assertEquals("<html><title>setup</title><body>"+ "<table><tr><td>SetUp</td></tr></table>", setUp2); assertEquals("<html><title>table</title><body>"+ "t1<table><tr><td>Test</td></tr></table>t2"+
public void testValues() { final SimpleCounterSet simpleCounterSet = createSimpleCounterSetAddData("test1"); final Map<String, Object> values = simpleCounterSet.values(); assertEquals(2, values.size()); assertEquals(30L , values.get("key1_test1")); assertEquals(70L , values.get("key2_test1")); }
public void finishedUpgrading(long sessionId) { if (upgradingSessions != null) { upgradingSessions.remove(sessionId);
public void DirectoryOfDirectoryOfHtmlFilesIsExternalSuitePage() throws Exception { fileSystem.makeFile("./somepath/ExternalSuite/subsuite/myfile.html", "stuff"); WikiPage page = rootPage.createChildPage("ExternalSuite"); assertEquals(ExternalSuitePage.class, page.getClass()); }
public void shouldNotComplainAboutEmpty() { assertThat(converter.convert("", BigDecimal.class, bundle), is(nullValue())); }
private void distributedStartClient(int index) throws IOException { try { im.assignInstance("client" + index, clazz, index + " " + params, 1);
public void testResponse() throws Exception { createBasicPage(); final MockRequest request = new MockRequest(); request.setResource("ChildPage"); final Responder responder = new WikiPageResponder(); final SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); assertEquals(200, response.getStatus()); final String body = response.getContent(); assertBasicContent(response, body); }
public SignatureVisitor visitClassBound() { v.visitClassBound(); return this; }
private boolean sameNameAsId(String id, Method method) { return ("/" + method.getName()).equals(id); }
public void testExecutionStatusErrorHasPriority() throws Exception { doSimpleRun(errorWritingTable("blah") + crashFixtureTable()); assertEquals("Errors Occurred", getExecutionStatusMessage()); }
private void acceptOne() throws IOException { Socket socket = serverSocket.accept(); handle(socket); }
public static void completeTrailer(Parse tables) { Parse last = tables.last(); int index = last.trailer.indexOf(END_BODY); if (index < 0) last.trailer += "\n</body></html>\n";
public void testFinalKey() throws PwManagerOutputException { ByteArrayOutputStream bActual = new ByteArrayOutputStream(); PwManagerOutput pActual = new PwManagerOutput(mPM, bActual, mCal, PwManagerOutput.DEBUG); PwDbHeader hActual = pActual.outputHeader(bActual); byte[] finalKey = pActual.getFinalKey2(hActual); assertArrayEquals("Keys mismatched", mPM.finalKey, finalKey);
public void doExecuteTests() throws Exception { sendPreTestNotification(); performExecution(); exitCode = formatters.getErrorCount(); }
public void register(Resource... resources) { for (Resource resource : resources) { this.lookup.add(lookupBuilder.lookupFor(resource));
public void commandStarted(ExecutionContext context) { System.out.println(context.getTestSystemName()); System.out.println(context.getCommand()); }
public void testFindJustObsoletePages() throws Exception { MockRequest request = setupRequestForObsoletePage(); request.addInput(PAGE_TYPE_ATTRIBUTE, "Test,Suite,Static"); request.addInput(SPECIAL, "obsolete"); String content = invokeResponder(request); String[] titles = { "ObsoletePage" }; assertOutputHasRowWithLink(content, titles);
public void run() { try { currentInterval = Time.currentElapsedTime() / INTERVAL;
public boolean shouldRun(long time) throws Exception { return true; }
public void shouldSerializeCalendarLikeXstream() { GsonJSONSerialization serialization = serializationWithAdapter(new CalendarSerializer()); Client c = new Client("renan"); c.included = new GregorianCalendar(2012, 8, 3); serialization.from(c).serialize(); String result = result(); String expectedResult = "{\"client\":{\"name\":\"renan\",\"included\":{\"time\":\"" + c.included.getTimeInMillis() + "\",\"timezone\":\"" + c.included.getTimeZone().getID() + "\"}}}"; assertThat(result, is(equalTo(expectedResult))); }
public void processResult(int rc, String path, Object ctx, byte data[], Stat stat); } interface ACLCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, List<ACL> acl, Stat stat); } interface ChildrenCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, List<String> children); } interface Children2Callback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, List<String> children, Stat stat); } interface StringCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, String name); } interface VoidCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx); } }
public void testExtraTextIdPrinted() throws Exception { super.testExtraTextIdPrinted(); }
private void verifyIncludingVariables(String option) throws Exception { crawler.addPage(root, PathParser.parse("VariablePage"), "This is VariablePage\n!define X {blah!}\n"); crawler.addPage(root, PathParser.parse("IncludingPage")); WidgetRoot widgetRoot = new WidgetRoot("This is IncludingPage\n" + "!include " + option + ".VariablePage\nX=${X}", root.getChildPage("IncludingPage"), WidgetBuilder.htmlWidgetBuilder); String content = widgetRoot.render(); assertHasRegexp("X=blah!", content); }
VersionInfo makeVersion(FileSystemPage page, PageData data); void removeVersion(FileSystemPage page, String versionName); }
public String makeHtml(FitNesseContext context) throws Exception { WikiPage page = pageData.getWikiPage(); HtmlPage html = context.htmlPageFactory.newPage(); WikiPagePath fullPath = page.getPageCrawler().getFullPath(page); String fullPathName = PathParser.render(fullPath); html.title.use(fullPathName); html.header.use(HtmlUtil.makeBreadCrumbsWithCurrentPageNotLinked(fullPathName)); html.header.add("<a style=\"font-size:small;\" onclick=\"popup('addChildPopup')\"> [add child]</a>"); html.actions.use(HtmlUtil.makeActions(page.getActions())); SetupTeardownIncluder.includeInto(pageData); html.main.use(generateHtml(pageData)); VelocityContext velocityContext = new VelocityContext(); velocityContext.put("page_name", page.getName()); velocityContext.put("full_path", fullPathName); html.main.add(context.translateTemplate(velocityContext, "addChildPagePopup.vm")); handleSpecialProperties(html, page); return html.html(); }
public void invokeInterface(final Type owner, final Method method) { invokeInsn(Opcodes.INVOKEINTERFACE, owner, method); }
private void interactForPassword() throws Exception { while(password == null) {
private Object tryToInvokeMethod(Object instance, String methodName, Object args[]) throws Exception { Class k = instance.getClass(); Method method = findMatchingMethod(methodName, k, args.length); Object convertedArgs[] = convertArgs(method, args); Object retval = method.invoke(instance, convertedArgs); Class retType = method.getReturnType(); if (retType == List.class && retval instanceof List) return retval; return convertToString(retval, retType); }
public static PublicKey loadPublicKey(File publicKeyFile) throws IOException, GeneralSecurityException { String publicKey = new String(Files.readAllBytes(publicKeyFile.toPath()), US_ASCII); return loadPublicKey(publicKey); }
public AnnotationVisitor visitParameterAnnotation(final int parameter, final String desc, final boolean visible) { cp.newUTF8(desc); if (visible) { cp.newUTF8("RuntimeVisibleParameterAnnotations"); } else { cp.newUTF8("RuntimeInvisibleParameterAnnotations"); } return new AnnotationConstantsCollector(mv.visitParameterAnnotation(parameter, desc, visible), cp); }
public void shouldAddInterceptorsInOrder() throws InterceptionException, IOException { execution.execute(); InOrder order = inOrder(stack); order.verify(stack).add(MultipartInterceptor.class); order.verify(stack).add(ResourceLookupInterceptor.class); order.verify(stack).add(FlashInterceptor.class); order.verify(stack).add(InterceptorListPriorToExecutionExtractor.class); order.verify(stack).add(instantiator); order.verify(stack).add(ParametersInstantiatorInterceptor.class); order.verify(stack).add(DeserializingInterceptor.class); order.verify(stack).add(ExecuteMethodInterceptor.class); order.verify(stack).add(OutjectResult.class); order.verify(stack).add(DownloadInterceptor.class); order.verify(stack).add(ForwardToDefaultViewInterceptor.class); order.verify(stack).next(null, null); }
public void warn(String message) { task.log(message, Project.MSG_WARN); }
public void produce( final DataConsumer pReceiver ) throws IOException { org.vafer.jdeb.mapping.Mapper[] mappers = null; if (mapper != null) { mappers = new org.vafer.jdeb.mapping.Mapper[] { mapper.createMapper() }; }
public void safeOpenComplete(int rc, LedgerHandle ledgerHandle, Object ctx) { if (rc == BKException.Code.OK) { imlr.handle = ledgerHandle; read(imlr, startSeqId, endSeqId); return; } BKException bke = BKException.create(rc); logger.error("Could not open ledger: " + imlr.range.getLedgerId() + " for topic: " + topic); request.callback.scanFailed(ctx, new PubSubException.ServiceDownException(bke)); return; }
public void visitSource(final String source, final String debug) { AttributesImpl att = new AttributesImpl(); if (source != null) { att.addAttribute("", "file", "file", "", encode(source)); } if (debug != null) { att.addAttribute("", "debug", "debug", "", encode(debug)); } addElement("source", att); }
public void jump(Dog dog, Integer times) { } public void dropDead(Integer times, Dog dog) { } } @Test(expected=IllegalArgumentException.class) public void shouldNotAcceptMethodsWithoutArguments() throws Exception { deserializer.deserialize(new ByteArrayInputStream(new byte[0]), woof); } @Test public void shouldBeAbleToDeserializeADog() throws Exception { InputStream stream = new ByteArrayInputStream("<dog><name>Brutus</name><age>7</age></dog>".getBytes()); when(provider.parameterNamesFor(bark.getMethod())).thenReturn(new String[] {"dog"}); Object[] deserialized = deserializer.deserialize(stream, bark); assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(Dog.class))); Dog dog = (Dog) deserialized[0]; assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7)); } @Test public void shouldBeAbleToDeserializeADogWhenMethodHasMoreThanOneArgument() throws Exception { InputStream stream = new ByteArrayInputStream("<dog><name>Brutus</name><age>7</age></dog>".getBytes()); when(provider.parameterNamesFor(jump.getMethod())).thenReturn(new String[] {"dog", "times"}); Object[] deserialized = deserializer.deserialize(stream, jump); assertThat(deserialized.length, is(2)); assertThat(deserialized[0], is(instanceOf(Dog.class))); Dog dog = (Dog) deserialized[0]; assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7)); } @Test public void shouldBeAbleToDeserializeADogWhenMethodHasMoreThanOneArgumentAndTheXmlIsTheLastOne() throws Exception { InputStream stream = new ByteArrayInputStream("<dog><name>Brutus</name><age>7</age></dog>".getBytes()); when(provider.parameterNamesFor(dropDead.getMethod())).thenReturn(new String[] {"times", "dog"}); Object[] deserialized = deserializer.deserialize(stream, dropDead); assertThat(deserialized.length, is(2)); assertThat(deserialized[1], is(instanceOf(Dog.class))); Dog dog = (Dog) deserialized[1]; assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7)); } @Test public void shouldBeAbleToDeserializeADogNamedDifferently() throws Exception { InputStream stream = new ByteArrayInputStream("<pet><name>Brutus</name><age>7</age></pet>".getBytes()); when(provider.parameterNamesFor(bark.getMethod())).thenReturn(new String[] {"pet"}); Object[] deserialized = deserializer.deserialize(stream, bark); assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(Dog.class))); Dog dog = (Dog) deserialized[0]; assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7)); } }
private boolean askForFix(Scanner scanner) throws TxnLogToolkitException { while (true) { System.out.print("Would you like to fix it (Yes/No/Abort) ? ");
public void compress(Writer out, int linebreakpos) throws IOException { Pattern p; Matcher m; String css; StringBuffer sb; int startIndex, endIndex;
public void testPagesForTestSystemAreSurroundedBySuiteSetupAndTeardown() throws Exception { WikiPage slimPage = addTestPage(suite, "AaSlimTest", simpleSlimDecisionTable); WikiPage setUp = crawler.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = crawler.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); testPages = new LinkedList<WikiPage>(); testPages.add(setUp); testPages.add(slimPage); testPages.add(testPage); testPages.add(tearDown); MultipleTestsRunner runner = new MultipleTestsRunner(testPages, context, suite, null); Map<TestSystem.Descriptor, LinkedList<WikiPage>> map = runner.makeMapOfPagesByTestSystem(); TestSystem.Descriptor fitDescriptor = TestSystem.getDescriptor(testPage.getData(), false); TestSystem.Descriptor slimDescriptor = TestSystem.getDescriptor(slimPage.getData(), false); List<WikiPage> fitList = map.get(fitDescriptor); List<WikiPage> slimList = map.get(slimDescriptor); assertEquals(3, fitList.size()); assertEquals(3, slimList.size()); assertEquals(setUp, fitList.get(0)); assertEquals(testPage, fitList.get(1)); assertEquals(tearDown, fitList.get(2)); assertEquals(setUp, slimList.get(0)); assertEquals(slimPage, slimList.get(1)); assertEquals(tearDown, slimList.get(2)); }
public void cleanUp() { Security.removeProvider("BC"); System.clearProperty("zookeeper.admin.enableServer"); System.clearProperty("zookeeper.admin.serverPort"); System.clearProperty("zookeeper.ssl.quorum.keyStore.location"); System.clearProperty("zookeeper.ssl.quorum.keyStore.password"); System.clearProperty("zookeeper.ssl.quorum.keyStore.type"); System.clearProperty("zookeeper.ssl.quorum.trustStore.location"); System.clearProperty("zookeeper.ssl.quorum.trustStore.password"); System.clearProperty("zookeeper.ssl.quorum.trustStore.type"); System.clearProperty("zookeeper.admin.portUnification"); System.clearProperty("zookeeper.admin.forceHttps"); }
Extension getExtension(String extensionName); String getHelpText(); boolean isOpenInNewWindow(); }
public void snapshot() throws InterruptedException { long lastZxid = dataTree.lastProcessedZxid; ZooLog.logTextTraceMessage( "Snapshotting: " + Long.toHexString(lastZxid), ZooLog.textTraceMask); try { File f =new File(dataDir, "snapshot." + Long.toHexString(lastZxid));
private void iteration(Set<Class<? extends Interceptor>> keys, List<Class<? extends Interceptor>> list) { if (keys.isEmpty()) { return; } Set<Class<? extends Interceptor>> roots = difference(keys, newHashSet(graph.values())).immutableCopy(); Preconditions.checkState(!roots.isEmpty(), "Cycle!"); for (Class<? extends Interceptor> root : roots) { list.add(root); graph.removeAll(root); } iteration(graph.keySet(), list); }
public static void printUsage() { System.out .print("Usage:\tjava -cp ... com.yahoo.zookeeper.Version " + "[--full | --short | --revision],\n\tPrints --full version " + "info if no arg specified."); System.exit(1); }
private Attribute readAttribute( final Attribute[] attrs, final String type, final int off, final int len, final char[] buf, final int codeOff, final Label[] labels) { for (int i = 0; i < attrs.length; ++i) { if (attrs[i].type.equals(type)) { return attrs[i].read(this, off, len, buf, codeOff, labels); } } return new Attribute(type).read(this, off, len, null, -1, null); }
public void testStarted(TestPage testPage) { } @Override public void testComplete(TestPage testPage, TestSummary testSummary) { } @Override public void testSystemStopped(TestSystem testSystem, Throwable throwable) { } @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) { } @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) { } } }
String getCurrentZxid();  String followerInfo();  String nonVotingFollowerInfo();  long getElectionTimeTaken();  int getLastProposalSize();  int getMinProposalSize();  int getMaxProposalSize();  void resetProposalStatistics();  int getMaxConcurrentSnapSyncs();  void setMaxConcurrentSnapSyncs(int maxConcurrentSnapSyncs);  int getMaxConcurrentDiffSyncs();  void setMaxConcurrentDiffSyncs(int maxConcurrentDiffSyncs); }
public void start() throws IOException, SlimVersionMismatch { commandStarted(); PipedInputStream socketInput = new PipedInputStream(); clientOutput = new PipedOutputStream(socketInput); PipedInputStream clientInput = new PipedInputStream(); PipedOutputStream socketOutput = new PipedOutputStream(clientInput); reader = new SlimStreamReader(clientInput); socket = new MockSocket(socketInput, socketOutput);
private boolean closeSession(ServerCnxnFactory serverCnxnFactory, long sessionId) { if (serverCnxnFactory == null) { return false; } return serverCnxnFactory.closeSession(sessionId); }
String genCsharpReadMethod(String fname, String tag) {
public void setUp() throws Exception { ZipFileVersionsController versionsController = new ZipFileVersionsController(MAX_HISTORY_DEPTH); FileSystemPageFactory fileSystemPageFactory = new FileSystemPageFactory(new DiskFileSystem(), versionsController); root = fileSystemPageFactory.makePage(new File("TestDir/RooT"), "RooT", null, new SystemVariableSource()); page = (FileSystemPage) WikiPageUtil.addPage(root, PathParser.parse("PageOne"), "original content"); PageData data = page.getData(); firstVersion = VersionInfo.makeVersionInfo(data); secondVersion = page.commit(data); }
private void validateResponseHeaders(final HttpURLConnection conn) { LOG.info("Header:{}, Value:{}", Commands.SnapshotCommand.RESPONSE_HEADER_LAST_ZXID, conn.getHeaderField(Commands.SnapshotCommand.RESPONSE_HEADER_LAST_ZXID)); assertNotNull(conn.getHeaderField(Commands.SnapshotCommand.RESPONSE_HEADER_LAST_ZXID)); LOG.info("Header:{}, Value:{}", Commands.SnapshotCommand.RESPONSE_HEADER_SNAPSHOT_SIZE, conn.getHeaderField(Commands.SnapshotCommand.RESPONSE_HEADER_SNAPSHOT_SIZE)); assertNotNull(conn.getHeaderField(Commands.SnapshotCommand.RESPONSE_HEADER_SNAPSHOT_SIZE)); assertTrue(Integer.parseInt(conn.getHeaderField(Commands.SnapshotCommand.RESPONSE_HEADER_SNAPSHOT_SIZE)) > 0); }
public String readClass(final int index, final char[] buf) {
public void testStarted(WikiTestPage test) { } @Override public void testOutputChunk(String output) { } @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) { } @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) { } @Override public void testComplete(WikiTestPage test, TestSummary testSummary) { } }
public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) { testSystemFullName = (testSystemName + ":" + testRunner).replaceAll("\\\\", "/"); String tag = String.format("<h3>%s</h3>\n", testSystemFullName); HtmlTag insertScript = HtmlUtil.makeAppendElementScript(TEST_SUMMARIES_ID, tag); writeData(insertScript.html());
public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) { return null; }
ExecutorService chooseThread(Object orderingKey) {
protected void addTestSystemListeners(RunNotifier notifier, MultipleTestsRunner testRunner, Class<?> suiteClass, DescriptionFactory descriptionFactory) { assertEquals("Wrong description factory provided to listener", myDescriptionFactory, descriptionFactory); testRunner.addTestSystemListener(new ListenerExtension(notifier, suiteClass, descriptionFactory)); }
private boolean needEraseClientInfoFromStaticConfig() { QuorumServer server = quorumVerifier.getAllMembers().get(getId()); return (server != null && server.clientAddr != null && !server.isClientAddrFromStatic); }
public void output() throws IOException {
public void testPrunesSuites() throws Exception { SuiteFilter filter = new SuiteFilter(null, null, null, null); WikiPage prunedSuite = pageBuilder.addPage(root, PathParser.parse("MySuite"), "the suite"); PageData data = prunedSuite.getData(); data.setAttribute(PageData.PropertyPRUNE); data.setAttribute("Suite"); prunedSuite.commit(data); assertFalse(filter.getFilterForTestsInSuite(prunedSuite).hasMatchingTests()); assertTrue(filter.getFilterForTestsInSuite(root).hasMatchingTests()); }
static String extractTextFromHeaderLine(final Symbol headerLine) { final StringBuilder sb = new StringBuilder(); headerLine.walkPreOrder(node -> { if (node.isType(SymbolType.Text) || node.isType(Literal.symbolType) || node.isType(Whitespace)) { sb.append(node.getContent()); } }); return sb.toString(); }
public void testComplete(WikiTestPage test, TestSummary testSummary) throws IOException { testHistoryFormatter.testComplete(test, testSummary); testHistoryFormatter.close(); testHistoryFormatter = null; timeMeasurement.stop(); referenceToCurrentTest.setTestSummary(testSummary); referenceToCurrentTest.setRunTimeInMillis(timeMeasurement.elapsed()); suiteExecutionReport.addPageHistoryReference(referenceToCurrentTest); suiteExecutionReport.tallyPageCounts(ExecutionResult.getExecutionResult(test.getName(), testSummary)); super.testComplete(test, testSummary); }
public void shouldSerializeCollection() { String expectedResult = "<order>\n <price>15.0</price>\n <comments>pack it nicely, please</comments>\n</order>"; Order order = new Order(new Client("guilherme silveira"), 15.0, "pack it nicely, please"); serializer.from(order).serialize(); assertThat(result(), is(equalTo(expectedResult))); }
public abstract void bye() throws Exception; public abstract void send(String s) throws Exception; public abstract boolean isSuccessfullyStarted(); public abstract void kill() throws Exception; public abstract void start() throws Exception; public static class TestSummary { public int right = 0; public int wrong = 0; public int ignores = 0; public int exceptions = 0; public TestSummary(int right, int wrong, int ignores, int exceptions) { this.right = right; this.wrong = wrong; this.ignores = ignores; this.exceptions = exceptions; } public TestSummary() { } public String toString() { return right + " right, " + wrong + " wrong, " + ignores + " ignored, " + exceptions + " exceptions"; } public void tally(TestSummary source) { right += source.right; wrong += source.wrong; ignores += source.ignores; exceptions += source.exceptions; } public boolean equals(Object o) { if (o == null || !(o instanceof TestSummary)) return false; TestSummary other = (TestSummary) o; return right == other.right && wrong == other.wrong && ignores == other.ignores && exceptions == other.exceptions; } public void tallyPageCounts(TestSummary counts) { if (counts.wrong > 0) wrong += 1; else if (counts.exceptions > 0) exceptions += 1; else if (counts.ignores > 0 && counts.right == 0) ignores += 1; else right += 1; } } }
public void method(T entity) { System.out.println("Do Something"); }
static void checkSignedShort(final int value, final String msg) { if ((value < Short.MIN_VALUE) || (value > Short.MAX_VALUE)) { throw new IllegalArgumentException(msg + " (must be a signed short): " + value);
public void handleLine(String line) { getLogger().debug("Delete of %s returned %s", key, line); assert line.equals("DELETED") || line.equals("NOT_FOUND"); getCallback().receivedStatus(line); transitionState(OperationState.COMPLETE); }
public void credentialsShouldBeNonNullIfServiceNamePresent() throws Exception { properties.setProperty("NegotiateAuthenticator.serviceName", "service"); properties.setProperty("NegotiateAuthenticator.serviceNameType", "1.1"); properties.setProperty("NegotiateAuthenticator.mechanism", "1.2"); GSSName gssName = mock(GSSName.class); GSSCredential gssCredential = mock(GSSCredential.class); when(manager.createName(anyString(), (Oid) anyObject(), (Oid) anyObject())).thenReturn(gssName); when(manager.createCredential((GSSName) anyObject(), anyInt(), (Oid) anyObject(), anyInt())).thenReturn(gssCredential); NegotiateAuthenticator authenticator = new NegotiateAuthenticator(manager, properties); Oid serviceNameType = authenticator.getServiceNameType(); Oid mechanism = authenticator.getMechanism(); verify(manager).createName("service", serviceNameType, mechanism); assertEquals("1.1", serviceNameType.toString()); assertEquals("1.2", mechanism.toString()); verify(manager).createCredential(gssName, GSSCredential.INDEFINITE_LIFETIME, mechanism, GSSCredential.ACCEPT_ONLY); assertEquals(gssCredential, authenticator.getServerCredentials()); }
public void exitCode(int exitCode) { executionLogListener.exitCode(exitCode); }
public void describeTo(Description description) { description.appendText("continue stack"); }
public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat) {
public synchronized void shutdown() { if (!isRunning()) { LOG.debug("ZooKeeper server is not running, so not proceeding to shutdown!"); return; } shutdown = true; unregisterJMX(this);
public void testPad() throws Exception { File tmpDir = ClientBase.createTmpDir(); FileTxnLog txnLog = new FileTxnLog(tmpDir); TxnHeader txnHeader = new TxnHeader(0xabcd, 0x123, 0x123, Time.currentElapsedTime(), ZooDefs.OpCode.create); Record txn = new CreateTxn("/Test", new byte[0], null, false, 1); txnLog.append(txnHeader, txn); FileInputStream in = new FileInputStream(tmpDir.getPath() + "/log." + Long.toHexString(txnHeader.getZxid())); BinaryInputArchive ia = BinaryInputArchive.getArchive(in); FileHeader header = new FileHeader(); header.deserialize(ia, "fileheader"); LOG.info("Received magic : {} Expected : {}", header.getMagic(), FileTxnLog.TXNLOG_MAGIC); assertTrue(header.getMagic() == FileTxnLog.TXNLOG_MAGIC, "Missing magic number "); }
protected void setUp() throws Exception { super.setUp(); mPM = TestData.GetTest1();
public void addChildTable(SlimTable table, int row) throws Exception { table.id = id + "." + children.size(); table.tableName = table.tableName + "." + children.size(); table.parent = this; children.add(table); Table t = getTable(); t.appendCellToRow(row, table.getTable()); }
void processAck(long sid, long zxid, SocketAddress localSocketAddress);  void touch(long sess, int to);  void revalidateSession(QuorumPacket qp, LearnerHandler learnerHandler) throws IOException;  void submitLearnerRequest(Request si);  long startForwarding(LearnerHandler learnerHandler, long lastSeenZxid);  long getQuorumVerifierVersion();  String getPeerInfo(long sid);  byte[] getQuorumVerifierBytes(); QuorumAuthServer getQuorumAuthServer();  void registerLearnerHandlerBean(final LearnerHandler learnerHandler, Socket socket);  void unregisterLearnerHandlerBean(final LearnerHandler learnerHandler); }
public void testClasspath() throws Exception { WikiPage root = InMemoryPage.makeRoot("RooT"); WikiPage page = crawler.addPage(root, PathParser.parse("ClassPath"), "!path 123\n!path abc\n"); List paths = page.getData().getClasspaths(); assertTrue(paths.contains("123")); assertTrue(paths.contains("abc")); }
public ChannelFuture unbind() { throw new RuntimeException("Not intended"); }
public static void main(String[] args) throws Exception { FormattingOption option = new FormattingOption(); option.args(args); File inputFile = new File(option.resultFilename); FileInputStream input = new FileInputStream(inputFile); int byteCount = (int) inputFile.length(); option.process(input, byteCount); }
public boolean isAbleToInstantiate(Target<?> target) { return container.canProvide(target.getClassType()); }
public void testContextIsNotOrphanWhenUpdatingNonRoot() throws Exception { addLocalPageWithImportProperty(localRoot, "PageOne", false); importer.parseUrl("http://localhost:" + FitNesseUtil.port + "/PageOne"); importer.importWiki(pageOne); assertEquals(0, importer.getOrphans().size()); }
public void shouldBeAbleToConvertNull() { assertThat(converter.convert(null, LocalDateTime.class, bundle), is(nullValue())); }
public void whenNotFoundException() { mapper.record(IOException.class).forwardTo(DEFAULT_REDIRECT); ExceptionRecorder<Result> recorder = mapper.findByException(new RuntimeException(new IllegalStateException())); assertThat(recorder, Matchers.nullValue()); }
public void register(Class<?> requiredType, Class<?> componentType) { registry.register(requiredType, componentType); }
public void setup() { this.mockery = new VRaptorMockery(); this.container = mockery.mock(Container.class); this.registerContainer = mockery.mock(RegisterContainer.class); mockery.checking(new Expectations() { { allowing(registerContainer).register((Class)with(an(Class.class))); } }); this.converters = new DefaultConverters(registerContainer); }
public void process(WikiPage page) { foundPages.add(page); }
public ResourceMethod parse(String uri, HttpMethod method) { return null; }
public void testRunsAtIntervals() throws Exception { schedule.add(counter); schedule.start(); Thread.sleep(750); schedule.stop(); assertEquals(3, counter.count); }
protected String createEvaluationMessage(String value, String literalizedValue, String originalValue) { if (value.indexOf("Exception") != -1) return String.format("!style_fail(%s)", value);
protected void processCheckSum(byte[] m) { int L = C[15]; for (int i=0;i<16;i++) {
public void login(String login, String password) {
private void close() throws IOException { if (!closed) { buffer.append(tailBytes);
public void shouldForwardTestSystemOutputChunkEvent() throws IOException { TestSystemListener listener = mock(TestSystemListener.class); String chunk = "foobar"; MultipleTestsRunner runner = newTestRunnerWithListener(listener); runner.testOutputChunk(chunk); verify(listener).testOutputChunk(chunk); }
public WatcherOrBitSet triggerWatch(String path, Watcher.Event.EventType type, long zxid) { return new WatcherOrBitSet(Collections.emptySet()); }
synchronized void mute() { if (!mute) { LOG.info("Fire socket mute");
public void callerContextDifferentFromRequestedClassLoaderReturnsCurrentClassLoader() { ServletContext context = mock(ServletContext.class); when(context.getMajorVersion()).thenReturn(3); when(context.getClassLoader()).thenThrow(new SecurityException("getClassLoader")); WebBasedClasspathResolver resolver = new WebBasedClasspathResolver(context); assertEquals(resolver.getClassLoader(), Thread.currentThread().getContextClassLoader()); }
public long approximateDataSize() { long result = 0; for (Map.Entry<String, DataNode> entry : nodes.entrySet()) { result += entry.getKey().length(); result += entry.getValue().data.length; } return result; }
public void shouldBeAbleToFindAPageFromItsContent() throws Exception { finder = new SuiteSpecificationMatchFinder("","content",this); finder.search(root); assertPagesFound("TestPageOne","TestPageTwo"); }
public void newInstance(final Type type) { typeInsn(Opcodes.NEW, type); }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof Delete)) { return false; } Delete op = (Delete) o; return getType() == op.getType() && version == op.version && getPath().equals(op.getPath()); }
public void processResult(int rc, String path, Object ctx, List<OpResult> opResults) { this.rc = rc; this.opResults = opResults; latch.countDown(); }
private void assertTestResultsContain(String fragment) { assertTrue(testResults, testResults.indexOf(fragment) != -1); }
public void addRedirectListener(RedirectListener listener) { listeners.add(listener); }
public void testEmptyDirtyLedger() throws Exception { StubCallback<Void> stubCallback = new StubCallback<Void>(); bkpm.acquiredTopic(topic, stubCallback, null); assertNull(ConcurrencyUtils.take(stubCallback.queue).right());
public void shouldThrowExceptionIfFileIsNull() { when(request.getAttribute("myfile")).thenReturn(null); UploadedFileConverter converter = new UploadedFileConverter(request); converter.convert("myfile", UploadedFile.class, null); }
void queueEvent(String clientPath, int err, Set<Watcher> materializedWatchers, EventType eventType) { KeeperState sessionState = KeeperState.SyncConnected; if (KeeperException.Code.SESSIONEXPIRED.intValue() == err || KeeperException.Code.CONNECTIONLOSS.intValue() == err) { sessionState = Event.KeeperState.Disconnected; } WatchedEvent event = new WatchedEvent(eventType, sessionState, clientPath); eventThread.queueEvent(event, materializedWatchers); }
public void testTestReferencesToSubWiki_2() throws Exception { PageData data = subWiki.getData(); data.setContent("Stuff >PageTwo.DeepPage Stuff\n"); subWiki.commit(data); renamer = new PageReferenceRenamer(root, subWiki_pageTwo, "PageThree"); renamer.renameReferences(); String updatedSubWikiContent = subWiki.getData().getContent(); assertEquals("Stuff >PageThree.DeepPage Stuff\n", updatedSubWikiContent); }
public String lastModifiedOfPage(String pageName) throws Exception { WikiPage root = FitnesseFixtureContext.root; WikiPagePath pagePath = PathParser.parse(pageName); WikiPage thePage = root.getPageCrawler().getPage(root, pagePath); PageData data = thePage.getData(); return data.getAttribute(PageData.LAST_MODIFYING_USER); }
boolean isTimedOut();  boolean isTimedOut(long ttlMillis);  boolean isTimedOutUnsent(); }
public void ignoresNonPublicMethod() { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.ignorableStatic.logic", "ignorableStatic"), is(nullValue())); mockery.assertIsSatisfied(); }
void removeSession(long sessionId);  boolean isTrackingSession(long sessionId);  public void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  public void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap(); }
private String readContentsOfFile(File f) throws IOException { return new BufferedReader(new FileReader(f)).readLine(); }
public void testGetClassPathMultiLevel() throws Exception { WikiPage root = InMemoryPage.makeRoot("RooT"); WikiPageUtil.addPage(root, PathParser.parse("ProjectOne"), "!path path2\n" + "!path path 3"); WikiPageUtil.addPage(root, PathParser.parse("ProjectOne.TesT"), "!path path1"); PageCrawler pageCrawler = root.getPageCrawler(); String cp = builder.getClasspath(pageCrawler.getPage(PathParser.parse("ProjectOne.TesT"))); assertSubString("path1", cp); assertSubString("path2", cp); assertSubString("path 3", cp); }
public void addData( Data data ) { dataProducers.add(data); }
public boolean containsQuorum(HashSet<Long> set){ HashMap<Long, Long> expansion = new HashMap<Long, Long>();  if(set.size() == 0) return false; else LOG.debug("Set size: " + set.size()); for(long sid : set){ Long gid = serverGroup.get(sid); if(!expansion.containsKey(gid)) expansion.put(gid, serverWeight.get(sid)); else { long totalWeight = serverWeight.get(sid) + expansion.get(gid); expansion.put(gid, totalWeight); } }  int majGroupCounter = 0; for(long gid : expansion.keySet()) { LOG.debug("Group info: " + expansion.get(gid) + ", " + gid + ", " + groupWeight.get(gid)); if(expansion.get(gid) > (groupWeight.get(gid) / 2) ) majGroupCounter++; } LOG.debug("Majority group counter: " + majGroupCounter + ", " + numGroups); if((majGroupCounter > (numGroups / 2))){ LOG.debug("Positive set size: " + set.size());
Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, int def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key, int hold); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
public void verifyAddResetDelayCommands() {
protected void addPageContent(StringBuilder decoratedContent) { String content = parsedData().getContent(); decoratedContent .append("\n")
public void testElectionWIthDifferentVersion() { Map<Long, Vote> votes = new HashMap<>(); votes.put(0L, new Vote(0x1, 4L, ZxidUtils.makeZxid(1, 1), 1, 1, ServerState.FOLLOWING)); votes.put(1L, new Vote(0x1, 4L, ZxidUtils.makeZxid(1, 1), 1, 1, ServerState.FOLLOWING)); votes.put(3L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.FOLLOWING)); votes.put(4L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LEADING)); assertTrue(fle.getVoteTracker(votes, new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.FOLLOWING)).hasAllQuorums()); }
public void onHttpResultShouldThrowExceptionsOnSendError() throws Exception { HttpResult httpResult = mock(HttpResult.class); when(result.use(HttpResult.class)).thenReturn(httpResult); factory.instanceFor(HttpResult.class, errors).sendError(404); }
public int compareTo(MimeType mime) { return Double.compare(this.qualifier, mime.qualifier); }
public void testHeader() throws PwDbOutputException, IOException { ByteArrayOutputStream bActual = new ByteArrayOutputStream(); PwDbV3Output pActual = new PwDbV3OutputDebug(mPM, bActual); PwDbHeaderV3 header = pActual.outputHeader(bActual); ByteArrayOutputStream bExpected = new ByteArrayOutputStream(); PwDbHeaderOutputV3 outExpected = new PwDbHeaderOutputV3(mPM.dbHeader, bExpected); outExpected.output(); assertHeadersEquals(mPM.dbHeader, header); assertTrue("No output", bActual.toByteArray().length > 0); assertArrayEquals("Header does not match.", bExpected.toByteArray(), bActual.toByteArray()); }
protected TestableZooKeeper createClient(CountdownWatcher watcher, String hp, int timeout) throws IOException, InterruptedException { watcher.reset(); TestableZooKeeper zk = new TestableZooKeeper(hp, timeout, watcher); if (!watcher.clientConnected.await(timeout, TimeUnit.MILLISECONDS)) { if (exceptionOnFailedConnect) { throw new ProtocolException("Unable to connect to server"); } Assert.fail("Unable to connect to server"); } synchronized(this) { if (!allClientsSetup) { LOG.error("allClients never setup"); Assert.fail("allClients never setup"); } if (allClients != null) { allClients.add(zk); JMXEnv.ensureAll(getHexSessionId(zk.getSessionId())); } else {
public Cache<K, V> build() { return new Cache<K, V>() { private Map<K, SoftReference<CachedValue<V>>> cacheMap = new ConcurrentHashMap<K, SoftReference<CachedValue<V>>>();
void appendToCell(int col, int row, String message); int getRowCount(); int getColumnCountInRow(int rowIndex); String toString(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); }
public WikiPage makePage(final File path, final String pageName, final WikiPage parent, final VariableSource variableSource) { Maybe<String> rootPath = variableSource.findVariable("FITNESSE_ROOTPATH"); return new WikiFilePage(new File(path, "_root"), pageName, parent, null, versionsController, new FileSystemSubWikiPageFactory(new File(rootPath.getValue()), fileSystem, variableSource, FileSystemPageFactory.this),
private void makeHeadingRow(HtmlTableListingBuilder table) throws Exception { HtmlTag nameHeading = HtmlUtil.makeSpanTag("caps", "Name"); HtmlTag sizeHeading = HtmlUtil.makeSpanTag("caps", "Size"); HtmlTag dateHeading = HtmlUtil.makeSpanTag("caps", "Date"); HtmlTag actionHeading = HtmlUtil.makeSpanTag("caps", "Action"); table.addRow(new HtmlTag[]{nameHeading, sizeHeading, dateHeading, actionHeading}); }
public void shouldReturnErrorPageIfFilesAreInvalid() throws Exception { request = new MockRequest(); request.addInput("TestResult_firstFile", ""); request.addInput("TestResult_secondFile", ""); request.setResource("TestFolder"); SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); assertEquals(400, response.getStatus()); assertHasRegexp("Compare Failed because the files were not found.", response.getContent());
public void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException { Route route = mock(Route.class); Route second = mock(Route.class, "second"); when(route.canHandle("/clients/add")).thenReturn(true); when(second.canHandle("/clients/add")).thenReturn(true); EnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class); when(route.allowedMethods()).thenReturn(all); when(second.allowedMethods()).thenReturn(all); when(route.resourceMethod(request, "/clients/add")).thenReturn(method); when(route.getPriority()).thenReturn(Path.HIGHEST); when(second.getPriority()).thenReturn(Path.LOWEST); router.add(route); router.add(second); ResourceMethod found = router.parse("/clients/add", HttpMethod.POST, request); assertThat(found, is(equalTo(method))); }
public void teardown() { SystemExitSecurityManager.restoreOriginalSecurityManager(); }
private void sendPkt(Packet p) {
public void testPageMatchesQueryWithExcludedSetUpsAndIncludedTearDowns() throws Exception { Map<String, Boolean> attributes = new HashMap<>(); attributes.put("SetUp", false); attributes.put("TearDown", true); List<PageType> pageTypes = Arrays.asList(TEST, STATIC, SUITE); searcher = generateSearcherByPageTypesAndSearchAttributes(pageTypes, attributes); setPageProperty(page, TEST.toString(), "true"); assertFalse(searcher.pageMatches(page)); page = WikiPageUtil.addPage(root, PathParser.parse("SetUp")); assertFalse(searcher.pageMatches(page)); page = WikiPageUtil.addPage(root, PathParser.parse("TearDown")); assertTrue(searcher.pageMatches(page)); page = WikiPageUtil.addPage(root, PathParser.parse("SuiteSetUp")); assertFalse(searcher.pageMatches(page)); page = WikiPageUtil.addPage(root, PathParser.parse("SuiteTearDown")); assertTrue(searcher.pageMatches(page)); }
public void willSetMethodParametersWithDeserializationEvenIfTheContentTypeHasCharsetDeclaration() { when(request.getContentType()).thenReturn("application/xml; charset=UTF-8"); final Deserializer deserializer = mock(Deserializer.class); methodInfo.setParameters(new Object[2]); when(deserializer.deserialize(null, consumeXml)).thenReturn(new Object[] {"abc", "def"}); when(deserializers.deserializerFor("application/xml", container)).thenReturn(deserializer); interceptor.intercept(stack, consumeXml, null); assertEquals(methodInfo.getParameters()[0], "abc"); assertEquals(methodInfo.getParameters()[1], "def"); verify(stack).next(consumeXml, null); }
public void init() { mockery = new Mockery(); RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(new HttpServletRequestMock())); }
public void run() { try { isRunning = true; while (true) { Object event = waitingEvents.take(); if (event == eventOfDeath) { wasKilled = true; } else { processEvent(event); } if (wasKilled) synchronized (waitingEvents) { if (waitingEvents.isEmpty()) { isRunning = false; break; } } } } catch (InterruptedException e) { LOG.error("Event thread exiting due to interruption", e); } LOG.info("EventThread shut down for session: 0x{}", Long.toHexString(getSessionId()));
public Enumeration selectorElements() { return task.selectorElements(); }
public String runTestsAndGenerateHtml(PageData pageData) throws IOException { initializeTest(); checkForAndReportVersionMismatch(pageData); String html = processAllTablesOnPage(pageData); testComplete(testSummary); return html; }
public void worksWithBasicRegexEvaluation() throws SecurityException, NoSuchMethodException { rules.add(new Rules() {{ routeFor("/clients*").with(HttpMethod.POST).is(MyControl.class).unknownMethod();; }}); assertThat(rules.parse("/clientsWhatever", HttpMethod.POST), is(VRaptorMatchers.resourceMethod(method("unknownMethod")))); }
public boolean expires() { return ! IsNever(tExpire.getJDate()); }
public static void startWithFactory(SlimFactory slimFactory) throws IOException { SlimService slimservice = new SlimService(slimFactory.getSlimServer(verbose)); slimservice.accept(); }
public void shouldConvertToZeroWhenEmpty() { assertThat((Float) converter.convert("", float.class, errors, bundle), is(equalTo(0F))); }
private void push(final int type) {
public void getFullPath_WalksUpWikiPageParentsAndBuildsFullPathToPage() throws Exception{ TestPage wp = buildNestedTestPage(); assertEquals(nestedPageName, jf.getFullPath(wp.getSourcePage())); }
long getWeight(long id); boolean containsQuorum(Set<Long> set); long getVersion(); void setVersion(long ver); Map<Long, QuorumServer> getAllMembers(); Map<Long, QuorumServer> getVotingMembers(); Map<Long, QuorumServer> getObservingMembers(); boolean equals(Object o); String toString(); }
OperationState getState();  ByteBuffer getBuffer();  void writeComplete();  void initialize();  void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data); }
private Request makeGetDataRequest(String path, long sessionId) throws IOException { ByteArrayOutputStream boas = new ByteArrayOutputStream(); BinaryOutputArchive boa = BinaryOutputArchive.getArchive(boas); GetDataRequest getDataRequest = new GetDataRequest(path, false); getDataRequest.serialize(boa, "request"); ByteBuffer bb = ByteBuffer.wrap(boas.toByteArray()); return new Request(null, sessionId, 1, ZooDefs.OpCode.getData, bb, new ArrayList<Id>()); }
private boolean suitesGiven(Request request) { return request.hasInput(SUITES); }
ClientCnxn createConnection( String chrootPath, HostProvider hostProvider, int sessionTimeout, ZKClientConfig clientConfig, Watcher defaultWatcher, ClientCnxnSocket clientCnxnSocket, long sessionId, byte[] sessionPasswd, boolean canBeReadOnly ) throws IOException { return new CustomClientCnxn( chrootPath,
public void testLoad() throws Exception { PageData data = page.getData(); data.setContent("new content"); VersionInfo version = page.commit(data); PageData loadedData = page.getDataVersion(version.getName()); assertEquals("original content", loadedData.getContent()); }
public void testRegexp() throws Exception { assertMatchEquals("!include SomePage", "!include SomePage"); assertMatchEquals("!include SomePage\n", "!include SomePage\n"); assertMatchEquals("abc\n" + "!include SomePage\nxyz", "!include SomePage\n"); assertMatchEquals("!include .SomePage.ChildPage", "!include .SomePage.ChildPage"); assertNoMatch("!include nonWikiWord"); assertNoMatch(" " + "!include WikiWord"); }
private void executeTestSystemPages(List<TestPage> pagesInTestSystem, TestSystem testSystem) throws Exception { for (TestPage testPage : pagesInTestSystem) { addToProcessingQueue(testPage); SetupTeardownAndLibraryIncluder.includeSetupsTeardownsAndLibrariesBelowTheSuite(testPage, page); testSystem.runTestsAndGenerateHtml(testPage.getDecoratedData()); } System.out.println("all tests run"); }
public void shouldBeAbleToConvertNumbers(){ assertThat((Long) converter.convert("2"), is(equalTo(2L))); }
private void WriteObject(String name, String value) throws IllegalArgumentException, IllegalStateException, IOException { WriteObject(name, value, false); }
protected void setupButtons() { super.setupButtons(); addEntryEnabled = true; }
private void purgeHistory(Request request) throws ParseException { int days = getDaysInput(request); deleteTestHistoryOlderThanDays(days); }
public KeeperException.Code handleAuthentication(ServerCnxn cnxn, byte[] authData) { String id = cnxn.getRemoteAddress().getAddress().getHostAddress(); cnxn.getAuthInfo().add(new Id(getScheme(), id)); return KeeperException.Code.OK; }
protected File getArtifactJar(String groupId, String artifactId, String version) throws Exception { Artifact artifact = factory.createArtifact( groupId, artifactId, version, Artifact.SCOPE_RUNTIME, ScalaMojoSupport.JAR); resolver.resolve(artifact, remoteRepos, localRepo); return artifact.getFile(); }
public WatcherOrBitSet triggerWatch(String path, Watcher.Event.EventType type) { return new WatcherOrBitSet(Collections.emptySet()); }
void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size); }
public void shouldThreatNormalMethod() throws NoSuchMethodException { final HttpServletRequest request = mockery.mock(HttpServletRequest.class); mockery.checking(new Expectations() { { one(request).getRequestURI(); will(returnValue("somethig.non-ajax.logic")); one(request).getParameter("view"); will(returnValue("xml")); } }); ResourceMethod method = mockery.methodFor(DefaultComponents.class, "showIt"); assertThat(info.shouldShowView(request, method), is(equalTo(true))); mockery.assertIsSatisfied(); }
void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public void setUp() throws Exception { ensureCheck(checkEnabled); CountdownWatcher clientWatch = new CountdownWatcher(); CountdownWatcher clientWatchB = new CountdownWatcher(); super.setUp(true); String hostPort = getPeersMatching(serverState).split(",")[0]; int clientPort = Integer.parseInt(hostPort.split(":")[1]); zkLeader = getPeerList().get(getLeaderIndex()); connectedServer = getPeerByClientPort(clientPort).getActiveServer(); zkClient = createClient(clientWatch, hostPort); zkClientB = createClient(clientWatchB, hostPort); zkClient.addAuthInfo(AUTH_PROVIDER, AUTH); zkClientB.addAuthInfo(AUTH_PROVIDER, AUTHB); clientWatch.waitForConnected(CONNECTION_TIMEOUT); clientWatchB.waitForConnected(CONNECTION_TIMEOUT); }
private MockRequest makeInvalidRequest(String name) { MockRequest request = new MockRequest(); request.setResource("TestPage"); request.addInput("pageName", name); request.addInput("pageContent", "hello"); request.addInput("pageType", ""); return request; }
public void testVariableSubstitution() throws Exception { Map<String, String> map = new HashMap<String, String>(); map.put("VERSION", "1.2"); map.put("MAINTAINER", "Torsten Curdt <tcurdt@vafer.org>"); String controlFile = "Version: [[VERSION]]\n" + "Maintainer: [[MAINTAINER]]\n" + "NoResolve1: test[[test\n" + "NoResolve2: [[test]]\n"; FilteredConfigurationFile filteredFile = new FilteredConfigurationFile("control", new ByteArrayInputStream(controlFile.getBytes()), new MapVariableResolver(map)); BinaryPackageControlFile d = new BinaryPackageControlFile(filteredFile.toString()); assertEquals("1.2", d.get("Version")); assertEquals("Torsten Curdt <tcurdt@vafer.org>", d.get("Maintainer")); assertEquals("test[[test", d.get("NoResolve1")); assertEquals("[[test]]", d.get("NoResolve2")); }
public void bark(Dog dog) { } public void jump(Dog dog, Integer times) { } public void dropDead(Integer times, Dog dog) { } } @Test(expected=IllegalArgumentException.class) public void shouldNotAcceptMethodsWithoutArguments() throws Exception { deserializer.deserialize(new ByteArrayInputStream(new byte[0]), woof); } @Test public void shouldBeAbleToDeserializeADog() throws Exception { InputStream stream = new ByteArrayInputStream("<dog><name>Brutus</name><age>7</age></dog>".getBytes()); when(provider.parameterNamesFor(bark.getMethod())).thenReturn(new String[] {"dog"}); Object[] deserialized = deserializer.deserialize(stream, bark); assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(Dog.class))); Dog dog = (Dog) deserialized[0]; assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7)); } @Test public void shouldBeAbleToDeserializeADogWhenMethodHasMoreThanOneArgument() throws Exception { InputStream stream = new ByteArrayInputStream("<dog><name>Brutus</name><age>7</age></dog>".getBytes()); when(provider.parameterNamesFor(jump.getMethod())).thenReturn(new String[] {"dog", "times"}); Object[] deserialized = deserializer.deserialize(stream, jump); assertThat(deserialized.length, is(2)); assertThat(deserialized[0], is(instanceOf(Dog.class))); Dog dog = (Dog) deserialized[0]; assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7)); } @Test public void shouldBeAbleToDeserializeADogWhenMethodHasMoreThanOneArgumentAndTheXmlIsTheLastOne() throws Exception { InputStream stream = new ByteArrayInputStream("<dog><name>Brutus</name><age>7</age></dog>".getBytes()); when(provider.parameterNamesFor(dropDead.getMethod())).thenReturn(new String[] {"times", "dog"}); Object[] deserialized = deserializer.deserialize(stream, dropDead); assertThat(deserialized.length, is(2)); assertThat(deserialized[1], is(instanceOf(Dog.class))); Dog dog = (Dog) deserialized[1]; assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7)); } @Test public void shouldBeAbleToDeserializeADogNamedDifferently() throws Exception { InputStream stream = new ByteArrayInputStream("<pet><name>Brutus</name><age>7</age></pet>".getBytes()); when(provider.parameterNamesFor(bark.getMethod())).thenReturn(new String[] {"pet"}); Object[] deserialized = deserializer.deserialize(stream, bark); assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(Dog.class))); Dog dog = (Dog) deserialized[0]; assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7)); } }
public void callsTestingTrackerBeforeAndAfterTestExecution() throws IOException, InterruptedException { final String stopId = "42"; WikiPage testPage = addTestPage(suite, "TestPage1", "!define TEST_SYSTEM {A}"); ClosableTestSystemListener listener = mock(ClosableTestSystemListener.class); when(testingTracker.addStartedProcess(any(Stoppable.class))).thenReturn(stopId); PagesByTestSystem pagesByTestSystem = new PagesByTestSystem(asList(testPage), context.root); MultipleTestsRunner runner = new MultipleTestsRunner(pagesByTestSystem, testingTracker, testSystemFactory, null); runner.addTestSystemListener(listener); runner.executeTestPages(); verify(testingTracker).addStartedProcess(runner); verify(testingTracker).removeEndedProcess(stopId); }
public void rejectWithFunctionCall() throws Exception { buildInstructionsFor("|reject|function|arg|\n", false); List<CallInstruction> expectedInstructions = list( new CallInstruction("scriptTable_id_0", "scriptTableActor", "function", new Object[]{"arg"}) ); assertEquals(expectedInstructions, instructions()); }
private Boolean hasHtmlChild(String path) { if (path.endsWith(".html")) return true; for (String child: fileSystem.list(path)) { if (hasHtmlChild(path + "/" + child)) return true; } return false; }
private static TestableZooKeeper createTestableClient( CountdownWatcher watcher, String hp) throws IOException, TimeoutException, InterruptedException { TestableZooKeeper zk = new TestableZooKeeper( hp, ClientBase.CONNECTION_TIMEOUT, watcher); watcher.waitForConnected(CONNECTION_TIMEOUT); return zk; }
public Object call() throws Exception { return inner.callAndAssign(symbolName, instanceName, methodsName, arguments); }
public static SslParameters createSslParameters(String sslParameterClassName, ClassLoader classLoader) { Class<? extends SslParameters> sslParametersInstance; if (sslParameterClassName == null || "true".equalsIgnoreCase(sslParameterClassName)) { sslParametersInstance = SslParameters.class; }else{ try { sslParametersInstance = classLoader.loadClass(sslParameterClassName).asSubclass(SslParameters.class); } catch (ClassNotFoundException e) { throw new RuntimeException("Preparing SSL Parameters with Class " + sslParameterClassName + " failed. Class Not Found.", e); } } try{ return sslParametersInstance.newInstance();
public void add(final Client client) throws ServletException, IOException { validator.checking(new Validations() { { that(client); shouldBe(notNullValue()); that(client).getAge(); shouldBe(greaterThan(10)); } }); database.add(client); result.include("client", client); result.use(DefaultPageResult.page()).forward("ok"); }
public void testWordsNotFoundInPreprocessedText() throws Exception { crawler.addPage(root, PathParser.parse("NewPage"), "{{{ PageThree }}}"); List resultList = whereUsed.findReferencingPages(pageThree); assertEquals(0, resultList.size()); }
public void OldStyleDirectoryInNestedWikiFileIsFileSystemPage() throws Exception { fileSystem.makeFile(new File("./somepath/WikiPage.wiki"), "stuff"); fileSystem.makeFile(new File("./somepath/WikiPage/SubPage/content.txt"), "stuff"); fileSystem.makeFile(new File("./somepath/WikiPage/SubPage/subsuite/myfile.html"), "stuff"); WikiPage page = rootPage.getPageCrawler().getPage(PathParser.parse("WikiPage.SubPage")); assertEquals(FileSystemPage.class, page.getClass()); }
public abstract void addEnvVar(String key, String value);  public abstract void addJvmArgs(String... args);  public abstract void addArgs(String... args);  public abstract void addOption(String key, String value);  public abstract void addOption(String key, File value);  public abstract void addOption(String key, boolean value);  public abstract void setLogOnly(boolean v);
Instruction getInstruction(); Expectation getExpectation(); }
public void argumentsCanBeRepresentedByProperties() { Arguments args = new Arguments("-v", "-p", "81", "-d", "directory", "-r", "root", "-b", "someFile.txt", "-l", "myLogDirectory", "-o", "-e", "22", "-f", "fitnesse.properties", "-i", "-c", "SomeCommand", "-a", "user:pass"); Properties properties = args.asProperties(); assertEquals("verbose", properties.getProperty("LogLevel")); assertEquals("81", properties.getProperty("Port")); assertEquals("directory", properties.getProperty("RootPath")); assertEquals("root", properties.getProperty("RootDirectory")); assertEquals("someFile.txt", properties.getProperty("RedirectOutput")); assertEquals("myLogDirectory", properties.getProperty("LogDirectory")); assertEquals("true", properties.getProperty("OmittingUpdates")); assertEquals("22", properties.getProperty("VersionsController.days")); assertEquals("fitnesse.properties", properties.getProperty("config.properties")); assertEquals("true", properties.getProperty("InstallOnly")); assertEquals("SomeCommand", properties.getProperty("Command")); assertEquals("user:pass", properties.getProperty("Credentials")); }
public void run(String[] args) throws Exception { args(args); debug(String.format("Args: %s", StringUtil.join(Arrays.asList(args), " "))); requestTest(); debug(String.format("Sent request: %s", request)); discardHeaders(); String xmlDocumentString = getXmlDocument(); debug(String.format("Xml Document: %s", xmlDocumentString)); testResultsDocument = XmlUtil.newDocument(xmlDocumentString); debug("Xml Document Parsed"); gatherCounts(); writeOutputFile(); verboseOutput(); debug(String.format("Exit Code: %d", exitCode())); }
private MainThread[] startQuorum(final int[] clientPorts) throws IOException { final StringBuilder sb = new StringBuilder(); String server; for (int i = 0; i < SERVER_COUNT; i++) { clientPorts[i] = PortAssignment.unique(); server = "server." + i + "=127.0.0.1:" + PortAssignment.unique() + ":" + PortAssignment.unique() + ":participant;127.0.0.1:" + clientPorts[i]; sb.append(server); sb.append("\n"); } final MainThread[] mt = new MainThread[SERVER_COUNT];
public void setUp() throws Exception { System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY, "org.apache.zookeeper.server.NettyServerCnxnFactory"); NettyServerCnxnFactory.setTestAllocator(TestByteBufAllocator.getInstance()); super.setUp(); }
public void testWithoutAutoCreateDataDir() throws Exception { assertThrows(FileTxnSnapLog.DatadirException.class, () -> { assertFalse(logDir.exists(), "log directory already exists");
public void testLogLineInNewFile() throws Exception { Calendar time = (Calendar) ld.time.clone(); time.add(Calendar.DATE, 1); LogData nextDay = new LogData( ld.host, time, ld.requestLine, ld.status, ld.size, ld.username); l.log(ld); l.log(nextDay); l.close(); File firstFile = getLogFileFor(ld); File secondFile = getLogFileFor(nextDay); assertTrue(firstFile.exists()); assertTrue(secondFile.exists()); String firstContent = FileUtil.getFileContent(firstFile); assertEquals(l.formatLogLine(ld) + System.getProperty("line.separator"), firstContent); String secondContent = FileUtil.getFileContent(secondFile); assertEquals(l.formatLogLine(nextDay) + System.getProperty("line.separator"), secondContent); }
public void testMaxZooKeeperClientsWithNIOServerCnxnFactory() throws Exception { String serverCnxnFactory = "org.apache.zookeeper.server.NIOServerCnxnFactory"; testMaxZooKeeperClients(serverCnxnFactory); }
public void run() { if ( mSuccess ) { GroupActivity.Launch(PasswordActivity.this, null, GroupActivity.ADD_GROUP_ONLY);
private boolean alreadyContainsValue(String existingValue, String valueToAdd) { return wrapInSpace(existingValue).contains(wrapInSpace(valueToAdd)); }
public String format(byte[] data) { ByteBuf buf = Unpooled.wrappedBuffer(data); return ByteBufUtil.prettyHexDump(buf); }
public void writeInt(int i, String tag) throws IOException { writeLong((long)i, tag); }
public void shouldAcceptCaseInsensitiveGetRequestUsingThe_methodParameter() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(DefaultResourceTranslator.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getContextPath(); will(returnValue("")); one(request).getRequestURI(); will(returnValue("/url")); one(request).getParameter("_method"); will(returnValue("gEt")); one(registry).parse("/url", HttpMethod.GET, webRequest); will(returnValue(expected)); }}); ResourceMethod resource = translator.translate(webRequest); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied(); }
private VRaptorGsonBuilder createBuilder(List<JsonSerializer> adapters) { VRaptorGsonBuilder builder = new VRaptorGsonBuilder(new DefaultJsonSerializers(adapters), serializee); return builder; }
public void testPageExists() throws Exception { crawler.addPage(root, PathParser.parse("AaAa"), "A content"); assertTrue(root.hasChildPage("AaAa")); }
public void testLookingNormal() { Map<Long, Vote> votes = new HashMap<Long, Vote>(); votes.put(0L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING)); votes.put(1L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING)); votes.put(3L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING)); votes.put(4L, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LEADING)); assertTrue(fle.getVoteTracker(votes, new Vote(4L, ZxidUtils.makeZxid(2, 1), 1, 1, ServerState.LOOKING)).hasAllQuorums()); }
public void waitForStartup() throws InterruptedException { synchronized(zk) { while(!zk.isRunning() && !Thread.currentThread().isInterrupted()) {
public void testQueueAfterShutdown() throws Exception { client.shutdown(); try { Object o=client.get("k");
private void loadPlugins() throws Exception { new PluginsClassLoader().addPluginsToClassLoader(); }
private Responder verifyOperationIsSecure(Responder privilegedResponder, FitNesseContext context, Request request) { SecureOperation so = ((SecureResponder) privilegedResponder).getSecureOperation(); try { if (so.shouldAuthenticate(context, request))
private static String joinPath(char sep, String ...paths) { final StringBuilder sb = new StringBuilder(); for (String p : paths) { if (p == null) continue; if (!p.startsWith("/") && sb.length() > 0) { sb.append(sep); } sb.append(p); } return sb.toString(); }
boolean isMine(HttpServletRequest request);  Object instantiate(HttpServletRequest request); }
boolean targetExists(String wikiWordPath); String makeFullPathOfTarget(String wikiWordPath); String findParentPath(String targetName); Maybe<SourcePage> findIncludedPage(String pageName); Collection<SourcePage> getChildren(); boolean hasProperty(String propertyKey); String getProperty(String propertyKey); String makeUrl(String wikiWordPath); }
private Response generateHtmlTestExecutionResponse(TestExecutionReport report) throws Exception { page.setTitle("Test Execution Report"); page.put("testExecutionReport", report); page.setMainTemplate("testExecutionReport"); return makeResponse(); }
private void setCachedData(PageData data) throws Exception { if (cachedData != null) cachedData.clear(); cachedData = new SoftReference<PageData>(data); cachedDataCreationTime = System.currentTimeMillis(); }
public static Node flatClone(Node node) { Node newNode = cloneOnlyNode(node, null); newNode.setChildren(new NodeList()); return newNode; }
public void instantiatesUsingTheContainer() { mockery.checking(new Expectations() { { one(container).instanceFor(MyComponent.class); will(returnValue(instance)); } }); MyComponent component = logicResult.redirectServerTo(MyComponent.class); assertThat(component, is(equalTo(instance))); mockery.assertIsSatisfied(); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); crawler = root.getPageCrawler(); crawler.addPage(root, PathParser.parse("SomePage"), "has something in it"); responder = new SearchReplaceResponder(); request = new MockRequest(); context = FitNesseUtil.makeTestContext(root); }
public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) { SyncCounter counter = (SyncCounter) ctx; synchronized (counter) { counter.setSequence(seq);
public long decr(String key, int by, long def) { return mutateWithDefault(MutatatorOperation.Mutator.decr, key, by, def); }
public void testIntConversion() {
public void processResult(int rc, String path, Object ctx, String name) { this.name = name; super.processResult(Code.get(rc), path, ctx); }
public static FitNesseContext makeTestContext(WikiPage root) { FitNesseContext context = new FitNesseContext(root); context.rootDirectoryName = "TestDir"; context.setRootPagePath(); VelocityEngine engine = new VelocityEngine(); engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, "FitNesseRoot/files/templates"); context.setVelocityEngine(engine); return context; }
private String buildConfirmationHtml(final WikiPage root, final String qualifiedPageName, final FitNesseContext context) { HtmlPage html = context.htmlPageFactory.newPage(); html.setTitle("Delete Confirmation"); html.setPageTitle(new PageTitle("Confirm Deletion", qualifiedPageName, "/")); makeMainContent(html, root, qualifiedPageName); html.setMainTemplate("deletePage"); return html.html(); }
private void validate() { if (hasErrors()) { result.include("errors", errors);
protected String generateHtml(PageData pageData) throws Exception { testSystem = getTestSystem(pageData); String classPath = new ClassPathBuilder().getClasspath(page); TestSystem.Descriptor descriptor = TestSystem.getDescriptor(page.getData()); descriptor.testRunner = "fitnesse.slim.SlimService"; log = testSystem.getExecutionLog(classPath, descriptor); testSystem.start(); testSystem.setFastTest(fastTest); String html = testSystem.runTestsAndGenerateHtml(pageData); testSystem.bye(); return html; }
private boolean termPredicate( HashMap<InetAddress, Vote> votes, long l, long zxid) { int count = 0; Collection<Vote> votesCast = votes.values();  for (Vote v : votesCast) { if ((v.id == l) && (v.zxid == zxid)) count++; } if (count > (self.quorumPeers.size() / 2)) return true;
TxnIterator read(long zxid) throws IOException;  long getLastLoggedZxid() throws IOException;  boolean truncate(long zxid) throws IOException;  long getDbId() throws IOException;  void commit() throws IOException;  long getTxnLogSyncElapsedTime();  void close() throws IOException;  public interface TxnIterator {  TxnHeader getHeader();  Record getTxn();  boolean next() throws IOException;  void close() throws IOException;  long getStorageSize() throws IOException; } }
public void testLongOverflow() { try { long b = tu.decodeLong(oversizeBytes);
public void shouldInsertItemsUntilTheRequiredPosition() throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException { final SimpleNode node = mockery.ognlNode("names"); mockery.checking(new Expectations() { { one(evaluation).getNode(); will(returnValue(node)); one(evaluation).getSource(); will(returnValue(client)); one(removal).add(client.names); } }); handler.instantiate(client.names, 2, handler.getListType(client.names, evaluation, context)); assertThat(client.names.size(), is(equalTo(3))); assertThat(client.names.get(2), is(notNullValue())); mockery.assertIsSatisfied(); }
private File[] files(final String... filePaths) { Set<File> files = new HashSet<File>(); for (String fileName : filePaths) { files.add(new File(fileName)); } return files.toArray(new File[files.size()]); }
public Object fromString(String arg) { String[] strings = fromStringToArrayOfStrings(arg); return Arrays.asList(strings); }
public boolean compare(String firstFilePath, String secondFilePath) throws ParserException, IOException, SAXException { if (firstFilePath.equals(secondFilePath)) return false; initializeFileContents(firstFilePath, secondFilePath); return grabAndCompareTablesFromHtml(); }
public void testJMXBeanAfterRemoveAddOne() throws Exception { qu = new QuorumUtil(1);
public void testStandardOutput() throws Exception { responder.setFastTest(false); String content = classpathWidgets() + outputWritingTable("output1") + outputWritingTable("output2") + outputWritingTable("output3"); String errorLogContent = doRunAndGetErrorLog(content); assertHasRegexp("output1", errorLogContent); assertHasRegexp("output2", errorLogContent); assertHasRegexp("output3", errorLogContent); }
public void announceNumberTestsToRun(int testsToRun) { } @Override public void setExecutionLogAndTrackingId(String stopResponderId, CompositeExecutionLog log) throws Exception { } @Override public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { } @Override public void newTestStarted(WikiPage test, TimeMeasurement timeMeasurement) throws Exception { } @Override public void testOutputChunk(String output) throws Exception { } @Override public void testComplete(WikiPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws Exception { } public void writeHead(String pageType) throws Exception { } }
<T> T movedPermanentlyTo(Class<T> controller);  void unsupportedMediaType(String errorMessage); }
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws IOException, InterceptionException {
public boolean versionsMatch() { return slimServerVersion == EXPECTED_SLIM_VERSION; }
private void visitDouble(final double value) { buf.append(value).append('D'); }
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance){} } static class InterceptorUsingConstructorParametersOnAccepts implements StaticInterceptor { private final String xuxu; public InterceptorUsingConstructorParametersOnAccepts(String xuxu) { this.xuxu = xuxu; } public boolean accepts(ResourceMethod method) { return xuxu.contains("o'really?"); } public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance){} } }
void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data);  MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to); }
private JUnitHelper createJUnitHelper(final RunNotifier notifier) { JUnitHelper jUnitHelper = new JUnitHelper(this.fitNesseDir, this.outputDir, new JUnitRunNotifierResultsListener(notifier, suiteClass)); jUnitHelper.setDebugMode(debugMode); jUnitHelper.setPort(port); return jUnitHelper; }
private static String buildAuthorizationForIP() { return String.format("%s%s", IP_SCHEMA, Commands.AUTH_INFO_SEPARATOR); }
public boolean isDone() { assert op != null : "No operation"; return latch.getCount() == 0 || op.isCancelled() || op.getState() == OperationState.COMPLETE;
public void shouldThrowScannerExceptionIfClassNotExists() { Collection<String> classNames = asList("a.resource.that.NotExists"); new DynamicWebAppBootstrap(classNames).configure(registry); }
public void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException { rules.add(new Rules() {{ routeFor("/clients/add").with(HttpMethod.POST).is(MyControl.class).add(null); }}); assertThat(rules.parse("/clients/add", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method("add",Dog.class)))); }
private HtmlPage makeHtml(String name, WikiPage page, FitNesseContext context) { PageData pageData = page.getDataVersion(version); HtmlPage html = context.htmlPageFactory.newPage(); html.setTitle("Version " + version + ": " + name); html.setPageTitle(new PageTitle("Version " + version, PathParser.parse(resource)));
public void set(Object i) throws IllegalAccessException { field.setInt(target, ((Integer) i).intValue()); }
private String buildSetGraph(String objectID, Set set) {
static MarkUpSystem make() { return new MarkUpSystemV2(); }
private void assertAllLatencyZero(ServerStats serverStats) { Assert.assertEquals(0L, serverStats.getMaxLatency()); Assert.assertEquals(0L, serverStats.getMinLatency()); Assert.assertEquals(0L, serverStats.getAvgLatency()); }
Set<Resource> all();  void register(Resource resource);  <T> String urlFor(Class<T> type, Method method, Object... params); }
public Enum convert(String value, Class type, List<ValidationMessage> errors, ResourceBundle bundle) { if (value == null || value.equals("")) { return null; } Class<? extends Enum> enumType = type; if (Character.isDigit(value.charAt(0))) { return resolveByOrdinal(value, enumType);
public void canHandleUrlIfNonRootContextButPlainRequest() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(RequestInfo.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getContextPath(); will(returnValue("/custom_context")); one(request).getRequestURI(); will(returnValue("/custom_context/")); one(request).getMethod(); will(returnValue("GET")); one(registry).parse("/", HttpMethod.GET,webRequest); will(returnValue(expected)); one(request).getParameter("_method"); will(returnValue(null)); }}); ResourceMethod resource = translator.translate(info); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied();
public boolean equals(Object other) { if (this == other) return true; if (!(other instanceof WikiPage)) return false; try { WikiPagePath path1 = getPageCrawler().getFullPath();
public void shouldHaveHeadersIfHtml() throws Exception { Response response = new MockResponse("html"); assertTrue(response.makeHttpHeaders().contains("HTTP/1.1 200 OK")); }
public void shouldUseTheFormatParameterIfSupplied() throws NoSuchMethodException { mockery.checking(new Expectations() { { one(method).getResource(); will(returnValue(resource)); one(method).getMethod(); will(returnValue(DogController.class.getDeclaredMethod("bark"))); one(resource).getType(); will(returnValue(DogController.class)); one(request).getParameter("_format"); will(returnValue("json")); } }); DefaultPathResolver resolver = new DefaultPathResolver(request); String result = resolver.pathFor(method); MatcherAssert.assertThat(result, Matchers.is(Matchers.equalTo("/WEB-INF/jsp/dog/bark.json.jsp"))); mockery.assertIsSatisfied(); }
public CommandRunner init(CommandRunningFitClient fitClient, String hostName, int port, int ticketNumber) { String fitArguments = hostName + SPACE + port + SPACE + ticketNumber; String[] arguments = ("-x " + fitArguments).trim().split(" "); this.fastFitServer = createTestRunnerThread(testDescriptor.getTestRunner(), arguments); this.fastFitServer.start(); this.commandRunner = new MockCommandRunner(); return commandRunner; }
public void cantCreateInstanceWithoutPath() throws Exception { caller.create("x", testClass, new Object[0]); }
public static ExecutionReport makeReport(String xmlString) throws InvalidReportException { Document xmlDocument = null; try { xmlDocument = XmlUtil.newDocument(xmlString); } catch (IOException | SAXException e) { throw new InvalidReportException("%s is not a valid execution report", e); } Element documentElement = xmlDocument.getDocumentElement(); String documentNodeName = documentElement.getNodeName(); if (documentNodeName.equals("testResults")) return new TestExecutionReport(xmlDocument);
public void testIntegerDecode() { assertEquals(129, decodeInt(new byte[] { 0, 0, 0, (byte) 0x81 }, 0)); assertEquals(129 * 256, decodeInt(new byte[] { 0, 0, (byte) 0x81, 0 }, 0)); assertEquals(129 * 256 * 256, decodeInt(new byte[] { 0, (byte) 0x81, 0, 0 }, 0)); assertEquals(129 * 256 * 256 * 256, decodeInt(new byte[] { (byte) 0x81, 0, 0, 0 }, 0));
public void shouldThrowResultExceptionIfIOExceptionOccursWhileRedirect() throws Exception { doThrow(new IOException()).when(response).sendRedirect(anyString()); view.redirectTo("/any/url"); }
public synchronized void timeOut() { timedout = true; callback.complete(); }
private AsyncCallback.DataCallback complete(CompletableFuture<Void> future) { return (rc, path, ctx, data, stat) -> { if (rc == 0) {
public Object parse(String s, Class<?> type) throws Exception { if (type.equals(String.class)) { if ("null".equalsIgnoreCase(s))
void appendToCell(int col, int row, String message); int getRowCount(); int getColumnCountInRow(int rowIndex); String toString(); String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); String getCellResult(int col,int row); void appendChildTable(int row, Table table); void setTestStatusOnRow(int row, boolean testStatus); void setName(String tableName); }
public byte decodeByte(byte[] in) { assert in.length <= 1 : "Too long for a byte"; byte rv=0; if(in.length == 1) { rv=in[0]; } return rv; }
public final void begin(final String name, final Attributes attrs) { Label start = getLabel(attrs.getValue("start")); Label end = getLabel(attrs.getValue("end")); Label handler = getLabel(attrs.getValue("handler")); String type = attrs.getValue("type"); getCodeVisitor().visitTryCatchBlock(start, end, handler, type); }
public void scansIncludes() { ParserTestHelper.assertScansTokenType("!include name", "Include", true); }
boolean isQuorumSaslAuthEnabled() { return quorumSaslEnableAuth; }
public void testSnapFilesGreaterThanToRetain() throws Exception { int nRecentCount = 4; int fileAboveRecentCount = 4; int fileToPurgeCount = 2; AtomicInteger offset = new AtomicInteger(0); File version2 = new File(tmpDir.toString(), "version-2"); assertTrue(version2.mkdir(), "Failed to create version_2 dir:" + version2.toString()); List<File> snapsToPurge = new ArrayList<>(); List<File> logsToPurge = new ArrayList<>(); List<File> snaps = new ArrayList<>(); List<File> logs = new ArrayList<>(); List<File> snapsAboveRecentFiles = new ArrayList<>(); List<File> logsAboveRecentFiles = new ArrayList<>(); createDataDirFiles(offset, fileToPurgeCount, false, version2, snapsToPurge, logsToPurge); createDataDirFiles(offset, nRecentCount, false, version2, snaps, logs); logs.add(logsToPurge.remove(0));
final public JRecord Record() throws ParseException { String rname; ArrayList flist = new ArrayList(); Token t; JField f; jj_consume_token(RECORD_TKN); t = jj_consume_token(IDENT_TKN); rname = t.image; jj_consume_token(LBRACE_TKN); label_4: while (true) { f = Field(); flist.add(f); jj_consume_token(SEMICOLON_TKN); switch ((jj_ntk==-1)?jj_ntk():jj_ntk) { case BYTE_TKN: case BOOLEAN_TKN: case INT_TKN: case LONG_TKN: case FLOAT_TKN: case DOUBLE_TKN: case USTRING_TKN: case BUFFER_TKN: case VECTOR_TKN: case MAP_TKN: case IDENT_TKN: ; break; default: jj_la1[4] = jj_gen; break label_4; } } jj_consume_token(RBRACE_TKN); String fqn = curModuleName + "." + rname; JRecord r = new JRecord(fqn, flist); recTab.put(fqn, r); {if (true) return r;} throw new Error("Missing return statement in function"); }
protected String replaceSymbolsInString(String arg) { int startingPosition = 0; while (true) { if ("".equals(arg) || null == arg) { break; } Matcher symbolMatcher = SlimSymbol.SYMBOL_PATTERN.matcher(arg); if (symbolMatcher.find(startingPosition)) { String symbolName = symbolMatcher.group(1); arg = replaceSymbolInArg(symbolMatcher, arg, symbolName); startingPosition = symbolMatcher.start(1); } else { break; } } return arg; }
public void publish() throws Exception { String content = buildLogContent(); WikiPage errorLogPage = crawler.addPage(root, errorLogPagePath); PageData data = errorLogPage.getData(); data.setContent(content); errorLogPage.commit(data); }
public void noId(@Load NoIdEntity entity) { } public void managed(@Load(managed=true) Entity entity) { } } private Stubber fail() { return doThrow(new AssertionError()); } }
public int hashCode() { int value = 0; for (int i = 0; i != bytes.length; i++) { value ^= (bytes[i] & 0xff) << (i % 4); } return value; }
PageData getData();  Collection<VersionInfo> getVersions(); WikiPage getVersion(String versionName); String getHtml();  VersionInfo commit(PageData data); PageCrawler getPageCrawler(); PageCrawler getPageCrawler(PagePruningStrategy strategy); String getVariable(String name); }
public void loadTestSystems(final TestSystemFactoryRegistrar registrar) throws PluginException { forEachNamedObject(ConfigurationParameter.TEST_SYSTEMS, new Registrar<TestSystemFactory>() { @Override public void register(String key, Class<TestSystemFactory> clazz) {
public void setup() throws IOException { this.mockery = new Mockery(); this.context = mockery.mock(ServletContext.class, "servlet context"); configureExpectations(); provider = getProvider(); provider.start(context); }
public void setup() throws Exception {
public Maybe<Symbol> parse(Parser parser) { Scanner scanner = parser.getScanner(); String content = scanner.getCurrentContent(); char beginner = content.charAt(content.length() - 1); Symbol body = Parser.makeIgnoreFirst(parser.getPage(), scanner, SymbolType.closeType(beginner)).parse(); if (scanner.isEnd()) return Symbol.Nothing; return new Maybe<Symbol>(new Symbol(SymbolType.Style, content.substring(7, content.length() - 1)).add(body)); }
public static String toHexString(UUID uuid) { if (uuid == null) { return null; } byte[] buf = Types.UUIDtoBytes(uuid); if (buf == null) { return null; } int len = buf.length; if (len == 0) { return ""; } StringBuilder sb = new StringBuilder(); short bt; char high, low; for (int i = 0; i < len; i++) { bt = (short)(buf[i] & 0xFF); high = (char)(bt >>> 4); low = (char)(bt & 0x0F); char h,l; h = byteToChar(high); l = byteToChar(low); sb.append(byteToChar(high)); sb.append(byteToChar(low)); } return sb.toString(); }
void created(String location);  void noContent();  void badRequest(String message);  void forbidden(String message);  void notFound();  void conflict(); void header(String key, String value); void methodNotAllowed(EnumSet<HttpMethod> allowedMethods);  void movedPermanentlyTo(String url);  <T> T movedPermanentlyTo(Class<T> controller);  void unsupportedMediaType(String errorMessage); }
<T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) throws OperationTimeoutException; CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
protected void initConfig(String[] args) throws QuorumPeerConfig.ConfigException { if (args.length == 1) { config.parse(args[0]);
private Set<Artifact> resolveDependencyArtifacts(final Artifact artifact, final ArtifactFilter collectionFilter, final ArtifactFilter resolutionFilter, final List<ArtifactRepository> remoteRepositories, final ArtifactRepository localRepository) { final ArtifactResolutionRequest arr = this.createArtifactResolutionRequest(artifact, collectionFilter, resolutionFilter, remoteRepositories, localRepository);
public void testDefaultAttributes() throws Exception { WikiPage normalPage = crawler.addPage(root, PathParser.parse("NormalPage")); WikiPage testPage1 = crawler.addPage(root, PathParser.parse("TestPage")); WikiPage testPage2 = crawler.addPage(root, PathParser.parse("PageTest")); WikiPage suitePage1 = crawler.addPage(root, PathParser.parse("SuitePage")); WikiPage suitePage2 = crawler.addPage(root, PathParser.parse("PageSuite")); WikiPage suitePage3 = crawler.addPage(root, PathParser.parse("TestPageSuite")); WikiPage errorLogsPage = crawler.addPage(root, PathParser.parse("ErrorLogs.TestPage")); WikiPage suiteSetupPage = crawler.addPage(root, PathParser.parse(SuiteResponder.SUITE_SETUP_NAME)); WikiPage suiteTearDownPage = crawler.addPage(root, PathParser.parse(SuiteResponder.SUITE_TEARDOWN_NAME)); PageData data = new PageData(normalPage); assertTrue(data.hasAttribute("Edit")); assertTrue(data.hasAttribute("Search")); assertTrue(data.hasAttribute("Versions")); assertTrue(data.hasAttribute("Files")); assertFalse(data.hasAttribute("Test")); assertFalse(data.hasAttribute("Suite")); data = new PageData(testPage1); assertTrue(data.hasAttribute("Test")); assertFalse(data.hasAttribute("Suite")); data = new PageData(testPage2); assertTrue(data.hasAttribute("Test")); assertFalse(data.hasAttribute("Suite")); data = new PageData(suitePage1); assertFalse(data.hasAttribute("Test")); assertTrue(data.hasAttribute("Suite")); data = new PageData(suitePage2); assertFalse(data.hasAttribute("Test")); assertTrue(data.hasAttribute("Suite")); data = new PageData(suitePage3); assertFalse(data.hasAttribute("Test")); assertTrue(data.hasAttribute("Suite")); data = new PageData(errorLogsPage); assertFalse(data.hasAttribute("Test")); assertFalse(data.hasAttribute("Suite")); data = new PageData(suiteSetupPage); assertFalse(data.hasAttribute("Suite")); data = new PageData(suiteTearDownPage); assertFalse(data.hasAttribute("Suite")); }
<T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(String mechs[], CallbackHandler cbh) throws OperationException;  Set<String> listSaslMechanisms(); }
private void genSerialize(FileWriter c, JType type, String tag, String name) throws IOException { if (type instanceof JRecord) { c.write(" rc = rc ? rc : serialize_" + extractStructName(type) + "(out, \"" + tag + "\", &v->" + name + ");\n");
public static String nestedPair(String[] strings) { return HtmlTag.name(strings[0]).child(HtmlTag.name(strings[1]).body(strings[2])).htmlInline(); }
private void readCRLF() throws Exception { input.read(2); }
public List<Instruction> call(String fixtureName) throws SyntaxError { final List<Instruction> instructions = new ArrayList<Instruction>(); instructions.add(constructFixture(fixtureName)); final Instruction callTable = callFunction(getTableName(), "table", tableAsList()); instructions.add(callTable); dontReportExceptionsInTheseInstructions.add(getInstructionId(callTable)); if (table.getRowCount() > 2) instructions.addAll(invokeRows()); return instructions; }
ParsingPage getParsingPage(); String translateToHtml(Symbol syntaxTree); List<String> getClasspaths(); List<String> getXrefPages(); }
public List<Assertion> getAssertions() throws SyntaxError { if (table.getRowCount() < 2) throw new SyntaxError("Query tables must have at least two rows."); assignColumns(); Assertion make = constructFixture(getFixtureName()); Assertion ti = makeAssertion(callFunction(getTableName(), "table", tableAsList()), Expectation.NOOP_EXPECTATION); Assertion qi = makeAssertion(callFunction(getTableName(), "query"), new QueryTableExpectation()); tableInstruction = ti.getInstruction().getId(); queryId = qi.getInstruction().getId();
private void output(String key, String value) { pw.print("zk_"); pw.print(key); pw.print("\t"); pw.println(value); }
public void shouldBeOkIfThereIsValidationErrorsAndYouSpecifiedWhereToGo() throws SecurityException, NoSuchMethodException, InterceptionException, IOException { final ResourceMethod method = mockery.methodFor(AnyController.class, "specifiedWhereToGo"); final AnyController controller = new AnyController(validator); mockery.checking(new Expectations() { { one(info).getParameters(); will(returnValue(new Object[0])); one(validator).onErrorUse(nothing()); will(throwException(new ValidationException(Collections.<Message> emptyList()))); allowing(validator).hasErrors(); will(returnValue(true)); } }); interceptor.intercept(stack, method, controller); mockery.assertIsSatisfied(); }
private void evaluateRow(List<List<Object>> tableResults, int row) { List<Object> rowList = tableResults.get(row); for (int col = 0; col < rowList.size(); col++) { String cellResult = (String) rowList.get(col);
private void registerRequestScopedComponentsOn(DefaultListableBeanFactory beanFactory) { registerOn(beanFactory, ParametersInstantiatorInterceptor.class); registerOn(beanFactory, InterceptorListPriorToExecutionExtractor.class); registerOn(beanFactory, URLParameterExtractorInterceptor.class); registerOn(beanFactory, DefaultInterceptorStack.class); registerOn(beanFactory, DefaultRequestExecution.class); registerOn(beanFactory, ResourceLookupInterceptor.class); registerOn(beanFactory, InstantiateInterceptor.class); registerOn(beanFactory, DefaultResult.class); registerOn(beanFactory, ExecuteMethodInterceptor.class); registerOn(beanFactory, DefaultPageResult.class); registerOn(beanFactory, ForwardToDefaultViewInterceptor.class); registerOn(beanFactory, DefaultLogicResult.class); registerOn(beanFactory, OgnlParametersProvider.class); registerOn(beanFactory, DefaultMethodInfo.class); registerOn(beanFactory, DefaultValidator.class); registerOn(beanFactory, DefaultLogicResult.class); registerOn(beanFactory, DefaultResourceNotFoundHandler.class); registerOn(beanFactory, VRaptorRequestProvider.class, true); registerOn(beanFactory, HttpServletRequestProvider.class, true); registerOn(beanFactory, HttpServletResponseProvider.class, true); registerOn(beanFactory, HttpSessionProvider.class, true); registerOn(beanFactory, OutjectResult.class); registerOn(beanFactory, JstlLocalization.class); registerOn(beanFactory, EmptyResult.class); beanFactory.registerSingleton(SpringBasedContainer.class.getName(), container); }
public int findAnyFollower() { for (int i = 0; i < mt.length; i++) { if (mt[i].main.quorumPeer.follower != null) { LOG.info("Follower is {}", i); return i; } } LOG.info("Cannot find any follower"); return -1; }
protected String[] buildArguments() { Object[] arguments = new String[] {}; String useSSL = determineClientSSLParameterClass(); if (useSSL != null){ arguments = ArrayUtils.add(arguments, "-ssl"); arguments = ArrayUtils.add(arguments, useSSL); } String[] slimFlags = getSlimFlags(); if (slimFlags != null) for (String flag : slimFlags) arguments = ArrayUtils.add(arguments, flag); arguments = ArrayUtils.add(arguments, Integer.toString(getSlimPort())); return (String[]) arguments; }
public int hashCode() { return new HashCodeBuilder().append(rootPath).append(version).append(date).hashCode(); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); builder = new ClassPathBuilder(); somePagePath = PathParser.parse("SomePage"); }
public static Collection<Object[]> data() throws Exception { String baseZnode = Base.createBaseZNode(); return Arrays.asList(new Object[][] { {baseZnode, baseZnode, ClientResponse.Status.NO_CONTENT },
public void forward() throws IllegalStateException { String referer = getReferer(); try { ResourceMethod method = router.parse(referer, HttpMethod.GET, request);
public void shouldMoveToURIFromController() throws Exception { mockery.checking(new Expectations() { { one(router).urlFor(RandomController.class, RandomController.class.getDeclaredMethods()[0]); will(returnValue("/my/random/uri")); one(request).getContextPath(); will(returnValue("/context")); one(response).setHeader("Location", "/context/my/random/uri"); one(response).setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY); ignoring(response); } }); httpResult.movedPermanentlyTo(RandomController.class).method(); }
private boolean methodMatches(HttpMethod method) { return (this.supportedMethods.isEmpty() || this.supportedMethods.contains(method)); }
public void testArgumentsDefaults() throws Exception { makeArgs(new String[] {}); assertEquals(80, args.getPort()); assertEquals(".", args.getRootPath()); assertEquals("FitNesseRoot", args.getRootDirectory()); assertEquals(null, args.getLogDirectory()); assertEquals(false, args.isOmittingUpdates()); assertEquals(14, args.getDaysTillVersionsExpire()); assertEquals(null, args.getUserpass()); assertEquals(false, args.isInstallOnly()); assertNull(args.getCommand()); }
private File createDataDirLogFile(File version_2, int Zxid) throws IOException { File logFile = new File(version_2 + "/log." + Long.toHexString(Zxid)); Assert.assertTrue("Failed to create log File:" + logFile.toString(), logFile.createNewFile()); return logFile; }
public long getPacketsReceived();  public long getPacketsSent();  public long getFsyncThresholdExceedCount();  public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max); public boolean getResponseCachingEnabled(); public void setResponseCachingEnabled(boolean isEnabled);  public int getConnectionMaxTokens(); public void setConnectionMaxTokens(int val); public int getConnectionTokenFillTime(); public void setConnectionTokenFillTime(int val); public int getConnectionTokenFillCount(); public void setConnectionTokenFillCount(int val); public int getConnectionFreezeTime(); public void setConnectionFreezeTime(int val); public double getConnectionDropIncrease(); public void setConnectionDropIncrease(double val); public double getConnectionDropDecrease(); public void setConnectionDropDecrease(double val); public double getConnectionDecreaseRatio(); public void setConnectionDecreaseRatio(double val); public int getRequestThrottleLimit(); public void setRequestThrottleLimit(int requests); public int getRequestThrottleStallTime(); public void setRequestThrottleStallTime(int time); public boolean getRequestThrottleDropStale(); public void setRequestThrottleDropStale(boolean drop); public boolean getRequestStaleLatencyCheck(); public void setRequestStaleLatencyCheck(boolean check); public boolean getRequestStaleConnectionCheck(); public void setRequestStaleConnectionCheck(boolean check);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); public long getFlushDelay(); public void setFlushDelay(long delay); public long getMaxWriteQueuePollTime(); public void setMaxWriteQueuePollTime(long delay); public int getMaxBatchSize(); public void setMaxBatchSize(int size); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); WikiPageUtil.addPage(root, PathParser.parse("SomePage"), "has something in it"); request = new MockRequest(); request.addInput("searchString", "blah"); request.addInput("searchType", "blah"); context = FitNesseUtil.makeTestContext(root); responder = new SearchResponder(); }
private SlimTestResult simpleComparisonMessage(boolean pass) { String message = String.format("%s%s", actual, expected.replaceAll(" ", "")); message = replaceSymbolsWithFullExpansion(message); return pass ? SlimTestResult.pass(message) : SlimTestResult.fail(message);
public void deleteFile(String filename) { mDb.delete(FILE_TABLE, KEY_FILE_FILENAME + " = ?", new String[] {filename}); }
public void throwsExceptionIfMoreThanOneUriMatchesWithSamePriority() { final Route route = mockery.mock(Route.class); final Route second = mockery.mock(Route.class, "second"); mockery.checking(new Expectations() {{ allowing(route).canHandle("/clients/add"); will(returnValue(true)); allowing(second).canHandle("/clients/add"); will(returnValue(true)); EnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class); allowing(route).allowedMethods(); will(returnValue(all)); allowing(second).allowedMethods(); will(returnValue(all)); allowing(route).getPriority(); will(returnValue(1)); allowing(second).getPriority(); will(returnValue(1)); }}); router.add(route); router.add(second); try { router.parse("/clients/add", HttpMethod.POST, request);
public void addsAPrefixToMethodsWhenTheGetControllerAndTheMethodAreAnnotatedWithRelativePath() throws Exception { List<Route> routes = parser.rulesFor(new DefaultResourceClass(GetAnnotatedController.class)); Route route = getRouteMatching(routes, "/prefix/relativePath"); assertThat(route, canHandle(GetAnnotatedController.class, "withRelativePath")); }
protected void checkRowMarkings(Parse rows) { Parse previousRow = null; while (rows != null) { Parse cells = rows.parts;
public void tableWithoutPrefixWillBeConstructed() throws Exception { getResultsForPageContents("|XX|\n"); assertTestResultsContain("<td>XX <span class=\"error\">Could not invoke constructor for XX[0]</span> <span class=\"error\">The instance decisionTable_0.table. does not exist</span></td>"); }
public void testFixClassName() throws Exception { assertEquals("Object[]", templateCreator.fixClassName("Object;")); assertEquals("Object", templateCreator.fixClassName("Object")); }
public void start() { new ComponentScanner(applicationContext).scan(basePackages); applicationContext.refresh(); applicationContext.start(); }
public void testChRootCreateDelete() throws Exception {
public void BracketFormatHtml() throws Exception { StyleWidget widget = new StyleWidget.BracketFormat(new MockWidgetRoot(), "!style_myStyle[wow zap]"); assertEquals("<span class=\"myStyle\">wow zap</span>", widget.render()); }
public long getMaxWriteQueuePollTime(); public void setMaxWriteQueuePollTime(long delay); public int getMaxBatchSize(); public void setMaxBatchSize(int size); }
public void setUp() throws Exception { MockitoAnnotations.initMocks(this); when(result.use(PageResult.class)).thenReturn(pageResult); representation = new DefaultRepresentationResult(formatResolver, result, Arrays.asList(serialization), headerHandler); }
public void tearDown() throws Exception { if (zkClient != null) { zkClient.close(); } if (zkClientB != null) { zkClientB.close(); } super.tearDown(); }
public void createChanges( final ChangesDescriptor pChangesDescriptor, final OutputStream pOutput ) throws IOException { createChanges(pChangesDescriptor, null, null, null, pOutput); }
private void addPageToListWithinMap(PagesByTestSystem pagesByTestSystem, WikiPage wikiPage) { TestPage testPage = new TestPage(wikiPage); Descriptor descriptor = ClientBuilder.getDescriptor(wikiPage, isRemoteDebug); getOrMakeListWithinMap(pagesByTestSystem, descriptor).add(testPage); }
public boolean hasInDistro(Artifact artifact) throws Exception { return scalaOrganization.equalsIgnoreCase(artifact.getGroupId()) && aids.scalaDistroArtifactIds().contains(artifact.getArtifactId());
public DERObject toASN1Object() { ASN1EncodableVector v = new ASN1EncodableVector(); v.add(version); if (keyDerivationAlgorithm != null) { v.add(new DERTaggedObject(false, 0, keyDerivationAlgorithm)); } v.add(keyEncryptionAlgorithm); v.add(encryptedKey); return new DERSequence(v); }
protected void close() throws Exception { response.add(HtmlUtil.getHtmlOfInheritedPage("PageFooter", page)); response.add(formatter.tail()); response.closeChunks(); response.addTrailingHeader("Exit-Code", String.valueOf(exitCode())); response.closeTrailer(); response.close(); }
public void setUp() throws IOException { outputWriter = new StringWriter(); ServerCnxn serverCnxnMock = mock(ServerCnxn.class); LeaderZooKeeperServer zks = mock(LeaderZooKeeperServer.class); when(zks.isRunning()).thenReturn(true); providerMock = mock(ServerStats.Provider.class); when(zks.serverStats()).thenReturn(new ServerStats(providerMock)); ZKDatabase zkDatabaseMock = mock(ZKDatabase.class); when(zks.getZKDatabase()).thenReturn(zkDatabaseMock); Leader leaderMock = mock(Leader.class); when(leaderMock.getProposalStats()).thenReturn(new ProposalStats()); when(zks.getLeader()).thenReturn(leaderMock); ServerCnxnFactory serverCnxnFactory = mock(ServerCnxnFactory.class); ServerCnxn serverCnxn = mock(ServerCnxn.class); List<ServerCnxn> connections = new ArrayList<>(); connections.add(serverCnxn); when(serverCnxnFactory.getConnections()).thenReturn(connections); statCommand = new StatCommand(new PrintWriter(outputWriter), serverCnxnMock, FourLetterCommands.statCmd); statCommand.setZkServer(zks); statCommand.setFactory(serverCnxnFactory); }
int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public void testReadConfigurationFile(@TempDir File testDataDir) throws IOException, ConfigException { File file = File.createTempFile("clientConfig", ".conf", testDataDir); Properties clientConfProp = new Properties(); clientConfProp.setProperty(ENABLE_CLIENT_SASL_KEY, "true"); clientConfProp.setProperty(ZK_SASL_CLIENT_USERNAME, "ZK"); clientConfProp.setProperty(LOGIN_CONTEXT_NAME_KEY, "MyClient"); clientConfProp.setProperty(ZOOKEEPER_SERVER_REALM, "HADOOP.COM"); clientConfProp.setProperty("dummyProperty", "dummyValue"); OutputStream io = new FileOutputStream(file); try { clientConfProp.store(io, "Client Configurations"); } finally { io.close(); } ZKClientConfig conf = new ZKClientConfig(); conf.addConfiguration(file.getAbsolutePath()); assertEquals(conf.getProperty(ENABLE_CLIENT_SASL_KEY), "true"); assertEquals(conf.getProperty(ZK_SASL_CLIENT_USERNAME), "ZK"); assertEquals(conf.getProperty(LOGIN_CONTEXT_NAME_KEY), "MyClient"); assertEquals(conf.getProperty(ZOOKEEPER_SERVER_REALM), "HADOOP.COM"); assertEquals(conf.getProperty("dummyProperty"), "dummyValue"); }
public State checkState(String... filePaths) throws RevisionControlException { return VERSIONED; }
public <T> void that(T id, Matcher<T> matcher) { that(null, id, matcher); }
public boolean hasContent() { return contentType != null; }
private Class lookFor(Class<? extends Object> baseType, Class currentType, Method method) { if (currentType.equals(Object.class)) { throw new IllegalArgumentException("Invalid rule registration, method " + method.getName() + " was not found, although it was declared at " + baseType.getName()); } return null; }
public void tearDown() throws Exception { if (response != null) response.sendTo(new MockResponseSender()); SampleFileUtility.deleteSampleFiles(context.getRootPagePath()); Locale.setDefault(saveLocale); }
public void header(String key, String value) { response.addHeader(key, value); }
private HtmlTag createTextarea(boolean firstTimeForNewPage) { HtmlTag textarea = new HtmlTag("textarea"); textarea.addAttribute("class", CONTENT_INPUT_NAME); textarea.addAttribute("name", CONTENT_INPUT_NAME); textarea.addAttribute("rows", "25"); textarea.addAttribute("cols", "70"); textarea.addAttribute("tabindex", "1"); textarea.add(Utils.escapeText(firstTimeForNewPage ? "!contents" : content)); return textarea; }
private void readHistoryDirectory(File historyDirectory) { File[] pageDirectories = FileUtil.getDirectoryListing(historyDirectory); for (File file : pageDirectories) if (isValidFile(file))
public Class<?> loadClass(String className, boolean resolve) throws ClassNotFoundException { if (className.startsWith("xsbti.")) {
private static boolean isPresentClass(String className) { try { Class.forName(className);
protected void setupRequestProcessors() { RequestProcessor finalProcessor = new FinalRequestProcessor(this); RequestProcessor toBeAppliedProcessor = new Leader.ToBeAppliedRequestProcessor( finalProcessor, getLeader().toBeApplied); commitProcessor = new CommitProcessor(toBeAppliedProcessor); RequestProcessor proposalProcessor = new ProposalRequestProcessor(this, commitProcessor); firstProcessor = new PrepRequestProcessor(this, proposalProcessor); }
public void testOnlyUpgradeSessionOnce() throws IOException, InterruptedException, KeeperException {
public void testPrivateSetBinding() throws Throwable { Binding binding = Binding.create(fixture, "privateIntField"); binding.doCell(fixture, cell1); assertEquals(123, fixture.getPrivateIntField()); binding.doCell(fixture, cell2); assertEquals(321, fixture.getPrivateIntField()); }
protected void updateSummaryDiv(String html) { writeData(JavascriptUtil.makeReplaceElementScript("test-summary", html).html()); }
public static void main(String args[]) { CmdLineParser parser = new CmdLineParser(); CmdLineParser.Option typeOpt = parser.addStringOption("type"); CmdLineParser.Option warnOpt = parser.addBooleanOption("warn"); CmdLineParser.Option nomungeOpt = parser.addBooleanOption("nomunge"); CmdLineParser.Option linebreakOpt = parser.addStringOption("line-break"); CmdLineParser.Option preserveSemiOpt = parser.addBooleanOption("preserve-semi"); CmdLineParser.Option helpOpt = parser.addBooleanOption('h', "help"); CmdLineParser.Option charsetOpt = parser.addStringOption("charset"); CmdLineParser.Option outputFilenameOpt = parser.addStringOption('o', "output"); Reader in = null; Writer out = null; try {
public void tearDown() throws Exception { } public void testClearChildrenWhenVWisCleared() throws Exception { createSimpleVirtualLink();
public void canProvideAllRequestScopedComponents() { checkAvailabilityFor(false, BaseComponents.getRequestScoped().keySet()); mockery.assertIsSatisfied(); }
public Maybe<Integer> match(ScanString input, int offset) { return input.matches(delimiter, offset) ? new Maybe<Integer>(delimiter.length()) : Maybe.noInteger; }
boolean hasReadOp();  boolean hasWriteOp();  void addOp(Operation op);  void insertOp(Operation o);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  boolean isAuthenticated();  long lastReadDelta();  void completedRead();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); MemcachedConnection getConnection(); void setConnection(MemcachedConnection connection); }
public void testIgnoringZxidElectionEpoch() { Map<Long, Vote> votes = new HashMap<Long, Vote>(); votes.put(0L, new Vote(0x1, 4L, ZxidUtils.makeZxid(1, 1), 1, 2, ServerState.FOLLOWING)); votes.put(1L, new Vote(0x1, 4L, ZxidUtils.makeZxid(1, 2), 1, 2, ServerState.FOLLOWING)); votes.put(3L, new Vote(0x1, 4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.FOLLOWING)); votes.put(4L, new Vote(0x1, 4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.LEADING)); Assert.assertTrue(fle.getVoteTracker(votes, new Vote(4L, ZxidUtils.makeZxid(2, 1), 2, 2, ServerState.FOLLOWING)).hasAllQuorums());
public void callToVoidFunctionReturnsVoidValue() throws Exception { statements.add(list("id", "call", "testSlim", "voidFunction")); respondsWith(list(list("id", VoidConverter.VOID_TAG))); }
public SymbolProvider addTypes(SymbolType[] types) { ArrayList<Matchable> defaults = new ArrayList<Matchable>(); defaults.addAll(Arrays.asList(currentDispatch.get(defaultMatch))); for (SymbolType type: types) { if (!defaults.contains(type)) defaults.add(type); } Matchable[] newDefaults = new Matchable[defaults.size()]; for (int i = 0; i < defaults.size(); i++) newDefaults[i] = defaults.get(i); currentDispatch.put(defaultMatch, newDefaults); return this; }
private String escapeHtml(String rawText) { return rawText .replaceAll("\r", "")
String getClientAddress();  String getLearnerType();  boolean isLeader(); }
public void setUp() throws Exception { context = new FitNesseContext(root); }
public void whenPluginsDirectoryDoesNotExist() throws Exception { new PluginsClassLoader().loadPlugins("nonExistingRootDirectory"); assertTrue("didn't cause exception", true); }
public void push(final int value) { if ((value >= -1) && (value <= 5)) { mv.visitInsn(Opcodes.ICONST_0 + value);
public void singlePassingResultsShouldBeGreen() throws Exception { addPageDirectory("TestPage"); File pageDirectory = addPageDirectory("TestPage"); addTestResult(pageDirectory, "20090503110451_6_0_3_0"); makeResponse(); assertHasRegexp("<td .* class=\"pass\">03 May, 09 11:04</td>", response.getContent()); }
long getMaxRequestLatency();  long getPacketsReceived();  long getPacketsSent();  long getFsyncThresholdExceedCount();  long getOutstandingRequests();  int getTickTime();  void setTickTime(int tickTime);  int getMaxClientCnxnsPerHost();  void setMaxClientCnxnsPerHost(int max);  int getMinSessionTimeout();  void setMinSessionTimeout(int min);  int getMaxSessionTimeout();  void setMaxSessionTimeout(int max); boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size); }
public void testNewEpochZxidWithTxnlogOnly() throws Exception { long peerZxid; db.txnLog.add(createProposal(getZxid(1, 1))); db.txnLog.add(createProposal(getZxid(2, 1))); db.txnLog.add(createProposal(getZxid(2, 2))); db.txnLog.add(createProposal(getZxid(4, 1)));
public void testLearnerSessionTracker() throws Exception { Expirer expirer = new Expirer(1);
public void testTimeWaitingEmptyPoolInCommitProcessorRead() throws Exception { setupProcessors(1, 1000);
public void newTestStarted(WikiPage test, long time) throws Exception { for (BaseFormatter formatter : formatters) formatter.newTestStarted(test, time);
public boolean isStartLine() { return isType(HorizontalRule.symbolType) || isType(Nesting.symbolType); }
public void timeCached100() throws Throwable { callOften(new CachedInteraction(), 100, 100); }
public List<Message> validate(Object bean, Class<?>... groups) { if (bean == null) { logger.warn("skiping validation, input bean is null."); return Collections.emptyList(); } final Set<ConstraintViolation<Object>> violations = validator.validate(bean, groups); logger.debug("there are {} violations at bean {}.", violations.size(), bean); return getMessages(violations); }
public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) { return null; }
private void includeSetupsTeardownsAndLibrariesBelowTheSuite(WikiPage suitePage) throws Exception { includeScenarioLibraryBelow(suitePage); includeSetupPages(); includePageContent(); includeTeardownPages(); updatePageContent(); }
public void testDefaultConstructor() throws Exception { File tmpDir = ClientBase.createEmptyTestDir(); FileTxnSnapLog fileTxnSnapLog = new FileTxnSnapLog(new File(tmpDir, "data"), new File(tmpDir, "data_txnlog")); ZooKeeperServer zks = new ZooKeeperServer() { @Override public void submitRequest(Request si) {
protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Intent i = getIntent(); prefs = PreferenceManager.getDefaultSharedPreferences(this); mRememberKeyfile = prefs.getBoolean(getString(R.string.keyfile_key), getResources().getBoolean(R.bool.keyfile_default)); setContentView(R.layout.password); confirmButton = (Button) findViewById(R.id.pass_ok); new InitTask().execute(i); initForFingerprint(); }
private String createNode(final ZooKeeper zk, final String path) throws Exception { final String fullPath = zk.create(path, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); assertNotNull(zk.exists(path, false)); return fullPath; }
public void testConstruction() throws Throwable { assertEquals(Binding.QueryBinding.class, Binding.create(fixture, "intMethod()").getClass()); assertEquals(Binding.QueryBinding.class, Binding.create(fixture, "intMethod?").getClass()); assertEquals(Binding.QueryBinding.class, Binding.create(fixture, "intMethod!").getClass()); assertEquals(Binding.SetBinding.class, Binding.create(fixture, "intField").getClass()); assertEquals(Binding.RecallBinding.class, Binding.create(fixture, "intField=").getClass()); assertEquals(Binding.SaveBinding.class, Binding.create(fixture, "=intMethod()").getClass()); assertEquals(Binding.SaveBinding.class, Binding.create(fixture, "=intField").getClass()); }
public void onClick( DialogInterface dialog, int which) { GroupActivity.Launch(activity); }
public void delete(FileSystemPage page) { fileSystem.delete(page.getFileSystemPath()); }
public void testRebindIPv4IPv6() throws Exception { int randomPort = PortAssignment.unique(); InetSocketAddress addr = new InetSocketAddress("0.0.0.0", randomPort); NettyServerCnxnFactory factory = new NettyServerCnxnFactory(); factory.configure(addr, 100, -1, false); factory.start(); assertTrue(factory.getParentChannel().isActive()); factory.reconfigure(new InetSocketAddress("[0:0:0:0:0:0:0:0]", randomPort));
public void gettingPrecompiledScenarioWidgetsForChildLibraryPage() throws Exception { WikiPage suitePage = crawler.addPage(root, PathParser.parse("MySuite"), "my suite content"); crawler.addPage(suitePage, PathParser.parse("ScenarioLibrary"), "child library"); HtmlSlimTestSystem sys = new HtmlSlimTestSystem(suitePage, dummyListener); ParsedPage scenarios = sys.getPreparsedScenarioLibrary(); Symbol includeParent = getCollapsibleSymbol(scenarios.getSyntaxTree()); assertNotNull(includeParent); assertEquals("Precompiled Libraries", ParserTestHelper.serializeContent(includeParent.childAt(0))); Symbol childLibraryInclude = getIncludeSymbol(includeParent.childAt(1)); assertTrue(ParserTestHelper.serializeContent(childLibraryInclude).contains("child library")); }
String genJavaEquals(String fname, String peer) { return " ret = ("+fname+"=="+peer+");\n"; }
public void testSymbolicLinksSave() throws Exception { ByteArrayOutputStream output = saveSomeSymbolicLinks(); String xml = output.toString(); assertHasRegexp("<symbolicLink>\\s*<name>LinkOne</name>\\s*<path>PatH.OnE</path>\\s*</symbolicLink>", xml); assertHasRegexp("<symbolicLink>\\s*<name>LinkTwo</name>\\s*<path>PatH.TwO</path>\\s*</symbolicLink>", xml); }
public void testTestRunnerWithRootPathVariable() throws Exception { String fitnesseRootpath = "/home/fitnesse"; FitNesseContext context = FitNesseUtil.makeTestContext(null, fitnesseRootpath, null, 80); new FitNesse(context, false); String specifiedPageText = "!define TEST_RUNNER (${FITNESSE_ROOTPATH}/rubyslim.rb)\n"; WikiPage specifiedPage = makeTestPage(specifiedPageText); Descriptor myDescriptor = TestSystem.getDescriptor( specifiedPage.getData(), context.pageFactory, false); assertEquals(fitnesseRootpath + "/rubyslim.rb", myDescriptor.testRunner); }
public void simpleInputAndOutputFailing() throws Exception { makeTables( "!|scenario|echo|input|giving|output|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|DT:EchoGiving|\n" + "|input|output|\n" + "|7|8|\n" ); Map<String, Object> pseudoResults = SlimCommandRunningClient.resultToMap( list( list("decisionTable_did_0/scriptTable_s_id_0", "7") ) ); Assertion.evaluateExpectations(assertions, pseudoResults); String scriptTable = dt.getChildren().get(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output], [check, echo, 7, fail(a=7;e=8)]]"; assertEquals(expectedScript, scriptTable); String dtHtml = dt.getTable().toString(); assertEquals(0, getTestSummary().getRight()); assertEquals(1, getTestSummary().getWrong()); assertEquals(0, getTestSummary().getIgnores()); assertEquals(0, getTestSummary().getExceptions()); }
public void shouldBeEqualWithAllFieldsEqual() throws Exception { report1.version = report2.version = "version"; report1.date = report2.date = new Date(1); report1.getFinalCounts().add(new TestSummary(4,5,6,7)); report2.getFinalCounts().add(new TestSummary(4,5,6,7)); report1.rootPath = report2.rootPath = "rootPath"; PageHistoryReference r1a = new PageHistoryReference("testPage", 1234, 5); PageHistoryReference r2a = new PageHistoryReference("testPage", 1234, 5); PageHistoryReference r1b = new PageHistoryReference("myPage", 7734, 6); PageHistoryReference r2b = new PageHistoryReference("myPage", 7734, 6); r1a.getTestSummary().right=4; r2a.getTestSummary().right=4; report1.addPageHistoryReference(r1a); report1.addPageHistoryReference(r1b); report2.addPageHistoryReference(r2a); report2.addPageHistoryReference(r2b); assertEquals(report1, report2); }
<T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(final CallbackHandler cbh) throws OperationException; }
int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  boolean isAuthenticated();  long lastReadDelta();  void completedRead();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
boolean isTimedOut();  boolean isTimedOut(long ttlMillis);  boolean isTimedOutUnsent();  long getWriteCompleteTimestamp();  byte[] getErrorMsg();  void addClone(Operation op);  int getCloneCount();  void setCloneCount(int count); }
public void logout() { userInfo.logout();
public boolean hasWriteOp() { return !(getOp == null && writeQ.isEmpty()); }
String getTestSystem(); String getTestSystemType(); String getClassPath(); boolean runInProcess(); boolean isDebug();
public Method run() throws Exception { Method m = mpClazz.getDeclaredMethod("getContextValue", String.class); m.setAccessible(true); return m; }
public void testRegexp() throws Exception { assertMatches(ItalicWidget.REGEXP, "''italic''"); assertMatches(ItalicWidget.REGEXP, "'' 'italic' ''"); }
public String consoleMainClassName() throws Exception { return "scala.tools.nsc.MainGenericRunner"; }
long getObserverElectionDelayMS();  void setObserverElectionDelayMS(long delayMS); }
public AnnotationVisitor visitAnnotationDefault() { cp.newUTF8("AnnotationDefault"); return new AnnotationConstantsCollector(mv.visitAnnotationDefault(), cp); }
protected Result makeExeptionMessage(String value) { if (value.startsWith(SlimTestSystem.MESSAGE_FAIL)) return fail(value.substring(SlimTestSystem.MESSAGE_FAIL.length()));
protected MultipleTestsRunner newMultipleTestsRunner(List<WikiPage> pages) { final PagesByTestSystem pagesByTestSystem = new PagesByTestSystem(pages, context.root); MultipleTestsRunner runner = new MultipleTestsRunner(pagesByTestSystem, context.runningTestingTracker, context.testSystemFactory, new SystemVariableSource(context.getProperties())); runner.setRunInProcess(debug); runner.setEnableRemoteDebug(remoteDebug); runner.addExecutionLogListener(log); addFormatters(runner); return runner; }
public void write(String str) throws IOException {
void makeFile(String path, InputStream content) throws IOException; void makeDirectory(String path) throws IOException; boolean exists(String path); String[] list(String path); String getContent(String path) throws IOException; InputStream getInputStream(String path) throws IOException; void delete(String path); long lastModified(String path); }
public void sendResponse(ReplyHeader h, Record r, String tag) { try { ByteArrayOutputStream baos = new ByteArrayOutputStream();
public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) { DataTree dt = zkServer.getZKDatabase().getDataTree(); CommandResponse response = initializeResponse(); response.put("session_id_to_watched_paths", dt.getWatches().toMap()); return response; }
public MemcachedNode next() { try { return getNodeForKey(hashVal);
ChangeRecord duplicate(long zxid) { Stat stat = new Stat(); if (this.stat != null) { DataTree.copyStat(this.stat, stat); } return new ChangeRecord(zxid, path, stat, childCount, acl == null ? new ArrayList<ACL>() : new ArrayList(acl));
public void acceptOutputFirst(String output) throws Exception { } public void acceptResultsLast(TestSummary testSummary) throws Exception { } public void exceptionOccurred(Throwable e) { } } }
public void testAsyncIncrement() throws Exception { String k="async-incr"; client.set(k, 0, "5"); Future<Long> f = client.asyncIncr(k, 1); assertEquals(6, (long)f.get()); }
public void createWikiRoot() { rootPage = pageFactory.makePage(new File(TEST_DIR), "RooT", null); }
private void executePagesInTestSystem(TestSystem.Descriptor descriptor, Map<TestSystem.Descriptor, LinkedList<WikiPage>> pagesByTestSystem) throws Exception { List<WikiPage> pagesInTestSystem = pagesByTestSystem.get(descriptor); resultsListener.announceStartTestSystem(descriptor.testSystemName, descriptor.testRunner); startTestSystemAndExecutePages(descriptor, pagesInTestSystem); }
public static String summaryClass(TestSummary testSummary) { if (testSummary.right > 0 && testSummary.wrong == 0 && testSummary.exceptions == 0) return "pass";
public void incrementFailedTestsCount() { testContext.incrementFailedTestsCount(); testSummary.wrong++; }
public void testCompleteShouldRemoveHeadOfQueueAndNotifyListener() throws Exception { List<WikiPage> testPagesToRun = mock(List.class); WikiPage page = mock(WikiPage.class); FitNesseContext fitNesseContext = mock(FitNesseContext.class); ResultsListener resultsListener = mock(ResultsListener.class); MultipleTestsRunner runner = new MultipleTestsRunner(testPagesToRun, fitNesseContext, page, resultsListener); runner.addToProcessingQueue(page); TestSummary testSummary = mock(TestSummary.class); runner.startingNewTest(page); runner.testComplete(testSummary); verify(resultsListener).testComplete(same(page), same(testSummary), argThat(isAStoppedTimeMeasurement())); }
public void testSetTrafficClass(boolean useSecureClient) throws Exception { init(useSecureClient); serverSideSocket.setTrafficClass(SocketOptions.IP_TOS); assertFalse(serverSideSocket.isModeKnown());
protected static String replace(String value, String mark, String replacement) { int index = value.indexOf(mark); if (index == -1) return value; return value.substring(0, index) + replacement + value.substring(index + mark.length()); }
public void visitSource(final String source, final String debug) { if (source != null) { cp.newUTF8("SourceFile"); cp.newUTF8(source); } if (debug != null) { cp.newUTF8("SourceDebugExtension"); } cv.visitSource(source, debug); }
public void testSingleReplacementHtml() throws Exception { String content = getResponseContentUsingSearchReplaceString("something", "replacedthing"); assertThat(content, containsString("replacedthing")); assertThat(content, containsString("SomePage")); }
public void setup() { this.mockery = new Mockery(); this.request = mockery.mock(MutableRequest.class); this.session = mockery.mock(HttpSession.class); this.context = mockery.mock(ServletContext.class); final RequestInfo webRequest = new RequestInfo(context, request, null); this.converter = new LocaleBasedDateConverter(webRequest); this.bundle = ResourceBundle.getBundle("messages"); }
void setObserverMasterPacketSizeLimit(int sizeLimit);  int getMaxConcurrentSnapSyncs();  void setMaxConcurrentSnapSyncs(int maxConcurrentSnapSyncs);  int getMaxConcurrentDiffSyncs();  void setMaxConcurrentDiffSyncs(int maxConcurrentDiffSyncs); }
public void handleValidatorMessageWhenFileUploadExceptionOccurs() throws Exception { interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator); when(mockUpload.parseRequest(request)).thenThrow(new FileUploadException()); interceptor.intercept(stack, method, instance); verify(validator).add(any(I18nMessage.class)); }
public void testUpdateQuotaExceededMetrics() { final String name = QuotaMetricsUtils.QUOTA_EXCEEDED_ERROR_PER_NAMESPACE; final String namespace = UUID.randomUUID().toString(); final long count = 3L; for (int i = 0; i < count; i++) { ZooKeeperServer.updateQuotaExceededMetrics(namespace); } final Map<String, Object> values = MetricsUtils.currentServerMetrics(); assertEquals(1, values.keySet().stream().filter( key -> key.contains(String.format("%s_%s", namespace, name))).count()); assertEquals(count, values.get(String.format("%s_%s", namespace, name))); }
public void translatesMissingWikiWords() throws Exception { ParserTestHelper.assertTranslatesTo(pageOne, "PageNine", "PageNine<a title=\"create page\" href=\"PageNine?edit&nonExistent=true\">[?]</a>");
private void updatePage(LedgerEntryPage lep) throws IOException { if (!lep.isClean()) { throw new IOException("Trying to update a dirty page"); } FileInfo fi = null; try { fi = getFileInfo(lep.getLedger(), true);
public void fillWriteBuffer(boolean optimizeGets) { if(toWrite == 0) { wbuf.clear();
private void putSSLProperties(X509Util x509Util) { properties.put(x509Util.getSslProtocolProperty(), System.getProperty(x509Util.getSslProtocolProperty())); properties.put(x509Util.getSslEnabledProtocolsProperty(), System.getProperty(x509Util.getSslEnabledProtocolsProperty())); properties.put(x509Util.getSslCipherSuitesProperty(), System.getProperty(x509Util.getSslCipherSuitesProperty())); properties.put(x509Util.getSslKeystoreLocationProperty(), System.getProperty(x509Util.getSslKeystoreLocationProperty())); properties.put(x509Util.getSslKeystorePasswdProperty(), System.getProperty(x509Util.getSslKeystorePasswdProperty())); properties.put(x509Util.getSslKeystorePasswdPathProperty(), System.getProperty(x509Util.getSslKeystorePasswdPathProperty())); properties.put(x509Util.getSslKeystoreTypeProperty(), System.getProperty(x509Util.getSslKeystoreTypeProperty())); properties.put(x509Util.getSslTruststoreLocationProperty(), System.getProperty(x509Util.getSslTruststoreLocationProperty())); properties.put(x509Util.getSslTruststorePasswdProperty(), System.getProperty(x509Util.getSslTruststorePasswdProperty())); properties.put(x509Util.getSslTruststorePasswdPathProperty(), System.getProperty(x509Util.getSslTruststorePasswdPathProperty())); properties.put(x509Util.getSslTruststoreTypeProperty(), System.getProperty(x509Util.getSslTruststoreTypeProperty())); properties.put(x509Util.getSslContextSupplierClassProperty(), System.getProperty(x509Util.getSslContextSupplierClassProperty())); properties.put(x509Util.getSslHostnameVerificationEnabledProperty(), System.getProperty(x509Util.getSslHostnameVerificationEnabledProperty())); properties.put(x509Util.getSslCrlEnabledProperty(), System.getProperty(x509Util.getSslCrlEnabledProperty())); properties.put(x509Util.getSslOcspEnabledProperty(), System.getProperty(x509Util.getSslOcspEnabledProperty())); properties.put(x509Util.getSslClientAuthProperty(), System.getProperty(x509Util.getSslClientAuthProperty())); properties.put(x509Util.getSslHandshakeDetectionTimeoutMillisProperty(), System.getProperty(x509Util.getSslHandshakeDetectionTimeoutMillisProperty())); }
private void addCharacterFromDeltaOrText(final int i, final Delta<Character> delta) { if (delta == null) { stringBuilder.append(HtmlUtil.escapeHTML(getText().get(i).toString()));
public void testFileMissing() throws Exception { update = new FileUpdate(updater.context.getRootPagePath(), "images/missingFile", "files/images"); update.doUpdate(); }
public void onEachFile( InputStream inputStream, String filename, String linkname, String user, int uid, String group, int gid, int mode, long size ) throws IOException {
private void doSimpleRun() throws Exception { receiver.receiveSocket(); client.start(port); Thread.sleep(100); client.send("<html><table><tr><td>fitnesse.testutil.PassFixture</td></tr></table></html>"); client.done(); client.join(); }
static String op2String(int op) { switch (op) { case OpCode.notification:
void paintWithoutValidate(Door door) { } @Validate void paint(Window w) { } } @Test public void shouldDoNothingIfTheMethodShouldNotBeValidatedButTheParamIsUnvalid() throws NoSuchMethodException, InterceptionException, IOException { final ResourceMethod method = mockery.methodFor(Car.class, "paintWithoutValidate", Door.class); mockery.checking(new Expectations() { { one(stack).next(method, null); } }); interceptor.intercept(stack, method, null); mockery.assertIsSatisfied(); } @Test public void shouldDoNothingIfTheMethodAsksForValidationOfNoParams() throws NoSuchMethodException, InterceptionException, IOException { final ResourceMethod method = mockery.methodFor(Car.class, "paintWithoutValidate", Door.class); mockery.checking(new Expectations() { { one(stack).next(method, null); } }); interceptor.intercept(stack, method, null); mockery.assertIsSatisfied(); } }
protected void makeNodes(Document rssDocument, Element itemElement1, String title, String author, String pubDate) { XmlUtil.addTextNode(rssDocument, itemElement1, "title", title); XmlUtil.addTextNode(rssDocument, itemElement1, "author", author); XmlUtil.addTextNode(rssDocument, itemElement1, "pubDate", pubDate); }
private void subWriteValue(ProtectedBinary value) throws IllegalArgumentException, IllegalStateException, IOException { if (value.isProtected()) { xml.attribute(null, AttrProtected, ValTrue);
public Maybe<Symbol> parse(Symbol current, Parser parser) { List<Symbol> tokens = parser.moveNext(new SymbolType[] {SymbolType.Whitespace, SymbolType.Text}); if (tokens.size() == 0) return Symbol.nothing; String anchor = tokens.get(1).getContent(); if (!ScanString.isWord(anchor)) return Symbol.nothing; return new Maybe<Symbol>(new Symbol(SymbolType.AnchorName).add(tokens.get(1))); }
private List<Update> addAllFilesToBeReplaced() { List<Update> updates = new ArrayList<Update>(); for (String updateableFile : updateList) { File path = getCorrectPathForTheDestination(updateableFile); String source = getCorrectPathFromJar(updateableFile); updates.add(new ReplacingFileUpdate(source, path)); } return updates; }
public static String makePageHtml(PageData pageData) { StringBuffer buffer = new StringBuffer(); buffer.append(WikiPageUtil.getHeaderPageHtml(pageData.getWikiPage())); buffer.append(pageData.getHtml()); return buffer.toString(); }
public void testInvalidSnapshot(@TempDir File tmpDir) throws IOException { assertFalse(SnapStream.isValidSnapshot(null)); checkInvalidSnapshot("snapshot.180000e3a2", tmpDir); checkInvalidSnapshot("snapshot.180000e3a2.gz", tmpDir); checkInvalidSnapshot("snapshot.180000e3a2.snappy", tmpDir); }
synchronized static void sendChange(int percentage) { long now = System.currentTimeMillis(); long start = now; ReporterThread.percentage = percentage; for (SlaveThread st : slaves.toArray(new SlaveThread[0])) { st.send(percentage); } now = System.currentTimeMillis(); long delay = now - start; if (delay > 1000) { System.out.println("Delay of " + delay + " to send new percentage"); } lastChange = now; }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root"); assertions = new ArrayList<>(); slimTableFactory = new SlimTableFactory(); slimTableFactory.addTableType("localizedScript", ScriptTableTest.LocalizedScriptTable.class); }
public FieldVisitor visitField(final int access, final String name, final String desc, final String signature, final Object value) { return this; }
private void fillData() { populateText(R.id.entry_title, mEntry.title); populateText(R.id.entry_user_name, mEntry.username); populateText(R.id.entry_url, mEntry.url); populateText(R.id.entry_password, getString(R.string.MaskedPassword)); DateFormat df = DateFormat.getInstance(); populateText(R.id.entry_created, df.format(mEntry.tCreation)); populateText(R.id.entry_modified, df.format(mEntry.tLastMod)); populateText(R.id.entry_accessed, df.format(mEntry.tLastAccess)); populateText(R.id.entry_comment, mEntry.additional); TextView comment = (TextView)findViewById(R.id.entry_comment); comment.setScrollBarStyle(View.SCROLLBARS_INSIDE_INSET); comment.setMovementMethod(new ScrollingMovementMethod());
public void setUp() throws Exception { qu = new QuorumUtil(1); }
ResourceMethod parse(String uri, HttpMethod method, RequestInfo request); }
public void setUri(String uri) throws IOException; public Test getTest(String name) throws IOException; public List<Test> getSuite(String name) throws IOException; public void prepareResultRepository(TestResultRepository resultRepository) throws IOException; }
public void update() throws IOException { if (shouldUpdate()) { LOG.info("Unpacking new version of FitNesse resources. Please be patient...");
Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void shouldUseTheDefaultLocale() throws ParseException { mockery.checking(new Expectations() {{ one(request).getAttribute("javax.servlet.jsp.jstl.fmt.locale.request"); will(returnValue(null)); one(request).getSession(); will(returnValue(session)); one(session).getAttribute("javax.servlet.jsp.jstl.fmt.locale.session"); will(returnValue(null)); one(context).getAttribute("javax.servlet.jsp.jstl.fmt.locale.application"); will(returnValue(null)); one(context).getInitParameter("javax.servlet.jsp.jstl.fmt.locale"); will(returnValue(null)); one(request).getLocale(); will(returnValue(Locale.getDefault())); }}); Date date = new SimpleDateFormat("dd/MM/yyyy").parse("10/05/2010"); Calendar cal = new GregorianCalendar(); cal.setTime(date); String formattedToday = DateFormat.getDateInstance(DateFormat.SHORT).format(date); assertThat(converter.convert(formattedToday, Calendar.class, bundle), is(equalTo(cal))); mockery.assertIsSatisfied(); }
private synchronized boolean compareAndSetState(State[] expectedStates, State update) { for (State expected : expectedStates) { if (state == expected) { setState(update); return true; } } return false; }
public static Predicate<Route> allow(final HttpMethod method) { return new Predicate<Route>() { public boolean apply(Route route) {
public boolean parseOptions(String[] args) { List<String> argList = Arrays.asList(args); Iterator<String> it = argList.iterator(); while (it.hasNext()) { String opt = it.next(); try { if (opt.equals("-server")) { options.put("server", it.next()); } else if (opt.equals("-timeout")) { options.put("timeout", it.next()); } else if (opt.equals("-r")) { options.put("readonly", "true"); } else if (opt.equals("-client-configuration")) { options.put("client-configuration", it.next()); } else if (opt.equals("-waitforconnection")) { options.put("waitforconnection", "true"); } } catch (NoSuchElementException e) { System.err.println("Error: no argument found for option " + opt); return false; } if (!opt.startsWith("-")) { command = opt; cmdArgs = new ArrayList<String>(); cmdArgs.add(command); while (it.hasNext()) { cmdArgs.add(it.next()); } return true; } } return true; }
public void testZeroTimeout() throws Exception { try { client = new MemcachedClient(new DefaultConnectionFactory() {
public void testConcatenationOperationPrependCloning() { long casId = 82757248; ConcatenationOperation op = ofact.cat(ConcatenationType.prepend, casId, TEST_KEY, testData, genericCallback); ConcatenationOperation op2 = cloneOne( ConcatenationOperation.class, op); assertKey(op2); assertSame(ConcatenationType.prepend, op2.getStoreType()); assertCallback(op2); }
public List<OpResult> commit() throws InterruptedException, KeeperException { return zk.multi(ops); }
private String getResponseContentUsingSearchString(String searchString) throws Exception { request.addInput("searchString", searchString); Response response = responder.makeResponse(new FitNesseContext(root), request); MockResponseSender sender = new MockResponseSender(); sender.doSending(response); return sender.sentData(); }
public static void includeInto(PageData pageData, boolean isSuite) throws Exception { new SetupTeardownAndLibraryIncluder(pageData).includeInto(isSuite); }
public boolean hasChildPage(String name) { return sourcePage.hasChildPage(name); }
public void testSystemStarted(TestSystem testSystem) { } @Override public void testStarted(WikiTestPage test) { } @Override public void testOutputChunk(String output) { } @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) { } @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) { } @Override public void testComplete(WikiTestPage test, TestSummary testSummary) { } }
public void complexFunctionCallWithManyArguments() throws Exception { buildInstructionsFor("|eat|3|meals with|12|grams protein|3|grams fat |\n"); List<CallInstruction> expectedInstructions = list( new CallInstruction("scriptTable_id_0", "scriptTableActor", "eatMealsWithGramsProteinGramsFat", new Object[]{"3", "12", "3"}) ); assertEquals(expectedInstructions, instructions); }
public String render() { return WikiPageUtil.getFooterPageHtml(page); }
public void write(String output) {
public void testGetSendBufferSize() throws IOException { serverSideSocket.getSendBufferSize(); Assert.assertFalse(serverSideSocket.isModeKnown()); }
private void insertPagesOfThisGroup(LinkedList<WikiPage> pageGroup) { for (WikiPage page : pageGroup) pageList.add(page);
int getMaxConcurrentDiffSyncs();  void setMaxConcurrentDiffSyncs(int maxConcurrentDiffSyncs); }
public void visitEnd() { checkState(); end = true; cv.visitEnd(); }
private boolean isParticipant(long sid) { return self.getQuorumVerifier().getVotingMembers().containsKey(sid); }
public String toString() { if (supportedMethods.isEmpty()) { return String.format("<< Route: %s => %s >>", originalUri, resourceMethod); } return String.format("<< Route: %s %s=> %s >>", originalUri, supportedMethods, resourceMethod); }
public void testConstructionWithFile() throws Exception { option = new FormattingOption("mock", "testOutput.txt", output, "localhost", 8081, "SomePage"); assertEquals(FileOutputStream.class, option.output.getClass()); option.output.write("sample data".getBytes()); option.output.close(); assertEquals("sample data", FileUtil.getFileContent("testOutput.txt")); }
private Action continueStack(final DefaultInterceptorStack stack) { return new Action() { public Object invoke(Invocation invocation) throws Throwable {
void add(long value); void reset(); Map<String, Long> values(); }
public void stop() { if (testSystem != null) { testSystem.kill();
int markFunctionEnd(int functionStart) { int offset = getCurrentOffset(); append((char)FUNCTION_END); return offset; }
public String call(String instanceName, String methodName, String... args) { Object instance = getInstance(instanceName); try { return tryToInvokeMethod(instance, methodName, replaceVariables(args));
private void initEncryptKey( final boolean deleteExistingKey) throws Exception { createNewKeyIfNeeded(deleteExistingKey); keyStore.load(null); final SecretKey key = (SecretKey) keyStore.getKey(ALIAS_KEY, null); cipher.init(Cipher.ENCRYPT_MODE, key); cryptoInitOk = true;
public void doExecuteTests() { sendPreTestNotification(); try { performExecution(); } catch (Exception e) { formatters.errorOccurred(e); } exitCode = formatters.getErrorCount(); }
public void processResult(int rc, String path, Object ctx, String name) { }}, null); } } } finally { if(zk != null) zk.close(); } } }
ResourceMethod gimmeThis(String resourceName, String methodName); }
protected void doSending() throws Exception { fastTest |= request.hasInput("debug"); data = page.getData(); createFormatterAndWriteHead(); sendPreTestNotification(); performExecution(); formatter.allTestingComplete(); }
public int hashCode() { int result = k.hashCode(); result = 31 * result + method.hashCode(); result = 31 * result + nArgs; return result; }
public int encode( byte[] data, int off, int length, OutputStream out) throws IOException { for (int i = off; i < (off + length); i++) { int v = data[i] & 0xff; out.write(encodingTable[(v >>> 4)]); out.write(encodingTable[v & 0xf]); } return length * 2; }
Transcoder<Object> getDefaultTranscoder();  boolean shouldOptimize();  int getReadBufSize();  HashAlgorithm getHashAlg();  long getMaxReconnectDelay();  AuthDescriptor getAuthDescriptor();  int getTimeoutExceptionThreshold();  MetricType enableMetrics();  MetricCollector getMetricCollector(); }
public List<List<T>> split(List<T> source, int partitionCount) { List<List<T>> result = new ArrayList<>(partitionCount); for (int j = 0; j < partitionCount; j++) { result.add(new LinkedList<>()); } List<T> notFound = addUsingPositionFunction(source, result); if (!notFound.isEmpty()) { List<List<T>> extraItems = notFoundFunction.apply(result, notFound); if (partitionCount < extraItems.size()) { throw new IllegalArgumentException("Extra items use too many partitions: " + extraItems.size()); } result = combinePlacedAndNotFound(result, extraItems); } return result; }
public Maybe<String> findVariable(String name) { Maybe<String> result = page.getSpecialVariableValue(name); if (!result.isNothing()) return result; result = findVariableInPages(name); if (!result.isNothing()) return result; return findVariableInContext(name); }
public void testTooManySyncsEssential(LearnerSyncThrottler.SyncType syncType) { assertThrows(SyncThrottleException.class, () -> { LearnerSyncThrottler throttler = new LearnerSyncThrottler(5, syncType);
void addColumnToRow(int row, String content); void appendChildTable(int row, Table table); void updateContent(int row, TestResult testResult); void updateContent(int col, int row, SlimTestResult testResult); void updateContent(int col, int row, SlimExceptionResult exceptionResult); Table asTemplate(CellContentSubstitution substitution) throws SyntaxError;
private void quitLeading() { synchronized (connectingFollowers) { quitWaitForEpoch = true; connectingFollowers.notifyAll(); } ServerMetrics.getMetrics().QUIT_LEADING_DUE_TO_DISLOYAL_VOTER.add(1); LOG.info("Quit leading due to voter changed mind."); }
public void onHttpResultShouldThrowExceptionsOnMoved() throws Exception { HttpResult httpResult = mock(HttpResult.class); when(result.use(HttpResult.class)).thenReturn(httpResult); when(httpResult.movedPermanentlyTo(RandomComponent.class)).thenReturn(new RandomComponent()); try { factory.instanceFor(HttpResult.class, errors).movedPermanentlyTo(RandomComponent.class); } catch (ValidationException e) { Assert.fail("The exception must occur only on method call"); } factory.instanceFor(HttpResult.class, errors).movedPermanentlyTo(RandomComponent.class).random(); }
public void queueEvent(WatchedEvent event) { LOG.info("queueEvent() called: {}", event); clientCnxn.eventThread.queueEvent(event); }
public void testMissingPageDoesNotGetCreated() throws Exception { request.setResource("MissingPage"); responder.makeResponse(new FitNesseContext(root), request); assertFalse(root.hasChildPage("MissingPage")); }
String getProperty(String propertyKey); List<Symbol> getSymbols(SymbolType symbolType); }
private void addTMNTUsers() throws Exception { passwords.savePassword("Leonardo", "katana"); passwords.savePassword("Donatello", "bo"); passwords.savePassword("Michaelangelo", "nunchaku"); passwords.savePassword("Rafael", "sai"); }
public void testWikiImportUpdate() throws Exception { WikiImportProperty property = new WikiImportProperty("http://my.host.com/PageRoot"); property.setRoot(true); testWikiImportUpdateWith(property); assertSubString("imports its subpages from", content); assertSubString("value=\"Update Subpages\"", content); assertSubString("Automatically update imported content when executing tests", content); }
public void shouldReplicateMethodParametersToNextRequest() throws Exception { when(provider.parameterNamesFor(any(Method.class))).thenReturn(new String[] {"first", "second", "third"}); when(method.getParameters()).thenReturn(new Object[] {1, 2.0, 3l}); outjector.outjectRequestMap(); verify(result).include("first", 1); verify(result).include("second", 2.0); verify(result).include("third", 3l); }
public int getQuorumSize();  public int getInitLimit();  public int getSyncLimit();  public void setInitLimit(int initLimit);  public void setSyncLimit(int syncLimit);  public boolean isSslQuorum();  public boolean isPortUnification();  public long getObserverElectionDelayMS();  public void setObserverElectionDelayMS(long delayMS); }
public void acceptOutput(String output) throws Exception; public void acceptResults(TestSystem.TestSummary testSummary) throws Exception; public void exceptionOccurred(Exception e); }
public void testActionPropertiesHtml() throws Exception { WikiPage page = root.addChildPage("SomePage"); PageData data = page.getData(); SimpleResponse response = (SimpleResponse) new PropertiesResponder().makeResponse(context, request); String html = response.getContent(); assertSubString("<div style=\"float: left; width: 180px;\">Actions:", html); assertSubString("Actions:", html); assertSubString("<input type=\"checkbox\" name=\"Edit\" checked=\"true\"/> - Edit", html); assertSubString("<input type=\"checkbox\" name=\"Versions\" checked=\"true\"/> - Versions", html); assertSubString("<input type=\"checkbox\" name=\"Properties\" checked=\"true\"/> - Properties", html); assertSubString("<input type=\"checkbox\" name=\"Refactor\" checked=\"true\"/> - Refactor", html); assertSubString("<input type=\"checkbox\" name=\"WhereUsed\" checked=\"true\"/> - WhereUsed", html); }
public void testExecutionReport_Ok() throws Exception { WikiPageDummy wikiPageDummy = new WikiPageDummy("This.Is.Not.A.Real.Location"); MockCommandRunner mockCommandRunner = new MockCommandRunner(); ExecutionLog executionLog = new ExecutionLog(wikiPageDummy, mockCommandRunner); ExecutionStatus result; if(executionLog.exceptionCount() > 0) result = ExecutionStatus.ERROR; else if(executionLog.hasCapturedOutput()) result = ExecutionStatus.OUTPUT; else result = ExecutionStatus.OK; assertSame(ExecutionStatus.OK, result); }
public void localizedRejectWithFunctionCall() throws Exception { buildInstructionsFor("|localized reject|function|arg|\n", true); List<CallInstruction> expectedInstructions = asList( new CallInstruction("localizedScriptTable_id_0", "localizedScriptTableActor", "function", new Object[]{"arg"}) ); assertEquals(expectedInstructions, instructions()); }
public void AddEntry(PwEntryV4 pe, boolean takeOwnership) { AddEntry(pe, takeOwnership, false); }
public void testUnicodeCharacters() { SimpleResponse response = new SimpleResponse(); response.setContent("\uba80\uba81\uba82\uba83"); response.readyToSend(this); assertSubString("\uba80\uba81\uba82\uba83", text); }
public void setUp() throws Exception { factory = new ResponderFactory("testDir"); request = new MockRequest(); root = InMemoryPage.makeRoot("root"); crawler = root.getPageCrawler(); nonExistantPage = new WikiPageDummy(); }
public void shouldFormatReturnValues() { AssignInstruction instruction = new AssignInstruction(ID, "symbolName", "value"); InstructionResult result = instruction.execute(executor); assertEquals(ID, result.getId()); assertTrue(result.hasResult()); assertFalse(result.hasError()); assertEquals("OK", result.getResult()); }
public DERObject toASN1Object() { ASN1EncodableVector v = new ASN1EncodableVector(); v.add(digestedObjectType); if (otherObjectTypeID != null) { v.add(otherObjectTypeID); } v.add(digestAlgorithm); v.add(objectDigest); return new DERSequence(v); }
protected static String javaExecutable() { String javaHome = System.getenv("JAVA_HOME"); String result = "java"; if (javaHome != null) { String separator = File.separator; result = javaHome + separator + "bin" + separator + "java"; } return result; }
private boolean isEmailAddress(String text) { return text.indexOf("@") > 0 && Pattern.matches(eMailPattern, text); }
public void equalsRealPage() { assertEquals(symPage, pageTwo); assertEquals(pageTwo, symPage); assertEquals(symPage.hashCode(), pageTwo.hashCode()); assertEquals(pageTwo.hashCode(), symPage.hashCode()); }
public String sendRequestStop() throws Exception { return sendRequest("stop", null); }
void removeChildPage(String name); List<WikiPage> getChildren(); String getName(); PageData getData(); ReadOnlyPageData readOnlyData(); Collection<VersionInfo> getVersions(); PageData getDataVersion(String versionName); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage(); }
void evaluateExpectation(Object returnValues); void handleException(ExceptionResult exceptionResult); }
public void multipleReplacements() throws Exception { pageBuilder.addPage(somePage, PathParser.parse("ChildPage"), "this page has something too."); String content = getResponseContentUsingSearchReplaceString("something", "replacedthing"); assertThat(content, containsString("SomePage")); assertThat(content, containsString("ChildPage")); }
String getSymbol(String symbolName); void setSymbol(String symbolName, String value); void addScenario(String scenarioName, ScenarioTable scenarioTable); ScenarioTable getScenario(String scenarioName); @Deprecated void addExpectation(Expectation e); Collection<ScenarioTable> getScenarios(); void incrementPassedTestsCount(); void incrementFailedTestsCount(); void incrementErroredTestsCount(); void incrementIgnoredTestsCount(); }
public Table firstCellValue(Table table) { return table.tableAt(0,0,0); }
void recordTestResult(TestResult result) throws IOException; void addFile(File f, String relativeFilePath) throws IOException; }
public void start(HttpSession session) { listeners.removeAll(session.getId()); }
public void testGenerateSuiteMapWithMultipleTestSystems() throws Exception { WikiPage slimPage = addTestToSuite("SlimTest", simpleSlimDecisionTable); Map<TestSystem.Descriptor, LinkedList<WikiPage>> map = SuiteResponder.makeMapOfPagesByTestSystem(suite, root, null); TestSystem.Descriptor fitDescriptor = TestSystem.getDescriptor(testPage.getData()); TestSystem.Descriptor slimDescriptor = TestSystem.getDescriptor(slimPage.getData()); List<WikiPage> fitList = map.get(fitDescriptor); List<WikiPage> slimList = map.get(slimDescriptor); assertEquals(1, fitList.size()); assertEquals(1, slimList.size()); assertEquals(testPage, fitList.get(0)); assertEquals(slimPage, slimList.get(0)); }
public void testResponderIsSecureReadOperation() throws Exception { Responder responder = new WikiPageResponder(); assertTrue(responder instanceof SecureResponder); SecureOperation operation = ((SecureResponder)responder).getSecureOperation(); assertEquals(SecureReadOperation.class, operation.getClass()); }
private void initializeZookeper(){ LOG.info("Instantiate ZK Client");
private static void registerIfClassPresent(List<Class<? extends Converter<?>>> components, String className, Class<? extends Converter<?>>... types) { try { Class.forName(className);
public void testAddingCredentials() throws Exception { builder.addCredentials("Aladdin", "open sesame"); assertSubString("Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==", builder.getText()); }
private void createRoot() throws Exception { root = FileSystemPage.makeRoot(ROOT, "ExternalRoot", revisionController); }
public void createSlimServiceFailsFastWhenSlimPortIsNotAvailable() throws Exception { final ServerSocket serverSocket = new ServerSocket(); try { serverSocket.bind(null);
public Object[] query() throws Exception { PayCheckRecord[] payCheckRecords = new PayCheckRecord[4]; payCheckRecords[0] = new PayCheckRecord(1, "3/1/03", "Bob", 1000); payCheckRecords[1] = new PayCheckRecord(2, "3/1/03", "Bill", 2002); payCheckRecords[2] = new PayCheckRecord(1, "4/1/03", "Bob", 1015); payCheckRecords[3] = new PayCheckRecord(2, "4/1/03", "Bill", 2003); return payCheckRecords; }
private void insertAndProcessScript(String script, SlimTable parentTable, int row) { try { TableScanner ts = new HtmlTableScanner(script);
public void canBuildInstructionsForMultipleCallsToSameFunction() throws Exception { makeDecisionTableAndBuildInstructions(decisionTableWithSameFunctionMultipleTimes); int n = 0; List<Instruction> expectedInstructions = list( new MakeInstruction(id(n++), "decisionTable_id", "fixture", new Object[]{"argument"}), new CallInstruction(id(n++), "decisionTable_id", "table", new Object[]{list(list("func?", "func?"), list("3", "5"), list("7", "9"))}), new CallInstruction(id(n++), "decisionTable_id", "beginTable"), new CallInstruction(id(n++), "decisionTable_id", "reset"), new CallInstruction(id(n++), "decisionTable_id", "execute"), new CallInstruction(id(n++), "decisionTable_id", "func"), new CallInstruction(id(n++), "decisionTable_id", "func"), new CallInstruction(id(n++), "decisionTable_id", "reset"), new CallInstruction(id(n++), "decisionTable_id", "execute"), new CallInstruction(id(n++), "decisionTable_id", "func"), new CallInstruction(id(n++), "decisionTable_id", "func"), new CallInstruction(id(n++), "decisionTable_id", "endTable") ); assertEquals(expectedInstructions, instructions); }
public void correctInstructionsForLibraryTableForOneLibrary() throws Exception { buildInstructionsFor("|echo support|\n"); List<Object> expectedInstructions = list( list("library_id_0", "make", "library1", "EchoSupport") ); assertEquals(expectedInstructions, instructions); }
public void testHostnameVerificationWithInvalidIPAddress() throws Exception { String badhostnameKeystorePath = tmpDir + "/badhost.jks"; X509Certificate badHostCert = buildEndEntityCert( defaultKeyPair, rootCertificate, rootKeyPair.getPrivate(), null, "140.211.11.105", null, null); writeKeystore(badHostCert, defaultKeyPair, badhostnameKeystorePath); testHostnameVerification(badhostnameKeystorePath, false); }
public void scriptWithActor() throws Exception { buildInstructionsForWholeTable("|script|Bob|\n"); List<MakeInstruction> expectedInstructions = list( new MakeInstruction("htmlScriptTable_id_0", "htmlScriptTableActor", "Bob") ); assertEquals(expectedInstructions, instructions()); }
protected void assertStoreCallback(Operation op) { assertSame(storeCallback, op.getCallback()); }
public void testMakeActionsWithTestButtonWhenNameStartsWithTest() { String pageName = "TestSomething"; String html = getActionsHtml(pageName); verifyDefaultLinks(html, pageName); assertSubString("<a href=\"" + pageName + "?test\" accesskey=\"t\">Test</a>", html); }
public void include(String key, Object value) { request.setAttribute(key, value); }
protected List<File> findSourceWithFilters() throws Exception { return findSourceWithFilters(getSourceDirectories()); }
int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
public void shouldUseVRaptor3AlgorithmIfNotAVRaptor2Component() throws SecurityException, NoSuchMethodException { final Resource resource = mockery.resource(NonVRaptorComponent.class); this.router.register(resource); assertThat(router.parse("id", HttpMethod.POST, request), is(equalTo((ResourceMethod)new DefaultResourceMethod(resource, NonVRaptorComponent.class.getMethod("id"))))); mockery.assertIsSatisfied(); }
public void passAuth() throws Exception { resetEnsembleAuth("woo", true); connectToEnsemble("woo"); }
public void setup() throws Exception {
public void whenPluginsDirectoryDoesNotExist() throws Exception { PluginsClassLoader.loadPlugins("nonExistingRootDirectory"); assertTrue("didn't cause exception", true); }
public QuorumPeer create() throws IOException { return new QuorumPeer(); }
public void testAnchorsDeclaration() throws Exception { ParentWidget page = new WidgetRoot("!anchor name ", mockSource); WikiWidget widget = page.nextChild(); assertEquals(AnchorDeclarationWidget.class, widget.getClass());
public void executeAndCheck(String agentName, String agentParameters, String clientName, String clientParameters) throws Exception { WikiPage testPage = WikiPageUtil.addPage(root, PathParser.parse("TestPage"), "!define TEST_SYSTEM {slim}\n" + "!define SLIM_SSL {"+ agentParameters +"}\n" + "!define slim.timeout {10}\n" + "!define slim.pool.size {1}\n" + "!define wiki.protocol.ssl.parameter.class {"+ clientParameters + "}\n" ); WikiPageDescriptor descriptor = new WikiPageDescriptor(testPage, false, false, "test-classes" + File.pathSeparator + "classes"); descriptor.getExecutionLogListener().addExecutionLogListener(new ConsoleExecutionLogListener()); System.out.print("----------------------------------------------------\n"); System.out.print("SLIM_SSL: " + descriptor.getVariable("SLIM_SSL") + "\n"); System.out.print("slim.timeout: " + descriptor.getVariable("slim.timeout") + "\n"); System.out.print("wiki.protocol.ssl.parameter.class: " + descriptor.getVariable("wiki.protocol.ssl.parameter.class") + "\n"); System.out.print("TEST_SYSTEM: " + descriptor.getVariable("TEST_SYSTEM") + "\n"); SlimClientBuilder clientBuilder = new SlimClientBuilder(descriptor); String testSystemName = clientBuilder.getTestSystemName(); assertEquals("slim:" + "fitnesse.slim.SlimService", testSystemName); SlimCommandRunningClient client = clientBuilder.build(); boolean isConnected; String myName; String peerName; client.start(); try{ isConnected = client.isConnected(); myName = client.getMyName(); peerName = client.getPeerName(); }finally{ client.bye(); client.kill(); } assertTrue("Got connected to client:", isConnected); System.out.print("My Name is: " + myName +"\n"); System.out.print("Peer Name is: " + peerName+"\n"); assertEquals("Client Name", clientName, myName); assertEquals("Agent Name", agentName, peerName);
public void testContentFilter() throws Exception { SaveResponder.contentFilter = new ContentFilter() { public boolean isContentAcceptable(String content, String page) { return false; } }; crawler.addPage(root, PathParser.parse("ChildPage")); prepareRequest("ChildPage"); Response response = responder.makeResponse(FitNesseUtil.makeTestContext(root), request); assertEquals(200, response.getStatus()); MockResponseSender sender = new MockResponseSender(); sender.doSending(response); assertSubString("Your changes will not be saved!", sender.sentData()); }
void incrementFailedTestsCount(); void incrementErroredTestsCount(); void incrementIgnoredTestsCount(); void increment(ExecutionResult testSummary); void increment(TestSummary testSummary); }
public void checkWithFunction() throws Exception { buildInstructionsFor("|check|function|arg|result|\n"); List<CallInstruction> expectedInstructions = list( new CallInstruction("scriptTable_id_0", "scriptTableActor", "function", new Object[]{"arg"}) ); assertEquals(expectedInstructions, instructions()); }
public void oneRowWithPartialMatch() throws Exception { assertQueryResults("|2|4|\n", fitnesse.util.ListUtility.list(
public long getMaxRequestLatency();  public long getPacketsReceived();  public long getPacketsSent();  public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize(); }
public Collection<? extends VersionInfo> history(final File... files) { try { return history(files[0], new LogCommandSpec() {
public void shouldRegisterComponentAndImplementedInterfaces() { mockery.checking(new Expectations() {{ one(registry).register(Runnable.class, RunnableComponent.class); one(registry).register(RunnableComponent.class, RunnableComponent.class); }}); abstractRegistry.deepRegister(RunnableComponent.class); mockery.assertIsSatisfied(); }
public void testFail() throws Exception { QuorumBase qb = new QuorumBase(); qb.setUp(); System.out.println("Comment: the servers are at " + qb.hostPort); ZooKeeper zk = qb.createClient(); zk.create("/test", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); zk.close(); qb.shutdown(qb.s1); qb.shutdown(qb.s2); qb.shutdown(qb.s3); qb.shutdown(qb.s4); qb.shutdown(qb.s5); String hp = qb.hostPort.split(",")[0]; ZooKeeperServer zks = new ZooKeeperServer(qb.s1.getTxnFactory().getSnapDir(), qb.s1.getTxnFactory().getDataDir(), 3000); final int PORT = Integer.parseInt(hp.split(":")[1]); NIOServerCnxn.Factory factory = new NIOServerCnxn.Factory( new InetSocketAddress(PORT)); factory.startup(zks); System.out.println("Comment: starting factory"); assertTrue("waiting for server up", ClientBase.waitForServerUp("127.0.0.1:" + PORT, QuorumTest.CONNECTION_TIMEOUT)); factory.shutdown(); assertTrue("waiting for server down", ClientBase.waitForServerDown("127.0.0.1:" + PORT, QuorumTest.CONNECTION_TIMEOUT)); System.out.println("Comment: shutting down standalone"); }
public void shouldInvokeListenersOnStop() throws Exception { scope.registerDestroyListener(listener); scope.stop(session); verify(listener).onEvent(); }
public static ContextConfigurator empty() { return new ContextConfigurator(); }
private static void compareNodes(List<TreeInfo.TreeNode> leftList, List<TreeInfo.TreeNode> rightList, int byteThreshold, int nodeThreshold, boolean debug, boolean interactive) { Comparator<TreeInfo.TreeNode> alphabeticComparator = TreeInfo.MakeAlphabeticComparator(); Collections.sort(leftList, alphabeticComparator); Collections.sort(rightList, alphabeticComparator); int leftIndex = 0; int rightIndex = 0; boolean leftRemaining = leftList.size() > leftIndex; boolean rightRemaining = rightList.size() > rightIndex; while (leftRemaining || rightRemaining) { TreeInfo.TreeNode leftNode = null;
private void doWarnForRelativePath(File file) { if(file.isAbsolute()) return; if(file.getPath().substring(0, 2).equals("."+File.separator)) return; log.warn(file.getPath()+" is relative. Prepend ." +File.separator+" to indicate that you're sure!");
private String makeLinkToNonExistentWikiPage(String text, String url) { HtmlTag link = new HtmlTag("a", "[?]"); link.addAttribute("title", "create page"); link.addAttribute("href", url+ "?edit&nonExistent=true"); return new HtmlText(text).html() + link.htmlInline(); }
public void add(String text) throws Exception { if(text != null) add(getEncodedBytes(text));
public MethodVisitor visitMethod( final int access, final String name, final String desc, final String signature, final String[] exceptions) { return cv.visitMethod(access, name, desc, signature, exceptions); }
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException { if (result.used()) { return; } result.use(Results.page()).forward(methodResult.getValue()); }
VersionInfo addDirectory(final FileVersion filePath) throws IOException;  void rename(FileVersion fileVersion, File originalFile) throws IOException;  void delete(File... files); }
public void register(Resource resource) { delegate.register(resource); }
private void adjustEpochNearEnd() { zksLeader.setZxid((zksLeader.getZxid() & 0xffffffff00000000L) | 0xfffffffcL); }
synchronized public void addSession(long sessionId, int sessionTimeout) { sessionsWithTimeouts.put(sessionId, sessionTimeout); touchTable.put(sessionId, sessionTimeout); }
public Response makeResponse(final FitNesseContext context, final Request request) throws Exception { this.context = context; intializeResponse(request); if (shouldNotDelete()) response.redirect(context.contextRoot, "FrontPage"); else tryToDeletePage(request); return response; }
public void setup() { this.mockery = new VRaptorMockery(true); this.client = new Client(); this.evaluation = mockery.mock(Evaluation.class); this.removal = mockery.mock(EmptyElementsRemoval.class); this.handler = new ListNullHandler(removal); context = (OgnlContext) Ognl.createDefaultContext(null); context.put("proxifier", new CglibProxifier(new ReflectionInstanceCreator())); }
public void testRunnerDefault() throws Exception { String pageText = "!define TEST_SYSTEM {slim}\n"; WikiPage page = makeTestPage(pageText); Descriptor descriptor = new WikiPageDescriptor(page.readOnlyData(), false, getClassPath(page)); assertEquals("fitnesse.slim.SlimService", descriptor.getTestRunner()); Descriptor debugDescriptor = new WikiPageDescriptor(page.readOnlyData(), true, getClassPath(page)); assertEquals("fitnesse.slim.SlimService", debugDescriptor.getTestRunner()); }
public void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException { registerRulesFor(MyResource.class); final Method method = mockery.methodFor(MyResource.class, "customizedPath").getMethod(); allowParametersCreation(method); String url = router.urlFor(MyResource.class, method, new Object[] {}); assertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method))); mockery.assertIsSatisfied(); }
public void testSystemStopped(TestSystem testSystem, Throwable cause) { if (cause != null) { errorOccurred(cause);
public void testParallelNoThrottle(LearnerSyncThrottler.SyncType syncType) { final int numThreads = 50; final LearnerSyncThrottler throttler = new LearnerSyncThrottler(numThreads, syncType); ExecutorService threadPool = Executors.newFixedThreadPool(numThreads); final CountDownLatch threadStartLatch = new CountDownLatch(numThreads); final CountDownLatch syncProgressLatch = new CountDownLatch(numThreads); List<Future<Boolean>> results = new ArrayList<>(numThreads); for (int i = 0; i < numThreads; i++) { results.add(threadPool.submit(new Callable<Boolean>() { @Override public Boolean call() { threadStartLatch.countDown(); try { threadStartLatch.await(); throttler.beginSync(false); syncProgressLatch.countDown(); syncProgressLatch.await(); throttler.endSync(); } catch (Exception e) { return false; } return true; } })); } try { for (Future<Boolean> result : results) {
public void testReportedPagesSelectedByResource() throws Exception { request.setResource("FrontPage"); String page1 = "|SomePage|me|" + date + "|"; String page2 = "|FrontPage|me|" + date + "|"; String page3 = "|FrontPage.MyPage|me|" + date + "|"; String page4 = "|SomePage.FrontPage|me|" + date; String recentChangesContent = page1 + "\n" + page2 + "\n" + page3 + "\n" + page4 + "\n"; NodeList items = getReportedItems(recentChangesContent); assertEquals(2, items.getLength()); checkItem(items.item(0), "FrontPage", "me", rfcDate, "me:" + rfcDate, "http://localhost/FrontPage"); checkItem(items.item(1), "FrontPage.MyPage", "me", rfcDate, "me:" + rfcDate, "http://localhost/FrontPage.MyPage"); }
public synchronized void reconfigFlagClear(){ reconfigFlag = false; }
private void checkAvailability() {
public void shouldFlushWholeStreamToHttpResponse() throws IOException { ByteArrayDownload fd = new ByteArrayDownload(bytes, "type", "x.txt"); mockery.checking(new Expectations() { { one(response).getOutputStream(); will(returnValue(socketStream)); ignoring(anything()); } }); fd.write(response); Assert.assertArrayEquals(bytes, outputStream.toByteArray()); }
protected short decodeShort(byte[] data, int i) { return (short)((data[i] & 0xff) << 8 | (data[i + 1] & 0xff)); }
private boolean isEmpty(String checkedString) { for (char character : checkedString.toCharArray()) { if (!Character.isWhitespace(character)) return false; } return true; }
public void translatesAliases() { TestSourcePage page = new TestSourcePage().withTarget("PageOne"); ParserTestHelper.assertTranslatesTo(page, "[[tag][#anchor]]", link("tag", "#anchor")); ParserTestHelper.assertTranslatesTo(page, "[[tag][PageOne]]", link("tag", "PageOne")); ParserTestHelper.assertTranslatesTo(page, "[[''tag''][PageOne]]", link("<i>tag</i>", "PageOne")); ParserTestHelper.assertTranslatesTo(page, "[[you're it][PageOne]]", link("you're it", "PageOne")); ParserTestHelper.assertTranslatesTo(page, "[[PageOne][IgnoredPage]]", link("PageOne", "PageOne")); ParserTestHelper.assertTranslatesTo(page, "[[tag][PageOne?edit]]", link("tag", "PageOne?edit")); ParserTestHelper.assertTranslatesTo(page, "[[tag][http://files/myfile]]", link("tag", "files/myfile")); ParserTestHelper.assertTranslatesTo(page, "[[tag][http://example.com/myfile]]", link("tag", "http://example.com/myfile")); }
Map<String, ? extends CustomComparator> getCustomComparators() throws PluginException; Map<String, ? extends TestSystemFactory> getTestSystemFactories() throws PluginException; }
public void testShutdownInput() throws IOException { serverSideSocket.shutdownInput(); assertFalse(serverSideSocket.isModeKnown()); }
public void testGetStatsSlabs() throws Exception {
public static void tearDownClass() { Security.removeProvider(BouncyCastleProvider.PROVIDER_NAME); }
public void testDelayedDelete() throws Exception { assertNull(client.get("test1")); client.set("test1", 5, "test1value"); assertEquals("test1value", client.get("test1")); client.delete("test1", 5); assertNull(client.get("test1"));
protected XmlFormatter makeXmlFormatter(final FitNesseContext context, final WikiPage page) throws Exception { return new SuiteXmlFormatter(page, context) { protected void writeData(byte[] byteArray) throws Exception {
private void handleIO(SelectionKey sk) { QueueAttachment qa=(QueueAttachment)sk.attachment(); if(sk.isConnectable()) { getLogger().info("Connection state changed for %s", sk);
public static Options parseCommandLine(String[] args) { CommandLine commandLine = new CommandLine(OPTION_DESCRIPTOR); if (commandLine.parse(args)) { boolean verbose = commandLine.hasOption("v"); String interactionClassName = commandLine.getOptionArgument("i", "interactionClass"); String portString = commandLine.getArgument("port"); int port = (portString == null) ? 8099 : Integer.parseInt(portString); String statementTimeoutString = commandLine.getOptionArgument("s", "statementTimeout"); Integer statementTimeout = (statementTimeoutString == null) ? null : Integer.parseInt(statementTimeoutString); boolean daemon = commandLine.hasOption("d"); return new Options(verbose, port, getInteractionClass(interactionClassName), daemon, statementTimeout); } return null; }
protected void unregisterMetrics() { super.unregisterMetrics(); MetricsContext rootContext = ServerMetrics .getMetrics() .getMetricsProvider() .getRootContext(); rootContext.unregisterGauge("learners"); rootContext.unregisterGauge("synced_followers"); rootContext.unregisterGauge("synced_non_voting_followers"); rootContext.unregisterGauge("synced_observers"); rootContext.unregisterGauge("pending_syncs"); rootContext.unregisterGauge("leader_uptime"); rootContext.unregisterGauge("last_proposal_size"); rootContext.unregisterGauge("max_proposal_size"); rootContext.unregisterGauge("min_proposal_size"); }
protected AnnotationVisitor createRemappingAnnotationAdapter(final AnnotationVisitor av) { return new RemappingAnnotationAdapter(av, remapper); }
Result include(Object value);  <T extends View> T use(Class<T> view);  Result on(Class<? extends Exception> exception);  boolean used();  Map<String, Object> included();  void forwardTo(String uri);  void redirectTo(String uri);  <T> T forwardTo(Class<T> controller);  <T> T redirectTo(Class<T> controller);  <T> T of(Class<T> controller);  <T> T redirectTo(T controller);  <T> T forwardTo(T controller);  <T> T of(T controller);  void nothing();  void notFound();  void permanentlyRedirectTo(String uri);  <T> T permanentlyRedirectTo(Class<T> controller);  <T> T permanentlyRedirectTo(T controller); }
public String toString() { return "{QA sa=" + socketAddress + ", #ops=" + ops.size() + ", topop=" + ops.peek() + "}";
public void readFromBuffer(ByteBuffer data) {
public void execute() throws InterceptionException { interceptorStack.add(ResourceLookupInterceptor.class); interceptorStack.add(InterceptorListPriorToExecutionExtractor.class); interceptorStack.add(DownloadInterceptor.class); interceptorStack.add(MultipartInterceptor.class); interceptorStack.add(instantiator); interceptorStack.add(ParametersInstantiatorInterceptor.class); if(shouldRegisterHibernateValidator) { interceptorStack.add(HibernateValidatorPluginInterceptor.class); } interceptorStack.add(ValidatorInterceptor.class); interceptorStack.add(ExecuteMethodInterceptor.class); interceptorStack.add(OutjectResult.class); interceptorStack.add(OutjectionInterceptor.class); interceptorStack.add(AjaxInterceptor.class); interceptorStack.add(ViewInterceptor.class); interceptorStack.next(null, null); }
private void assertPasses(String pageName, String pageType, String suiteFilter, String excludeSuiteFilter) throws Exception { TestSummary summary = run(pageName, pageType, suiteFilter, excludeSuiteFilter); assertEquals("wrong", 0, summary.wrong); assertEquals("exceptions", 0, summary.exceptions); assertTrue(msgAtLeastOneTest(pageName, summary), summary.right > 0); }
long getOutstandingRequests();  int getTickTime();  void setTickTime(int tickTime);  int getMaxClientCnxnsPerHost();  void setMaxClientCnxnsPerHost(int max);  int getMinSessionTimeout();  void setMinSessionTimeout(int min);  int getMaxSessionTimeout();  void setMaxSessionTimeout(int max); boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  void resetNonMTLSConnCount();  void resetAuthFailedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public void shouldAllowCustomPathResolverWhileForwarding() throws ServletException, IOException { JspView view = new JspView(request, response, method, fixedResolver); mockery.checking(new Expectations() { { one(request).getRequestDispatcher("fixed"); will(returnValue(dispatcher)); one(dispatcher).forward(request, response); } }); view.forward("ok"); mockery.assertIsSatisfied(); }
public void testDot() throws Exception { path = makePath("."); assertTrue(path.isAbsolute()); assertTrue(path.isEmpty()); }
private int getLengthToRead() throws IOException { String length = read(SlimVersion.MINIMUM_NUMBER_LENGTH);
public void assertTestPasses(String testName) throws Exception{ assertPasses(testName, TestHelper.PAGE_TYPE_TEST,null); }
ByteBuffer getBuffer();  void writing();  void writeComplete();  void initialize();  void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data);  MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to);  void timeOut();  boolean isTimedOut();  boolean isTimedOut(long ttlMillis);  boolean isTimedOutUnsent();  long getWriteCompleteTimestamp();  byte[] getErrorMsg();  void addClone(Operation op);  int getCloneCount();  void setCloneCount(int count); }
public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) {} @Override public void newTestStarted(WikiTestPage test, TimeMeasurement timeMeasurement) throws IOException {} @Override public void testOutputChunk(String output) throws IOException {} @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) {} @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) {} @Override public void testComplete(WikiTestPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws IOException {} @Override public void errorOccured() {} }
private void checkAvailability() {
int getRowCount(); int getColumnCountInRow(int rowIndex); String toString(); String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); void appendCellToRow(int row, Table table); void setTestStatusOnRow(int row, boolean testStatus); }
public Maybe<Symbol> parse(Parser parser) { Scanner scanner = parser.getScanner(); SymbolType type = scanner.getCurrentType(); Symbol body = Parser.makeIgnoreFirst(getPage(), scanner, type).parse(); if (scanner.isEnd()) return Symbol.Nothing; return new Maybe<Symbol>(new Symbol(type).add(body)); }
private Writer makeResponseWriter() { return new Writer() { public void write(char[] cbuf, int off, int len) {
public void testSetDataOK() throws Exception { zkClient.create(PARENT_PATH, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, null); zkClientB.setData(PARENT_PATH, DATA, -1); }
void increment(TestSummary testSummary); TestPage getPageToTest(); void setCurrentScript(Class<? extends ScriptTable> scriptTableClass, String actorName); Class<? extends ScriptTable> getCurrentScriptClass(); String getCurrentScriptActor(); }
public void canRedirectWhenLogicMethodIsAnnotatedWithHttpGetMethod() throws Exception { mockery.checking(new Expectations() { { one(response).sendRedirect(with(any(String.class))); ignoring(anything()); } }); logicResult.redirectTo(MyComponent.class).annotatedWithGet(); }
private void testSaving(String inputFile, String password, String outputFile) throws IOException, InvalidDBException, PwDbOutputException { Context ctx = getContext(); AssetManager am = ctx.getAssets(); InputStream is = am.open(inputFile, AssetManager.ACCESS_STREAMING); ImporterV4 importer = new ImporterV4(); PwDatabaseV4 db = importer.openDatabase(is, password, null); is.close(); ByteArrayOutputStream bos = new ByteArrayOutputStream(); PwDbV4Output output = (PwDbV4Output) PwDbOutput.getInstance(db, bos); output.output(); byte[] data = bos.toByteArray(); FileOutputStream fos = new FileOutputStream(TestUtil.getSdPath(outputFile), false); InputStream bis = new ByteArrayInputStream(data); bis = new CopyInputStream(bis, fos); importer = new ImporterV4(); db = importer.openDatabase(bis, password, null); bis.close(); fos.close();
public void run() { try { isRunning = true; while (true) { Object event = waitingEvents.take(); if (event == eventOfDeath) { wasKilled = true; } else { processEvent(event); } if (wasKilled) synchronized (waitingEvents) { if (waitingEvents.isEmpty()) { isRunning = false; break; } } } } catch (InterruptedException e) { LOG.error("Event thread exiting due to interruption", e); } LOG.info("EventThread shut down"); }
public void startStatementWithArguments() throws Exception { buildInstructionsFor("|start|Bob martin|x|y|\n", false); List<MakeInstruction> expectedInstructions = list( new MakeInstruction("scriptTable_id_0", "scriptTableActor", "BobMartin", new Object[]{"x", "y"}) ); assertEquals(expectedInstructions, instructions()); }
public void throwMethodNotCalledErrorIfNoSuchMethod() throws Exception { String response = (String) caller.call("testSlim", "noSuchMethod"); assertTrue(response, response.contains(SlimServer.EXCEPTION_TAG) &&
@Test public void testGetTemplatesFromUnclesDoesntTakeTemplatesChildren() { pageBuilder.addPage(root, PathParser.parse(".TemplateLibrary"), "template library"); pageBuilder.addPage(root, PathParser.parse(".TemplateLibrary.TemplateFromRoot"), "template from root"); pageBuilder.addPage(root, PathParser.parse(".TemplateLibrary.TemplateFromRoot.TemplateFromRootChild"), "template from root child"); pageBuilder.addPage(root, PathParser.parse(".LibraryParent"), "library parent"); WikiPage childPage = pageBuilder.addPage(root, PathParser.parse(".LibraryParent.ChildPage"), "library parent"); List<String> pathList = TemplateUtil.getTemplatesFromUncles(childPage); assertTrue(pathList.contains(ROOT_PARENT_PATH)); assertFalse(pathList.contains(ROOT_PARENT_PATH + ".TemplateFromRootChild")); }
void setHistoryDepth(int historyDepth); PageData getRevisionData(FileSystemPage page, String label); Collection<VersionInfo> history(FileSystemPage page); VersionInfo makeVersion(FileSystemPage page, PageData data); }
public boolean stringContains(String it, String part) { return it.contains(HtmlUtil.escapeHTML(part)); }
protected Leader makeLeader(FileTxnSnapLog logFactory) throws IOException { return new Leader(this, new LeaderZooKeeperServer(logFactory, this,new ZooKeeperServer.BasicDataTreeBuilder()));
public void testUrlParsingHttp() throws Exception { testUrlParsing("http://mysite.com", "http", "mysite.com", 80, ""); testUrlParsing("http://mysite.com/", "http", "mysite.com", 80, ""); testUrlParsing("http://mysite.com:8080/", "http", "mysite.com", 8080, ""); testUrlParsing("http://mysite.com:8080", "http", "mysite.com", 8080, ""); testUrlParsing("http://mysite.com:80/", "http", "mysite.com", 80, ""); testUrlParsing("http://mysite.com/PageOne", "http", "mysite.com", 80, "PageOne"); testUrlParsing("http://mysite.com/PageOne.ChildOne", "http", "mysite.com", 80, "PageOne.ChildOne"); }
public Map<String, T> get() throws InterruptedException, ExecutionException { try { return get(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
public void should_leave_table_contents_alone_when_not_slim_test_system() { givenTestSystem("fit"); when(sourcePage.getName()).thenReturn("MyTest"); slimTableDefaultColoring.handleParsedSymbol(table, variableSource); verify(table, never()).getChildren(); verify(sourcePage, never()).hasProperty(any()); }
public long stoppedAt() { if (isStopped()) { return stoppedAt; } throw new IllegalStateException("Call stop() before getting stoppedAt()!"); }
public void testUndecodeableCompressed() throws Exception { CachedData cd=new CachedData(WhalinTranscoder.COMPRESSED, TranscoderUtils.encodeInt(Integer.MAX_VALUE)); assertNull(tc.decode(cd)); }
public Maybe<Symbol> parse(Parser parser) { Scanner scanner = parser.getScanner(); Symbol body = parser.parseTo(SymbolType.CloseEvaluator); if (scanner.isEnd()) return Symbol.Nothing; return new Maybe<Symbol>(new Symbol(SymbolType.Evaluator).add(body)); }
public void is(Class<?> type, Method method) { logger.debug("created rule for path " + patternUri + " --> " + type.getName() + "." + method.getName()); resourceMethod = new DefaultResourceMethod(new DefaultResource(type), method); }
public void setUp() throws Exception { bytes = new ByteArrayOutputStream(); handler = new StandardResultHandler(new PrintStream(bytes)); }
private void startTestSystemAndExecutePages(WikiPageIdentity identity, List<WikiPage> testSystemPages) throws IOException, InterruptedException { TestSystem testSystem = null; try { if (!isStopped) {
public void addInstruction(final int idx) { instructions.set(idx); }
public String makeHtml(FitNesseContext context) { WikiPage page = pageData.getWikiPage(); HtmlPage html = context.pageFactory.newPage(); WikiPagePath fullPath = page.getPageCrawler().getFullPath(page); String fullPathName = PathParser.render(fullPath); html.setTitle(fullPathName); html.setPageTitle(new PageTitle(fullPath).notLinked()); html.setNavTemplate("wikiNav.vm"); html.put("actions", new WikiPageActions(page)); SetupTeardownAndLibraryIncluder.includeInto(pageData, true); html.setMainTemplate("wikiPage"); html.setFooterTemplate("wikiFooter"); html.put("content", new WikiPageRenderer()); html.put("footerContent", new WikiPageFooterRenderer()); handleSpecialProperties(html, page); return html.html(); }
public Set<Long> globalSessions() { return Collections.emptySet(); }
private WikiPage createSimpleVirtualLink() throws Exception { WikiPage linkee = crawler.addPage(root, PathParser.parse("LinkeePage")); crawler.addPage(linkee, PathParser.parse("ChildPageOne")); WikiPage linkee2 = crawler.addPage(root, PathParser.parse("LinkeePageTwo")); crawler.addPage(linkee2, PathParser.parse("ChildPageTwo")); linker = crawler.addPage(root, PathParser.parse("LinkerPage")); FitNesseUtil.bindVirtualLinkToPage(linker, linkee); extension = (VirtualCouplingExtension) linker.getExtension(VirtualCouplingExtension.NAME); List children = extension.getVirtualCoupling().getChildren(); assertEquals(1, children.size()); WikiPage child = (WikiPage) children.get(0); assertEquals("ChildPageOne", child.getName()); return linker; }
protected Servers LaunchServers(int numServers, Integer tickTime) throws IOException, InterruptedException { return LaunchServers(numServers, 0, tickTime); }
protected File getSourceDir() throws Exception { return testSourceDir.getAbsoluteFile(); }
public void rename(FileVersion fileVersion, File oldFile) throws IOException { fileCache.expire(oldFile); fileSystem.rename(fileVersion.getFile(), oldFile); }
public void processResult(int rc, String path, Object ctx, byte data[], Stat stat); } interface ACLCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, List<ACL> acl, Stat stat); } interface ChildrenCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, List<String> children); } interface StringCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, String name); } interface VoidCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx); } }
private void waitForDeathOf(Process process) { int timeStep = 100; int maxDelay = timeout * 1000; try { for (int delayed = 0; delayed < maxDelay; delayed += timeStep) { if (isDead(process)) { return; } Thread.sleep(timeStep); } } catch (InterruptedException e) { LOG.log(Level.FINE, "Wait for death of process " + process + " interrupted", e); } LOG.warning("Could not detect death of command line test runner."); }
public void processResult(int rc, String path, Object ctx) { cb.deleteComplete(rc, this.ctx); }
public void close() { if (keyStoreFileWatcher != null) { keyStoreFileWatcher.stop(); keyStoreFileWatcher = null; } if (trustStoreFileWatcher != null) { trustStoreFileWatcher.stop();
protected void createFixtureInstance(String fixtureClass) throws Exception { Object created = statementExecutor.create(INSTANCE_NAME, fixtureClass, new Object[] {}); assertEquals("OK", created); }
public void testAvailableServers() { client.getVersions(); assertEquals(new ArrayList<String>( Collections.singleton(getExpectedVersionSource())),
public void newTestStarted(WikiPage page, long time) throws Exception { timeString = new SimpleDateFormat("HH:mm:ss").format(time); }
String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); }
protected Object clone() { try { AbstractHashedMap cloned = (AbstractHashedMap) super.clone();
public Set<StereotypedClass> all() { return delegate.all(); }
public <T> void register(Class<T> type) { this.container.addComponent(type); }
void visitSubroutine(final Label JSR, final long id, final int nbSubroutines) { if (JSR != null) { if ((status & VISITED) != 0) { return; } status |= VISITED;
public void exceptionOccurred(Exception e) { exceptionOccurred = true; try { client.kill();
<T> T goTo(Class<T> type); void add(Message message); void validate(); }
public void addFilter(String key, Responder filterClass) { List<Responder> filters = filterMap.get(key); if (filters == null) { filters = new LinkedList<Responder>(); filterMap.put(key, filters); } filters.add(filterClass); }
public synchronized void createPrincipal(String principal, String password) throws Exception { simpleKdc.createPrincipal(principal, password); }
public void testComplete(WikiTestPage test, TestSummary testSummary) { LOG.info(new WikiPagePath(test.getSourcePage()).toString() + " r " + testSummary.right + " w " + testSummary.wrong + " " + testSummary.exceptions
protected void processTable(SlimTable table) throws IOException { List<Assertion> assertions = createAssertions(table); Map<String, Object> instructionResults; if (!stopTestCalled) { instructionResults = slimClient.invokeAndGetResponse(Assertion.getInstructions(assertions)); } else { instructionResults = Collections.emptyMap(); } evaluateTables(assertions, instructionResults); }
<T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
protected void loadPage(String pageName, FitNesseContext context) { WikiPagePath path = PathParser.parse(pageName); crawler = context.root.getPageCrawler(); crawler.setDeadEndStrategy(new VirtualEnabledPageCrawler()); page = crawler.getPage(context.root, path); }
public void childPageIsMade() throws Exception { assertTrue(crawler.getPage(root,path) == null); responder.makeResponse(context, request); assertTrue(crawler.getPage(root,path) != null); }
public void receivedStatus(OperationStatus val) { if(val instanceof CASOperationStatus) { rv.set(((CASOperationStatus)val).getCASResponse(), val);
BlockingQueue<Operation> createWriteOperationQueue();  long getOpQueueMaxBlockTime();  NodeLocator createLocator(List<MemcachedNode> nodes);  OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon();  boolean useNagleAlgorithm();  Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode();  Transcoder<Object> getDefaultTranscoder();  boolean shouldOptimize();  int getReadBufSize();  HashAlgorithm getHashAlg();  long getMaxReconnectDelay();  AuthDescriptor getAuthDescriptor();  int getTimeoutExceptionThreshold();  MetricType enableMetrics();  MetricCollector getMetricCollector(); }
public void shouldBeOkIfThereIsValidationErrorsAndYouSpecifiedWhereToGo() throws SecurityException, NoSuchMethodException, InterceptionException, IOException { final ResourceMethod method = mockery.methodFor(AnyController.class, "specifiedWhereToGo"); final AnyController controller = new AnyController(validator); mockery.checking(new Expectations() { { one(info).getParameters(); will(returnValue(new Object[0])); one(validator).onErrorUse(nothing()); will(throwException(new ValidationError(Collections.<Message>emptyList()))); allowing(validator).hasErrors(); will(returnValue(true)); } }); interceptor.intercept(stack, method, controller); mockery.assertIsSatisfied(); }
static private OutputArchive getCsvArchive(OutputStream out) throws IOException { try { return new CsvOutputArchive(out);
private void buildIncludeDirective(String pagePathName, String arg) { newPageContent .append("\n!include ")
public void receiveConnection(final Socket sock) { DataInputStream din = null; try { din = new DataInputStream(new BufferedInputStream(sock.getInputStream()));
public boolean matches(String match, int startsAt) { if (match.isEmpty()) return false; if (offset + startsAt + match.length() > input.length()) return false; return input.regionMatches(offset + startsAt, match, 0, match.length()); }
public void testRecovery() throws Exception { File tmpDir = ClientBase.createTmpDir(); ClientBase.setupTestEnv(); ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000); int oldSnapCount = SyncRequestProcessor.getSnapCount(); SyncRequestProcessor.setSnapCount(1000); try { final int PORT = Integer.parseInt(HOSTPORT.split(":")[1]);
ServerSocket createLocalOnlyServerSocket(int port) throws IOException; }
public void testUnicodeCharacters() throws IOException { SimpleResponse response = new SimpleResponse(); response.setContent("\uba80\uba81\uba82\uba83"); response.sendTo(this); assertSubString("\uba80\uba81\uba82\uba83", text); }
public int read(byte[] buffer, int offset, int length) throws IOException { bytes += length; return is.read(buffer, offset, length); }
OperationStatus getStatus();  Future<V> addListener(BulkGetCompletionListener listener);  Future<V> removeListener(BulkGetCompletionListener listener); }
public void withValidation() { } }; final ResourceMethod method = mockery.methodFor(MyComponent.class, "withValidation"); mockery.checking(new Expectations() { { one(provider).getParametersFor(method, listErrors, bundle); will(returnValue(new Object[0])); one(stack).next(method, resourceInstance); one(errors).size(); will(returnValue(0)); one(localization).getBundle(); will(returnValue(bundle)); } }); validator.intercept(stack, method, resourceInstance); mockery.assertIsSatisfied(); } }
public void deleteEntry(PwEntry entry) { super.deleteEntry(entry); deletedObjects.add(new PwDeletedObject(entry.getUUID())); }
public void negativeNumberInRangeComparison() throws Exception { assertExpectationMessage(" -4 < _ < -2", "-3", "pass(-4 < -3 < -2)"); assertExpectationMessage(" -4 < _ < -2", "3", "fail(-4 < 3 < -2)"); }
public String toString(Object o) { return "customConverter"; }
public void testExecutionStatusOk() throws Exception { doSimpleRun(passFixtureTable()); assertTrue(results.contains(">Tests Executed OK<")); assertTrue(results.contains("\\\"ok\\\"")); }
public ConcurrentHashMap<Long, Integer> getSessionWithTimeOuts(); }
boolean shouldShowView(ResourceMethod method);  boolean isAjax(); }
public void testRenderWhenMissing() throws Exception { verifyRenderWhenMissing("MissingPage"); }
void request(Request request) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream(); DataOutputStream oa = new DataOutputStream(baos); oa.writeLong(request.sessionId); oa.writeInt(request.cxid); oa.writeInt(request.type); if (request.request != null) { request.request.rewind(); int len = request.request.remaining(); byte b[] = new byte[len]; request.request.get(b); request.request.rewind(); oa.write(b); } oa.close(); QuorumPacket qp = new QuorumPacket(Leader.REQUEST, -1, baos .toByteArray(), request.authInfo); writePacket(qp); }
private HtmlTag makeAttributeCheckboxesHtml(String label, String[] attributes, PageData pageData) throws Exception { HtmlTag div = new HtmlTag("div"); div.addAttribute("style", "float: left; width: 180px;"); div.add(label); for (String attribute : attributes) { div.add(HtmlUtil.BR); div.add(makeAttributeCheckbox(attribute, attribute, pageData)); } div.add(HtmlUtil.BR); div.add(HtmlUtil.BR); return div; }
public void shutdown() { synchronized (omap) { for (Map.Entry<Operation, TapConnectionProvider> me : omap.entrySet()) {
public void testCanDealWithBadIndex() { positions.put("bad", 8); positions.put("otherBad", -1); List<String> list = new ArrayList<>(positions.keySet()); MapBasedListPartitioner<String> partitioner = new MapBasedListPartitioner<>(identity(), positions, (parts, nf) -> { notFoundArgs.add(nf); return new ArrayList<>(parts.size()); }); List<List<String>> parts = partitioner.split(list, 6); assertEquals(6, parts.size()); assertEquals(Collections.singletonList(asList("bad", "otherBad")), notFoundArgs); }
public void setCommitProcMaxCommitBatchSize(int size); public int getRequestThrottleLimit(); public void setRequestThrottleLimit(int requests); public int getRequestThrottleStallTime(); public void setRequestThrottleStallTime(int time); public boolean getRequestThrottleDropStale(); public void setRequestThrottleDropStale(boolean drop); public boolean getRequestStaleLatencyCheck(); public void setRequestStaleLatencyCheck(boolean check); public boolean getRequestStaleConnectionCheck(); public void setRequestStaleConnectionCheck(boolean check);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); public long getFlushDelay(); public void setFlushDelay(long delay); public long getMaxWriteQueuePollTime(); public void setMaxWriteQueuePollTime(long delay); public int getMaxBatchSize(); public void setMaxBatchSize(int size); }
public void reset() { resetLatency(); resetRequestCounters(); clientResponseStats.reset(); ServerMetrics.getMetrics().resetAll(); }
public void onClick(View v) { if (Interaction.isIntentAvailable(FileSelectActivity.this, FILE_BROWSE_INTENT)) { Intent i = new Intent(FILE_BROWSE_INTENT);
public void multi(Iterable<Op> ops, MultiCallback cb, Object ctx) { multiInternal(generateMultiTransaction(ops), cb, ctx); }
private void addTestPagesWithSuiteProperty() { WikiPage test2 = addTestToSuite("TestTwo", fitPassFixture); WikiPage test3 = addTestToSuite("TestThree", fitPassFixture); PageData data2 = test2.getData(); PageData data3 = test3.getData(); data2.setAttribute(SUITES, "foo"); data3.setAttribute(SUITES, "bar, smoke"); test2.commit(data2); test3.commit(data3); }
<T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public int status() { int status = FitnesseFixtureContext.response.getStatus(); return status; }
public synchronized void setSendBufferSize(int size) throws SocketException { getSocketAllowUnknownMode().setSendBufferSize(size); }
public void simpleInputAndOutputFailing() throws Exception { makeTables( "!|scenario|echo|input|giving|output|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|DT:EchoGiving|\n" + "|input|output|\n" + "|7|8|\n" ); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("decisionTable_did_0/scriptTable_s_id_0", "7") ) ); evaluateExpectations(pseudoResults); String scriptTable = dt.getChild(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output], [check, echo, 7, [7] fail(expected [8])]]"; assertEquals(expectedScript, scriptTable); String dtHtml = dt.getTable().toString(); assertEquals(0, dt.getTestSummary().getRight()); assertEquals(1, dt.getTestSummary().getWrong()); assertEquals(0, dt.getTestSummary().getIgnores()); assertEquals(0, dt.getTestSummary().getExceptions()); }
protected Method handleMethodCacheMiss(String methodName, Object instance, int nArgs) { return super.findMatchingMethod(methodName, instance, nArgs); }
public static void clearSecureSetting(ClientX509Util clientX509Util) { System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY); System.clearProperty(ZKClientConfig.ZOOKEEPER_CLIENT_CNXN_SOCKET); System.clearProperty(ZKClientConfig.SECURE_CLIENT); System.clearProperty(clientX509Util.getSslAuthProviderProperty()); System.clearProperty(clientX509Util.getSslKeystoreLocationProperty()); System.clearProperty(clientX509Util.getSslKeystorePasswdProperty()); System.clearProperty(clientX509Util.getSslTruststoreLocationProperty()); System.clearProperty(clientX509Util.getSslTruststorePasswdProperty()); System.clearProperty("javax.net.debug"); System.clearProperty("zookeeper.authProvider.x509"); clientX509Util.close(); }
PKCS12FileLoader build() { return new PKCS12FileLoader(keyStorePath, trustStorePath, keyStorePassword, trustStorePassword); }
private Value next() throws IOException { if (vIdx < vLen) { Value v = (Value) valList.get(vIdx);
ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(StoreType t, String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  SASLMechsOperation saslMechs(OperationCallback cb);  SASLAuthOperation saslAuth(String[] mech, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  SASLStepOperation saslStep(OperationCallback cb);  Collection<Operation> clone(KeyedOperation op); }
BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public boolean isMine(HttpServletRequest request) { return request.getAttribute(FakeMethodDispatchProvider.METHOD_TO_EXECUTE) != null; }
public void testLsrNonexistentZnodeCommand() throws Exception { final ZooKeeper zk = createClient(); ZooKeeperMain zkMain = new ZooKeeperMain(zk); zkMain.executeLine("create /b"); zkMain.executeLine("create /b/c"); LsCommand cmd = new LsCommand(); cmd.setZk(zk); cmd.parse("ls -R /b/c/d".split(" ")); try { runCommandExpect(cmd, new ArrayList<>());
public void reconfigure(String joiningServers, String leavingServers, String newMembers, long fromConfig, DataCallback cb, Object ctx) { RequestHeader h = new RequestHeader(); h.setType(ZooDefs.OpCode.reconfig); ReconfigRequest request = new ReconfigRequest(joiningServers, leavingServers, newMembers, fromConfig); GetDataResponse response = new GetDataResponse(); cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, ZooDefs.CONFIG_NODE, ZooDefs.CONFIG_NODE, ctx, null);
private void wakeupCnxn() { if (needSasl.get()) { waitSasl.release(); } outgoingQueue.add(WakeupPacket.getInstance()); }
public HtmlTag makeCollapsableSection(HtmlElement title, HtmlElement content) { String id = random.nextLong() + ""; HtmlTag outerDiv = HtmlUtil.makeDivTag(cssClass); HtmlTag image = new HtmlTag("img"); image.addAttribute("src", imageSrc()); image.addAttribute("class", "left"); image.addAttribute("id", "img" + id); HtmlTag anchor = new HtmlTag("a", image); anchor.addAttribute("href", "javascript:toggleCollapsable('" + id + "');"); HtmlTag links = new HtmlTag("div"); links.addAttribute("style", "float: right;"); links.addAttribute("class", "meta"); links.add(expandAllLink + " | " + collapseAllLink); outerDiv.add(links); outerDiv.add(anchor); outerDiv.add(title); HtmlTag collapsablediv = makeCollapsableDiv(); collapsablediv.addAttribute("id", id); collapsablediv.add(content); outerDiv.add(collapsablediv); return outerDiv; }
private static void jj_la1_0() { jj_la1_0 = new int[] {0x2800,0x2800,0x40000000,0x1000,0xffc000,0xffc000,}; }
public void testCreate() throws Exception { multi(zk, Arrays.asList( Op.create("/multi0", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT), Op.create("/multi1", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT), Op.create("/multi2", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT) )); zk.getData("/multi0", false, null); zk.getData("/multi1", false, null); zk.getData("/multi2", false, null); }
private void registerBeanOf(Class<?> type, BeanDefinitionRegistry registry) { AnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type); registry.registerBeanDefinition(beanNameGenerator.generateBeanName(definition, registry), definition); }
public void shouldExecuteTheLogicAndRedirectToItsViewOnForward() throws Exception { final MyComponent component = new MyComponent(); mockery.checking(new Expectations() { { one(container).instanceFor(MyComponent.class); will(returnValue(component)); one(resolver).pathFor(with(any(ResourceMethod.class))); will(returnValue("Abc123")); one(request).getRequestDispatcher("Abc123"); RequestDispatcher dispatcher = mockery.mock(RequestDispatcher.class); will(returnValue(dispatcher)); one(dispatcher).forward(request, response); } }); assertThat(component.calls, is(0)); logicResult.forwardTo(MyComponent.class).base(); assertThat(component.calls, is(1)); mockery.assertIsSatisfied(); }
private void includeTeardownPages() throws Exception { includeTeardownPage(); if (isSuite) includeSuiteTeardownPage();
public void testProxyChildrenAreFoundOnStartUp() throws Exception { WikiPage page3 = crawler.addPage(root, PathParser.parse("PageThree"), "page three content"); setVirtualWiki(page3, "http://localhost:" + FitNesseUtil.port + "/PageTwo"); assertTrue(page3.hasExtension(VirtualCouplingExtension.NAME)); VirtualCouplingExtension extension = (VirtualCouplingExtension)page3.getExtension(VirtualCouplingExtension.NAME); List children = extension.getVirtualCoupling().getChildren(); assertEquals(1, children.size()); assertEquals("PageTwoChild", ((WikiPage)children.get(0)).getName()); }
public void parse(InputStream input) throws IOException, ParseException { BufferedReader reader = new BufferedReader(new InputStreamReader(input, "UTF-8")); StringBuilder buffer = new StringBuilder(); String field = null; int linenr = 0; while (true) { final String line = reader.readLine(); if (line == null) {
public void serialize() { for (Entry<Class<?>, String> exclude : excludes.entries()) { xstream.omitField(exclude.getKey(), exclude.getValue()); } registerProxyInitializer(); xstream.toXML(root, writer); }
protected void testStarted(TestPage testPage) throws IOException { testSystemListener.testStarted(testPage); }
public void addCapability( DERObjectIdentifier capability) { capabilities.add(new DERSequence(capability)); }
public void receivedStatus(String line) { todo.decrementAndGet(); sync.set(todo); }}));
public void shouldForward() throws SecurityException, InterceptionException, NoSuchMethodException { this.method = mockery.methodFor(VRaptor2Component.class, "method"); mockery.checking(new Expectations() { { one(info).shouldShowView(method); will(returnValue(true)); one(result).forwardTo(); } }); interceptor.intercept(null, this.method, null); mockery.assertIsSatisfied(); }
protected String extractDataUrls(String css, ArrayList preservedTokens) { int maxIndex = css.length() - 1; int appendIndex = 0; StringBuffer sb = new StringBuffer(); Pattern p = Pattern.compile("(?i)url\\(\\s*([\"']?)data\\:"); Matcher m = p.matcher(css);  while (m.find()) { int startIndex = m.start() + 4;
public int hashCode() { return String.format("%s:%d", host, port).hashCode(); }
public void testSystemStopped(TestSystem testSystem, Throwable cause) { if (cause != null) { failCount++;
public void testLocalSessionsWithoutEphemeralOnLeader() throws Exception { testLocalSessionsWithoutEphemeral(true); }
public double expectedDouble() { return this.actualDouble; }
public void canHandleTheSingleCheck() { Client guilherme = new Client(); validations.that(guilherme).shouldBe(notNullValue()); assertThat(validations.getErrors(), hasSize(0)); }
public void commitAndActivate(long zxid, long designatedLeader) { synchronized (this) { lastCommitted = zxid; } byte[] data = new byte[8]; ByteBuffer buffer = ByteBuffer.wrap(data); buffer.putLong(designatedLeader); QuorumPacket qp = new QuorumPacket(Leader.COMMITANDACTIVATE, zxid, data, null); sendPacket(qp); }
public void doCells(Parse cells) { this.cells = cells; String methodName = cells.text(); try { getClass().getMethod(methodName).invoke(this);
public Object fromString(String arg) { String[] strings = ListConverter.fromStringToArrayOfStrings(arg); Double[] doubles = new Double[strings.length]; for (int i = 0; i < strings.length; i++) { try { doubles[i] = Double.parseDouble(strings[i]); } catch (NumberFormatException e) { throw new SlimError("message:<<CANT_CONVERT_TO_DOUBLE_LIST>>"); } } return doubles; }
public void execute() throws Exception { if (executeWillThrow) throw new Exception("Execute threw."); executeCalled++; }
boolean hasReadOp();  boolean hasWriteOp();  void addOp(Operation op);  void insertOp(Operation o);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
public void canTranslate() { FixedMethodStrategy strategy = new FixedMethodStrategy("abc", MyControl.class, method("list"), methods(HttpMethod.POST), control, 0); mockery.checking(new Expectations() { { one(control).matches("/clients/add"); will(returnValue(true)); one(control).fillIntoRequest("/clients/add", request); } }); ResourceMethod match = strategy.resourceMethod(request, "/clients/add"); assertThat(match, is(VRaptorMatchers.resourceMethod(method("list")))); }
public void shouldInsertItemsUntilTheRequiredPosition() throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException { SimpleNode node = mock(SimpleNode.class); when(node.toString()).thenReturn("names"); when(evaluation.getNode()).thenReturn(node); when(evaluation.getSource()).thenReturn(client); handler.instantiate(client.names, 2, handler.getListType(client.names, evaluation, context)); assertThat(client.names.size(), is(equalTo(3))); assertThat(client.names.get(2), is(notNullValue())); verify(removal).add(client.names); }
public void testShouldAskRevisionControllerToCheckinPage() throws Exception { expect(revisionController.execute(CHECKIN, contentAndPropertiesFilePathFor(FS_PARENT_PAGE))).andReturn(VERSIONED); replay(revisionController); createPage(FS_PARENT_PAGE); request.setResource(FS_PARENT_PAGE); invokeResponderAndCheckSuccessStatus(); }
private Matcher<? super String> isNotPresent() { return is(nullValue()); }
public void isCapableOfDealingWithStrings() throws Exception { requestParameterIs(string, "abc", "eureka"); String abc = getParameters(string); assertThat(abc, is("eureka")); }
private int createNodes(ZooKeeper zk, int start, int count) throws Exception { LOG.info("Creating nodes {} thru {}", start, (start + count)); int j = 0; try { for (int i = start; i < start + count; i++) { zk.create("/foo" + i, new byte[0], Ids.READ_ACL_UNSAFE, CreateMode.EPHEMERAL); j++; } } catch (ConnectionLossException e) {
public Test getTest(String name) throws IOException { try { WikiPagePath path = PathParser.parse(name);
public static Socket tryCreateClientSocket(String hostName, int port, boolean useSSL, String sslParameterClassName) throws IOException { if(!useSSL){ LOG.log(Level.FINER, "Creating none SSL client: " + hostName + ":" + port);
public void allTestingComplete(TimeMeasurement totalTimeMeasurement) throws Exception { } @Override public void announceNumberTestsToRun(int testsToRun) { } @Override public void errorOccured() { } @Override public void newTestStarted(WikiPage test, TimeMeasurement timeMeasurement) throws Exception { } @Override public void setExecutionLogAndTrackingId(String stopResponderId, CompositeExecutionLog log) throws Exception { } @Override public void testComplete(WikiPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws Exception { recordTestResult(new WikiPagePath(test).toString(), testSummary, timeMeasurement.elapsed()); } @Override public void testOutputChunk(String output) throws Exception { } @Override public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { } }
private void addInstruction(Object instruction, Element instructionElement) { XmlUtil.addCdataNode(testResultsDocument, instructionElement, "instruction", instruction.toString()); }
public void testAutoUpdatingTurnedOn() throws Exception { MockRequest request = makeRequest(baseUrl); responder.setRequest(request); responder.data = new PageData(new MockWikiPage()); responder.initializeImporter(); assertFalse(responder.getImporter().getAutoUpdateSetting()); request.addInput("autoUpdate", "1"); responder.initializeImporter(); assertTrue(responder.getImporter().getAutoUpdateSetting()); }
public void testOnlyOneReferencePerPage() throws Exception { WhereUsedPageFinder whereUsed = new WhereUsedPageFinder(pageThree, this); WikiPage newPage = WikiPageUtil.addPage(root, PathParser.parse("NewPage"), "one reference to PageThree. Two reference to PageThree"); List<WikiPage> resultList = whereUsed.search(root); assertEquals(1, resultList.size()); assertEquals(newPage, resultList.get(0)); }
public WikiPagePath parentPath() { WikiPagePath parentPath = new WikiPagePath(this); parentPath.pop(); return parentPath; }
private void makeLastModifiedTag() { String username = pageData.getAttribute(WikiPageProperty.LAST_MODIFYING_USER); if (username == null || "".equals(username)) html.put("lastModified", "Last modified anonymously");
void visitTryCatchBlock(Label start, Label end, Label handler, String type);  void visitLocalVariable(String name, String desc, String signature, Label start, Label end, int index);  void visitLineNumber(int line, Label start);  void visitMaxs(int maxStack, int maxLocals);  void visitEnd(); }
public void testRecallBinding() throws Throwable { Binding binding = Binding.create(fixture, "intField="); Fixture.setSymbol("123", "999"); binding.doCell(fixture, cell1); assertEquals(999, fixture.intField); binding.doCell(fixture, cell3); assertSubString("No such symbol: abc", cell3.text()); }
public static void main(String[] args) throws IOException, InterruptedException { if (args.length < 4) { System.err.println("USAGE: BookieServer port zkServers journalDirectory ledgerDirectory [ledgerDirectory]*"); return; } int port = Integer.parseInt(args[0]); String zkServers = args[1]; File journalDirectory = new File(args[2]); File ledgerDirectory[] = new File[args.length - 3]; StringBuilder sb = new StringBuilder(); for (int i = 0; i < ledgerDirectory.length; i++) { ledgerDirectory[i] = new File(args[i + 3]); if (i != 0) { sb.append(','); } sb.append(ledgerDirectory[i]); } String hello = String.format( "Hello, I'm your bookie, listening on port %1$s. ZKServers are on %2$s. Journals are in %3$s. Ledgers are stored in %4$s.", port, zkServers, journalDirectory, sb); LOG.info(hello); BookieServer bs = new BookieServer(port, zkServers, journalDirectory, ledgerDirectory); bs.start(); bs.join(); }
public void testPageMatchesQueryWithExcludedPages() throws Exception { Map<String, Boolean> attributes = new HashMap<String, Boolean>(); String[] suites = new String[0]; List<String> pageTypes = Arrays.asList("Test"); setupRequestInputAndPageProperty("Test", attributes, true, page, "true"); assertTrue(responder.pageMatchesQuery(page, pageTypes, attributes, suites, true, true)); page = crawler.addPage(root, PathParser.parse("SetUp")); setupRequestInputAndPageProperty("Test", attributes, true, page, "true"); assertTrue(responder.pageMatchesQuery(page, pageTypes, attributes, suites, false, true)); assertTrue(responder.pageMatchesQuery(page, pageTypes, attributes, suites, false, false)); assertFalse(responder.pageMatchesQuery(page, pageTypes, attributes, suites, true, false)); page = crawler.addPage(root, PathParser.parse("TearDown")); setupRequestInputAndPageProperty("Test", attributes, true, page, "true"); assertTrue(responder.pageMatchesQuery(page, pageTypes, attributes, suites, false, false)); assertTrue(responder.pageMatchesQuery(page, pageTypes, attributes, suites, true, false)); assertFalse(responder.pageMatchesQuery(page, pageTypes, attributes, suites, false, true)); page = crawler.addPage(root, PathParser.parse("SuiteSetUp")); setupRequestInputAndPageProperty("Test", attributes, true, page, "true"); assertTrue(responder.pageMatchesQuery(page, pageTypes, attributes, suites, false, false)); assertFalse(responder.pageMatchesQuery(page, pageTypes, attributes, suites, true, false)); page = crawler.addPage(root, PathParser.parse("SuiteTearDown")); setupRequestInputAndPageProperty("Test", attributes, true, page, "true"); assertTrue(responder.pageMatchesQuery(page, pageTypes, attributes, suites, false, false)); assertFalse(responder.pageMatchesQuery(page, pageTypes, attributes, suites, false, true));
Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(String username, String password) throws OperationException; }
public void produce( DataConsumer pReceiver ) throws IOException { for (String literalPath : literalPaths) { TarArchiveEntry entry = new TarArchiveEntry(literalPath, true);
public void linkNameDifferent() throws Exception { aa.setLinkName("b"); assertFalse(aa.equals(a)); assertFalse(a.equals(aa)); }
void testOutputChunk(String readValue) throws IOException; void testComplete(TestSummary summary) throws IOException; void exceptionOccurred(Exception e); }
public void testMaxConnectionPerIpSurpased() throws Exception { assertTrue("Did not instantiate ServerCnxnFactory with NettyServerCnxnFactory!", serverFactory instanceof NettyServerCnxnFactory); try (final ZooKeeper zk1 = createClient(); final ZooKeeper zk2 = createClient()) { }
public void testLE() throws Exception { int count = 30; int baseport= 33003; HashMap<Long,QuorumServer> peers = new HashMap<Long,QuorumServer>(count); ArrayList<LEThread> threads = new ArrayList<LEThread>(count); File tmpdir[] = new File[count]; int port[] = new int[count]; votes = new Vote[count]; QuorumStats.registerAsConcrete(); for(int i = 0; i < count; i++) { peers.put(Long.valueOf(i), new QuorumServer(i, new InetSocketAddress("127.0.0.1", baseport+100+i))); tmpdir[i] = File.createTempFile("letest", "test"); port[i] = baseport+i; } LeaderElection le[] = new LeaderElection[count]; leaderDies = true; boolean allowOneBadLeader = leaderDies; for(int i = 0; i < le.length; i++) { QuorumPeer peer = new QuorumPeer(peers, tmpdir[i], tmpdir[i], port[i], 0, i, 2, 2, 2); peer.startLeaderElection(); le[i] = new LeaderElection(peer); LEThread thread = new LEThread(le[i], peer, i); thread.start(); threads.add(thread); } for(int i = 0; i < threads.size(); i++) { threads.get(i).join(15000); if (threads.get(i).isAlive()) { fail("Threads didn't join"); } } long id = votes[0].id; for(int i = 1; i < votes.length; i++) { if (votes[i] == null) {
public Object convert(String value, Class type, ResourceBundle bundle) { if (value == null || value=="") { return false; } return Boolean.parseBoolean(value); }
public void testSubmitGoodFormToChildSibling() throws Exception { request.setResource("PageTwo.ChildTwo"); request.addInput("linkName", "SymLink"); request.addInput("linkPath", "ChildThree"); Response response = responder.makeResponse(FitNesseUtil.makeTestContext(root), request); checkChildTwoRedirectToProperties(response); WikiPage symLink = childTwo.getChildPage("SymLink"); assertNotNull(symLink); assertEquals(SymbolicPage.class, symLink.getClass()); }
public void testInvalidPath() throws Exception { List<Integer> expectedResultCodes = new ArrayList<Integer>(); expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue()); expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue()); expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue());
int getTimeout(); boolean isClosing(); } public static interface SessionExpirer { void expire(Session session); long getServerId(); } long createSession(int sessionTimeout); void addSession(long id, int to);  boolean touchSession(long sessionId, int sessionTimeout);  void setSessionClosing(long sessionId);  void shutdown();  void removeSession(long sessionId); void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter); }
public void testSystemStopped(TestSystem testSystem, ExecutionLog executionLog, Throwable cause) { resultsListener.testSystemStopped(testSystem, executionLog, cause); if (cause != null) { stop();
public boolean hasErrors() { return !this.errors.isEmpty(); }
public void testNextGoesRound() { HostProvider hostProvider = getHostProvider((byte) 2); InetSocketAddress first = hostProvider.next(0); assertTrue(first != null); hostProvider.next(0); assertEquals(first, hostProvider.next(0)); }
public abstract void addEnvVar(String key, String value);  public abstract void addJvmArgs(String... args);  public abstract void addArgs(String... args);  public abstract void addOption(String key, String value);  public abstract void addOption(String key, File value);  public abstract void addOption(String key, boolean value);
public SSLSocket createSSLSocket() throws X509Exception, IOException { SSLSocket sslSocket = (SSLSocket) getDefaultSSLContext().getSocketFactory().createSocket(); configureSSLSocket(sslSocket); return sslSocket; }
public void testRenderingTextBefore() throws Exception { AnchorDeclarationWidget declarationWidget = new AnchorDeclarationWidget(null, "stuff!anchor name some other stuff"); assertEquals("<a name=\"name\"> </a>", declarationWidget.render().trim()); }
int getColumnCountInRow(int row); void substitute(int col, int row, String content); int addRow(List<String> list); void addColumnToRow(int row, String content); void appendChildTable(int row, Table table); void updateContent(int row, TestResult testResult); void updateContent(int col, int row, TestResult testResult); void updateContent(int col, int row, ExceptionResult exceptionResult); Table asTemplate(CellContentSubstitution substitution) throws SyntaxError;
protected String pass(String message) { return super.fail(message); }
public int hashCode() { try { return getPageCrawler().getFullPath(this).hashCode();
public void decrementCounter(String name) { decrementCounter(name, 1); }
protected String createEvaluationMessage(String actual, String expected) { setSymbol(symbolName, actual); return String.format("$%s<-[%s]", symbolName, actual); }
public void testWikiWordIsNotParsed() throws Exception { ParentWidget root = new MockWidgetRoot(); root.defineLiteral("Bob");
public void setup() { this.baseDir = new File(DefaultDirScannerTest.class.getResource("/") .getPath()); this.scanner = new DefaultDirScanner(); }
private String fixJarFileName(String resource, String file) { String fileName = file.substring(0, file.length() - resource.length() - 1).replaceAll("(!)(/)?$", ""); if (!fileName.startsWith("file:")) { fileName = "file:" + fileName; } return fileName; }
public static File fileOf(File f, boolean canonical) throws Exception { return canonical ? f.getCanonicalFile() : f.getAbsoluteFile(); }
public void analyze(Class<?> type) { if (type.isAnnotationPresent(Convert.class)) {
public void processRequest(Request request) { queue.add(new String(request.request.array())); }
WikiPage makeChildPage(String name, FileSystemPage parent); }
public static String regrace(String disgracefulName) { final char separator = PathParser.PATH_SEPARATOR.charAt(0); char c = '?'; GracefulNamer namer = new GracefulNamer(); if (disgracefulName.length() > 0) namer.finalName.append(c = disgracefulName.charAt(0)); boolean isGrabbingDigits = false, wasSeparator = (PathParser.isPathPrefix(c)); for (int i = 1; i < disgracefulName.length(); i++) { c = disgracefulName.charAt(i); if ((Character.isUpperCase(c)) || (Character.isDigit(c) && !isGrabbingDigits) || (c == separator) ) { if (!wasSeparator) namer.finalName.append(" "); wasSeparator = (c == separator); } isGrabbingDigits = (Character.isDigit(c)); namer.finalName.append(c); } return namer.finalName.toString(); }
public void bye() throws IOException, InterruptedException { client.done(); client.join();
public void testOrganizeFilesFiveSubDirs() throws Exception { File dir = FileUtil.createDir("temp"); File dir3 = createSubDir(dir, "dDir"); File dir1 = createSubDir(dir, "bDir"); File dir4 = createSubDir(dir, "eDir"); File dir0 = createSubDir(dir, "aDir"); File dir2 = createSubDir(dir, "cDir"); assertEquals(5, FileUtil.getDirectoryListing(dir).length); assertEquals(dir0, FileUtil.getDirectoryListing(dir)[0]); assertEquals(dir1, FileUtil.getDirectoryListing(dir)[1]); assertEquals(dir2, FileUtil.getDirectoryListing(dir)[2]); assertEquals(dir3, FileUtil.getDirectoryListing(dir)[3]); assertEquals(dir4, FileUtil.getDirectoryListing(dir)[4]); FileUtil.deleteFileSystemDirectory(dir); }
public boolean removeEntryId(Integer id){ boolean retVal = false; synchronized (map) { map.remove(id); retVal = true; if(map.size() == 0) map.notifyAll(); else{ if(map.size() < 4) LOG.error(map.toString()); } } return retVal; }
public CountDownLatch broadcastOperation(BroadcastOpFactory of) { return broadcastOperation(of, locator.getAll()); }
protected IgnoreResult ignore(String value) { testContext.incrementIgnoredTestsCount(); return new IgnoreResult(value); }
public String toString() { return "ScenarioUsage: " + usagePerPage; }
public void testComplete(TestPage page, TestSummary summary) throws IOException { timeMeasurement.stop(); updateCounters(summary); String timeString = new SimpleDateFormat("HH:mm:ss").format(timeMeasurement.startedAtDate()); response.add(String.format("%s %s R:%-4d W:%-4d I:%-4d E:%-4d %s\t(%s)\t%.03f seconds\n", passFail(summary), timeString, summary.getRight(), summary.getWrong(), summary.getIgnores(), summary.getExceptions(), page.getName(), page.getFullPath(), timeMeasurement.elapsedSeconds()));
public void testAdd() throws Exception { assertNull(client.get("test1")); assert !client.asyncGet("test1").getStatus().isSuccess(); assertTrue(client.set("test1", 5, "test1value").get()); assertEquals("test1value", client.get("test1")); assert client.asyncGet("test1").getStatus().isSuccess(); assertFalse(client.add("test1", 5, "ignoredvalue").get()); assert !client.add("test1", 5, "ignoredvalue").getStatus().isSuccess();
public boolean start() { try { if (context.port > 0) { theService = new SocketService(context.port, new FitNesseServer(context)); } return true; } catch (BindException e) { printBadPortMessage(context.port); } catch (Exception e) { e.printStackTrace(); } return false; }
public void addCustomComparator(String prefix, CustomComparator customComparator) { customComparators.put(prefix, customComparator); }
void start() throws IOException; void bye() throws IOException, InterruptedException; void kill() throws IOException; void runTests(TestPage pageToTest) throws IOException, InterruptedException; boolean isSuccessfullyStarted(); void addTestSystemListener(TestSystemListener listener); }
public Maybe<Symbol> parseSymbol(Parser parser, Scanner scanner) { while (true) { Scanner backup = new Scanner(scanner);
public void press() throws Exception { findMethodWithArgs(0).invoke(actor); }
@Test public void testSkip() throws Exception { in.read(); assertEquals(2L, in.skip(2L)); assertEquals(DATA_BYTES[3], in.read()); assertEquals(DATA_BYTES[4], in.read()); }
public void testNormalObserverRun() throws Exception { testObserverConversation(new ObserverConversation() { @Override
public CommandRunningFitClient build() { String testRunner = getTestRunner(); CommandRunningFitClient.CommandRunningStrategy runningStrategy = new CommandRunningFitClient.InProcessCommandRunner(testRunner, getExecutionLogListener()); return buildFitClient(runningStrategy); }
public void onClick(View v) { setResult(RESULT_CANCELED); finish(); }
public void testInvalidPath() throws Exception { List<Integer> expectedResultCodes = new ArrayList<Integer>(); expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY .intValue()); expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue()); expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY .intValue());
public int compare(File o1, File o2) { long z1 = getZxidFromName(o1.getName(), "log"); long z2 = getZxidFromName(o2.getName(), "log"); return z1 < z2 ? -1 : (z1 > z2 ? 1 : 0); }
public static void destroyTestContext() throws IOException { FileUtil.deleteFileSystemDirectory(FitNesseUtil.base); }
public final void begin(final String name, final Attributes attrs) { ((List) ((HashMap) peek()).get("interfaces")).add(attrs.getValue("name")); }
Class<?>[] getControllers();  T retrieve(String id); }
public static KeyPair generateRSAKeyPair() throws GeneralSecurityException { KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA"); RSAKeyGenParameterSpec keyGenSpec = new RSAKeyGenParameterSpec( DEFAULT_RSA_KEY_SIZE_BITS, DEFAULT_RSA_PUB_EXPONENT); keyGen.initialize(keyGenSpec, PRNG); return keyGen.generateKeyPair(); }
public String html(int depth) throws Exception { StringBuffer buffer = new StringBuffer(); addTabs(depth, buffer); if (head != null) buffer.append(head); buffer.append("<").append(tagName()); addAttributes(buffer); if(hasChildren()) { buffer.append(">"); boolean tagWasAdded = addChildHtml(buffer, depth); if (tagWasAdded && !isInline) addTabs(depth, buffer); buffer.append("</").append(tagName()).append(">"); } else buffer.append("/>"); if( tail != null) buffer.append(tail); if (!isInline) buffer.append(endl); return buffer.toString(); }
private HtmlPage prepareResponseDocument(FitNesseContext context) { HtmlPage responseDocument = context.htmlPageFactory.newPage(); HtmlUtil.addTitles(responseDocument, "Default Responder"); responseDocument.setMainContent(content()); return responseDocument; }
String getName();  boolean isHidden(); }
public void execute() throws Exception { request = new MockRequest(); details(); if(username != null) request.setCredentials(username, password); request.parseRequestUri("/" + uri); WikiPagePath path = PathParser.parse(request.getResource());
public void _dont_implement_Matcher___instead_extend_BaseMatcher_() { } public void describeMismatch(Object item, Description description) { matcher.describeMismatch(item, description); } }
Map<String, TestSystemFactory> getTestSystemFactories() throws PluginException; void setComponentFactory(ComponentFactory componentFactory); }
public void testCreateNewSession() throws JSONException { ZSession session = createSession(); Assert.assertEquals(session.id.length(), 36);
public void LoadData(Context ctx, InputStream is, String password, InputStream kfIs, UpdateStatus status, boolean debug) throws IOException, InvalidDBException { LoadData(ctx, is, password, kfIs, status, debug, 0); }
public void testSetTraceMask() throws IOException, InterruptedException { Map<String, String> kwargs = new HashMap<>(); kwargs.put("traceMask", "1"); testCommand("set_trace_mask", kwargs, null, new HashMap<>(), HttpServletResponse.SC_OK, new Field("tracemask", Long.class)); }
public void processTestResults(String relativeName, TestSummary testSummary) throws Exception { finishOutputForTest(); getAssertionCounts().add(testSummary); switchCssSuffix(); HtmlTag mainDiv = HtmlUtil.makeDivTag("alternating_row_" + cssSuffix); mainDiv.add(HtmlUtil.makeSpanTag("test_summary_results " + cssClassFor(testSummary), testSummary.toString())); HtmlTag link = HtmlUtil.makeLink("#" + relativeName + currentTest, relativeName); link.addAttribute("class", "test_summary_link"); mainDiv.add(link); pageCounts.tallyPageCounts(testSummary); HtmlTag insertScript = HtmlUtil.makeAppendElementScript(TEST_SUMMARIES_ID, mainDiv.html(2)); writeData(insertScript.html()); }
private void assertMatch(String input, boolean expected) { SymbolMatch match = new ParseSpecification().provider(testProvider).findMatch(new ScanString(input, 0), 0, new SymbolStream()); assertEquals(match.isMatch(), expected); }
private static boolean isValidFilePath(String filepath) { File file = new File(filepath); return file.exists() && file.canRead(); }
public void testOutputChunk(String output) throws Exception { } @Override public void testComplete(TestPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws Exception { } @Override public void writeHead(String pageType) throws Exception { } }
@Test public void parsesContents() throws Exception { ParserTestHelper.assertParses("!contents -f -g", "SymbolList[Contents[Text, Text]]"); ParserTestHelper.assertParses("!contents hi", "SymbolList[Text, Whitespace, Text]"); ParserTestHelper.assertParses("!contents ]", "SymbolList[Text, Whitespace, CloseBracket]"); }
public void shouldRemovePreviouslyRegisteredComponentIfRegisteringAgainInAnotherScope() { provider.register(Base.class, MyFirstImplementation.class); provider.register(Base.class,AppImplementation.class); Container container = provider.provide(webRequest); Base instance = container.instanceFor(Base.class); assertThat(instance.getClass(), is(typeCompatibleWith(AppImplementation.class))); }
public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof OpResult)) return false; SetDataResult other = (SetDataResult) o; return getType() == other.getType() && stat.getMzxid() == other.stat.getMzxid(); }
public long getPacketsSent();  public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress(); }
public String[] matchParameters(String invokingString) { String[] result = null; if (pattern != null) { Matcher matcher = pattern.matcher(invokingString); if (matcher.matches()) { result = extractNamesFromMatcher(matcher); } } return result; }
public void testGlobalOutstandingRequestThrottlingWithRequestThrottlerDisabled() throws Exception { try { System.setProperty(ZooKeeperServer.GLOBAL_OUTSTANDING_LIMIT, GLOBAL_OUTSTANDING_LIMIT);
public void testWithEmptyPartitionFile() { LinkedHashMap<String, Integer> positions = new LinkedHashMap<>();
boolean isClosing(); } interface SessionExpirer { void expire(Session session); long getServerId(); } long createSession(int sessionTimeout);  boolean trackSession(long id, int to);  boolean commitSession(long id, int to);  boolean touchSession(long sessionId, int sessionTimeout);  void setSessionClosing(long sessionId);  void shutdown();  void removeSession(long sessionId);  boolean isTrackingSession(long sessionId);  void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap();  long getLocalSessionCount(); boolean isLocalSessionsEnabled(); }
XmlSerializer include(String fieldName); XmlSerializer addMethod(String methodName); XmlSerializer from(String prefix, Collection collection); XmlSerializer namespace(String uri, String prefix); }
public void setUp() throws Exception { count = 7; peers = new HashMap<Long,QuorumServer>(count); threads = new ArrayList<LEThread>(count); voteMap = new HashMap<Integer, HashSet<TestVote> >(); votes = new Vote[count]; tmpdir = new File[count]; port = new int[count]; successCount = 0; finalObj = new Object(); }
private Response makeResponse(Request request) throws SocketException { try { Thread parseThread = createParsingThread(request); parseThread.start(); waitForRequest(request); if (!hasError) response = createGoodResponse(request); } catch (SocketException se) { throw se; } catch (Exception e) { response = new ErrorResponder(e).makeResponse(context, request); } return response; }
public void addWatch(String basePath, AddWatchMode mode, VoidCallback cb, Object ctx) { addWatch(basePath, watchManager.defaultWatcher, mode, cb, ctx); }
public void setUp() throws Exception { provider = mock(ParameterNameProvider.class); when(provider.parameterNamesFor(any(Method.class))).thenReturn(new String[] { "abc", "def", "ghi" }); method = new DefaultResourceMethod(new DefaultResourceClass(MyResource.class), MyResource.class.getMethod( "method", String.class, Integer.class, BigDecimal.class)); proxifier = new JavassistProxifier(new ObjenesisInstanceCreator()); typeFinder = new DefaultTypeFinder(provider); converters = mock(Converters.class);
public void setUp() throws Exception { super.setUp();
private MultipleTestsRunner newTestRunnerWithListener(TestSystemListener listener) { WikiPage testPage = addTestPage(suite, "TestPage1", "!define TEST_SYSTEM {A}"); PagesByTestSystem pagesByTestSystem = new PagesByTestSystem((List) asList(testPage), context.root, new StubDescriptorFactory()); MultipleTestsRunner runner = new MultipleTestsRunner(pagesByTestSystem, testingTracker, testSystemFactory); runner.addTestSystemListener(listener); return runner; }
public void accept(final MethodVisitor mv) { Label[] labels = new Label[this.labels.size()]; for (int i = 0; i < labels.length; ++i) { labels[i] = ((LabelNode) this.labels.get(i)).getLabel(); } mv.visitTableSwitchInsn(min, max, dflt.getLabel(), labels); }
public String render() throws Exception { WikiPagePath pathOfWikiWord = PathParser.parse(getWikiWord()); WikiPagePath fullPathOfWikiWord = parentPage.getPageCrawler().getFullPathOfChild(parentPage, pathOfWikiWord); String qualifiedName = PathParser.render(fullPathOfWikiWord); WikiPage targetPage = parentPage.getPageCrawler().getPage(parentPage, PathParser.parse(getWikiWord())); if (targetPage != null) return makeLinkToExistingWikiPage(qualifiedName, targetPage);
public void testSortVersions() { List<VersionInfo> list = new LinkedList<VersionInfo>(); VersionInfo toms = new VersionInfo("Tom-45678901234567", "Tom", toDate("45678901234567")); VersionInfo anons = new VersionInfo("56789012345678", "", toDate("56789012345678")); VersionInfo jerrys = new VersionInfo("Jerry-01234567890123", "Jerry", toDate("01234567890123")); VersionInfo joes = new VersionInfo("Joe-43210987654321", "Joe", toDate("43210987654321")); list.add(toms); list.add(anons); list.add(jerrys); list.add(joes); Collections.sort(list); assertEquals(jerrys, list.get(0)); assertEquals(joes, list.get(1)); assertEquals(toms, list.get(2)); assertEquals(anons, list.get(3)); }
public void testTwoSimpleRuns() throws Exception { super.testTwoSimpleRuns(); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root"); PageBuilder pageBuilder = new PageBuilder(); context = FitNesseUtil.makeTestContext(root); request = new MockRequest(); responder = getSlimResponder(); responder.setFastTest(true);
public void whenInline_noLineBreaksOrTabsAreGeneratedForChildren() { HtmlTag subtag = new HtmlTag("child"); subtag.add("content"); tag.add(subtag); assertEquals("<aTag><child>content</child></aTag>", tag.htmlInline()); }
HttpResult addIntHeader(String name, int value); HttpResult addDateHeader(String name, long date); HttpResult body(String body); HttpResult body(InputStream body); HttpResult body(Reader body);  @Deprecated void movedPermanentlyTo(String url);  @Deprecated <T> T movedPermanentlyTo(Class<T> controller); }
protected String getActionNameStartingAt(int startingCol, int endingCol, int row) throws SyntaxError { return RowHelper.getActionNameStartingAt(table, startingCol, endingCol, row); }
public synchronized boolean addSession(long id, int sessionTimeout) { boolean added = false; sessionsWithTimeout.put(id, sessionTimeout); if (sessionsById.get(id) == null) { SessionImpl s = new SessionImpl(id, sessionTimeout); sessionsById.put(id, s); added = true; LOG.debug("Adding session 0x" + Long.toHexString(id)); } if (LOG.isTraceEnabled()) { String actionStr = added ? "Adding" : "Existing"; ZooTrace.logTraceMessage(LOG, ZooTrace.SESSION_TRACE_MASK, "SessionTrackerImpl --- " + actionStr + " session 0x" + Long.toHexString(id) + " " + sessionTimeout); } touchSession(id, sessionTimeout); return added; }
public void testSize() { List<InetSocketAddress> addresses = getAddressList(); MultipleAddresses multipleAddresses = new MultipleAddresses(addresses); Assert.assertEquals(PORTS_AMOUNT, multipleAddresses.size()); }
public void testRegexpForCommentedTable() throws Exception { assertMatch("-|comment|\n"); assertMatch("-|something|\n"); assertMatch("-!|something|\n"); assertNoMatch("- |a|\n"); assertNoMatch(" -|a|\n"); assertNoMatch("- !|a|\n"); assertNoMatch("!-|a|\n"); }
private Artifact fallbackJLine(final VersionNumber scalaVersion) {
public boolean apply(Annotation[] param) { return any(asList(param), instanceOf(annotation)); }
public void testFindExistentAttributeAsInitParameter() { JstlWrapper jstlWrapper = new JstlWrapper(); final String attributeValue = "myValue"; mockery.checking(new Expectations() { { exactly(1).of(request).getAttribute("my.attribute.request"); will(returnValue(null)); exactly(1).of(session).getAttribute("my.attribute.session"); will(returnValue(null)); exactly(1).of(context).getAttribute("my.attribute.application"); will(returnValue(null)); exactly(1).of(context).getInitParameter("my.attribute"); will(returnValue(attributeValue)); } }); Object value = jstlWrapper.find(webRequest, "my.attribute"); assertSame(attributeValue, value); mockery.assertIsSatisfied(); }
public static double precision(String s) { double value = Double.parseDouble(s); double bound = Double.parseDouble(tweak(s.trim())); return Math.abs(bound - value); }
public void sendHtmlInstructionForTable() throws Exception { String newLine = System.getProperty("line.separator"); String testPage = "!define BONUSRatingTbl {| RATING_NBR | DESCR2 |\n" + "| 1 | Met 100% of goals |\n" + "| 2 | Met < 50% of goals |\n" + "}\n" + "| script |\n" + "| show | echo | ${BONUSRatingTbl}|\n"; st = makeScriptTable(testPage, false); assertions.addAll(st.getAssertions()); assertEquals(assertions.toString(), 2, assertions.size()); assertEquals("Instruction{id='NOOP'}", assertions.get(0).getInstruction().toString()); assertEquals("{id='scriptTable_id_0', instruction='call', instanceName='scriptTableActor', methodName='echo', args=[<table>" + newLine + "\t<tr>" + newLine +
private String runFitnesseMainWith(String... args) throws Exception { PrintStream err = System.err; ByteArrayOutputStream outputBytes = new ByteArrayOutputStream(); System.setErr(new PrintStream(outputBytes)); Arguments arguments = new Arguments(args); Integer exitCode = new FitNesseMain().launchFitNesse(arguments); assertThat(exitCode, is(0)); System.setErr(err); return outputBytes.toString(); }
public List<Class<? extends Interceptor>> all() { return set.topologicalOrder(); }
public void create() { factory = getAnnotationConfiguration().configure().buildSessionFactory(); }
public void setup() { this.mockery = new Mockery(); this.request = mockery.mock(HttpServletRequest.class); this.context = mockery.mock(ServletContext.class); }
private FitNesseContext initContext(File configFile, String rootPath, String fitNesseRoot, int port) throws IOException, PluginException { Properties configFileProperties = ConfigurationParameter.makeProperties(System.getProperties(), configFile); Properties properties = ConfigurationParameter.makeProperties(configFileProperties, ConfigurationParameter.PORT, port, ConfigurationParameter.ROOT_PATH, rootPath, ConfigurationParameter.ROOT_DIRECTORY, fitNesseRoot); return new ContextConfigurator(properties).makeFitNesseContext();
public void testAddExtention() throws Exception { Extension e = new SimpleExtension(); WikiPage page = new MockExtendableWikiPage(e); assertFalse(page.hasExtension("blah")); assertEquals(null, page.getExtension("blah")); assertTrue(page.hasExtension(e.getName())); assertSame(e, page.getExtension(e.getName())); }
private LinkedList<String> getPasswordFileLines() throws Exception { LinkedList<String> lines = new LinkedList<String>(); if (passwordFile.exists()) lines = FileUtil.getFileLines(passwordFile); return lines; }
private String makeLine(WikiPage child) { String line; if (request.hasInput("ShowChildCount")) { int numberOfChildren = child.getChildren().size(); line = child.getName() + " " + numberOfChildren; } else line = child.getName(); return line; }
public void shouldAcceptsWithMultipart() throws Exception { interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, null); when(request.getContentType()).thenReturn("multipart/form-data"); when(request.getMethod()).thenReturn("POST"); assertThat(interceptor.accepts(method), equalTo(true)); }
private void evaluateScores(Game g, List<String> scoreRow, List<String> scoreResults) { for (int frame = 0; frame < 10; frame++) { int actualScore = g.score(frame + 1);
public void addMessageForBlankHtml() throws Exception { for (BaseFormatter formatter : formatters) formatter.addMessageForBlankHtml();
public void testAttributeButtons() throws Exception { crawler.addPage(root, PathParser.parse("NormalPage")); WikiPage noButtonsPage = crawler.addPage(root, PathParser.parse("NoButtonPage")); for (int i = 0; i < WikiPage.NON_SECURITY_ATTRIBUTES.length; i++) { String attribute = WikiPage.NON_SECURITY_ATTRIBUTES[i]; PageData data = noButtonsPage.getData(); data.removeAttribute(attribute); noButtonsPage.commit(data); } SimpleResponse response = requestPage("NormalPage"); assertSubString("<!--Edit button-->", response.getContent()); assertSubString("<!--Search button-->", response.getContent()); assertSubString("<!--Versions button-->", response.getContent()); assertNotSubString("<!--Suite button-->", response.getContent()); assertNotSubString("<!--Test button-->", response.getContent()); response = requestPage("NoButtonPage"); assertNotSubString("<!--Edit button-->", response.getContent()); assertNotSubString("<!--Search button-->", response.getContent()); assertNotSubString("<!--Versions button-->", response.getContent()); assertNotSubString("<!--Suite button-->", response.getContent()); assertNotSubString("<!--Test button-->", response.getContent()); }
public void appendResultChunk(String content) throws IOException { currentWriter.write(content.replace("src=\"/files/images/", "src=\"images/")); }
public void testConnFactoryWithoutConns() throws Exception { try { client = new MemcachedClient(new DefaultConnectionFactory(){
public boolean canHandle(Class<?> type, Method method) { return type.equals(this.resourceMethod.getResource().getType()) && method.equals(this.resourceMethod.getMethod()); }
String getRelativeName(WikiPage base, WikiPage page); boolean isRoot(WikiPage page); WikiPage getRoot(WikiPage page); void traverse(WikiPage root, TraversalListener pageCrawlerTest); WikiPage getSiblingPage(WikiPage page, WikiPagePath pathRelativeToSibling); WikiPage findAncestorWithName(WikiPage page, String name); }
public static boolean hasSlimMessage(String msg){ return msg.contains(SlimVersion.PRETTY_PRINT_TAG_START) && msg.contains(SlimVersion.PRETTY_PRINT_TAG_END);
public void ignoresNonPublicMethod() { final ResourceClass resource = mockery.resource(MyResource.class); this.router.register(resource); assertThat(router.parse("/MyResource.ignorableStatic.logic", HttpMethod.POST, request), is(nullValue())); mockery.assertIsSatisfied(); }
public Calendar deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { Calendar calendar = new GregorianCalendar(); try { if (json.isJsonPrimitive()) {
public void oneRowThatExplicitlyFails() throws Exception { assertTableResults("|2|4|\n", asList(
public void delete(File... files) { persistence.delete(files); }
private void checkResult(List results, int i, String s, Counts counts, String content) { PageResult result = (PageResult)results.get(i); assertEquals(s, result.title()); assertEquals(counts, result.counts()); assertSubString(content, result.content()); }
WikiPage getSiblingPage(WikiPagePath pathRelativeToSibling); WikiPage findAncestorWithName(String name); WikiPage getClosestInheritedPage(String pageName); }
private void removeSymbolicLink(Request request, WikiPage page) throws Exception { String linkToRemove = (String)request.getInput("removal"); PageData data = page.getData(); WikiPageProperties properties = data.getProperties(); WikiPageProperty symLinks = getSymLinkProperty(properties); symLinks.remove(linkToRemove); if(symLinks.keySet().size() == 0) properties.remove(SymbolicPage.PROPERTY_NAME); page.commit(data); setRedirect(resource); }
public void describeClass() throws Exception { statements.add(statement("describeClass", "Describable")); List<Object> results = executor.execute(statements); List<Object> description = (List<Object>) results.get(0); List<String> variables = (List<String>) description.get(0); List<String> methods = (List<String>) description.get(1); assertListHas(variables, "variable"); assertListHas(variables, "baseVariable"); assertListHas(methods, "baseMethod(0)"); assertListHas(methods, "method(2)"); }
private boolean addChildHtml(StringBuffer buffer, int depth) { boolean addedTag = false; boolean lastAddedWasNonTag = false; int i = 0; for (HtmlElement element : childTags) { if (element instanceof HtmlTag) { if ((i == 0 || lastAddedWasNonTag) && !isInline) buffer.append(endl); buffer.append(((HtmlTag) element).html(depth + 1)); addedTag = true; lastAddedWasNonTag = false; } else { buffer.append(element.html()); lastAddedWasNonTag = true; } i++; } return addedTag; }
public void testPageMatchesQueryWithIncludedSetUpsAndExcludedSetUps() throws Exception { Map<String, Boolean> attributes = new HashMap<String, Boolean>(); attributes.put("SetUp", true); attributes.put("TearDown", false); List<PageType> pageTypes = Arrays.asList(STATIC); searcher = generateSearcherByPageTypesAndSearchAttributes(pageTypes, attributes); setPageProperty(page, TEST.toString(), "true"); assertFalse(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SetUp")); assertTrue(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("TearDown")); assertFalse(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SuiteSetUp")); assertTrue(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SuiteTearDown")); assertFalse(searcher.pageMatches(page)); }
public static void startWithFactory(SlimFactory slimFactory, Options options) throws IOException { ServerSocket socket; if (options.port == 1) { socket = new SlimPipeSocket(); if (options.daemon) { System.err .println("Warning: in Slim Pipe mode the daemon flag is not supported."); } } else { ServerSocketFactory serverSocketFactory = options.useSSL ? new SslServerSocketFactory( true, options.sslParameterClassName) : new PlainServerSocketFactory(); socket = serverSocketFactory.createServerSocket(options.port); } try { SlimService slimservice = new SlimService(slimFactory.getSlimServer(),
public void testReferencesOnPageOne_4() { checkChangesOnPageOne("Stuff .SubWiki.PageTwo.PageTwoChild Stuff\n", "Stuff .SubWiki.PageThree.PageTwoChild Stuff\n"); }
public void shortResultShouldShowPassFailBarWithPadding() throws Exception { File pageDirectory = addPageDirectory("TestPage"); addTestResult(pageDirectory, "20090503110451_30_20_3_0"); addTestResult(pageDirectory, "20090503143157_10_5_3_0"); makeResponse(); StringBuilder expected = new StringBuilder(); for (int i = 0; i < 10; i++) { expected.append("<td class=\"element pass\">&nbsp;</td>"); } expected.append(".*"); for (int i = 0; i < 5; i++) { expected.append("<td class=\"element fail\">&nbsp;</td>"); } expected.append(".*"); for (int i = 0; i < 35; i++) { expected.append("<td class=\"element ignore\">&nbsp;</td>"); } assertHasRegexp(expected.toString(), response.getContent()); }
private FitNesseContext initContext(File configFile, String rootPath, int port) throws IOException, PluginException { Properties configFileProperties = ConfigurationParameter.makeProperties(System.getProperties(), configFile); Properties properties = ConfigurationParameter.makeProperties(configFileProperties, ConfigurationParameter.PORT, port, ConfigurationParameter.ROOT_PATH, rootPath, ConfigurationParameter.ROOT_DIRECTORY, "FitNesseRoot"); return ContextConfigurator.systemDefaults().updatedWith(properties).makeFitNesseContext();
public Maybe<Symbol> parse(Symbol current, Parser parser) { String content = current.getContent(); char beginner = content.charAt(content.length() - 1); Symbol body = parser.parseToIgnoreFirst(closeType(beginner)); if (parser.atEnd()) return Symbol.nothing; return new Maybe<Symbol>(new Symbol(SymbolType.Style, content.substring(7, content.length() - 1)).add(body)); }
public void appendChildTable(int rowIndex, Table childTable) { Row row = rows.get(rowIndex); row.rowNode.setAttribute("class", "scenario", '"'); Row childRow = new Row(); TableColumn column = (TableColumn) newTag(TableColumn.class); column.setChildren(new NodeList(((HtmlTable) childTable).getTableNode())); column.setAttribute("colspan", "" + colspan(row), '"'); childRow.appendCell(new Cell(column)); childRow.rowNode.setAttribute("class", "scenario-detail", '"'); insertRowAfter(row, childRow); }
public void testClearSign() throws Exception { final InputStream ring = getClass().getClassLoader().getResourceAsStream("org/vafer/gpg/secring.gpg"); assertNotNull(ring); final String inputStr = "TEST1\nTEST2\nTEST3\n"; final byte[] input = inputStr.getBytes("UTF-8"); final String expectedOutputStr = "-----BEGIN PGP SIGNED MESSAGE-----\n" + "Hash: SHA1\n" + "\n" + "TEST1\n" + "TEST2\n" + "TEST3\n" + "-----BEGIN PGP SIGNATURE-----\n" + "Version: BCPG v1.29\n" + "\n" + "iEYEARECABAFAkax1rgJEHM9pIAuB02PAABIJgCghFmoCJCZ0CGiqgVLGGPd/Yh5\n" + "FQQAnRVqvI2ij45JQSHYJBblZ0Vv2meN\n" + "=aAAT\n" + "-----END PGP SIGNATURE-----\n"; final byte[] expectedOutput = expectedOutputStr.getBytes("UTF-8"); final ByteArrayOutputStream os = new ByteArrayOutputStream(); SigningUtils.clearSign( new ByteArrayInputStream(input), ring, "2E074D8F", "test", os); final byte[] output = fixCRLF(os.toByteArray()); final int from = expectedOutputStr.indexOf("iEYEAREC"); final int until = expectedOutputStr.indexOf("=aAAT") + 5; Arrays.fill(output, from, until, (byte) '?'); Arrays.fill(expectedOutput, from, until, (byte) '?'); assertEquals(new String(expectedOutput), new String(output)); }
protected ZooKeeper createClient(String hp) throws IOException, InterruptedException { CountdownWatcher watcher = new CountdownWatcher(); return createClient(watcher, hp); }
public void testIncludesBody() throws Exception { assertSubString("<body>", html); assertSubString("</body>", html); }
public final void begin(final String element, final Attributes attrs) { int access = getAccess(attrs.getValue("access")); String name = attrs.getValue("name"); String outerName = attrs.getValue("outerName"); String innerName = attrs.getValue("innerName"); cw.visitInnerClass(name, outerName, innerName, access); }
public void testRender() throws Exception { PreProcessorLiteralWidget widget = new PreProcessorLiteralWidget(root, "!-abc-!"); assertEquals("!lit?0?", widget.render()); assertEquals("abc", root.getLiteral(0)); }
public List<Transition> getTransitions(); public List<State> getStates(); }
public List doTable(List<List<String>> table) { List<String> firstRow = new LinkedList<String>(); firstRow.add(""); firstRow.add("pass: Parsed as Table fixture"); List returnList = new LinkedList(); returnList.add(firstRow); return returnList; }
public void buildTestSystemNameWhenTestSystemIsUnknownDefaultsToFit() throws Exception { WikiPage testPage = crawler.addPage(root, PathParser.parse("TestPage"), "!define TEST_SYSTEM {X}\n"); String testSystemName = TestSystem.getDescriptor(testPage, false).getTestSystemName(); Assert.assertEquals("X:fit.FitServer", testSystemName); }
public void testUndecodeable() throws Exception { CachedData cd=new CachedData( Integer.MAX_VALUE & ~(WhalinTranscoder.COMPRESSED | WhalinTranscoder.SERIALIZED), tu.encodeInt(Integer.MAX_VALUE)); assertNull(tc.decode(cd)); }
public void testSessionExpires() throws InterruptedException { ZSession session = createSession("1");
public void loadTestSystems(final TestSystemFactoryRegistry registrar) throws PluginException { for (PluginFeatureFactory pff : pluginFeatureFactories) { Map<String, ? extends TestSystemFactory> systemFactories = pff.getTestSystemFactories();
private boolean validReportValuesMarked(Parse expected, Parse actual) { boolean result = true; while (expected != null && actual != null) { if (!expected.text().equals("")) { if (expected.text().equals(actual.text())) right(expected); else { wrong(expected,actual.text()); result = false; } } expected = expected.more; actual = actual.more; } return result; }
synchronized private void checkPage() { if (useCount <= 0) { throw new IllegalStateException("Page not marked in use");
private void doSimpleRun() throws Exception { receiver.receiveSocket(); client.start(); Thread.sleep(100); client.send("<html><table><tr><td>fitnesse.testutil.PassFixture</td></tr></table></html>"); client.done(); client.join(); }
public void shouldSetEncodingToUTF8() throws Exception { EncodingInterceptor interceptor = new EncodingInterceptor(request, response); interceptor.intercept(stack, method, resourceInstance); InOrder callOrder = inOrder(request, response, stack); callOrder.verify(request).setCharacterEncoding("UTF-8"); callOrder.verify(response).setCharacterEncoding("UTF-8"); callOrder.verify(stack).next(method, resourceInstance); }
public byte[] poll() throws KeeperException, InterruptedException { try{ return remove();
public void fromString_should_return_the_char_when_value_is_a_char() { String value = "a"; Character current = converter.fromString(value); assertEquals(Character.valueOf('a'), current); }
public void shouldOptionallyIncludeMethodReturn() { String expectedResult = "<order>\n<nice>nice output</nice></order>"; Order order = new Order(new Client("guilherme silveira"), 15.0, "pack it nicely, please"); serializer.from(order).exclude("price","comments").addMethod("nice").serialize(); assertThat(result(), is(equalTo(expectedResult))); }
public static void testNormalOperation(ZooKeeper writer, ZooKeeper reader) throws KeeperException, InterruptedException { boolean testNodeExists = false; for (int j = 0; j < 30; j++) { try {
public void run() { try { System.out.println("Connected to " + s);
public boolean isSslQuorum();  public boolean isPortUnification();  public long getObserverElectionDelayMS();  public void setObserverElectionDelayMS(long delayMS); }
void endRecord(Record r, String tag) throws IOException; void startVector(List<?> v, String tag) throws IOException; void endVector(List<?> v, String tag) throws IOException; void startMap(TreeMap<?, ?> v, String tag) throws IOException; void endMap(TreeMap<?, ?> v, String tag) throws IOException; }
WikiPage getPage(WikiPagePath path); WikiPage getPage(WikiPagePath path, PageCrawlerDeadEndStrategy deadEndStrategy); boolean pageExists(WikiPagePath path); WikiPagePath getFullPathOfChild(WikiPagePath childPath); WikiPagePath getFullPath(); String getRelativeName(WikiPage page);
private void prepareResponse(FitNesseContext context, Request request) { response = new SimpleResponse(); if (resultsDirectory == null) resultsDirectory = context.getTestHistoryDirectory(); history = new TestHistory(); history.readHistoryDirectory(resultsDirectory); pageName = request.getResource(); pageHistory = history.getPageHistory(pageName); velocityContext = new VelocityContext(); velocityContext.put("pageTitle", makePageTitle(request.getResource())); }
public void init() { logger.info("Initializing VRaptor IoC Container implementation based on PicoContainer"); for (Map.Entry<Class<?>, Class<?>> entry : applicationScoped.entrySet()) { logger.debug("Initializing application scope with key: " + entry.getKey() + ", for component: " + entry.getValue()); this.appContainer.addComponent(entry.getKey(), entry.getValue()); } registerComponentFactories(appContainer, componentFactoryRegistry.getApplicationMap()); logger.debug("Session components to initialize: " + sessionScoped.keySet()); logger.debug("Requets components to initialize: " + requestScoped.keySet()); this.initialized = true; }
private void makeMatchingPagesRows(HtmlTableListingBuilder table, List<WikiPage> pages, Map<String, Boolean> values) throws Exception { for (WikiPage page : pages) { PageData pageData = page.getData();
private static void serializeTree(int depth, int width, int len) throws InterruptedException, IOException, KeeperException.NodeExistsException, KeeperException.NoNodeException { DataTree tree = new DataTree(); createNodes(tree, "/", depth, width, new byte[len]); int count = tree.getNodeCount(); BinaryOutputArchive oa = BinaryOutputArchive.getArchive(new NullOutputStream()); System.gc(); long start = System.nanoTime(); tree.serialize(oa, "test"); long end = System.nanoTime(); long durationms = (end - start)/1000000L; long pernodeus = ((end - start)/1000L)/count; LOG.info("Serialized " + count + " nodes in " + durationms + " ms (" + pernodeus + "us/node), depth="
private void includeSetupTeardownAndLibraryPages() { String pageName = testPage.getName(); includeScenarioLibraries(); if (!isSuiteSetUpOrTearDownPage(pageName)) includeSetupPages(); if (!isSuiteSetUpOrTearDownPage(pageName)) includeTeardownPages();
public void shouldBeAbleToConvertIntegerNumbers(){ assertThat((BigDecimal) converter.convert("2.3", BigDecimal.class), is(equalTo(new BigDecimal("2.3")))); }
protected void setUp() throws Exception { super.setUp(); ex = new Exposer(); }
public void testSetQuotaDisableWhenExceedBytesHardQuota() throws Exception { final String namespace = UUID.randomUUID().toString(); final String path = "/" + namespace; zk.create(path, "12345".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); StatsTrack st = new StatsTrack(); st.setByteHardLimit(5L); SetQuotaCommand.createQuota(zk, path, st); try { zk.setData(path, "123456".getBytes(), -1);
void visitLocalVariable(String name, String desc, String signature, Label start, Label end, int index);  void visitLineNumber(int line, Label start);  void visitMaxs(int maxStack, int maxLocals);  void visitEnd(); }
public TokenMatch makeMatch(TokenType type, ScanString input) { int size = input.whitespaceLength(); return size > 0 ? new TokenMatch(new ContentToken(type, " "), size) : TokenMatch.noMatch; }
private void includeSetupsTeardownsAndLibrariesBelowTheSuite(WikiPage suitePage) throws Exception { String pageName = testPage.getName(); includeScenarioLibraryBelow(suitePage); if (!isSuiteSetUpOrTearDownPage(pageName)) includeSetupPages(); includePageContent(); if (!isSuiteSetUpOrTearDownPage(pageName)) includeTeardownPages(); updatePageContent(); }
@Test public void translatesIncludedSibling() throws Exception { WikiPage root = InMemoryPage.makeRoot("RooT"); PageCrawler crawler = root.getPageCrawler(); crawler.setDeadEndStrategy(new VirtualEnabledPageCrawler()); WikiPage currentPage = crawler.addPage(root, PathParser.parse("PageOne"), "page one"); crawler.addPage(root, PathParser.parse("PageTwo"), "page two"); String result = new Translator(currentPage).translate("!include PageTwo\n"); assertContains(result, "class=\"collapsable\""); assertContains(result, "page two"); }
public void testWithMessage() throws Exception { Responder responder = new ErrorResponder("error Message"); SimpleResponse response = (SimpleResponse) responder.makeResponse(context, new MockRequest()); String body = response.getContent(); assertSubString("error Message", body); }
public void shutdown(long waitMs) throws IOException { synchronized (this.lock) { if (!this.shutdown) { this.shutdown = true; while (!this.pendingRequests.isEmpty()) { AsyncConnectionRequest request = this.pendingRequests .remove(); request.cancel(); } this.availableConns.clear(); this.allConns.clear(); } } this.ioreactor.shutdown(waitMs); }
private Object convert(Class clazz, String value, ResourceBundle bundle) { if (String.class.equals(clazz)) { return value; } Converter<?> converter = converters.to(clazz); if (converter == null) {
public void stdErr(String output) { stdErr.append(output); }
private HtmlTag makeVirtualWikiHtml() throws Exception { HtmlTag virtualWiki = new HtmlTag("div"); virtualWiki.addAttribute("style", "float: left; width: 450px;"); virtualWiki.add("VirtualWiki URL: "); HtmlTag deprecated = new HtmlTag("span", "(DEPRECATED)"); deprecated.addAttribute("style", "color: #FF0000;"); virtualWiki.add(deprecated); virtualWiki.add(HtmlUtil.BR); HtmlTag vwInput = HtmlUtil.makeInputTag("text", "VirtualWiki", getVirtualWikiValue(pageData)); vwInput.addAttribute("size", "40"); virtualWiki.add(vwInput); virtualWiki.add(HtmlUtil.NBSP); virtualWiki.add(HtmlUtil.NBSP); return virtualWiki; }
public void processResult(int rc, String path, Object ctx, String name) { ((List<Integer>) ctx).add(rc); opsCount.countDown();
protected String fail(String value) { return String.format("!style_fail(%s)", value); }
private String makeUndefinedVariableExpression(String name) throws Exception { return HtmlUtil.metaText("undefined variable: " + name); }
public void tableWithoutPrefixWillBeConstructed() throws Exception { getResultsForPageContents("|XX|\n"); assertTestResultsContain("!<XX>! !style_error(Could not invoke constructor for XX[0])"); }
public void resetMax() { for (Map.Entry<String, AvgMinMaxCounter> entry : counters.entrySet()) { entry.getValue().resetMax();
protected byte[] decompress(byte[] in) { ByteArrayOutputStream bos=null; if(in != null) { ByteArrayInputStream bis=new ByteArrayInputStream(in); bos=new ByteArrayOutputStream(); GZIPInputStream gis; try { gis = new GZIPInputStream(bis); byte[] buf=new byte[8192]; int r=-1; while((r=gis.read(buf)) > 0) { bos.write(buf, 0, r); } } catch (IOException e) { getLogger().warn("Failed to decompress data", e); bos = null; } } return bos == null ? null : bos.toByteArray(); }
public void testRunWithSuiteFromRoot() throws Exception { addImportPropertyToPage(pageOne, true, true); suiteResponder.importWikiPages(); assertEquals("", pageOne.getData().getContent()); assertEquals(MockWikiImporter.mockContent, childOne.getData().getContent()); assertEquals(MockWikiImporter.mockContent, childTwo.getData().getContent()); assertEquals("Updating imported content... Done.", sentMessages); }
public void testUpdateServerList_UnResolvedWithUnResolvedAddress_ForceDisconnect() {
public void testSessionRecoveredAfterMultipleFailedAttempts() throws Exception {
private void roundABC( long x, long mul) { c ^= x ; a -= t1[(int)c & 0xff] ^ t2[(int)(c >> 16) & 0xff] ^ t3[(int)(c >> 32) & 0xff] ^ t4[(int)(c >> 48) & 0xff]; b += t4[(int)(c >> 8) & 0xff] ^ t3[(int)(c >> 24) & 0xff] ^ t2[(int)(c >> 40) & 0xff] ^ t1[(int)(c >> 56) & 0xff]; b *= mul; }
private void willAddTheDvdRental(final Dvd dvd) { mockery.checking(new Expectations() { {
public void testRedirectForDirectory() throws Exception { request.setResource("files/testDir"); Responder responder = FileResponder.makeResponder(request, context.getRootPagePath()); Response response = responder.makeResponse(context, request); assertEquals(303, response.getStatus()); assertEquals("/files/testDir/", response.getHeader("Location")); }
public void initEncryptData() { cryptoInitOk = false; if (!isFingerprintInitialized()) { if (fingerPrintCallback != null) { fingerPrintCallback.onException(); } return; } try { initEncryptKey(false);
public void cleanUp() throws Exception { clearSSLSystemProperties(); if (q1 != null) { q1.shutdown(); } if (q2 != null) { q2.shutdown(); } if (q3 != null) { q3.shutdown(); } Security.removeProvider("BC"); }
private String makeRecentChangesLine(PageData data) { String user = data.getAttribute(PageData.LAST_MODIFYING_USER); if (user == null) user = ""; return "|" + resource(data) + "|" + user + "|" + makeDateFormat().format(Clock.currentDate()) + "|"; }
public void shouldOptionallyIncludeFieldAndNotItsNonPrimitiveFields() {
public void shouldOptionallyRemoveRoot() { Order order = new Order(new Client("guilherme silveira"), 15.0, "pack it nicely, please", new Item( "any item", 12.99)); serialization.withoutRoot().from(order).include("items").exclude("items.price").serialize(); assertThat(result(), containsString("\"items\"")); assertThat(result(), containsString("\"name\":\"any item\"")); assertThat(result(), not(containsString("12.99"))); assertThat(result(), not(containsString("\"order\":"))); }
public void testUpwardCompatibility() { OldStatsTrack ost = new OldStatsTrack(null); ost.setCount(2); ost.setBytes(5); Assert.assertEquals("count=2,bytes=5", ost.toString()); StatsTrack st = new StatsTrack(ost.toString()); Assert.assertEquals("count=2,bytes=5", st.toString()); Assert.assertEquals(5, st.getBytes()); Assert.assertEquals(2, st.getCount()); Assert.assertEquals(-1, st.getByteHardLimit()); Assert.assertEquals(-1, st.getCountHardLimit()); }
public void _testLargeTable() throws Exception { StringBuffer buffer = new StringBuffer(); for(int i = 0; i < 1000; i++) buffer.append("|'''bold'''|''italic''|!c centered|\n"); try {
public InputStream getData() throws IOException { return new FileInputStream(file); }
protected void finishedPayload(byte[] pl) throws IOException { if(responseOpaque == terminalOpaque) { for(OperationCallback cb : callbacks.values()) { cb.receivedStatus(STATUS_OK); cb.complete(); } transitionState(OperationState.COMPLETE); } else { OperationCallback cb = callbacks.remove(responseOpaque); assert errorCode != 0 : "Got no error on a quiet mutation."; OperationStatus status=getStatusForErrorCode(errorCode, pl); assert status != null : "Got no status for a quiet mutation error"; cb.receivedStatus(status); cb.complete(); } resetInput(); }
public void testAddCdataElement() throws Exception { Document doc = XmlUtil.newDocument(); Element root = doc.createElement("root"); doc.appendChild(root); XmlUtil.addCdataNode(root, "mydata", "<>&#;"); Element myDataElement = XmlUtil.getElementByTagName(root, "mydata"); assertNotNull(myDataElement); Node childNode = myDataElement.getChildNodes().item(0); assertTrue(childNode instanceof CDATASection); CDATASection cData = (CDATASection) childNode; assertEquals("<>&#;", cData.getNodeValue()); }
public void rateLimitLog(String newMsg, String newValue) { long now = Time.currentElapsedTime(); if (Objects.equals(newMsg, msg)) { ++count;
public boolean isAlive() { Thread t = currentThread; return t != null && t.isAlive(); }
public void testTriggerSparseWatch(TriggerSparseWatchState state) throws Exception { for (String path : state.paths) { state.watchManager.triggerWatch(path, event, WatchedEvent.NO_ZXID);
public void testPut() { expectGetAndReturn("blaha", "olda"); clientMock.expects(once()).method("set") .with(eq("blaha"), eq(EXP), eq("newa")); assertEquals("olda", cacheMap.put("a", "newa")); }
<T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, int exp, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); CASResponse cas(String key, long casId, int exp, Object value); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size); }
public void shouldRollbackIfAMigrationFails() throws Exception { final Migration migration = mockery.mock(Migration.class, "a migration"); final Migration otherMigration = mockery.mock(Migration.class, "other migration"); mockery.checking(new Expectations() { { allowing(migration).getId(); will(returnValue("1")); allowing(otherMigration).getId(); will(returnValue("2")); one(migration).execute(session); will(throwException(new RuntimeException())); never(otherMigration).execute(session); never(session).save(new MigrationInfo("1")); never(session).save(new MigrationInfo("2")); Transaction transaction = mockery.mock(Transaction.class); allowing(session).beginTransaction(); will(returnValue(transaction)); one(transaction).rollback(); one(transaction).wasCommitted(); will(returnValue(false)); ignoring(anything()); } }); Migrations migrations = new Migrations(Arrays.asList(migration, otherMigration)); try { provider.apply(migrations);
public void shouldSortBasedOnPackageNamesLessPriorityToCaelumMoreToRestfulieInitialList3rdPartyLast() { List<Serialization> serializers = new ArrayList<Serialization>(); serializers.add(new XStreamXMLSerialization(null, null, null)); serializers.add(new XStreamJSONSerialization(null, null, null)); serializers.add(new HTMLSerialization(null, null)); serializers.add(new RestfulSerialization(null, null, null, null, null)); serializers.add(new DumbSerialization()); Collections.sort(serializers, new PackageComparator()); Assert.assertEquals("pacote.antes.da.caelum", serializers.get(0).getClass().getPackage().getName()); Assert.assertEquals("br.com.caelum.vraptor.restfulie.serialization", serializers.get(1).getClass().getPackage().getName()); }
public void sendBuffer(ByteBuffer... buffers) { if (buffers.length == 1 && buffers[0] == ServerCnxnFactory.closeConn) { close(DisconnectReason.CLIENT_CLOSED_CONNECTION); return; } channel.writeAndFlush(Unpooled.wrappedBuffer(buffers)).addListener(onSendBufferDoneListener); }
public BigInteger convert(String value, Class<? extends BigInteger> type, List<ValidationMessage> errors, ResourceBundle bundle) { if (value == null || value.equals("")) { return null; } try { return new BigInteger(value);
public void testXmlFormatter() throws Exception { checkFormatterCreated("xml", XmlResultFormatter.class); }
public boolean isLevelEnabled(int i) {
public void clearSaslConfig() { FileUtils.deleteQuietly(saslConfFile); System.clearProperty(Environment.JAAS_CONF_KEY); System.clearProperty("zookeeper.authProvider.1"); }
String scalaCompilerArtifactId() throws Exception; String compilerMainClassName(boolean useFsc) throws Exception; String consoleMainClassName() throws Exception; String apidocMainClassName() throws Exception; }
void update(byte[] data, int offset, int length) { crc.update(data, offset, length); }
public boolean shouldIgnoreException(String resultKey, String resultString) { boolean shouldNotReport = dontReportExceptionsInTheseInstructions.contains(resultKey); boolean isNoSuchMethodException = resultString.contains(SlimServer.NO_METHOD_IN_CLASS); return shouldNotReport && isNoSuchMethodException; }
public int getConnectionTokenFillCount(); public void setConnectionTokenFillCount(int val); public int getConnectionFreezeTime(); public void setConnectionFreezeTime(int val); public double getConnectionDropIncrease(); public void setConnectionDropIncrease(double val); public double getConnectionDropDecrease(); public void setConnectionDropDecrease(double val); public double getConnectionDecreaseRatio(); public void setConnectionDecreaseRatio(double val); public int getCommitProcMaxReadBatchSize(); public void setCommitProcMaxReadBatchSize(int size); public int getCommitProcMaxCommitBatchSize(); public void setCommitProcMaxCommitBatchSize(int size); public int getRequestThrottleLimit(); public void setRequestThrottleLimit(int requests); public int getRequestThrottleStallTime(); public void setRequestThrottleStallTime(int time); public boolean getRequestThrottleDropStale(); public void setRequestThrottleDropStale(boolean drop); public boolean getRequestStaleLatencyCheck(); public void setRequestStaleLatencyCheck(boolean check); public boolean getRequestStaleConnectionCheck(); public void setRequestStaleConnectionCheck(boolean check);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); public long getFlushDelay(); public void setFlushDelay(long delay); public long getMaxWriteQueuePollTime(); public void setMaxWriteQueuePollTime(long delay); public int getMaxBatchSize(); public void setMaxBatchSize(int size); }
public void testLeaderTimesoutOnNewQuorum() throws Exception { qu = new QuorumUtil(1);
public void testStarted(Description description) throws Exception { timeMeasurement = new TimeMeasurement().start(); super.testStarted(description); }
private QueryTable makeQueryTable(String tableText) throws Exception { WikiPageUtil.setPageContents(root, tableText); TableScanner ts = new TableScanner(root.getData()); Table t = ts.getTable(0); return new QueryTable(t, "id"); }
public void imageWithMarginBorderWidth() throws Exception { ParserTestHelper.assertParses("!img -b 1 name", "SymbolList[Link[SymbolList[Text]]]"); TestRoot root = new TestRoot(); WikiPage testPage = root.makePage("ImagePage", "!img -m 5 -b 1 -w 50 name"); ParserTestHelper.assertTranslatesTo(testPage, "<img src=\"name\" width=\"50\" style=\"border:1px solid black;margin:5px 5px 5px 5px;\"/>"); }
int getInitLimit();  int getSyncLimit();  void setInitLimit(int initLimit);  void setSyncLimit(int syncLimit);  boolean isSslQuorum();  boolean isPortUnification();  long getObserverElectionDelayMS();  void setObserverElectionDelayMS(long delayMS); }
private void testOperations(TestableZooKeeper zk) throws Exception { Stat stat = new Stat(); zk.getData("/", false, stat); checkVersion(zk, "/", -1); checkVersion(zk, "/", stat.getVersion()); assertThrows(KeeperException.BadVersionException.class, () -> { checkVersion(zk, "/", stat.getVersion() + 1); }); assertThrows(KeeperException.NoNodeException.class, () -> { checkVersion(zk, "/no-node", Integer.MAX_VALUE);
private void initFolder(String fitnesseRoot) throws IOException { File filesFolder = new File(new File(new File(fitnesseRoot), "FitNesseRoot"), "files"); File cssDir = new File(filesFolder, "css"); addFile(new File(cssDir, "fitnesse_wiki.css"), "fitnesse.css"); File javascriptDir = new File(filesFolder, "javascript"); addFile(new File(javascriptDir, "fitnesse.js"), "fitnesse.js"); File imagesDir = new File(filesFolder, "images"); addFile(new File(imagesDir, "collapsableOpen.gif"), "images/collapsableOpen.gif"); addFile(new File(imagesDir, "collapsableClosed.gif"), "images/collapsableClosed.gif"); }
public void testTestReferencesToSubWiki_1() { PageData data = subWiki.getData(); data.setContent("Stuff >PageTwo Stuff\n"); subWiki.commit(data); renamer = new PageReferenceRenamer(subWiki_pageTwo, "PageThree"); ReferenceRenamingTraverser.renameReferences(root, renamer); String updatedSubWikiContent = subWiki.getData().getContent(); assertEquals("Stuff >PageThree Stuff\n", updatedSubWikiContent); }
public void testExistACLCheck(@TempDir File tmpDir) throws Exception { ClientBase.setupTestEnv(); ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000); final int PORT = Integer.parseInt(HOSTPORT.split(":")[1]); ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1); f.startup(zks); String path = "/testExistACLCheck"; String data = "/testExistACLCheck-data"; try { LOG.info("starting up the zookeeper server .. waiting");
public void testShouldAskRevisionControllerToAddAllParentPages() throws Exception { expect(revisionController.checkState(contentAndPropertiesFilePathFor(FS_PARENT_PAGE))).andReturn(UNKNOWN); revisionController.add(contentAndPropertiesFilePathFor(FS_PARENT_PAGE)); expect(revisionController.checkState(contentAndPropertiesFilePathFor(FS_CHILD_PAGE))).andReturn(UNKNOWN); revisionController.add(contentAndPropertiesFilePathFor(FS_CHILD_PAGE)); revisionController.add(contentAndPropertiesFilePathFor(FS_GRAND_CHILD_PAGE)); replay(revisionController); createPage(FS_GRAND_CHILD_PAGE); request.setResource(FS_PARENT_PAGE + "." + FS_CHILD_PAGE + "." + FS_GRAND_CHILD_PAGE); invokeResponderAndCheckSuccessStatus(); }
protected ErrorResult error(String value) { testSummary.exceptions = testSummary.getExceptions() + 1; return new ErrorResult(value); }
public void testWatcherAutoResetWithGlobal() throws Exception { ZooKeeper zk = null; MyWatcher watcher = new MyWatcher(); zk = createClient(watcher, hostPort); testWatcherAutoReset(zk, watcher, watcher); zk.close(); }
public void LoadData(Context ctx, InputStream is, String password, String keyfile, boolean debug) throws InvalidCipherTextException, IOException, InvalidKeyFileException { ImporterV3 Importer = new ImporterV3(debug); mPM = Importer.openDatabase(is, password, keyfile); if ( mPM != null ) { mPM.constructTree(null); populateGlobals(null); } searchHelper = new SearchDbHelper(ctx); buildSearchIndex(); loaded = true;
String formatLogLine(LogData data) { StringBuffer line = new StringBuffer(); line.append(data.host).append(" - "); line.append(data.username == null ? "-" : data.username); line.append(" [").append(format(makeLogFormat(), data.time)).append("] "); line.append('"').append(data.requestLine).append("\" "); line.append(data.status).append(" "); line.append(data.size); return line.toString(); }
public static String toClasspathString(ClassLoader cl) { StringBuilder back = new StringBuilder(); List<String> cps = new LinkedList<>(); appendUrlToClasspathCollection(cl, cps); for(String cp : cps) { if (back.length() != 0) { back.append(File.pathSeparatorChar); } back.append(cp); } return back.toString(); }
public int size() { final ReentrantLock lock = this.lock; lock.lock(); try { return this.queue.size();
public void announceTestSystem(String testSystemName) { this.testSystemName = testSystemName; }
public boolean inOrder() throws Exception { if(value == null) { return false; } String pageContent = FitnesseFixtureContext.sender.sentData(); String[] lines = arrayifyLines(pageContent); for(int i = currentLine; i < lines.length; i++) { if(value.equals(lines[i].trim())) { currentLine = i; return true; } } return false; }
void close() { try { ledger.close(); } catch (IOException e) { LOG.warn("Error closing ledger " + ledgerId, e); } try { ledgerIndex.close();
private Response getResponse() throws Exception { FitNesseContext context = new FitNesseContext(testData.localRoot); MockRequest request = new MockRequest(); request.setResource("PageTwo"); return responder.makeResponse(context, request); }
private String[] findSourceFiles() { if (sourceFiles_ == null) { if(includes.isEmpty()) { includes.add("**/*.scala"); } sourceFiles_ = JavaCommand.findFiles(sourceDir, includes.toArray(new String[includes.size()]), excludes.toArray(new String[excludes.size()])); } return sourceFiles_; }
public Index startVector(String tag) throws IOException; public void endVector(String tag) throws IOException; public Index startMap(String tag) throws IOException; public void endMap(String tag) throws IOException; }
public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((method == null) ? 0 : method.hashCode()); result = prime * result + ((resource == null) ? 0 : resource.hashCode()); return result; }
public WikiPage makePage(final File path, final String pageName, final WikiPage parent, final VariableSource variableSource) { Optional<String> rootPath = variableSource.findVariable("FITNESSE_ROOTPATH"); return new WikiFilePage(path, pageName.substring(0, pageName.length() - WikiFilePage.FILE_EXTENSION.length()), parent, null, versionsController, new FileSystemSubWikiPageFactory(new File(rootPath.orElse("*nothing*")), fileSystem, variableSource, FileSystemPageFactory.this),
protected Election createElectionAlgorithm(int electionAlgorithm){ Election le=null;
private Artifact createJarArtifact( String groupId, String artifactId, String version, String classifier) { return classifier == null ? repositorySystem.createArtifact(groupId, artifactId, version, ScalaMojoSupport.JAR)
protected void init( final X509KeyType caKeyType, final X509KeyType certKeyType, final String keyPassword, final Integer paramIndex) throws Exception { init(paramIndex, () -> { try {
public void testFormatAddrUnresolved() { InetSocketAddress isa = InetSocketAddress.createUnresolved("doesnt.exist.com", 1234); Assert.assertEquals("doesnt.exist.com:1234", NetUtils.formatInetAddr(isa)); }
static void printUsage() { System.err.println("Usage: java -jar fitnesse.jar [-vpdrleoab]"); System.err.println("\t-p <port number> {" + FitNesseContext.DEFAULT_PORT + "}"); System.err.println("\t-d <working directory> {" + DEFAULT_PATH + "}"); System.err.println("\t-r <page root directory> {" + DEFAULT_ROOT + "}"); System.err.println("\t-l <log directory> {no logging}"); System.err.println("\t-f <config properties file> {" + DEFAULT_CONFIG_FILE + "}"); System.err.println("\t-e <days> {" + DEFAULT_VERSION_DAYS + "} Number of days before page versions expire"); System.err.println("\t-o omit updates"); System.err .println("\t-a {user:pwd | user-file-name} enable authentication."); System.err.println("\t-i Install only, then quit."); System.err.println("\t-c <command> execute single command."); System.err.println("\t-b <filename> redirect command output."); System.err.println("\t-v {off} Verbose logging"); }
protected void packetSent() { incrPacketsSent(); ServerStats serverStats = serverStats(); if (serverStats != null) { serverStats.incrementPacketsSent();
public boolean equals(Object o) { if (o == null || !(o instanceof TestSummary)) return false; TestSummary other = (TestSummary) o; return getRight() == other.getRight() && getWrong() == other.getWrong() && getIgnores() == other.getIgnores()
public void testResponse() throws Exception { WikiPage page=crawler.addPage(root, PathParser.parse("ChildPage"), "child content with <html>"); PageData data = page.getData(); WikiPageProperties properties = data.getProperties(); properties.set(PageData.PropertySUITES, "Edit Page tags"); page.commit(data); request.setResource("ChildPage"); SimpleResponse response = (SimpleResponse) responder.makeResponse(new FitNesseContext(root), request); assertEquals(200, response.getStatus()); String body = response.getContent(); assertSubString("<html>", body); assertSubString("<form", body); assertSubString("method=\"post\"", body); assertSubString("child content with &lt;html&gt;", body); assertSubString("name=\"responder\"", body); assertSubString("name=\"" + EditResponder.TIME_STAMP + "\"", body); assertSubString("name=\"" + EditResponder.TICKET_ID + "\"", body); assertSubString("name=\"" + EditResponder.HELP_TEXT + "\"", body); assertSubString("select id=\"" + EditResponder.TEMPLATE_MAP + "\"", body); assertSubString("type=\"submit\"", body); assertSubString(String.format("textarea", EditResponder.CONTENT_INPUT_NAME), body); assertSubString("<h5> Edit Page tags</h5>", body); }
public void tearDown() throws Exception { } public void testHead() throws Exception { formatter.writeHead("test"); assertSubString("<div id=\"test-summary\">Running Tests ...</div>", pageBuffer.toString()); } public void testTestSummaryTestPass() throws Exception { TimeMeasurement timeMeasurement = new TimeMeasurement(); formatter.writeHead("test"); formatter.newTestStarted(page, timeMeasurement.start()); formatter.testComplete(page, new TestSummary(4, 0, 0, 0), timeMeasurement.stop()); formatter.allTestingComplete(); assertSubString("<script>document.getElementById(\"test-summary\").innerHTML =", pageBuffer.toString()); assertSubString("<strong>Assertions:</strong> 4 right, 0 wrong, 0 ignored, 0 exceptions", pageBuffer.toString()); assertSubString("document.getElementById(\"test-summary\").className = \"pass\"", pageBuffer.toString()); } public void testTestSummaryTestFail() throws Exception { TimeMeasurement timeMeasurement = new TimeMeasurement(); formatter.writeHead("test"); formatter.newTestStarted(page, timeMeasurement.start()); formatter.testComplete(page, new TestSummary(4, 1, 0, 0), timeMeasurement.stop()); formatter.allTestingComplete(); assertSubString("<strong>Assertions:</strong> 4 right, 1 wrong, 0 ignored, 0 exceptions", pageBuffer.toString()); assertSubString("document.getElementById(\"test-summary\").className = \"fail\"", pageBuffer.toString()); } public void testExecutionStatusHtml() throws Exception { TimeMeasurement timeMeasurement = new TimeMeasurement(); formatter.writeHead("test"); formatter.setExecutionLogAndTrackingId("2", new CompositeExecutionLog(root.addChildPage("ErrorLogs"))); formatter.newTestStarted(page, timeMeasurement.start()); formatter.testComplete(page, new TestSummary(4, 1, 0, 0), timeMeasurement.stop()); formatter.allTestingComplete(); assertSubString("<div id=\"execution-status\">", pageBuffer.toString()); } public void testTail() throws Exception { TimeMeasurement timeMeasurement = new TimeMeasurement(); formatter.writeHead("test"); formatter.newTestStarted(page, timeMeasurement.start()); formatter.testComplete(page, new TestSummary(4, 1, 0, 0), timeMeasurement.stop()); formatter.allTestingComplete(); assertSubString("</html>", pageBuffer.toString()); } public void testStop() throws Exception { TimeMeasurement timeMeasurement = new TimeMeasurement(); formatter.writeHead("test"); formatter.setExecutionLogAndTrackingId("2", new CompositeExecutionLog(root.addChildPage("ErrorLogs"))); formatter.newTestStarted(page, timeMeasurement.start()); formatter.testComplete(page, new TestSummary(4, 1, 0, 0), timeMeasurement.stop()); formatter.allTestingComplete();
public void shouldDiscoverGenericTypeParametersWhenThereIsInheritance() throws Exception { Assert.assertEquals("t",extractor.nameFor(XController.class.getMethod("edit").getGenericReturnType())); Assert.assertEquals("tList",extractor.nameFor(XController.class.getMethod("list").getGenericReturnType())); }
public void oneRowThatExplicitlyIgnoresWithChange() throws Exception { assertTableResults("|2|4|\n", list(
public void testButtons() throws Exception { makeTestResponse("PageOne"); assertDoesntHaveRegexp("Edit button", response.getContent()); assertDoesntHaveRegexp("Search button", response.getContent()); assertDoesntHaveRegexp("Test button", response.getContent()); assertDoesntHaveRegexp("Suite button", response.getContent()); assertDoesntHaveRegexp("Versions button", response.getContent()); assertHasRegexp("Rollback button", response.getContent()); }
private void removeWatches(int opCode, String path, Watcher watcher, WatcherType watcherType, boolean local, VoidCallback cb, Object ctx) { PathUtils.validatePath(path); final String clientPath = path; final String serverPath = prependChroot(clientPath); WatchDeregistration wcb = new WatchDeregistration(clientPath, watcher, watcherType, local, watchManager); RequestHeader h = new RequestHeader(); h.setType(opCode); Record request = getRemoveWatchesRequest(opCode, watcherType, serverPath); cnxn.queuePacket(h, new ReplyHeader(), request, null, cb, clientPath, serverPath, ctx, null, wcb);
public void translatesAliases() throws Exception { WikiPage page = new TestRoot().makePage("PageOne"); ParserTest.assertTranslatesTo(page, "[[tag][link]]", link("tag", "link")); ParserTest.assertTranslatesTo(page, "[[tag][PageOne]]", link("tag", "PageOne")); ParserTest.assertTranslatesTo(page, "[[''tag''][PageOne]]", link("<i>tag</i>" + HtmlElement.endl, "PageOne")); ParserTest.assertTranslatesTo(page, "[[you're it][PageOne]]", link("you're it", "PageOne")); ParserTest.assertTranslatesTo(page, "[[PageOne][IgnoredPage]]", link("PageOne", "PageOne")); }
public void shouldExcludeFieldsFromACollection() { Order order = new Order(new Client("guilherme silveira"), 15.0, "pack it nicely, please"); serialization.from(Arrays.asList(order, order), "orders").exclude("price").serialize(); assertThat(result(), not(containsString("<price>"))); }
public void start() { startTime = System.currentTimeMillis(); }
public boolean canHandle(Class<?> type, Method method) { return type.equals(this.resourceMethod.getResource().getType()) && method.equals(this.resourceMethod.getMethod());
public void addOption(String key, String value) { if (StringUtils.isEmpty(value) || StringUtils.isEmpty(key)) { return; } addArgs(key, value); }
public void forwardToCustomOnErrorPage() { try { when(logicResult.forwardTo(MyComponent.class)).thenReturn(instance);
public void shouldHandleNullTitle() throws Exception { finder = new SuiteSpecificationMatchFinder(null,"child",this); finder.search(root); assertPagesFound("TestPageOne","ChildPage"); }
public void testPagesForTestSystemAreSurroundedBySuiteSetupAndTeardown() throws Exception { WikiPage slimPage = addTestPage(suite, "AaSlimTest", simpleSlimDecisionTable); WikiPage setUp = crawler.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = crawler.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); testPages = new LinkedList<WikiPage>(); testPages.add(setUp); testPages.add(slimPage); testPages.add(testPage); testPages.add(tearDown); MultipleTestsRunner runner = new MultipleTestsRunner(testPages, context, suite, null); Map<TestSystem.Descriptor, LinkedList<TestPage>> map = runner.makeMapOfPagesByTestSystem(); TestSystem.Descriptor fitDescriptor = TestSystem.getDescriptor(testPage, false); TestSystem.Descriptor slimDescriptor = TestSystem.getDescriptor(slimPage, false); List<TestPage> fitList = map.get(fitDescriptor); List<TestPage> slimList = map.get(slimDescriptor); assertEquals(3, fitList.size()); assertEquals(3, slimList.size()); assertEquals(setUp, fitList.get(0).getSourcePage()); assertEquals(testPage, fitList.get(1).getSourcePage()); assertEquals(tearDown, fitList.get(2).getSourcePage()); assertEquals(setUp, slimList.get(0).getSourcePage()); assertEquals(slimPage, slimList.get(1).getSourcePage()); assertEquals(tearDown, slimList.get(2).getSourcePage()); }
public void commandRun() { if (!isZKServerRunning()) { pw.print("null");
public static void main(String[] args) { ZooKeeperServerMain main = new ZooKeeperServerMain(); try { main.initializeAndRun(args); } catch (IllegalArgumentException e) { LOG.fatal("Invalid arguments, exiting abnormally", e); LOG.info(USAGE); System.err.println(USAGE); System.exit(2); } catch (ConfigException e) { LOG.fatal("Invalid config, exiting abnormally", e); System.err.println("Invalid config, exiting abnormally"); System.exit(2); } catch (Exception e) { LOG.fatal("Unexpected exception, exiting abnormally", e); System.exit(1); } LOG.info("Exiting normally"); System.exit(0); }
public void testCloseSessionRequestAfterSessionExpiry() throws Exception { ZooKeeperServer zks = setupSessionTracker(); latch = new CountDownLatch(1); zks.sessionTracker.trackSession(sessionId, sessionTimeout); SessionTrackerImpl sessionTrackerImpl = (SessionTrackerImpl) zks.sessionTracker; SessionImpl sessionImpl = sessionTrackerImpl.sessionsById.get(sessionId); assertNotNull("Sessionid:" + sessionId + " doesn't exists in sessiontracker", sessionImpl);
@Test public void hidesFirstRowInCommentTable() { ParserTestHelper.assertTranslatesTo("-|a|\n", tableWithCellAndRow("a", "<tr class=\"hidden\">")); }
WatchesSummary getWatchesSummary();  WatchesReport getWatches();  WatchesPathReport getWatchesByPath();  void dumpWatches(PrintWriter pwriter, boolean byPath); }
protected void setUp() throws Exception { super.setUp(); LOG.info("STARTING " + getName()); }
public void list() { } @Path("/clients/remove") @Delete public void remove() { } @Path("/clients/head") @Head public void head() { } public void add() { } @Path("/protectMe") protected void protectMe() { } @Path("/staticMe") public static void staticMe() { } public void toInherit() { } } @Test public void shouldFindAPublicNonStaticNonAnnotatedMethodWithTheSameNameAsTheGivenId() throws SecurityException, NoSuchMethodException { ResourceMethod method = router.parse("/Clients/add", HttpMethod.POST, request); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("add")))); mockery.assertIsSatisfied(); } @Test public void shouldIgnoreAResourceWithTheWrongWebMethod() throws SecurityException { ResourceMethod method = router.parse("/clients/remove", HttpMethod.POST, request); assertThat(method, is(Matchers.nullValue())); mockery.assertIsSatisfied(); } @Test public void shouldAcceptAResultWithASpecificWebMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = router.parse("/clients/head", HttpMethod.HEAD, request); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("head")))); mockery.assertIsSatisfied(); } static class NiceClients extends Clients { } public void findsInheritedMethodsWithDefaultNames() throws SecurityException, NoSuchMethodException { this.resource = mockery.resource(NiceClients.class); ResourceMethod method = router.parse("/NiceClients/toInherit", HttpMethod.POST, request); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("toInherit")))); mockery.assertIsSatisfied(); } }
public void testRunsAtIntervals() throws Exception { schedule.add(counter); schedule.start(); Thread.sleep(700); schedule.stop(); assertEquals(3, counter.count); }
public Set<String> getNames(); public String[] get(String key); public void set(String key, String[] values); }
public void connect() throws IOException { final int sleepStep = 50;
public static Descriptor getDescriptor(PageData data, boolean isRemoteDebug) throws Exception { String testSystemName = getTestSystem(data); String testRunner = getTestRunner(data, isRemoteDebug); String commandPattern = getCommandPattern(data, isRemoteDebug); String pathSeparator = getPathSeparator(data); return new Descriptor(testSystemName, testRunner, commandPattern, pathSeparator); }
TestExecutionReport makeTestExecutionReport() { return expectedReport; }
public void run() { mPd.dismiss(); if ( mMsg.length() > 0 ) { Toast.makeText(PasswordActivity.this, mMsg, Toast.LENGTH_LONG).show(); } if ( mLaunch ) { GroupActivity.Launch(PasswordActivity.this, null);
public List<Object> query() { List results = Arrays.asList( Arrays.asList( Arrays.asList("x", "SuiteChildOne.SuiteSetUp") ), Arrays.asList( Arrays.asList("x", "SuiteChildOne.TestOneOne") ), Arrays.asList( Arrays.asList("x", "SuiteChildOne.TestOneTwo") ), Arrays.asList( Arrays.asList("x", "SuiteChildOne.SuiteTearDown") ), Arrays.asList( Arrays.asList("x", "SuiteChildOne.SuiteSetUp") ), Arrays.asList( Arrays.asList("x", "SuiteChildOne.TestOneThree") ), Arrays.asList( Arrays.asList("x", "SuiteChildOne.SuiteTearDown") ) ); return results;
public void process(WatchedEvent event) { if (!closed) { try {
public <T> Future<?> loadData(Map<String, T> map) { return loadData(map.entrySet().iterator()); }
public void fromString_should_return_null_object_when_value_is_not_defined() { } @Test public void fromString_should_return_default_object_when_value_is_not_defined() { String value = ""; Long current = converter.fromString(value); assertNotNull(current); assertEquals(PrimitiveLongConverter.DEFAULT_VALUE, current); } }
public void putProperty(String key, String value) { if (properties == null) properties = new HashMap<String, String> (); properties.put(key, value); }
private void createRequest() throws Exception { page = WikiPageUtil.addPage(root, PathParser.parse("PageOne")); request = new MockRequest(); request.addInput("PageType", "Test"); request.addInput("Properties", "on"); request.addInput("Search", "on"); request.addInput("RecentChanges", "on"); request.addInput(PageData.PropertyPRUNE,"on"); request.addInput(PageData.PropertySECURE_READ, "on"); request.addInput("Suites", "Suite A, Suite B"); request.addInput("HelpText", "Help text literal"); request.setResource("PageOne"); }
public void testComplete(TestPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws IOException { super.testComplete(test, testSummary, timeMeasurement); processTestResults(test.getName(), testSummary, timeMeasurement); }
public void setup() throws Exception { resultsDirectory = new File("testHistoryDirectory"); removeResultsDirectory(); resultsDirectory.mkdir(); history = new TestHistory(); responder = new TestHistoryResponder(); responder.setResultsDirectory(resultsDirectory); WikiPage root = InMemoryPage.makeRoot("RooT"); context = FitNesseUtil.makeTestContext(root); }
private HtmlTag makeDeletePageForm() throws Exception { HtmlTag form = HtmlUtil.makeFormTag("get", resource); form.add(HtmlUtil.makeInputTag("submit", "", "Delete Page")); form.add(HtmlUtil.makeInputTag("hidden", "responder", "deletePage")); return form; }
private String uriRelativeToContextRoot(HttpServletRequest request) { String uri = request.getRequestURI().substring(request.getContextPath().length()); return removeQueryStringAndJSessionId(uri); }
public void testHtml() throws Exception { compareHtmlResult(" *Item1", "<ul>\n\t<li>Item1</li>\n</ul>\n"); compareHtmlResult(" 1Item1", "<ol>\n\t<li>Item1</li>\n</ol>\n"); compareHtmlResult(" *Item1\n 0Item1a", "<ul>\n\t<li>Item1</li>\n\t<ol>\n\t\t<li>Item1a</li>\n\t</ol>\n</ul>\n"); compareHtmlResult(" * 50 ways to leave your lover", "<ul>\n\t<li>50 ways to leave your lover</li>\n</ul>\n"); }
public void testPageMatchesQueryWithExcludedPages() throws Exception { Map<String, Boolean> attributes = new HashMap<String, Boolean>(); String[] suites = new String[0]; setupRequestInputAndPageProperty("Test", attributes, true, page, "true"); assertTrue(responder.pageMatchesQuery(page, attributes, suites, true)); page = crawler.addPage(root, PathParser.parse("SetUp")); setupRequestInputAndPageProperty("Test", attributes, true, page, "true"); assertTrue(responder.pageMatchesQuery(page, attributes, suites, false)); assertFalse(responder.pageMatchesQuery(page, attributes, suites, true)); page = crawler.addPage(root, PathParser.parse("TearDown")); setupRequestInputAndPageProperty("Test", attributes, true, page, "true"); assertTrue(responder.pageMatchesQuery(page, attributes, suites, false)); assertFalse(responder.pageMatchesQuery(page, attributes, suites, true)); page = crawler.addPage(root, PathParser.parse("SuiteSetUp")); setupRequestInputAndPageProperty("Test", attributes, true, page, "true"); assertTrue(responder.pageMatchesQuery(page, attributes, suites, false)); assertFalse(responder.pageMatchesQuery(page, attributes, suites, true)); page = crawler.addPage(root, PathParser.parse("SuiteTearDown")); setupRequestInputAndPageProperty("Test", attributes, true, page, "true"); assertTrue(responder.pageMatchesQuery(page, attributes, suites, false)); assertFalse(responder.pageMatchesQuery(page, attributes, suites, true)); }
List<Message> validateProperty(Object object, String property, Class<?>... groups); }
public void shouldAcceptMultipart() { when(request.getContentType()).thenReturn("multipart/form-data"); when(request.getMethod()).thenReturn("POST"); assertThat(interceptor.accepts(method), equalTo(true)); }
public void LoadData(Context ctx, Uri uri, String password, Uri keyfile) throws IOException, FileNotFoundException, InvalidDBException { LoadData(ctx, uri, password, keyfile, new UpdateStatus(), !Importer.DEBUG); }
public void error(Object message, Throwable exception) { log(Level.ERROR, message, exception); }
public void testBooleanEncoding() throws Exception { assertTrue((Boolean) tc.decode(tc.encode(true))); assertFalse((Boolean) tc.decode(tc.encode(false))); }
@Override public boolean isDebug() { return enableRemoteDebug; }
public void storeAsync(StoreOperation.StoreType storeType, String key, int exp, Object value, StoreOperation.Callback callback) { CachedData co=transcoder.encode(value); conn.addOperation(getServerForKey(key), new StoreOperation(storeType, key, co.getFlags(), exp,
TxnHeader getHeader();  Record getTxn();  boolean next() throws IOException;  void close() throws IOException;  long getStorageSize() throws IOException; } }
public void run() { try { QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[0], peerTmpdir[0], peerClientPort[0], 3, 0, 1000, 2, 2, 2);
protected Parse tr(Parse parts, Parse more) { return new Parse("tr", null, parts, more); }
public void addHistogram(String name) { metrics.put(name, 0); }
private void inflate(Context context) { LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE); inflater.inflate(R.layout.group_add_entry, this);
public void run() { try {
private void parse(InputStream pInputStream, VariableResolver pResolver) throws IOException, ParseException { BufferedReader br = null; try { br = new BufferedReader(new InputStreamReader(pInputStream));
public PwDatabaseV3 openDatabase( InputStream inStream, String password, String keyfile ) throws IOException, InvalidKeyFileException, InvalidPasswordException { return openDatabase(inStream, password, keyfile, new UpdateStatus()); }
public String render() throws Exception { StringBuffer html = new StringBuffer("<table class=\"hash_table\">"); for (int i=0; i<keys.size(); i++) { String key = keys.get(i); WikiWidget widget = children.get(i); html.append(String.format( "<tr class=\"hash_row\">" + "<td class=\"hash_key\">" + "%s" + "</td>" + "<td class=\"hash_value\">" + "%s" + "</td>" + "</tr>", key, widget.render())); } html.append("</table>"); return html.toString(); }
public void tryCallingCheck() throws Exception { Parse table = doTableOf( row("start", "fit.testFxtr.TestActionFixture") + row("check", "data", "42")); assertTrue(actionFixture().checked); }
public void checkServerTrusted( X509Certificate[] chain, String authType, Socket socket) throws CertificateException { x509ExtendedTrustManager.checkServerTrusted(chain, authType, socket); if (serverHostnameVerificationEnabled) { performHostVerification(socket.getInetAddress(), chain[0]);
public boolean targetExists(String wikiWordPath) { return false; }
public void canDumpTablesBackToWikiText() throws Exception { String contents = "junk\n|a|b|\njunk\n|c|d|\njunk\n"; TableScanner ts = scanTable(contents); assertEquals("junk\n|!<a>!|!<b>!|\njunk\n|!<c>!|!<d>!|\njunk\n", ts.toWikiText()); }
public void testComplete(WikiPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws Exception { recordTestResult(new WikiPagePath(test).toString(), testSummary, timeMeasurement.elapsed()); }
public void testGenerateSuiteMapWithMultipleTestSystems() throws Exception { WikiPage slimPage = addTestPage(suite, "SlimTest", simpleSlimDecisionTable); MultipleTestsRunner runner = new MultipleTestsRunner(testPages, context, suite, null); Map<Descriptor, LinkedList<TestPage>> map = runner.makeMapOfPagesByTestSystem(); Descriptor fitDescriptor = ClientBuilder.getDescriptor(testPage, false); Descriptor slimDescriptor = ClientBuilder.getDescriptor(slimPage, false); List<TestPage> fitList = map.get(fitDescriptor); List<TestPage> slimList = map.get(slimDescriptor); assertEquals(1, fitList.size()); assertEquals(1, slimList.size()); assertEquals(testPage, fitList.get(0).getSourcePage()); assertEquals(slimPage, slimList.get(0).getSourcePage()); }
public Operation newOp(final MemcachedNode n, final CountDownLatch latch) { return opFact.noop( new OperationCallback() {
protected void tearDown() throws Exception { super.tearDown(); LOG.info("STOPPING " + getClass().getName()); }
private List fileArrayToStringList(File[] files) { List list = new ArrayList(); for(int i = 0; i < files.length; i++) { File file = files[i]; list.add(file.getName()); } return list; }
public void testIncrWithDefTimeout() { tryTimeout("incrWithDef", new Runnable() { public void run() {
public void addAll(Class<? extends Interceptor>... interceptors) { for (Class<? extends Interceptor> i : interceptors) { add(i);
private void appendToMessage(byte[] bytes) throws Exception { messageBuffer.write(bytes); }
default void registerResponders(ResponderFactory responderFactory) throws PluginException { } default void registerSymbolTypes(SymbolProvider symbolProvider) throws PluginException { } default void registerWikiPageFactories(WikiPageFactoryRegistry wikiPageFactoryRegistry) throws PluginException { } default void registerFormatters(FormatterRegistry registrar) throws PluginException { } default void registerTestSystemFactories(TestSystemFactoryRegistry testSystemFactoryRegistry) throws PluginException { } default void registerSlimTables(SlimTableFactory slimTableFactory) throws PluginException { } default void registerCustomComparators(CustomComparatorRegistry customComparatorRegistry) throws PluginException { } default void registerTestRunFactories(TestRunFactoryRegistry runFactoryRegistry) throws PluginException { } default void registerMarkupSystems(MarkUpSystems systems) {} }
protected WikiPage createChildPage(String name) throws Exception { FileSystemPage newPage = new FileSystemPage(getFileSystemPath(), name, this); new File(newPage.getFileSystemPath()).mkdirs(); return newPage; }
void testPath(String path, CreateMode mode) throws Exception { byte[] data = new byte[] { 77 }; ZkUtils.createFullPathOptimistic(zk, path, data, Ids.OPEN_ACL_UNSAFE, mode, strCb, null); Assert.assertTrue(queue.take()); Assert.assertTrue(Arrays.equals(data, zk.getData(path, false, null)));
public void stdErr(String output) { executionLog.capturedError.append(output).append("\n"); }
public static Test suite() { return TestSuiteMaker.makeSuite("schedule", new Class[]{ ScheduleTest.class
public Maybe<Symbol> parse(Scanner scanner) { Symbol body = new Parser(getPage()).parseIgnoreFirst(scanner, SymbolType.ClosePreformat); if (scanner.isEnd()) return Symbol.Nothing; return new Maybe<Symbol>(new Symbol(SymbolType.Preformat).add(body)); }
public Result include(Object value) { return include(value.getClass().getSimpleName(), value); }
private <T> boolean genericThat(T actual, Matcher<? super T> matcher, Object category, String reason, Object... messageParameters) { if (!matcher.matches(actual)) { if (reason != null) { errors.add(i18nMessage(category, reason, messageParameters)); } else { Description description = new ResourceBundleDescription(); description.appendDescriptionOf(matcher); errors.add(i18nMessage(category, description.toString(), actual)); } return false; } return true; }
public void testSubPageWidget() throws Exception { WikiPage superPage = addPage(root, "SuperPage"); PageData data = superPage.getData(); data.setContent("^SubPage"); superPage.commit(data); String renderedText = superPage.getData().getHtml(); assertEquals(makeExpectedNonExistentWikiWord("^SubPage", "SuperPage.SubPage"), renderedText); addPage(superPage, "SubPage"); renderedText = superPage.getData().getHtml(); assertEquals("<a href=\"SuperPage.SubPage\">^SubPage</a>", renderedText); }
public void recurse(DogAlike[] dogs) { } public void jump(long times) { } public void dig(double amount) { } public void dig(float amount) { } }
public void testCreateWithStat() throws KeeperException, InterruptedException { Stat stat = createWithStatVerifyResult("/foo"); Stat childStat = createWithStatVerifyResult("/foo/child");
protected void finishSending() throws Exception { completeResponse(); }
<T> Future<Boolean> prepend(String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, int exp, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public Object callAndAssign(StatementExecutor caller) { Object result = callMethodAtIndex(caller, 3); caller.setVariable(getWord(2), result); return result; }
public WikiPage makePage(String pageName, String content) { return makePage(root, pageName, content); }
public void process(WikiPage page) { WikiPage namedPage = page.getChildPage(pageName); if (namedPage != null && foundPage[0] == null) foundPage[0] = namedPage;
private boolean isScript() { return "script".equalsIgnoreCase(table.getCellContents(0,0)); }
public void setup() { ClientBase.setupTestEnv(); QuorumPeerConfig.setReconfigEnabled(true); System.setProperty("zookeeper.DigestAuthenticationProvider.superDigest", "super:D/InIHSb7yEEbrWz8b9l71RjZJU="); }
@Test public void overridesNestedRule() { ParserTestHelper.assertTranslatesTo("|''|\n", tableWithCell("''")); ParserTestHelper.assertTranslatesTo("|''a|\n''", tableWithCell("''a") + "''"); }
private SimpleDateFormat makeDateFormat() {
public void run() { while (!stopped) { synchronized (cleanEvent) { try {
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root"); crawler = root.getPageCrawler(); crawler.addPage(root, PathParser.parse("TestPage")); childName = "ChildPage"; childContent = "child content"; pagetype = ""; request = new MockRequest(); request.setResource("TestPage"); request.addInput("pageName", childName); request.addInput("pageContent", childContent); request.addInput("pageType", pagetype); context = FitNesseUtil.makeTestContext(root); responder = new AddChildPageResponder(); path = PathParser.parse("TestPage.ChildPage"); }
Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); }
public void testWatchAutoResetWithPending() throws Exception { MyWatcher watches[] = new MyWatcher[COUNT]; MyStatCallback cbs[] = new MyStatCallback[COUNT]; MyWatcher watcher = new MyWatcher(); int count[] = new int[1]; TestableZooKeeper zk = createClient(watcher, hostPort, 6000); ZooKeeper zk2 = createClient(watcher, hostPort, 5000); zk2.create("/test", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL); for(int i = 0; i < COUNT/2; i++) { watches[i] = new MyWatcher(); cbs[i] = new MyStatCallback(); zk.exists("/test", watches[i], cbs[i], count); } zk.exists("/test", false); zk.pauseCnxn(3000); Thread.sleep(50); zk2.close(); stopServer(); watches[0].waitForDisconnected(60000); for(int i = COUNT/2; i < COUNT; i++) { watches[i] = new MyWatcher(); cbs[i] = new MyStatCallback(); zk.exists("/test", watches[i], cbs[i], count); } startServer(); watches[COUNT/2-1].waitForConnected(60000); Assert.assertEquals(null, zk.exists("/test", false)); Thread.sleep(10); for(int i = 0; i < COUNT/2; i++) { Assert.assertEquals("For " + i, 1, watches[i].events.size()); } for(int i = COUNT/2; i < COUNT; i++) { if (cbs[i].rc == 0) { Assert.assertEquals("For " +i, 1, watches[i].events.size()); } else { Assert.assertEquals("For " +i, 0, watches[i].events.size()); } } Assert.assertEquals(COUNT, count[0]); zk.close(); }
public static void cleanup() { if (keytabFile != null) { FileUtils.deleteQuietly(keytabFile); } cleanupJaasConfig(); }
abstract public boolean isGlobalSession(long sessionId);  public int upgradeSession(long sessionId) { if (localSessionsWithTimeouts == null) { return -1; }
public void addTypes(Iterable<SymbolType> types) { for (SymbolType symbolType : types) { add(symbolType);
public void passThroughIfContentIsAcceptable() throws Exception { when(contentFilter.isContentAcceptable(isNull(), anyString())).thenReturn(true); Response response = filter.makeResponse(context, request); assertThat(response, is(nullValue())); }
public void shouldMatchPatternLazily() throws Exception { DefaultParametersControl wrong = new DefaultParametersControl("/clients/{client.id}/", converters, evaluator); DefaultParametersControl right = new DefaultParametersControl("/clients/{client.id}/subtask/", converters, evaluator); String uri = "/clients/3/subtask/"; assertThat(wrong.matches(uri), is(false)); assertThat(right.matches(uri), is(true));
@Test public void testGetters() { assertEquals(1, s.getNumConnections()); assertEquals(2, s.getNumPaths()); assertEquals(3, s.getTotalWatches()); }
public void replaceAll() throws Exception { assertEquals("my name is Bob, Bob is my name", StringUtil.replaceAll("my name is $name, $name is my name", "$name", "Bob")); assertEquals("_$namex_", StringUtil.replaceAll("_$name_", "$name", "$namex")); }
public void ChildrenAreLoaded() throws Exception { fileSystem.makeFile("somewhere/MyTest/myfile.html", "stuff"); Assert.assertEquals(1, new ExternalSuitePage("somewhere/MyTest", "MyTest", rootPage, fileSystem).getChildren().size()); }
@Test public void evaluatesNestedVariableDefinition() throws Exception { WikiPage pageOne = new TestRoot().makePage("PageOne", "!define x {y}\n!define z {${x}}\n${z}"); ParserTest.assertTranslatesTo(pageOne, "<span class=\"meta\">variable defined: x=y</span>" + HtmlElement.endl + ParserTest.newLineRendered
private String makeLink(String page) throws Exception { return HtmlUtil.makeLink(page, page).html(); }
public void setConsumeSeqIdForSubscriber(ByteString topic, ByteString subscriberId, MessageSeqId consumeSeqId, Callback<Void> callback, Object ctx);  public void unsubscribe(ByteString topic, ByteString subscriberId, Callback<Void> callback, Object ctx);
private void createParentDirectories( String dirname, String user, int uid, String group, int gid ) throws IOException {
private boolean isDateFormatOption(String option) { return option.equals("-t") || option.equals("-xml");
MemcachedNode createMemcachedNode(SocketAddress sa, SocketChannel c, int bufSize);  BlockingQueue<Operation> createOperationQueue();  BlockingQueue<Operation> createReadOperationQueue();  BlockingQueue<Operation> createWriteOperationQueue();  NodeLocator createLocator(List<MemcachedNode> nodes);  OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon();  boolean useNagleAlgorithm();  Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode();  Transcoder<Object> getDefaultTranscoder();  boolean shouldOptimize(); }
public Symbol parseToIgnoreFirstWithSymbols(SymbolType ignore, SymbolProvider provider) { return parse(new ParseSpecification().ignoreFirst(ignore).terminator(ignore).provider(provider)); }
public static String email(String[] strings) { return HtmlTag.name("a").attribute("href", "mailto:" + strings[0]).body(strings[0]).htmlInline(); }
void delete(File path) throws IOException; long lastModified(File file); void rename(File file, File originalFile) throws IOException; boolean isDirectory(File file); }
boolean asyncDecode(CachedData d);  CachedData encode(T o);  T decode(CachedData d);  int getMaxSize(); }
WikiPage addChildPage(String name); boolean hasChildPage(String name); WikiPage getChildPage(String name);  @Deprecated void removeChildPage(String name);  void remove();  List<WikiPage> getChildren(); String getName(); PageData getData();  Collection<VersionInfo> getVersions(); WikiPage getVersion(String versionName); String getHtml();  VersionInfo commit(PageData data); PageCrawler getPageCrawler(); String getVariable(String name); }
private SuiteHtmlFormatter createCustomFormatter() throws Exception { SuiteHtmlFormatter formatter = new SuiteHtmlFormatter(context, null, null) { @Override protected void writeData(String output) throws Exception { buffer.append(output); } @Override protected HtmlPage buildHtml(String pageType) throws Exception { return htmlPage; } }; return formatter; }
ResourceMethod parse(String uri, HttpMethod method, MutableRequest request); Set<StereotypedClass> allResources();  void register(StereotypedClass resource);  <T> String urlFor(Class<T> type, Method method, Object... params);  List<Route> allRoutes(); Proxifier getProxifier(); }
private void verify(String cmd, String expected) throws IOException, SSLContextException { String resp = sendRequest(cmd); LOG.info("cmd " + cmd + " expected " + expected + " got " + resp); assertTrue(resp.contains(expected)); }
private void insertTearDownForThisGroup(String setUpAndTearDownGroupKey) throws Exception { String tearDownPath = setUpAndTearDownGroupKey.split(",")[1]; WikiPage tearDownPage = root.getPageCrawler().getPage(root, PathParser.parse(tearDownPath)); if (tearDownPage != null) pageList.add(new TestPage(tearDownPage));
void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap(); }
public void testSave() throws Exception { String dirPath = page.getFileSystemPath(); File dir = new File(dirPath); String[] filenames = dir.list(); List<String> list = Arrays.asList(filenames); assertTrue(list.contains(firstVersion + ".zip")); }
public ScriptOrFnNode parse(String sourceString, String sourceURI, int lineno) { this.sourceURI = sourceURI; this.ts = new TokenStream(this, null, sourceString, lineno); try { return parse();
protected void registerCustomComponents(ComponentRegistry registry) { super.registerCustomComponents(registry); registry.register(RoutesParser.class, ComponentRoutesParser.class); registry.register(PathResolver.class, VRaptor2PathResolver.class); registry.register(Config.class, VRaptor2Config.class); registry.register(ParameterNameProvider.class, LogicAnnotationWithParanamerParameterNameProvider.class); registry.register(RequestExecution.class, VRaptor2RequestExecution.class); registry.register(PageResult.class, ViewsPropertiesPageResult.class); registry.register(HibernateValidatorPluginInterceptor.class,HibernateValidatorPluginInterceptor.class); registry.register(Converters.class, VRaptor2Converters.class); registry.register(ValidatorInterceptor.class,ValidatorInterceptor.class); registry.register(ViewInterceptor.class,ViewInterceptor.class); registry.register(ComponentInfoProvider.class, DefaultComponentInfoProvider.class); registry.register(OutjectionInterceptor.class,OutjectionInterceptor.class); registry.register(AjaxInterceptor.class, AjaxInterceptor.class); registry.register(Validator.class, MessageCreatorValidator.class); registry.register(ValidationErrors.class, BasicValidationErrors.class); registry.register(VRaptor2ComponentHandler.class, VRaptor2ComponentHandler.class); }
public void testSystemStarted(TestSystem testSystem) {} @Override public void testOutputChunk(String output) throws IOException {} @Override public void testStarted(TestPage testPage) throws IOException {} @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) {} @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) {} @Override public void testComplete(TestPage test, TestSummary testSummary) throws IOException {} @Override public void testSystemStopped(TestSystem testSystem, ExecutionLog executionLog, Throwable cause) {} }
public void shouldHandle405() throws IOException, InterceptionException { mockery.checking(new Expectations() { { EnumSet<HttpMethod> allowedMethods = EnumSet.of(HttpMethod.GET); one(translator).translate(webRequest); will(throwException(new MethodNotAllowedException(allowedMethods, HttpMethod.POST))); one(methodNotAllowedHandler).deny(request, allowedMethods); } }); lookup.intercept(null, null, null); mockery.assertIsSatisfied(); }
WikiPage findAncestorWithName(String name); WikiPage getClosestInheritedPage(WikiPage context, String pageName);
public void enableWrite() { sendThread.getClientCnxnSocket().enableWrite(); }
public void shouldTellIfItIsASpecificationsSuite() { WikiPageUtil.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPageUtil.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); setUpForGetAllTestPages(); String content = "|Suite|\n|Title|Test|\n|Content|.|\n"; suite.commit(new PageData(suite.getData(), content)); SuiteContentsFinder finder = new SuiteContentsFinder(suite, null, root); List<WikiPage> testPages = finder.getAllPagesToRunForThisSuite(); assertEquals(2, testPages.size()); assertEquals(testPage, testPages.get(0)); assertEquals(testPage2, testPages.get(1)); }
T convert(String value, Class type, ResourceBundle bundle); }
public void softHalt() { for (SendWorker sw : senderWorkerMap.values()) { LOG.debug("Halting sender: {}", sw);
public void shouldRegisterAllComponents() { DefaultInterceptorRegistry registry = new DefaultInterceptorRegistry(); registry.register(ExecuteMethodInterceptor.class, ExceptionHandlerInterceptor.class); List<Class<? extends Interceptor>> expected = asList(ExecuteMethodInterceptor.class, ExceptionHandlerInterceptor.class); Assert.assertEquals(expected, registry.all()); }
public void register(Class<? extends Interceptor>... interceptors) { for (Class<? extends Interceptor> interceptor : interceptors) { Intercepts intercepts = interceptor.getAnnotation(Intercepts.class);
public abstract void safeProcessResult(int rc, String path, Object ctx, Stat stat); } public static abstract class DataCallback implements AsyncCallback.DataCallback { public void processResult(int rc, String path, Object ctx, byte data[], Stat stat) { try { safeProcessResult(rc, path, ctx, data, stat); } catch (Throwable t) { invokeUncaughtExceptionHandler(t); } } public abstract void safeProcessResult(int rc, String path, Object ctx, byte data[], Stat stat); } public static abstract class ACLCallback implements AsyncCallback.ACLCallback { public void processResult(int rc, String path, Object ctx, List<ACL> acl, Stat stat) { try { safeProcessResult(rc, path, ctx, acl, stat); } catch (Throwable t) { invokeUncaughtExceptionHandler(t); } } public abstract void safeProcessResult(int rc, String path, Object ctx, List<ACL> acl, Stat stat); } public static abstract class ChildrenCallback implements AsyncCallback.ChildrenCallback { public void processResult(int rc, String path, Object ctx, List<String> children) { try { safeProcessResult(rc, path, ctx, children); } catch (Throwable t) { invokeUncaughtExceptionHandler(t); } } public abstract void safeProcessResult(int rc, String path, Object ctx, List<String> children); } public static abstract class StringCallback implements AsyncCallback.StringCallback { public void processResult(int rc, String path, Object ctx, String name) { try { safeProcessResult(rc, path, ctx, name); } catch (Throwable t) { invokeUncaughtExceptionHandler(t); } } public abstract void safeProcessResult(int rc, String path, Object ctx, String name); } public static abstract class VoidCallback implements AsyncCallback.VoidCallback { public void processResult(int rc, String path, Object ctx) { try { safeProcessResult(rc, path, ctx); } catch (Throwable t) { invokeUncaughtExceptionHandler(t); } } public abstract void safeProcessResult(int rc, String path, Object ctx); } }
private HtmlTag buildList(WikiPage wikiPage, int currentDepth) throws Exception { HtmlTag contentsDiv = null; if (currentDepth == 1) { contentsDiv = HtmlUtil.makeDivTag("contents"); contentsDiv.add(HtmlUtil.makeBold("Contents:")); } else { contentsDiv = HtmlUtil.makeDivTag("nested-contents"); } HtmlTag list = new HtmlTag("ul"); for(Iterator iterator = buildListOfChildPages(wikiPage).iterator(); iterator.hasNext();) { list.add(buildListItem((WikiPage) iterator.next(), currentDepth)); } contentsDiv.add(list); return contentsDiv; }
public void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException { final Route route = mockery.mock(Route.class); mockery.checking(new Expectations() {{ allowing(route).canHandle("/clients/add"); will(returnValue(true)); allowing(route).allowedMethods(); will(returnValue(EnumSet.of(HttpMethod.POST))); allowing(route).matches("/clients/add", HttpMethod.POST, request); will(returnValue(method)); allowing(route).getPriority(); }}); router.add(route); ResourceMethod found = router.parse("/clients/add", HttpMethod.POST, request); assertThat(found, is(equalTo(method))); mockery.assertIsSatisfied(); }
private void assertExpectationMessage(String expected, String value, String message) throws Exception { TableScanner ts = new HtmlTableScanner("<table><tr><td>x</td></tr></table>"); Table t = ts.getTable(0); SlimTable slimTable = new DecisionTable(t, "id", testContext); SlimTable.RowExpectation expectation = slimTable.new ReturnedValueExpectation(1, 2); assertEquals(message, expectation.evaluationMessage(value, expected).toString()); assertEquals(message, expectation.getEvaluationMessage()); assertEquals(2, expectation.getRow()); assertEquals(1, expectation.getCol()); }
public void testManyConnections() throws Exception { ss = new SocketService(PORT_NUMBER, true, new EchoService(),"fitnesse.socketservice.SslParametersWiki"); String answer = ""; for (int i = 0; i < 10; i++){ Socket s = SocketFactory.tryCreateClientSocket("localhost", PORT_NUMBER, true, "fitnesse.socketservice.SslParametersWiki"); System.out.print("Peer: " + SocketFactory.peerName(s) + "\n"); BufferedReader br = GetBufferedReader(s); PrintStream ps = GetPrintStream(s); ps.println(i + ","); answer = answer + br.readLine(); } ss.close(); System.out.print("Got Messages : " +answer +"\n"); assertEquals("0,1,2,3,4,5,6,7,8,9,", answer); }
static public void setup() { System.setProperty("zookeeper.skipACL", "yes"); }
public void testNoConnections() throws Exception { ss = new SocketService(PORT_NUMBER, connectionCounter); ss.close(); assertEquals(0, connections); }
public void canSpecifyAComplexCommandLine() { String commandLine = "-v -i fitnesse.slim.fixtureInteraction.DefaultInteraction 7890"; String[] args = commandLine.split(" "); SlimService.Options options = SlimService.parseCommandLine(args); assertNotNull("should parse correctly", options); assertEquals("should have interaction class set", "fitnesse.slim.fixtureInteraction.DefaultInteraction", options.interaction.getClass().getName()); assertTrue("should be verbose", options.verbose); assertEquals("should have set port", 7890, options.port); }
public static void configureSSLAuth() throws ConfigException { try (ClientX509Util clientX509Util = new ClientX509Util()) { String sslAuthProp = "zookeeper.authProvider." + System.getProperty(clientX509Util.getSslAuthProviderProperty(), "x509");
public void testEmptyRoundTrip() throws IOException { MultiTransactionRecord request = new MultiTransactionRecord(); MultiTransactionRecord decodedRequest = codeDecode(request); assertEquals(request, decodedRequest); assertEquals(request.hashCode(), decodedRequest.hashCode()); }
public void setUp() throws Exception { MockitoAnnotations.initMocks(this); interceptor = new ParameterLoaderInterceptor(session, request, provider, result, converters, new MockLocalization(), flash); method = DefaultResourceMethod.instanceFor(Resource.class, Resource.class.getMethod("method", Entity.class)); methodWithoutLoad = DefaultResourceMethod.instanceFor(Resource.class, Resource.class.getMethod("methodWithoutLoad")); methodOtherIdName = DefaultResourceMethod.instanceFor(Resource.class, Resource.class.getMethod("methodOtherIdName", EntityOtherIdName.class)); other = DefaultResourceMethod.instanceFor(Resource.class, Resource.class.getMethod("other", OtherEntity.class, String.class)); noId = DefaultResourceMethod.instanceFor(Resource.class, Resource.class.getMethod("noId", NoIdEntity.class)); when(converters.to(Long.class)).thenReturn(new LongConverter()); when(converters.to(String.class)).thenReturn(new StringConverter()); }
public String render() throws Exception { PageData data = getWikiPage().getData(); String formattedDate = formatDate(data.getProperties().getLastModificationTime()); String user = data.getAttribute(WikiPage.LAST_MODIFYING_USER); if (user == null || "".equals(user)) return HtmlUtil.metaText("Last modified anonymously on " + formattedDate);
public void testABunchOfCancelledOperations() throws Exception { final String k="bunchOCancel"; Collection<Future<?>> futures=new ArrayList<Future<?>>(); for(int i=0; i<1000; i++) { futures.add(client.set(k, 5, "xval")); futures.add(client.asyncGet(k)); } OperationFuture<Boolean> sf=client.set(k, 5, "myxval"); GetFuture<Object> gf=client.asyncGet(k); for(Future<?> f : futures) { f.cancel(true); } assertTrue(sf.get()); assert sf.getStatus().isSuccess(); assertEquals("myxval", gf.get()); assert gf.getStatus().isSuccess(); }
public List<Symbol> peek(int count, ParseSpecification specification) { List<Symbol> result = new ArrayList<Symbol>(count); int startPosition = next; for (int i = 0; i < count; i++) { Step step = makeNextStep(specification, startPosition); result.add(step.token); if (input.isEnd()) break; startPosition = step.nextPosition; } return result; }
public TestServer startZookeeperServer(int port) throws IOException, TestException { String dir = createTempDirectory("-zookeeper-" + port); ZookeeperServer server = new ZookeeperServer(port, dir); return server; }
protected void startSessionTracker() { ((SessionTrackerImpl) sessionTracker).start(); }
private boolean isDefaultBundle(ResourceBundle bundle) { return bundle instanceof SafeResourceBundle && ((SafeResourceBundle) bundle).isDefault(); }
public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) { return ZError.class.isAssignableFrom(type); }
public void shouldUseHeadersToHttpResponse() throws IOException { InputStreamDownload fd = new InputStreamDownload(inputStream, "type", "x.txt"); mockery.checking(new Expectations() { { one(response).getOutputStream(); will(returnValue(socketStream)); one(response).setHeader("Content-type", "type"); ignoring(anything()); } }); fd.write(response); Assert.assertArrayEquals(bytes, outputStream.toByteArray()); }
void writeTag(int flags, int tagNo) throws IOException { if (tagNo < 31) {
private boolean isSymlinkedPage(WikiPage page) { return page instanceof SymbolicPage; }
protected ZooKeeper createClient(Watcher watcher, CountDownLatch latch) throws IOException, InterruptedException { ZooKeeper zk = new ZooKeeper(hostPort, CONNECTION_TIMEOUT, watcher); if (!latch.await(CONNECTION_TIMEOUT, TimeUnit.MILLISECONDS)) { fail("Unable to connect to server"); } return zk; }
private void readConnectRequest() throws IOException, InterruptedException, ClientCnxnLimitException { if (!isZKServerRunning()) { throw new IOException("ZooKeeperServer not running"); } zkServer.processConnectRequest(this, incomingBuffer); initialized = true; }
public static boolean isInFilesDirectory(File rootPath, File file) throws IOException { return isInSubDirectory(new File(rootPath, "files").getCanonicalFile(), file.getCanonicalFile());
public void testPageWasRenamed() throws Exception { String originalName = "OneOne"; WikiPagePath originalPath = PathParser.parse(originalName); String renamedName = "WonWon"; WikiPagePath renamedPath = PathParser.parse(renamedName); crawler.addPage(root, originalPath, "Content"); assertTrue(crawler.pageExists(root, originalPath)); assertFalse(crawler.pageExists(root, renamedPath)); doRename(originalName, renamedName); assertTrue(crawler.pageExists(root, renamedPath)); assertFalse(crawler.pageExists(root, originalPath)); }
public void shouldTellIfItIsASpecificationsSuite() throws Exception { WikiPageUtil.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPageUtil.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); setUpForGetAllTestPages(); String content = "|Suite|\n|Title|Test|\n|Content|.|\n"; suite.commit(new PageData(suite.getData(), content)); SuiteContentsFinder finder = new SuiteContentsFinder(suite, null, root); List<WikiPage> testPages = finder.getAllPagesToRunForThisSuite(); assertEquals(2, testPages.size()); assertEquals(testPage, testPages.get(0)); assertEquals(testPage2, testPages.get(1));
public void testReadWriteAsyncSingleClientThrottle() throws IOException, NoSuchFieldException, IllegalAccessException { try {
public Maybe<Symbol> parse(Symbol current, Parser parser) { Symbol nesting = parser.parseTo(SymbolType.CloseNesting, ParseSpecification.nestingPriority); if (!parser.getCurrent().isType(SymbolType.CloseNesting)) return new Maybe<>(Symbol.listOf(current.asText(), nesting)); current.add(nesting); return new Maybe<>(current); }
public void testValidatePath_ValidPath() { PathUtils.validatePath("/this is / a valid/path"); }
public Map<EventType, Set<Watcher>> removeWatcher( String clientPath, Watcher watcher, WatcherType watcherType, boolean local, int rc) throws KeeperException {
private WikiPage createSymbolicPage(WikiPage page, WikiPageProperty symLinkProperty, String linkName) { if (symLinkProperty == null) return null; String linkPath = symLinkProperty.get(linkName); if (linkPath == null) return null; return makePage(linkPath, linkName, page); }
public void setup() { this.mockery = new Mockery(); this.container = new VRaptorPicoContainer(new PicoBuilder().withCaching().build()); container.addComponent(DefaultInterceptorRegistry.class); final Router router = mockery.mock(Router.class, "registry"); container.addComponent(router); this.request = mockery.mock(MutableRequest.class, "request"); final HttpSession session = mockery.mock(HttpSession.class, "session"); mockery.checking(new Expectations() { { one(router).allResources(); will(returnValue(new HashSet<ResourceClass>())); allowing(request).getSession(); will(returnValue(session)); allowing(session).getAttribute(with(any(String.class))); will(returnValue(null)); allowing(session).setAttribute(with(any(String.class)), with(any(String.class))); will(returnValue(null)); } }); this.webRequest = new RequestInfo(null, request, mockery.mock(HttpServletResponse.class)); this.provider = new PicoContainersProvider(container, new DefaultComponentFactoryRegistry()); this.provider.init(); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); crawler = root.getPageCrawler(); FitNesseUtil.startFitnesse(root); page2 = crawler.addPage(root, PathParser.parse("PageTwo"), "page two"); crawler.addPage(page2, PathParser.parse("PageTwoChild"), "page two child"); page1 = (BaseWikiPage) crawler.addPage(root, PathParser.parse("PageOne"), "page one content\n!contents\n"); crawler.addPage(page1, PathParser.parse("SomeOtherPage"), "some other page"); setVirtualWiki(page1, "http://localhost:" + FitNesseUtil.port + "/PageTwo"); }
protected void processTable(SlimTable table) throws IOException { List<SlimAssertion> assertions = createAssertions(table); Map<String, Object> instructionResults; if (!stopTestCalled) { instructionResults = slimClient.invokeAndGetResponse(SlimAssertion.getInstructions(assertions)); } else { instructionResults = Collections.emptyMap(); } evaluateTables(assertions, instructionResults); }
public void shouldCreateArrays() throws Exception { GenericNullHandler handler = new GenericNullHandler(); Long[] array = handler.instantiate(Long[].class, container); assertThat(array, is(notNullValue())); }
public void testCRLDisabled( X509KeyType caKeyType, X509KeyType certKeyType, String keyPassword, Integer paramIndex) throws Exception { init(caKeyType, certKeyType, keyPassword, paramIndex); x509Util.getDefaultSSLContext(); assertFalse(Boolean.valueOf(System.getProperty("com.sun.net.ssl.checkRevocation"))); assertFalse(Boolean.valueOf(System.getProperty("com.sun.security.enableCRLDP"))); assertFalse(Boolean.valueOf(Security.getProperty("ocsp.enable"))); }
public void enableLocalSessions(boolean flag) { LOG.info("Local sessions " + (flag ? "enabled" : "disabled")); localSessionsEnabled = flag; }
public void enableLocalSessions(boolean flag) { LOG.info("Local sessions {}", (flag ? "enabled" : "disabled")); localSessionsEnabled = flag; }
public List doTable(List l) { return list( list("pass", "error:huh", ""),
public List<WikiPage> testPageForDescriptor(Descriptor descriptor) { return Collections.unmodifiableList(pagesByTestSystem.get(descriptor)); }
public Character convert(String value, Class type, ResourceBundle bundle) { if (value == null || value.length()==0) { return null; } if(value.length()!=1) { throw new ConversionError(MessageFormat.format(bundle.getString("is_not_a_valid_character"), value)); } return Character.valueOf(value.charAt(0)); }
public void testCreateFromProperty() throws Exception { WikiPageProperty rawProperty = new WikiPageProperty(); WikiPageProperty rawImportProperty = rawProperty.set(WikiImportProperty.PROPERTY_NAME); rawImportProperty.set("IsRoot"); rawImportProperty.set("Source", "some source"); WikiImportProperty importProperty = WikiImportProperty.createFrom(rawProperty); assertEquals("some source", importProperty.getSource()); assertTrue(importProperty.isRoot()); }
public void testTopTextWithTags() { assertEquals("top",new ListTree("<i><b>top</b></i>").text()); }
public void testData() throws Exception { PageData data = symPage.getData(); assertEquals("page one", data.getContent()); assertSame(symPage, data.getWikiPage()); }
public void setUp() throws Exception { suitePageName = "SuitePage"; root = InMemoryPage.makeRoot("RooT"); crawler = root.getPageCrawler(); PageData data = root.getData(); data.setContent(classpathWidgets()); root.commit(data); suite = crawler.addPage(root, PathParser.parse(suitePageName), "This is the test suite\n"); addTestToSuite("TestOne", fitPassFixture); request = new MockRequest(); request.setResource(suitePageName); responder = new SuiteResponder(); responder.turnOffChunkingForTests(); responder.setFastTest(true); responder.page = suite; context = FitNesseUtil.makeTestContext(root); receiver = new FitSocketReceiver(0, context.socketDealer); }
public void addCompileSourceRoot(String path) { wrapped.addCompileSourceRoot(path); }
private boolean isMethodReplace() { return request.hasInput("isMethodReplace"); }
public void testFirstRecentChange() throws Exception { assertEquals(false, rootPage.hasChildPage("RecentChanges")); RecentChanges.updateRecentChanges(newPage.getData()); assertEquals(true, rootPage.hasChildPage("RecentChanges")); WikiPage recentChanges = rootPage.getChildPage("RecentChanges"); List lines = RecentChanges.getRecentChangesLines(recentChanges.getData()); assertEquals(1, lines.size()); assertHasRegexp("SomeNewPage", (String) lines.get(0)); }
public void canProvideAllRequestScopedComponents() { checkAvailabilityFor(false, HttpServletRequest.class, HttpServletResponse.class, VRaptorRequest.class, DefaultInterceptorStack.class, RequestInfo.class, RequestExecution.class, ResourceLookupInterceptor.class, InstantiateInterceptor.class, DefaultResult.class, ExecuteMethodInterceptor.class, OgnlParametersProvider.class, Converters.class, HttpSession.class, PageResult.class); mockery.assertIsSatisfied(); }
public void shouldTranslatePatternArgsWithMultipleRegexes() { String uri = new DefaultParametersControl("/test/{hash1:[a-z0-9]{16}}{id}{hash2:[a-z0-9]{16}}/", converters, evaluator).fillUri(new String[] {"hash1", "id", "hash2"}, "0123456789abcdef", "1234", "fedcba9876543210"); assertThat(uri, is(equalTo("/test/0123456789abcdef1234fedcba9876543210/"))); }
Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
private TestResult rangeMessage(boolean pass) { String[] fragments = expected.replaceAll(" ", "").split("_"); String message = String.format("%s%s%s", fragments[0], actual, fragments[1]); message = replaceSymbolsWithFullExpansion(message); return pass ? TestResult.pass(message) : TestResult.fail(message); }
public HtmlTag makeEditForm(String resource) throws Exception { HtmlTag form = new HtmlTag("form"); form.addAttribute("name", "f"); form.addAttribute("action", resource); form.addAttribute("method", "post"); form.add(HtmlUtil.makeInputTag("hidden", "responder", "saveData")); form.add(HtmlUtil.makeInputTag("hidden", SAVE_ID, String.valueOf(SaveRecorder.newIdNumber()))); form.add(HtmlUtil.makeInputTag("hidden", TICKET_ID, String.valueOf((SaveRecorder.newTicket())))); form.add(createTextarea()); form.add(createButtons()); HtmlTag wizardForm = makeWizardForm(resource); TagGroup group = new TagGroup(); group.add(form); group.add(wizardForm); return group; }
tryTimeout("getbulk", new Runnable() {public void run() { client.getBulk("k", "k2"); }});
public void setUp() throws Exception { CommandRunningFitClient.TIMEOUT = 5000; client = new CommandRunningFitClient(new CommandRunningFitClient.OutOfProcessCommandRunner( new String[] { "java", "-cp", "build/classes/main", "fit.FitServer", "-v" }, null, new ConsoleExecutionLogListener())); client.addFitClientListener(this); }
private void sendHeaders(OutputStream output) throws Exception { addHostHeader(); for(Iterator<String> iterator = headers.keySet().iterator(); iterator.hasNext();) {
public void testReconfigRemoveClientFromStatic() throws Exception { final int clientPorts[] = new int[SERVER_COUNT]; final int quorumPorts[] = new int[SERVER_COUNT]; final int electionPorts[] = new int[SERVER_COUNT]; final int changedServerId = 0; final int newClientPort = PortAssignment.unique(); StringBuilder sb = new StringBuilder(); ArrayList<String> allServers = new ArrayList<String>(); ArrayList<String> newServers = new ArrayList<String>(); for (int i = 0; i < SERVER_COUNT; i++) { clientPorts[i] = PortAssignment.unique(); quorumPorts[i] = PortAssignment.unique(); electionPorts[i] = PortAssignment.unique(); String server = "server." + i + "=localhost:" + quorumPorts[i] +":" + electionPorts[i] + ":participant"; allServers.add(server); sb.append(server + "\n"); if(i == changedServerId) { newServers.add(server + ";0.0.0.0:" + newClientPort); } else { newServers.add(server); } } String quorumCfgSection = sb.toString(); MainThread mt[] = new MainThread[SERVER_COUNT]; ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];
public void tearDown() throws Exception { } public void testGetVersionsList() throws Exception { Set<VersionInfo> set = new HashSet<VersionInfo>(); VersionInfo v1 = new VersionInfo("1-12345678901234"); VersionInfo v2 = new VersionInfo("2-45612345678901"); VersionInfo v3 = new VersionInfo("3-11112345678901"); VersionInfo v4 = new VersionInfo("4-12212345465679"); set.add(v1); set.add(v2); set.add(v3); set.add(v4); PageData data = new PageData(page); data.addVersions(set); List<VersionInfo> list = VersionSelectionResponder.getVersionsList(data); assertEquals(v3, list.get(3)); assertEquals(v4, list.get(2)); assertEquals(v1, list.get(1)); assertEquals(v2, list.get(0)); } public void testMakeReponder() throws Exception { MockRequest request = new MockRequest(); request.setResource("PageOne"); Responder responder = new VersionSelectionResponder(); SimpleResponse response = (SimpleResponse) responder.makeResponse(FitNesseUtil.makeTestContext(root), request); String content = response.getContent(); assertSubString("<a", content); assertSubString("?responder=viewVersion", content); assertNotSubString("$version", content); assertSubString("<h5> Page One tags</h5>", content); } }
protected void tearDown() throws Exception { SaveResponder.contentFilter = null; }
public void exists(String path, boolean watch, StatCallback cb, Object ctx) { RequestHeader h = new RequestHeader(); h.setType(ZooDefs.OpCode.exists); ExistsRequest request = new ExistsRequest(); request.setPath(path); request.setWatch(watch); SetDataResponse response = new SetDataResponse(); cnxn .queuePacket(h, new ReplyHeader(), request, response, cb, path,
public void onError(String content) { mavenLogger.error(content); }
public void buildsTestPageCountForATest() throws Exception { assertBuildsOption("PlainItem", new String[]{"Test=true"}, "-c", "TEST_PAGE_COUNT_TOC", "<a href=\"PlainItem\" class=\"test\">PlainItem</a>");
int getReadBufSize();  HashAlgorithm getHashAlg();  long getMaxReconnectDelay();  AuthDescriptor getAuthDescriptor();  int getTimeoutExceptionThreshold(); }
private void blank(int roll) { if (roll == 20 && parseRoll(19) != SPARE && parseRoll(18) != STRIKE) return; if (parseRoll(roll + 1) == STRIKE) return; wrongRoll(roll); }
public void testCXidRollover() throws Exception { TestableZooKeeper zk = null; try { zk = createClient();
public void newTestStarted(WikiPage test, long time) throws Exception { resultsRepository.open(getFullPath(test));
public void shouldBeAbleToConvertCharacters(){ assertThat((Character) converter.convert("Z", Character.class), is(equalTo(new Character('Z')))); }
public void traverse(WikiPage context, TraversalListener<? super WikiPage> listener) { assert context == this.context; _traverse(context, listener); }
List<File> normalize(List<String> compileSourceRootsList) throws Exception { List<File> newCompileSourceRootsList = new ArrayList<>(); if (compileSourceRootsList != null) {
public void checkin(String... filePaths) throws RevisionControlException; public void checkout(String... filePaths) throws RevisionControlException; public void delete(String... filePaths) throws RevisionControlException; public void revert(String... filePaths) throws RevisionControlException; public State checkState(String... filePaths) throws RevisionControlException; public void update(String... filePaths) throws RevisionControlException; public PageData getRevisionData(FileSystemPage page, String label) throws Exception; public Collection<VersionInfo> history(FileSystemPage page) throws Exception; public VersionInfo makeVersion(FileSystemPage page, PageData data) throws Exception; public void removeVersion(FileSystemPage page, String versionName) throws Exception; public void prune(FileSystemPage page) throws Exception; public boolean isExternalReversionControlEnabled(); }
public void dealSocketTo(int ticket, SocketDoner doner) throws Exception { Integer key = new Integer(ticket); SocketSeeker seeker = (SocketSeeker) waitingList.get(key); seeker.acceptSocketFrom(doner); waitingList.remove(key); }
void testComplete(TestSummary testSummary) throws IOException; void exceptionOccurred(Throwable e); void testAssertionVerified(Assertion assertion, TestResult testResult); void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); }
public static void LoadData(String filename, String password, String keyfile) throws InvalidCipherTextException, IOException, InvalidKeyFileException, FileNotFoundException { FileInputStream fis; fis = new FileInputStream(filename); ImporterV3 Importer = new ImporterV3(ImporterV3.DEBUG);
public void noSuchPage() throws Exception { request.setResource("NoSuchPage"); SimpleResponse response = makeResponse(); assertEquals(404, response.getStatus()); }
public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException { for (Callback cb : callbacks) { if (cb instanceof TextOutputCallback) {
public void setUp() throws Exception { x509TestContext.setSystemProperties(new ClientX509Util(), KeyStoreFileType.JKS, KeyStoreFileType.JKS); System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY, "org.apache.zookeeper.server.NettyServerCnxnFactory"); System.setProperty(ZKClientConfig.ZOOKEEPER_CLIENT_CNXN_SOCKET, "org.apache.zookeeper.ClientCnxnSocketNetty"); x509Util = new ClientX509Util(); }
public void testTableHtml() throws Exception { String wikiText = "|this|is|a|table|\n|that|has|four|columns|\n"; assertEquals(expectedHtmlFromWikiText, translate(wikiText, new WikiPageDummy())); }
public void canProvideAllRequestScopedComponents() { checkAvailabilityFor(false, HttpServletRequest.class, HttpServletResponse.class, VRaptorRequest.class, InterceptorStack.class, RequestInfo.class, RequestExecution.class, ResourceLookupInterceptor.class, InstantiateInterceptor.class, Result.class, ExecuteMethodInterceptor.class, OgnlParametersProvider.class, HttpSession.class, PageResult.class); mockery.assertIsSatisfied(); }
public void canExtractTablesFromHtml() throws Exception { String table1_fmt = "<body>GunkHeader gunk<table>gunk</table>gunk middle directions"; String table2_fmt = "<table>gunk 2</table>gunk middle directions2"; String table3_fmt = "<table>gunk 3</table>gunkend gunk</body>"; String MULTI_TABLE_HTML = String.format(table1_fmt + table2_fmt + table3_fmt, "", "", ""); scan(MULTI_TABLE_HTML); assertHasRegexp(table1_fmt + table2_fmt + table3_fmt, ts.toHtml(null, null)); assertHasRegexp(table1_fmt, ts.toHtml(null, ts.getTable(1))); assertHasRegexp(table2_fmt, ts.toHtml(ts.getTable(1), ts.getTable(2))); assertHasRegexp(table3_fmt, ts.toHtml(ts.getTable(2), null)); }
private void assertHash(HashAlgorithm ha, String key, long exp) { assertTrue(exp >= 0L); assertEquals("Invalid " + ha + " for key " + key, exp, ha.hash(key));
private void set00Check(boolean enabled) { if (_in instanceof IndefiniteLengthInputStream) {
void setParameters(Object[] parameters); Object[] getParameters(); Object getResult(); void setResult(Object result); }
public static String convertToDebianVersion( String version, boolean apply, String envName, Date timestamp ) { Matcher matcher = SNAPSHOT_PATTERN.matcher(version); if (matcher.matches()) { version = matcher.group(1) + "~"; if (apply) { final String envValue = System.getenv(envName); final String snapshot = (envValue != null && envValue.length() > 0) ? envValue : new SimpleDateFormat("yyyyMMddHHmmss").format(timestamp); version += snapshot; } else { version += "SNAPSHOT"; } } else { matcher = BETA_PATTERN.matcher(version); if (matcher.matches()) { version = matcher.group(1) + "~" + matcher.group(3) + matcher.group(4); } }
private String portablePath(String path) { return path.replace("/", System.getProperty("file.separator")); }
public String changeReferences(WikiPage page, Function<String, Optional<String>> changeReference) { SyntaxTreeV2 syntaxTree = new SyntaxTreeV2(SymbolProvider.refactoringProvider); syntaxTree.parse(page.getData().getContent(), new ParsingPage(new WikiSourcePage(page))); syntaxTree.findReferences(changeReference); return syntaxTree.translateToMarkUp(); }
public Object next() { Object e = e1; e1 = e2; e2 = null; return e; }
public ChannelFuture connect(SocketAddress remoteAddress) { throw new RuntimeException("Not intended"); }
public void compile(List<String> classpathElements, List<File> sources, File classesDirectory, List<String> scalacOptions, List<String> javacOptions, String compileOrder) { Inputs inputs = compiler.inputs( classpathElements.stream().map(File::new).toArray(size -> new File[size]),
private <T> void registerInstanceFor(Class<? super T> resolvableType, T instance) { applicationContext.getBeanFactory().registerResolvableDependency(resolvableType, instance); }
public void canFindMethodWithArguments() { String findMethod = "addChildTable"; Method method = interaction.findMatchingMethod(findMethod, SlimTable.class, 2); assertEquals(findMethod, method.getName()); assertEquals(SlimTable.class, method.getDeclaringClass()); verify(interaction, times(1)).handleMethodCacheMiss(findMethod, SlimTable.class, 2);
public void variablesAreReplacedInMatch() throws Exception { makeQueryTableAndBuildInstructions(queryTableHeader + "|2|$V|\n"); qt.setSymbol("V", "4"); Map<String, Object> pseudoResults = SlimCommandRunningClient.resultToMap( list( list("queryTable_id_0", "OK"), list("queryTable_id_1", VoidConverter.VOID_TAG), list("queryTable_id_2", list( list(list("n", "2"), list("2n", "4")) ) ) ) ); Assertion.evaluateExpectations(assertions, pseudoResults); org.junit.Assert.assertEquals( "[" +
public static Parse copyParse(Parse tables) { if (tables == null) return null; Parse parse = new Parse("",tables.body, copyParse(tables.parts),copyParse(tables.more)); parse.tag = tables.tag; parse.end = tables.end; parse.leader = tables.leader; parse.trailer = tables.trailer; return parse; }
public static URI makeFileLoggerURL(File dataDir, File dataLogDir, String convPolicy) { return URI.create(makeURIString(dataDir.getPath(), dataLogDir.getPath(), convPolicy)); }
public void shouldBeAbleToConvertNumbers() { assertThat((Boolean) converter.convert("", boolean.class, bundle), is(equalTo(false))); assertThat((Boolean) converter.convert("false", boolean.class, bundle), is(equalTo(false))); assertThat((Boolean) converter.convert("true", boolean.class, bundle), is(equalTo(true))); assertThat((Boolean) converter.convert("True", boolean.class, bundle), is(equalTo(true))); }
public TargetResult findRefTarget(String fullRef, SprContextV4 ctx) { if (fullRef == null) { return null; } fullRef = fullRef.toUpperCase(Locale.ENGLISH); if (!fullRef.startsWith(STR_REF_START) || !fullRef.endsWith(STR_REF_END)) { return null; } String ref = fullRef.substring(STR_REF_START.length(), fullRef.length() - STR_REF_END.length()); if (ref.length() <= 4) { return null; } if (ref.charAt(1) != '@') { return null; } if (ref.charAt(3) != ':') { return null; } char scan = Character.MIN_VALUE; char wanted = Character.MIN_VALUE; scan = Character.toUpperCase(ref.charAt(2)); wanted = Character.toUpperCase(ref.charAt(0)); SearchParametersV4 sp = new SearchParametersV4(); sp.setupNone(); sp.searchString = ref.substring(4); if (scan == 'T') { sp.searchInTitles = true; } else if (scan == 'U') { sp.searchInUserNames = true; } else if (scan == 'A') { sp.searchInUrls = true; } else if (scan == 'P') { sp.searchInPasswords = true; } else if (scan == 'N') { sp.searchInNotes = true; } else if (scan == 'I') { sp.searchInUUIDs = true; } else if (scan == 'O') { sp.searchInOther = true; } else { return null; } List<PwEntry> list = new ArrayList<PwEntry>(); ctx.db.rootGroup.searchEntries(sp, list); if (list.size() > 0) { return new TargetResult((PwEntryV4)list.get(0), wanted); } return null; }
public void dumpConnections(PrintWriter pwriter) { pwriter.print("Connections "); cnxnExpiryQueue.dump(pwriter); }
public void handlesInclude() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ exactly(2).of(request).getAttribute(DefaultResourceTranslator.INCLUDE_REQUEST_URI); will(returnValue("/url")); one(request).getMethod(); will(returnValue("POST")); one(registry).parse("/url", HttpMethod.POST, webRequest); will(returnValue(expected)); one(request).getParameter("_method"); will(returnValue(null)); }}); ResourceMethod resource = translator.translate(webRequest); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied();
synchronized public boolean testAndClearSomethingWritten() { try { return somethingWritten;
public State checkState() throws Exception { return this.revisioner.checkState(contentFilePath(), propertiesFilePath()); }
public void trace(F0<Throwable> exception) { if (log.isDebugEnabled()) { log.debug(exception.apply());
public void testAddUrlToClasspath() throws Exception { ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader(); assertTrue(systemClassLoader instanceof URLClassLoader); URLClassLoader classLoader = (URLClassLoader) systemClassLoader; URL sampleUrl = new File("src").toURI().toURL(); String classpath = classpathAsString(classLoader); assertNotSubString(sampleUrl.toString(), classpath); PluginsClassLoader.addUrlToClasspath(sampleUrl); classpath = classpathAsString(classLoader); assertSubString(sampleUrl.toString(), classpath); }
public void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException { this.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), proxifier,creator); router.register(mockery.resource(MyResource.class)); router.register(mockery.resource(InheritanceExample.class)); final Method method = mockery.methodFor(MyResource.class, "notAnnotated").getMethod(); allowParametersCreation(method); String url = router.urlFor(InheritanceExample.class, method, new Object[] {}); assertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method))); mockery.assertIsSatisfied(); }
void start(); void stop();  Request prepare(ResourceMethod method, HttpServletRequest request, HttpServletResponse response);  <T> T instanceFor(Class<T> type); }
public void handleLine(String line) { getLogger().info("Delete of %s returned %s", key, line); assert line.equals("DELETED") || line.equals("NOT_FOUND"); transitionState(State.COMPLETE); }
public void create() { factory = Persistence.createEntityManagerFactory("default"); }
public void testVariablesRenderedFirst() throws Exception { String text = "!define x {''italics''}\n${x}"; WikiPage root = InMemoryPage.makeRoot("RooT"); WikiPage page = pageBuilder.addPage(root, PathParser.parse("SomePage"), text); String html = page.getData().getHtml(); assertHasRegexp("''italics''", html); assertHasRegexp("<i>italics</i>", html); }
public void shouldPreferMethodOnFixtureOverMethodOnLibrary() throws Exception { SimpleFixture instance = createSimpleFixture(); EchoSupport echoLibrary = createEchoLibrary(); statementExecutor.call(INSTANCE_NAME, echoMethodName()); assertFalse(echoLibrary.echoCalled()); assertTrue(instance.echoCalled()); }
public void setup() { this.converter = new ByteConverter(); }
public void testThrottledOp() throws IOException, InterruptedException, KeeperException { ZooKeeper zk = null; try { zk = createClient(hostPort);
public void testBigPosts() throws Exception { StringBuffer buffer = new StringBuffer(); for (int i = 0; i < 10; i++) { for (int j = 0; j < 1000; j++) buffer.append(i); } String prefix = EditResponder.TIME_STAMP + "=12345&content="; appendToMessage("POST /HelloThere HTTP/1.1\r\n"); appendToMessage(String.format("Content-length: %d\r\n", prefix.length()+buffer.length())); appendToMessage("\r\n"); appendToMessage(prefix); appendToMessage(buffer); parseMessage(); String expected = buffer.toString(); String actual = (String)request.getInput("content"); assertEquals(expected.length(), actual.length()); assertEquals(expected, actual); }
public static <T, U> Either<T, U> of(T x, U y) { return new Either<T, U>(x, y); }
public void testReconfigRemoveClientFromStatic() throws Exception { final int clientPorts[] = new int[SERVER_COUNT]; final int quorumPorts[] = new int[SERVER_COUNT]; final int electionPorts[] = new int[SERVER_COUNT]; final int changedServerId = 0; final int newClientPort = PortAssignment.unique(); StringBuilder sb = new StringBuilder(); ArrayList<String> allServers = new ArrayList<String>(); ArrayList<String> newServers = new ArrayList<String>(); for (int i = 0; i < SERVER_COUNT; i++) { clientPorts[i] = PortAssignment.unique(); quorumPorts[i] = PortAssignment.unique(); electionPorts[i] = PortAssignment.unique(); String server = "server." + i + "=localhost:" + quorumPorts[i] +":" + electionPorts[i] + ":participant"; allServers.add(server); sb.append(server + "\n"); if(i == changedServerId) { newServers.add(server + ";0.0.0.0:" + newClientPort); } else { newServers.add(server); } } String quorumCfgSection = sb.toString(); MainThread mt[] = new MainThread[SERVER_COUNT]; ZooKeeper zk[] = new ZooKeeper[SERVER_COUNT];
public void testModifications() throws Exception { ConnectionObserver testObserver = new ConnectionObserver() { public void connectionLost(SocketAddress sa) {
PermMapper createMapper() { return new PermMapper(-1, -1, null, null, null, null, -1, null); }
public void execute(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws IOException, InterceptionException { Interceptor interceptor = Interceptor.class.cast(container.instanceFor(type)); if(interceptor==null) { throw new InterceptionException("Unable to instantiate interceptor for " + type.getName() + ": the container returned null."); } interceptor.intercept(stack, method, resourceInstance); }
private void createResponder() throws Exception { responder = new WikiImportingResponder(); responder.path = new WikiPagePath(); ChunkedResponse response = new ChunkedResponse(); response.readyToSend(new MockResponseSender()); responder.setResponse(response); responder.getImporter().setDeleteOrphanOption(false); }
public void testWatchesLeak(boolean sessionTimedout) throws Exception { NIOServerCnxnFactory serverCnxnFactory = mock(NIOServerCnxnFactory.class); final SelectionKey sk = new FakeSK(); MockSelectorThread selectorThread = mock(MockSelectorThread.class); when(selectorThread.addInterestOpsUpdateRequest(any(SelectionKey.class))).thenAnswer(new Answer<Boolean>() { @Override public Boolean answer(InvocationOnMock invocation) throws Throwable { SelectionKey sk = (SelectionKey) invocation.getArguments()[0]; NIOServerCnxn nioSrvCnx = (NIOServerCnxn) sk.attachment(); sk.interestOps(nioSrvCnx.getInterestOps()); return true; } }); ZKDatabase database = new ZKDatabase(null); database.setlastProcessedZxid(2L); QuorumPeer quorumPeer = mock(QuorumPeer.class); FileTxnSnapLog logfactory = mock(FileTxnSnapLog.class);
public void tearDown() throws Exception { } public void testTestSummary() throws Exception {
public void testResponse() throws Exception { request.setResource("root"); SimpleResponse response = (SimpleResponse) responder.makeResponse(new FitNesseContext(root), request); assertEquals(200, response.getStatus()); String body = response.getContent(); assertSubString("<html>", body); assertSubString("<form", body); assertSubString("method=\"post\"", body); assertSubString("name=\"responder\"", body); assertSubString("name=\"" + EditResponder.HELP_TEXT + "\"", body); assertSubString("type=\"submit\"", body); assertSubString(String.format("textarea class=\"%s no_wrap\" wrap=\"off\"", EditResponder.CONTENT_INPUT_NAME), body);
public void snapshot() throws InterruptedException { long lastZxid = dataTree.lastProcessedZxid; ZooTrace.logTraceMessage(LOG, ZooTrace.getTextTraceLevel(), "Snapshotting: zxid 0x" + Long.toHexString(lastZxid)); try { File f = new File(dataDir, "snapshot." + Long.toHexString(lastZxid));
MemcachedConnection createConnection(List<InetSocketAddress> addrs) throws IOException;  MemcachedNode createMemcachedNode(SocketAddress sa, SocketChannel c, int bufSize);  BlockingQueue<Operation> createOperationQueue();  BlockingQueue<Operation> createReadOperationQueue();  BlockingQueue<Operation> createWriteOperationQueue();  NodeLocator createLocator(List<MemcachedNode> nodes);  OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon();  boolean useNagleAlgorithm();  Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode();  Transcoder<Object> getDefaultTranscoder();  boolean shouldOptimize();  int getReadBufSize();  public HashAlgorithm getHashAlg(); }
public void canEvaluateReturnValuesAndColorizeTable() throws Exception { makeDecisionTableAndBuildInstructions(simpleDecisionTable); Map<String, Object> pseudoResults = makePseudoResultsForSimpleTable(); SlimAssertion.evaluateExpectations(assertions, pseudoResults); String colorizedTable = decisionTable.getTable().toString(); String expectedColorizedTable = "[" + "[pass(DT:fixture), argument], " + "[var, func?], " + "[3, pass(5)], " + "[7, fail(a=5;e=9)]" + "]"; assertEquals(expectedColorizedTable, colorizedTable); }
void addOp(OperationImpl op);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps(); }
private String anchorWithName(String name) { return "<a name=\"" + name + "\"/>" + HtmlElement.endl; }
public DERObject toASN1Object() { ASN1EncodableVector v = new ASN1EncodableVector(); v.add(certReqId); v.add(checkAfter); if (reason != null) { v.add(reason); } return new DERSequence(v); }
public void executeAndCheck(String agentName, String agentParameters, String clientName, String clientParameters) throws Exception { WikiPage testPage = WikiPageUtil.addPage(root, PathParser.parse("TestPage"), "!define TEST_SYSTEM {slim}\n" + "!define SLIM_SSL {"+ agentParameters +"}\n" + "!define slim.timeout {10}\n" + "!define slim.pool.size {1}\n" + "!define wiki.protocol.ssl.parameter.class {"+ clientParameters + "}\n" ); WikiPageDescriptor descriptor = new WikiPageDescriptor(testPage, false, false, "build/classes/test", "classes"); descriptor.getExecutionLogListener().addExecutionLogListener(new ConsoleExecutionLogListener()); System.out.print("----------------------------------------------------\n"); System.out.print("SLIM_SSL: " + descriptor.getVariable("SLIM_SSL") + "\n"); System.out.print("slim.timeout: " + descriptor.getVariable("slim.timeout") + "\n"); System.out.print("wiki.protocol.ssl.parameter.class: " + descriptor.getVariable("wiki.protocol.ssl.parameter.class") + "\n"); System.out.print("TEST_SYSTEM: " + descriptor.getVariable("TEST_SYSTEM") + "\n"); SlimClientBuilder clientBuilder = new SlimClientBuilder(descriptor); String testSystemName = clientBuilder.getTestSystemName(); assertEquals("slim:" + "fitnesse.slim.SlimService", testSystemName); SlimCommandRunningClient client = clientBuilder.build(); boolean isConnected; String myName; String peerName; client.start(); try{ isConnected = client.isConnected(); myName = client.getMyName(); peerName = client.getPeerName(); }finally{ client.bye(); client.kill(); } assertTrue("Got connected to client:", isConnected); System.out.print("My Name is: " + myName +"\n"); System.out.print("Peer Name is: " + peerName+"\n"); assertEquals("Client Name", clientName, myName); assertEquals("Agent Name", agentName, peerName);
synchronized public void resetMaxLatency(){ maxLatency=getMinLatency(); }
public boolean remove(Object key) { boolean result = parent.containsKey(key); parent.remove(key); return result; }
void checkStartCode() { if (!startCode) { throw new IllegalStateException("Cannot visit instructions before visitCode has been called.");
public static boolean isImported(PageData pageData) { WikiImportProperty importProperty = WikiImportProperty.createFrom(pageData.getProperties()); return importProperty != null && !importProperty.isRoot(); }
WikiPagePath getFullPath(WikiPage page); String getRelativeName(WikiPage base, WikiPage page);
public void testNoCompression() throws Exception { project.executeTarget("no-compression"); File deb = new File("target/test-classes/test.deb"); assertTrue("package not build", deb.exists()); boolean found = ArchiveWalker.walkData(deb, (entry, content) -> { }, Compression.NONE); assertTrue("tar file not found", found); }
public void testValidCredentialsWithMultiAddresses() throws Exception { String serverPrincipal = hostServerPrincipal.substring(0, hostServerPrincipal.lastIndexOf("@")); Map<String, String> authConfigs = new HashMap<String, String>(); authConfigs.put(QuorumAuth.QUORUM_SASL_AUTH_ENABLED, "true"); authConfigs.put(QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED, "true"); authConfigs.put(QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED, "true"); authConfigs.put(QuorumAuth.QUORUM_KERBEROS_SERVICE_PRINCIPAL, serverPrincipal); String connectStr = startMultiAddressQuorum(3, authConfigs, 3); CountdownWatcher watcher = new CountdownWatcher(); ZooKeeper zk = new ZooKeeper(connectStr, ClientBase.CONNECTION_TIMEOUT, watcher); watcher.waitForConnected(ClientBase.CONNECTION_TIMEOUT); for (int i = 0; i < 10; i++) { zk.create("/" + i, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); } zk.close(); }
public void testAuthenticatorDefaultCreation() throws Exception { factory.loadProperties(); Authenticator authenticator = factory.getAuthenticator(new PromiscuousAuthenticator()); assertNotNull(authenticator); assertEquals(PromiscuousAuthenticator.class, authenticator.getClass()); }
public void testValidatePath_uf8ff() { assertThrows(IllegalArgumentException.class, () -> { PathUtils.validatePath("/test\uf8ff");
public Matcher whitespace() { if (firsts == null) firsts = defaultList; matches.add(new ScanMatch() { @Override public Maybe<Integer> match(ScanString input, SymbolStream symbols, int offset) { int length = input.whitespaceLength(offset); return length > 0 ? new Maybe<Integer>(length) : Maybe.noInteger; } }); return this; }
public DERObject toASN1Object() { ASN1EncodableVector v = new ASN1EncodableVector(); v.add(responseStatus); if (responseBytes != null) { v.add(new DERTaggedObject(true, 0, responseBytes)); } return new DERSequence(v); }
public Response createGoodResponse(Request request) throws Exception { Response response; Responder responder = context.responderFactory.makeResponder(request, context.root); responder = context.authenticator.authenticate(context, request, responder); response = responder.makeResponse(context, request); response.addHeader("Server", "FitNesse-" + FitNesse.VERSION); response.addHeader("Connection", "close"); return response; }
public void handleNullSymbolsSurroundedByString() throws Exception { caller.assign("x", null); Object result = caller.call("testSlim", "echoString", new Object[]{"A $x B"}); assertEquals("A null B", result); caller.assign("xyz", null); result = caller.call("testSlim", "echoString", new Object[]{"A $xyz B"}); assertEquals("A null B", result); }
public boolean closeSession(long sessionId, ServerCnxn.DisconnectReason reason) { return false; }
private static void printStartMessage(Arguments args, FitNesseContext context) { System.out.println("FitNesse (" + VERSION + ") Started..."); System.out.print(context.toString()); System.out.println("\tpage version expiration set to " + args.getDaysTillVersionsExpire() + " days."); System.out.print(extraOutput); }
public void testReceiveMessage() throws Exception { ss = new SocketService(PORT_NUMBER, true, new EchoService(),"fitnesse.socketservice.SslParametersWiki"); Socket s = SocketFactory.tryCreateClientSocket("localhost", PORT_NUMBER, true, "fitnesse.socketservice.SslParametersWiki"); BufferedReader br = GetBufferedReader(s); PrintStream ps = GetPrintStream(s); ps.println("MyMessage"); String answer = br.readLine(); s.close(); ss.close(); assertEquals("MyMessage", answer); }
public void process(WatchedEvent event) {
String getTestRunner(); String getCommandPattern(); Map<String, String> createClasspathEnvironment(String classPath); String getClassPath();
public void testShouldDisplayAssociatedRevisionControlButtonForPages() throws Exception { String pageName = "CheckedInPage"; expect(revisionController.isExternalReversionControlEnabled()).andReturn(true); expect(revisionController.execute(STATE, contentAndPropertiesFilePath(ROOT + "/ExternalRoot/" + pageName))).andReturn(VERSIONED); replay(revisionController); String html = getActionsHtml(pageName); verifyDefaultLinks(html, pageName); assertRevisionControlHeaderPresent(html); assertAddToRevisionControlButtonIsNotVisible(pageName, html); assertCheckoutButtonIsVisible(pageName, html); assertUpdateButtonIsVisible(pageName, html); assertDeleteButtonIsVisible(pageName, html); }
public Response expected(String actual, String expected) { return failMessage(actual, String.format("expected [%s]", expected)); }
private void waitForRequest(Request request) throws InterruptedException { long now = System.currentTimeMillis(); requestParsingDeadline = now + requestParsingTimeLimit; requestProgress = 0; while (!hasError && !request.hasBeenParsed()) { Thread.sleep(10);
public void addPluginsToClassLoader() throws Exception { String[] dynamicClasses = new String[]{"fitnesse.testing.PluginX", "fitnesse.testing.PluginY"}; ClassLoader cl = PluginsClassLoader.getClassLoader("."); assertLoadingClassWorksNow(cl, dynamicClasses); }
public void testCreateBase() throws Exception { FileSystemPage levelA = (FileSystemPage) WikiPageUtil.addPage(root, PathParser.parse("PageA"), ""); assertEquals(new File(defaultPath + "/RooT/PageA").getPath(), levelA.getFileSystemPath()); assertTrue(new File(defaultPath + "/RooT/PageA").exists()); }
public void shouldAcceptCaseInsensitiveGetRequestUsingThe_methodParameter() { when(request.getRequestURI()).thenReturn("/url"); when(request.getParameter("_method")).thenReturn("gEt"); when(request.getMethod()).thenReturn("POST"); when(router.parse("/url", HttpMethod.GET, webRequest)).thenReturn(method); ResourceMethod resource = translator.translate(info); assertThat(resource, is(equalTo(method))); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); pageBuilder = new PageBuilder(); searcher = new AttributeWikiPageFinder(this, Arrays.asList(TEST), new HashMap<String, Boolean>(), new ArrayList<String>()); page = pageBuilder.addPage(root, PathParser.parse("TestPage")); hits.clear(); }
public <T> CASResponse cas(String key, long casId, int exp, T value, Transcoder<T> tc) { CASResponse casr = null; try { OperationFuture<CASResponse> casOp = asyncCAS(key,
public void testTxnLog() throws Exception { long peerZxid; db.txnLog.add(createProposal(2)); db.txnLog.add(createProposal(3)); db.txnLog.add(createProposal(5)); db.txnLog.add(createProposal(6)); db.txnLog.add(createProposal(7)); db.txnLog.add(createProposal(8)); db.txnLog.add(createProposal(9)); db.lastProcessedZxid = 9; db.committedLog.add(createProposal(6)); db.committedLog.add(createProposal(7)); db.committedLog.add(createProposal(8));
protected String expandUparrow(String theWord) throws Exception { if(theWord.charAt(0) == '^') { theWord = getWikiPage().getName() + "." + theWord.substring(1); } return theWord; }
public TapOperation tapCustom(String id, RequestMessage message, OperationCallback cb) { return new TapCustomOperationImpl(id, message, cb); }
static TarArchiveEntry defaultDirEntryWithName( final String dirName ) { TarArchiveEntry entry = new TarArchiveEntry(dirName, true); entry.setUserId(ROOT_UID); entry.setUserName(ROOT_NAME); entry.setGroupId(ROOT_UID); entry.setGroupName(ROOT_NAME); entry.setMode(TarArchiveEntry.DEFAULT_DIR_MODE); return entry; }
public void run() { try { Request nextPending = null; while (!finished) { int len = toProcess.size(); for (int i = 0; i < len; i++) { nextProcessor.processRequest(toProcess.get(i)); } toProcess.clear(); synchronized (this) { if ((queuedRequests.size() == 0 || nextPending != null) && committedRequests.size() == 0) { wait(); continue; }
public void testUTF16LEBOM() throws Exception { InformationInputStream informationStream = new InformationInputStream(getStream("utf16le-lf-bom.txt")); Utils.copy(informationStream, new ByteArrayOutputStream());
public void shouldRegisterVRaptorInfoByDefault() throws SecurityException, NoSuchMethodException { ResourceMethod method = registry.gimmeThis("/is_using_vraptor", "GET"); assertThat(method.getMethod(), is(equalTo(VRaptorInfo.class.getMethod("info")))); }
Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); }
public void testReadWriteShortOne() { byte[] orig = new byte[2]; byte[] dest = new byte[2]; orig[0] = 0; orig[1] = 1; int one = LEDataInputStream.readUShort(orig, 0); dest = Types.writeShort(one); assertArrayEquals(orig, dest);
public long getmaxCommittedLog() { if (!committedLog.isEmpty()) { return committedLog.getLast().packet.getZxid(); } return 0; }
String getCellContents(int col, int row); int getRowCount(); int getColumnCountInRow(int row); void substitute(int col, int row, String content); int addRow(List<String> list); void addColumnToRow(int row, String content); void appendChildTable(int row, Table table); void updateContent(int row, TestResult testResult); void updateContent(int col, int row, SlimTestResult testResult); void updateContent(int col, int row, SlimExceptionResult exceptionResult); Table asTemplate(CellContentSubstitution substitution) throws SyntaxError;
public boolean isActive() { return reconnectAttempt == 0 && getChannel() != null && getChannel().isConnected();
public void onClick(View v) { EditText password = (EditText) findViewById(R.id.password); Intent intent = new Intent(); intent.putExtra("com.keepassdroid.password.generated_password", password.getText().toString()); setResult(RESULT_OK, intent); finish(); }
public void testExecutionStatusAppears() throws Exception { doSimpleRun(passFixtureTable()); assertHasRegexp("<div id=\"execution-status\">.*?</div>", results); }
String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); void appendCellToRow(int row, Table table); void setTestStatusOnRow(int row, boolean testStatus); }
public void tableFinished(Parse table) { } public void tablesFinished(Counts count) { } }
public <T> T that(T instance) { if (instance == null) {
public void stopServers() throws IOException { for(int i = 0; i < serverCount; i++) { stopServer(i);
public void saveDatabase(PwManager manager, OutputStream outStream) { } }
void kill() throws IOException; String getTestRunner(); ExecutionLog getExecutionLog(); }
public void usingRegexesWithCurlyBracesNotOnTheEnd() throws Exception { builder = new RouteBuilder(proxifier, typeFinder, "/abc/{abc:[0-9A-Z]{5}}/"); builder.is(MyResource.class, method.getMethod()); Route route = builder.build(); assertFalse("invalid uri", route.canHandle("/abc/notValid/")); assertFalse("invalid uri", route.canHandle("/abc/ABC123/")); assertTrue("valid uri", route.canHandle("/abc/10AB3/"));
protected Method handleMethodCacheMiss(String methodName, Class<?> k, int nArgs) { return super.findMatchingMethod(methodName, k, nArgs); }
public Response makeResponse(FitNesseContext context, Request request) { SimpleResponse response = new SimpleResponse(); resource = request.getResource(); String filename = (String) request.getInput("filename"); response.setContent(makeDirectoryListingPage(filename, context)); response.setLastModifiedHeader("Delete"); return response; }
private void eliminateRowsThatDontMatchField() { String fieldName = fieldNames.get(fieldIndex); Iterator<Integer> rowIterator = matchCandidates.iterator(); while (rowIterator.hasNext()) eliminateUnmatchingRow(rowIterator, fieldName);
long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); }
public void removeChildPage(final String name) throws Exception { super.removeChildPage(name); String pathToDelete = getFileSystemPath() + "/" + name; final File fileToBeDeleted = new File(pathToDelete); FileUtil.deleteFileSystemDirectory(fileToBeDeleted); cmSystem.delete(pathToDelete); }
public void invalidCtor() { try { ControllerServerConfig config = new ControllerServerConfig(-10, -10, "no where");
private void finerLog(String message) { LOGGER.log(Level.FINER, message); }
public DERObject toASN1Object() { ASN1EncodableVector v = new ASN1EncodableVector(); v.add(a); v.add(b); v.add(p); v.add(q); v.add(x); v.add(y); return new DERSequence(v); }
synchronized void shutdown(){ stop = true; instance = null; LOG.debug("Shutting down"); }
private void handleFailedRead() throws EndOfStreamException { setStale(); ServerMetrics.getMetrics().CONNECTION_DROP_COUNT.add(1); throw new EndOfStreamException( "Unable to read additional data from client,"
public long getMaxRequestLatency();  public long getPacketsReceived();  public long getPacketsSent();  public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency(); }
public void testChildPagesStayIntactWhenParentIsRenamed() throws Exception { crawler.addPage(root, pageOnePath, "page one"); crawler.addPage(root, PathParser.parse("PageOne.ChildPage"), "child page"); crawler.addPage(root, PathParser.parse("PageOne.ChildPage.GrandChild"), "grand child"); doRename(pageOneName, pageTwoName, true); WikiPagePath path = PathParser.parse("PageTwo.ChildPage"); assertTrue(crawler.pageExists(root, path)); WikiPage page = crawler.getPage(root, path); assertNotNull(page); assertEquals("child page", page.getData().getContent()); WikiPagePath grandChildPath = PathParser.parse("PageTwo.ChildPage.GrandChild"); assertTrue(crawler.pageExists(root, grandChildPath)); page = crawler.getPage(root, grandChildPath); assertNotNull(page); assertEquals("grand child", page.getData().getContent()); }
static String makeLogFileName(Calendar calendar) { StringBuilder name = new StringBuilder(); name.append("fitnesse").append(format(makeFileNameFormat(), calendar)).append(".log"); return name.toString(); }
void addError(String messageId, String messageArg) { ++syntaxErrorCount; String message = ScriptRuntime.getMessage1(messageId, messageArg); errorReporter.error(message, sourceURI, ts.getLineno(), ts.getLine(), ts.getOffset());
private void populateView() { setEditText(R.id.pass_filename, mFileName); setEditText(R.id.pass_keyfile, mKeyFile); }
String genCsharpCompareTo(String name) { return " ret = ("+capitalize(name)+" == peer."+capitalize(name)+")? 0 : ("+capitalize(name)+"?1:-1);\n"; }
long getDbId() throws IOException;  void commit() throws IOException;  void close() throws IOException;  public interface TxnIterator {  TxnHeader getHeader();  Record getTxn();  boolean next() throws IOException;  void close() throws IOException;  long getStorageSize() throws IOException; } }
public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) { pageHistoryFormatter.testExceptionOccurred(assertion, exceptionResult); super.testExceptionOccurred(assertion, exceptionResult); }
public void testSlimTablesWithColonCreation() throws ClassNotFoundException { testProperties.setProperty(ComponentFactory.SLIM_TABLES, "test::" + TestSlimTable.class.getName()); loader.loadSlimTables(); HtmlTable table = makeMockTable("test:"); SlimTable slimTable = new SlimTableFactory().makeSlimTable(table, "foo", new SlimTestContextImpl()); assertSame(TestSlimTable.class, slimTable.getClass()); }
public void variablesAreReplacedInExpected() throws Exception { makeQueryTableAndBuildInstructions(queryTableHeader + "|2|$V|\n"); qt.setSymbol("V", "5"); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("queryTable_id_0", "OK"), list("queryTable_id_1", list( list(list("n", "2"), list("2n", "4")) ) ) ) ); qt.evaluateExpectations(pseudoResults); assertEquals("|!style_pass(Query:fixture)|argument|\n" + "|n|2n|\n" +
public String htmlInline() { isInline = true; return html(0); }
public void waitsForNewValue() { final ConcurrentBoolean waitFlag = new ConcurrentBoolean(); final ConcurrentBoolean resultFlag = new ConcurrentBoolean(); Thread waitingThread = new Thread(new Runnable() { public void run() { waitFlag.waitFor(true); resultFlag.set(true); } }); waitingThread.start(); waitFlag.set(true); resultFlag.waitFor(true); assertTrue(resultFlag.isTrue()); }
private static SimpleDateFormat makeDateFormat() {
void startMap(TreeMap<?, ?> v, String tag) throws IOException; void endMap(TreeMap<?, ?> v, String tag) throws IOException; long getDataSize(); }
public void announceNumberTestsToRun(int testsToRun) { } @Override public void errorOccured() { } @Override public void newTestStarted(WikiPage test, TimeMeasurement timeMeasurement) throws Exception { } @Override public void setExecutionLogAndTrackingId(String stopResponderId, CompositeExecutionLog log) throws Exception { } @Override public void testComplete(WikiPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws Exception { recordTestResult(new WikiPagePath(test).toString(), testSummary, timeMeasurement.elapsed()); } @Override public void testOutputChunk(String output) throws Exception { } @Override public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { } }
protected void loadPage(String pageName, FitNesseContext context) { WikiPagePath path = PathParser.parse(pageName); PageCrawler crawler = context.getRootPage().getPageCrawler(); page = crawler.getPage(path); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); pageBuilder = new PageBuilder(); responder = new NameWikiPageResponder(); request = new MockRequest(); pageOneName = "PageOne"; pageTwoName = "PageTwo"; frontPageName = "FrontPage"; pageOnePath = PathParser.parse(pageOneName); pageTwoPath = PathParser.parse(pageTwoName); frontPagePath = PathParser.parse(frontPageName); }
int incRefCount(LedgerHandle lh){ ledgers.add(lh); return ++refCount; }
protected void onResume() { super.onResume(); Timeout.cancel(this); }
public void testDelTree() throws Exception { WikiPage levelOne = crawler.addPage(root, PathParser.parse("LevelOne")); crawler.addPage(levelOne, PathParser.parse("LevelTwo")); File childOne = new File(defaultPath + "/RooT/LevelOne"); File childTwo = new File(defaultPath + "/RooT/LevelOne/LevelTwo"); assertTrue(childOne.exists()); root.removeChildPage("LevelOne"); assertFalse(childTwo.exists()); assertFalse(childOne.exists()); }
public void doNothingIfHasNoActiveTransationAsNull() { JPATransactionInterceptor interceptor = new JPATransactionInterceptor(entityManager, validator); when(entityManager.getTransaction()).thenReturn(null); when(validator.hasErrors()).thenReturn(false); interceptor.intercept(stack, method, instance); verify(transaction, never()).rollback(); }
public void ifListenerIsSet_TestCompleteFiresTestComplete() throws Exception{ jf.setListener(listener); TestPage page=buildNestedTestPage(); TimeMeasurement timeMeasurement = new TimeMeasurement().start(); jf.testComplete(page, new TestSummary(1,2,3,4), timeMeasurement.stop()); verify(listener).testComplete(page, new TestSummary(1,2,3,4), timeMeasurement); }
public void call(Map<String, String> scenarioArguments, SlimTable parentTable, int row) { String script = getTable().toHtml(); script = replaceArgsInScriptTable(script, scenarioArguments); insertAndProcessScript(script, parentTable, row); }
public void testStderr() throws Exception { runner.setError("standard error that got printed"); String content = getGeneratedContent(); assertSubString("'''Standard Error:'''", content); assertSubString("standard error that got printed", content); }
private void assertConvertsTo(String string, List<Object> list) throws Exception { assertEquals("true", statementExecutor.call(MY_INSTANCE, "setMap", string)); assertEquals(list, statementExecutor.call(MY_INSTANCE, "query", new Object[] {})); statementExecutor.create(OTHER_INSTANCE, mapConstructorClassName(), new Object[] {string}); assertEquals(list, statementExecutor.call(OTHER_INSTANCE, "query", new Object[] {})); }
private void givenTestSystem(String testSystem) { when(variableSource.findVariable("TEST_SYSTEM")).thenReturn(new Maybe<>(testSystem)); }
private void readAndParseRequestLine() throws IOException, HttpException { String request = input.readLine(); if ("".equals(request)) { throw new EmptyRequestException("Received request that started with empty line"); } requestLine = request; Matcher match = requestLinePattern.matcher(requestLine); checkRequestLine(match); requestURI = match.group(2); parseRequestUri(requestURI); }
public void onEachFile(InputStream input, TarArchiveEntry entry) throws IOException { } public void onEachLink(TarArchiveEntry entry) throws IOException { } private class Invocation { private String dirname; private String linkname; private String user; private long uid; private String group; private long gid; private int mode; private long size; private Invocation( String dirname, String linkname, String user, long uid, String group, long gid, int mode, long size ) throws IOException { this.dirname = dirname; this.linkname = linkname; this.user = user; this.uid = uid; this.group = group; this.gid = gid; this.mode = mode; this.size = size; } } } }
public void testAddingWhileRunning() throws Exception { ScheduleImpl schedule = new ScheduleImpl(250); Counter counter = new Counter(); Sleeper sleeper = new Sleeper(); schedule.add(sleeper); schedule.start(); schedule.add(counter); Thread.sleep(400); schedule.stop(); assertTrue(counter.count >= 1); }
public void testWithPrunedPage() throws Exception { WikiPage pageTwo = addTestToSuite("TestTwo", "|!-fitnesse.testutil.FailFixture-!|\n\n|!-fitnesse.testutil.FailFixture-!|\n" ); PageData data = pageTwo.getData(); data.setAttribute("Prune"); pageTwo.commit(data); String results = runSuite(); assertSubString("href=\\\"#TestOne1\\\"", results); assertNotSubString("href=\\\"#TestTwo2\\\"", results); assertSubString("1 right", results); assertSubString("0 wrong", results); assertSubString("name=\"TestOne1\"", results); assertNotSubString("id=\"TestTwo2\"", results); assertSubString("PassFixture", results); assertNotSubString("FailFixture", results); }
public void setUp() throws Exception { String hp = hostPort; hostPort = hostPort + "/chrootasynctest"; super.setUp(); LOG.info("Creating client {}", getTestName()); ZooKeeper zk = createClient(hp); try { zk.create("/chrootasynctest", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
public VerifyingFileFactory build() { return new VerifyingFileFactory(this); }
public void testUndeserializable() throws Exception { byte[] data = { -84, -19, 0, 5, 115, 114, 0, 4, 84, 101, 115, 116, 2, 61, 102, -87, -28, 17, 52, 30, 2, 0, 1, 73, 0, 9, 115, 111, 109, 101, 116, 104, 105, 110, 103, 120, 112, 0, 0, 0, 5 }; assertNull(ex.deserialize(data)); }
public void testVirtualPageIndication() throws Exception { pageRenderingSetUp(); WikiPage targetPage = crawler.addPage(root, PathParser.parse("TargetPage")); crawler.addPage(targetPage, PathParser.parse("ChildPage")); WikiPage linkPage = (BaseWikiPage) crawler.addPage(root, PathParser.parse("LinkPage")); VirtualCouplingExtensionTest.setVirtualWiki(linkPage, "http://localhost:" + FitNesseUtil.port + "/TargetPage"); FitNesseUtil.startFitnesse(root); SimpleResponse response = null; try { response = requestPage("LinkPage.ChildPage"); } finally { FitNesseUtil.stopFitnesse(); } assertSubString("<body class=\"virtual\">", response.getContent()); }
void preChange(String path, DataNode node);  void postChange(String path, DataNode node);  long getDigest(); }
private String concatenateItems(String existingItem, String value) { StringBuilder buffer = new StringBuilder(); buffer.append(existingItem); buffer.append(','); buffer.append(value); return buffer.toString(); }
protected TestRun createTestRun(List<WikiPage> pages) { return JUnitHelper.createTestRun(context, pages); }
public void normalSuiteRunProducesSuiteResultFile() throws Exception { TestSummary counts = new TestSummary(2,0,0,0); XmlFormatter.setTestTime("12/5/2008 01:19:00"); String resultsFileName = String.format("%s/SuitePage/20081205011900_%d_%d_%d_%d.xml", context.getTestHistoryDirectory(), counts.getRight(), counts.getWrong(), counts.getIgnores(), counts.getExceptions()); File xmlResultsFile = new File(resultsFileName); if (xmlResultsFile.exists()) xmlResultsFile.delete(); addTestToSuite("SlimTest", simpleSlimDecisionTable); runSuite(); waitForFileToBeCreated(xmlResultsFile); FileInputStream xmlResultsStream = new FileInputStream(xmlResultsFile); XmlUtil.newDocument(xmlResultsStream); xmlResultsStream.close(); xmlResultsFile.delete(); }
public void delete() throws IOException { throw new UnsupportedOperationException(); }
public void tableMethodThrowsException() throws Exception { makeTableTableAndBuildInstructions(tableTableHeader + "|2|4|\n"); Map<String, Object> pseudoResults = SlimCommandRunningClient.resultToMap( asList( asList("tableTable_id_0", "OK"), asList("tableTable_id_1", "Exception: except") ) ); SlimAssertion.evaluateExpectations(assertions, pseudoResults); assertEquals("[[error(Exception: except), argument], [2, 4]]", tt.getTable().toString());
public void onePairHash() throws Exception { HashWidget widget = new HashWidget(new MockWidgetRoot(), "!{a:b}"); assertThat(widget.render(), matches(HTML_FOR_AB_HASH)); }
public void hit(WikiPage page) throws Exception { foundPages.add(page); }
protected void createMapReceptorInstance() { Object created = statementExecutor.create(MY_INSTANCE, mapReceptorClassName(), new Object[] {}); assertEquals("OK", created); }
public void shouldDeserializeFromGenericTypeOneParam() { InputStream stream = new ByteArrayInputStream( "{'entity':{'name':'Brutus','age':7,'birthday':'06/01/1987'}}".getBytes()); ResourceClass resourceClass = new DefaultResourceClass(ExtGenericController.class); Method method = new Mirror().on(GenericController.class).reflect().method("method").withAnyArgs(); ResourceMethod resource = new DefaultResourceMethod(resourceClass, method); when(provider.parameterNamesFor(resource.getMethod())).thenReturn(new String[] { "entity" }); Object[] deserialized = deserializer.deserialize(stream, resource); Dog dog = (Dog) deserialized[0]; assertThat(dog.name, equalTo("Brutus")); }
public void write(int oneByte) throws IOException { byte[] buf = new byte[1]; buf[0] = (byte)oneByte; write(buf, 0, 1); }
boolean touchSession(long sessionId, int sessionTimeout);  void setSessionClosing(long sessionId);  void shutdown();  void removeSession(long sessionId); void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter); }
private List<Object> prepareInstruction() { List<Object> instruction = new ArrayList<Object>(); instruction.add(makeInstructionTag(instructionNumber)); instructionNumber++; return instruction; }
public Matcher whitespace() { matches.add(new ScanMatch() { public Maybe<Integer> match(ScanString input, int offset) { int length = input.whitespaceLength(offset); return length > 0 ? new Maybe<Integer>(length) : Maybe.noInteger; } }); return this; }
public int previousIndex() { if (prev == null) { return -1; } if (cache == null) { cache = toArray(); } return prev.index; }
public void buildFullySpecifiedTestSystemNameAndIdentifierForDebugRun() throws Exception { WikiPage testPage = WikiPageUtil.addPage(root, PathParser.parse("TestPage"), "!define TEST_SYSTEM {system:A}\n" + "!define TEST_RUNNER {runner}\n"); WikiPageDescriptor descriptor = new WikiPageDescriptor(testPage, true, false, ""); MockClientBuilder clientBuilder = new MockClientBuilder(descriptor); String testSystemName = clientBuilder.getTestSystemName(); Assert.assertEquals("system:A:runner", testSystemName); }
public Object instantiate(Target<?> target, Parameters parameters) { if (!parameters.hasRelatedTo(target)) { return null; } return delegateInstantiator.instantiate(target, parameters); }
public void setup() { this.mockery = new VRaptorMockery(); this.request = mockery.mock(HttpServletRequest.class); this.outjecter = mockery.mock(Outjecter.class); this.interceptor = new OutjectionInterceptor(request, outjecter); this.stack = mockery.mock(InterceptorStack.class); }
protected void serialize( DataTree dt, Map<Long, Integer> sessions, OutputArchive oa, FileHeader header) throws IOException {
public void emptyInstructionsForLibraryTable() throws Exception { buildInstructionsFor("||\n"); assertEquals(0, instructions.size()); }
public long skip(long n) throws IOException { return delegate.skip(n); }
public void initialize() {
private static int copy(InputStream input, OutputStream output) throws IOException { byte[] buffer = new byte[2048]; int count = 0; int n = 0; while (-1 != (n = input.read(buffer))) { output.write(buffer, 0, n); count += n; } return count; }
public void testTriggerConcentrateWatch(InvocationState state) throws Exception { for (String path : state.paths) { state.watchManager.triggerWatch(path, event, WatchedEvent.NO_ZXID);
public void enterPassesCorrectData() throws Exception { Parse table = doTableOf( row("start", "fit.testFxtr.TestActionFixture") + row("enter", "data", "42")); assertEquals(42, actionFixture().entered); }
static void usage() { System.err.println("ZooKeeper host:port cmd args"); System.err.println("\tcreate path data acl"); System.err.println("\tdelete path [version]"); System.err.println("\tset path data [version]"); System.err.println("\tget path [watch]"); System.err.println("\tls path [watch]"); System.err.println("\tgetAcl path"); System.err.println("\tsetAcl path acl"); System.err.println("\tstat path [watch]"); }
public boolean hasMessage() { return getMessage() != null; }
public void scriptTableWithBadConstructor() throws Exception { getResultsForPageContents("|Script|NoSuchClass|\n"); assertTestResultsContain("<span class=\"error\">Could not invoke constructor for NoSuchClass"); }
private String getOutputForResultWithCount(TestSystem.TestSummary testSummary) throws Exception { return getOutputForResultWithCount("SomePage", testSummary); }
public void canProvideVRaptor2SpecificApplicationScopedComponents() { checkAvailabilityFor(true, Config.class); }
public void addLicensesToAllFiles() throws Exception { FileUtil.makeDir(dir+"/x"); FileUtil.makeDir(dir+"/x/y"); String[] files = {"f1.java", "x/f2.java", "x/y/f3.java", "x/y/f4.java"}; for (String fileName : files) FileUtil.createFile(dir+"/"+fileName, "yyy\n"); LicenseManager.main(new String[] {dir+"/license", dir}); for (String fileName : files) assertEquals(licenseText + "yyy\n", FileUtil.getFileContent(dir+"/"+fileName));
private String doMakeHtml(String resource, FitNesseContext context, boolean firstTimeForNewPage) { HtmlPage html = context.pageFactory.newPage(); String title = firstTimeForNewPage ? "Page doesn't exist. Edit " : "Edit "; html.setTitle(title + resource + ":"); html.setPageTitle(new PageTitle(title + " Page:", PathParser.parse(resource), pageData.getAttribute(PageData.PropertySUITES))); html.setMainTemplate("editPage"); makeEditForm(html, resource, firstTimeForNewPage, context.defaultNewPageContent); return html.html(); }
public Map<String, Object> invokeAndGetResponse(List<Object> statements) throws IOException, SlimServerBadResponseException { if (statements.size() == 0) return new HashMap<String, Object>(); String instructions = ListSerializer.serialize(statements); writeString(instructions); int resultLength = getLengthToRead(); String results = null; results = reader.read(resultLength); List<Object> resultList = ListDeserializer.deserialize(results); return resultToMap(resultList); }
private static CallStatement createCallStatement(String id, String operation, List<Object> words, NameTranslator methodNameTranslator) { String instanceName = getWord(words, 2); String methodName = getWord(words, 3); Object[] args = makeArgsArray(words, 4); return new CallStatement(id, instanceName, methodName, args, methodNameTranslator); }
private Bootstrap configureBootstrapAllocator(Bootstrap bootstrap) { ByteBufAllocator testAllocator = TEST_ALLOCATOR.get(); if (testAllocator != null) { return bootstrap.option(ChannelOption.ALLOCATOR, testAllocator);
Serializer include(String... names);  Serializer recursive();  void serialize(); }
private boolean isVariableReference(String arg) { return arg.charAt(0) == '$'; }
public void translatesWithDayIncrements() { SystemClock.instance = new TestClock(new GregorianCalendar(2002, 2, 4, 15, 6, 7).getTime()); ParserTest.assertTranslatesTo("!today +5", "09 Mar, 2002"); ParserTest.assertTranslatesTo("!today -5", "27 Feb, 2002"); }
protected void deleteSubscriptionState(final ByteString topic, final ByteString subscriberId, final Callback<Void> callback, final Object ctx) { zk.delete(topicSubscriberPath(topic, subscriberId), -1, new SafeAsyncZKCallback.VoidCallback() { @Override
synchronized public void waitForDisconnected(long timeout) throws InterruptedException, TimeoutException { long expire = Time.currentElapsedTime() + timeout; long left = timeout; while(connected && left > 0) { wait(left); left = expire - Time.currentElapsedTime(); } if (connected) { throw new TimeoutException("Did not disconnect");
public Float convert(String value, Class<? extends Float> type) { if (value == null || value.equals("")) { return null; } try { return Float.valueOf(value);
void report(String report) throws KeeperException, InterruptedException; }  void setReporter(Reporter r);  void configure(String params);  void start();  void stop(); }
protected void setUp() throws Exception { LOG.info("Client test setup"); tmpDir = File.createTempFile("test", ".junit", baseTest); tmpDir = new File(tmpDir + ".dir"); tmpDir.mkdirs(); ServerStats.registerAsConcrete(); ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000); f = new NIOServerCnxn.Factory(33221); f.startup(zks); Thread.sleep(5000); LOG.info("Client test setup finished"); }
public void testMatches() throws Exception { assertMatches("!-literal-!"); assertMatches("!-this is a literal-!"); assertMatches("!-this is\n a literal-!"); assertMatches("!- !- !-this is a literal-!"); assertMatches("!-!literal-!"); assertMatches("!--!"); assertNoMatch("!-no"); assertNoMatch("! -no-!"); assertMatchEquals("!-no-!-!", "!-no-!"); }
void setCell(int col, int row, Result response); void appendToCell(int col, int row, Result response); }
public static FitNesseContext makeTestContext(WikiPage root) { return makeTestContext(root, PORT); }
public void testAddRemove() { Watcher watcher1 = new DummyWatcher(); Watcher watcher2 = new DummyWatcher(); watchManager.addWatch("/a", watcher1, WatcherMode.PERSISTENT_RECURSIVE); watchManager.addWatch("/b", watcher2, WatcherMode.PERSISTENT_RECURSIVE); assertEquals(2, watchManager.getRecursiveWatchQty()); assertTrue(watchManager.removeWatcher("/a", watcher1)); assertTrue(watchManager.removeWatcher("/b", watcher2)); assertEquals(0, watchManager.getRecursiveWatchQty()); }
private void makeTestResponse(String pageName) throws Exception { WikiPage root = InMemoryPage.makeRoot("RooT"); FitNesseContext context = FitNesseUtil.makeTestContext(root); WikiPage page = WikiPageUtil.addPage(root, PathParser.parse(pageName), "original content ${requestParam}"); PageData data = page.getData(); WikiPageProperties properties = data.getProperties(); properties.set(PageData.PropertySUITES, "New Page tags"); data.setContent("new stuff"); VersionInfo commitRecord = last(page.getVersions()); oldVersion = commitRecord.getName(); page.commit(data); MockRequest request = new MockRequest(); request.setResource(pageName); request.addInput("version", oldVersion); request.addInput("requestParam", "requestValue"); Responder responder = new VersionResponder(); response = (SimpleResponse) responder.makeResponse(context, request); }
public void testNormalPageDoesNotRequireAuthentication() throws Exception { String insecurePageName = "InsecurePage"; WikiPagePath insecurePagePath = PathParser.parse(insecurePageName); crawler.addPage(root, insecurePagePath); request.setResource(insecurePageName); assertFalse(sro.shouldAuthenticate(context, request)); }
public XmlSerializer exclude(String fieldName) { this.excludes .add(fieldName); return this; }
public void testOutputChunk(TestPage testPage, String output) { writeData(output); }
public void run() { try { client.authenticate(username, password);
public void sendPageData(PageData pageData) throws Exception { testTables.clear(); symbols.clear(); exceptions.clear(); testSummary.clear(); runTestsOnPage(pageData); String wikiText = generateWikiTextForTestResults(); pageData.setContent(wikiText); testResults = pageData; acceptOutputFirst(pageData.getHtml()); acceptResultsLast(testSummary); }
BlockingQueue<Operation> createWriteOperationQueue();  NodeLocator createLocator(List<MemcachedNode> nodes);  OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon();  Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode(); }
public byte[] getData(String path, boolean watch, Stat stat) throws KeeperException, InterruptedException { return getData(path, getDefaultWatcher(watch), stat); }
private void setTestAttributeForPage(WikiPage page) throws Exception { PageData data = page.getData(); data.setAttribute("Test", "true"); page.commit(data); }
public void setUp() throws Exception { suitePageName = "SuitePage"; root = InMemoryPage.makeRoot("RooT"); pageBuilder = root.getPageCrawler(); pageBuilder.addPage(root, PathParser.parse("TestPageOne"), "TestPageOne has some testing content and a child"); WikiPage child = pageBuilder.addPage(root, PathParser.parse("TestPageOne.ChildPage"), "ChildPage is a child of TestPageOne"); PageData data = child.getData(); data.setAttribute("Test"); child.commit(data); pageBuilder.addPage(root, PathParser.parse("TestPageTwo"), "TestPageTwo has a bit of content too"); request = new MockRequest(); request.setResource(suitePageName); context = FitNesseUtil.makeTestContext(root); runner = new SuiteSpecificationRunner(root); }
private boolean useManualStartForTestSystem() { if (descriptor.isDebug()) { String useManualStart = descriptor.getVariable(MANUALLY_START_TEST_RUNNER_ON_DEBUG); return (useManualStart != null && useManualStart.toLowerCase().equals("true")); } return false; }
public long incr(String key, int by) { return mutate(Mutator.incr, key, (long)by, 0, -1); }
public void shouldHandlePrimitiveFloat() throws SecurityException, NoSuchMethodException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException { Class<?> type = creator.typeFor(mockery.method(DogAlike.class.getDeclaredMethod("dig", float.class))); Method getter = type.getDeclaredMethod("getFloat"); Method setter = type.getDeclaredMethod("setFloat", float.class); Object instance = type.newInstance(); float f = 1.0f; setter.invoke(instance, f); assertEquals(getter.invoke(instance), f); mockery.assertIsSatisfied(); }
public String toString() { return group + ": " + positionInGroup; }
private NodeList getMatchingTags(NodeFilter filter) throws Exception { String html = examiner.html(); Parser parser = new Parser(new Lexer(new Page(html))); NodeList list = parser.parse(null); NodeList matches = list.extractAllNodesThatMatch(filter, true); return matches; }
public int score(int frame) { return bowlingScorer.score(frame); }
private void removeOrphans(WikiPage context) throws Exception { for(WikiPagePath orphan : orphans) {
public void shouldAccessList() { Client c = client(1L); c.emails = Arrays.asList("blue", "red"); assertThat((String) evaluator.get(c, "client.emails[1]"), is(equalTo("red"))); }
public void newTestStarted_SwitchesResultRepositoryToCurrentTest() throws Exception{ TestPage wp=buildNestedTestPage(); TimeMeasurement timeMeasurement = new TimeMeasurement(); jf.newTestStarted(wp, timeMeasurement.start()); verify(mockResultsRepository).open(nestedPageName); }
public void debug(String message) { if (verbose) { log.info(message);
List<WikiPage> getChildren(); String getName(); PageData getData(); ReadOnlyPageData readOnlyData(); Collection<VersionInfo> getVersions(); WikiPage getVersion(String versionName); String getHtml(); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); @Deprecated
public static void configureSSLAuth() throws ConfigException { try (ClientX509Util clientX509Util = new ClientX509Util()) { String sslAuthProp = ProviderRegistry.AUTHPROVIDER_PROPERTY_PREFIX
public void run() { if ( mSuccess ) {
public boolean hasRecentFiles() { Cursor cursor = fetchAllFiles(); return cursor.getCount() > 0; }
protected void performExecution() throws Exception { executeTestPages(); if (response.isXmlFormat()) { addFinalCounts(); } completeResponse(); }
public void shouldThreatViewParameterAsAjax() { final HttpServletRequest request = mockery.mock(HttpServletRequest.class); mockery.checking(new Expectations() { { one(request).getRequestURI(); will(returnValue("")); one(request).getParameter("view"); will(returnValue("ajax")); } }); assertThat(Info.isAjax(request), is(equalTo(true))); mockery.assertIsSatisfied(); }
public void voidMethod() { } public int increment() { return count++; } public Calendar useCalendar(Calendar calendar) { return calendar; } public ListTree plus12(ListTree t1, ListTree t2) { return new ListTree("", new ListTree[]{ t1, t2 }); } }
public void processResult(int rc, String path, Object ctx, List<String> children, Stat stat) { ((List<Integer>)ctx).add(rc); opsCount.countDown(); }
public void testPageMatchesQueryWithMultipleAttributes() throws Exception { String[] suites = new String[0]; Map<String, Boolean> attributes = new HashMap<String, Boolean>(); searcher = new AttributeWikiPageFinder(this, Arrays.asList("Test"), attributes, suites, false, false); setupRequestInputAndPageProperty("Test", attributes, true, page, null); setupRequestInputAndPageProperty("Suite", attributes, true, page, null); assertFalse(searcher.pageMatches(page)); setupRequestInputAndPageProperty("Test", attributes, true, page, "true"); setupRequestInputAndPageProperty("Suite", attributes, false, page, null); assertTrue(searcher.pageMatches(page)); setupRequestInputAndPageProperty("Test", attributes, false, page, "true"); setupRequestInputAndPageProperty("Suite", attributes, false, page, null); assertFalse(searcher.pageMatches(page)); setupRequestInputAndPageProperty("Test", attributes, false, page, null); setupRequestInputAndPageProperty("Suite", attributes, false, page, "true"); assertFalse(searcher.pageMatches(page)); }
private void assertBuildsOption(String page, String[] properties, String option, String variable, String result) throws Exception { assertBuilds(page, properties, option, "", result); assertBuilds(page, properties, "", variable, result); }
public String readString(String tag) throws IOException; public byte[] readBuffer(String tag) throws IOException; public void readRecord(Record r, String tag) throws IOException; public void startRecord(String tag) throws IOException; public void endRecord(String tag) throws IOException; public Index startVector(String tag) throws IOException; public void endVector(String tag) throws IOException; public Index startMap(String tag) throws IOException; public void endMap(String tag) throws IOException; }
ChangeRecord duplicate(long zxid) { StatPersisted stat = new StatPersisted(); if (this.stat != null) { DataTree.copyStatPersisted(this.stat, stat); } ChangeRecord changeRecord = new ChangeRecord(zxid, path, stat, childCount, acl == null ? new ArrayList<>() : new ArrayList<>(acl)); changeRecord.precalculatedDigest = precalculatedDigest; changeRecord.data = data; return changeRecord; }
public void addException(Exception e) { exceptions.add(e); }
private void expectGetAndReturn(String k, Object value) { clientMock.expects(once()).method("get").with(eq(k), same(transcoder)) .will(returnValue(value));
public void canReadTestExecutionReport() throws Exception { TestExecutionReport original = new TestExecutionReport(); original.version = "version"; original.rootPath = "rootPath"; StringWriter writer = new StringWriter(); original.toXml(writer, VelocityFactory.getVelocityEngine()); ExecutionReport report = ExecutionReport.makeReport(writer.toString()); assertTrue(report instanceof TestExecutionReport); }
public long getConfigVersion();  public String getQuorumSystemInfo();  public boolean isPartOfEnsemble(); }
long getOutstandingRequests();  int getSessionTimeout();  void terminateSession();  void terminateConnection();  long getMinLatency();  long getAvgLatency();  long getMaxLatency();  String getLastOperation();  String getLastCxid();  String getLastZxid();  String getLastResponseTime();  long getLastLatency();  void resetCounters(); }
void sendBuffer(ByteBuffer bb) { synchronized (factory) { try {
protected void onNewIntent(Intent intent) { super.onNewIntent(intent); mGroup = processSearchIntent(intent); assert(mGroup != null); }
public void canGetRedirectResponse() throws Exception { final SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); final String body = response.getContent(); assertEquals("",body); assertEquals(response.getStatus(),303);
private Collection<Route> routesMatchingUriAndMethod(String uri, HttpMethod method) { Collection<Route> routesMatchingMethod = Collections2.filter(routesMatchingUri(uri), Filters.allow(method)); if (routesMatchingMethod.isEmpty()) { EnumSet<HttpMethod> allowed = allowedMethodsFor(uri); throw new MethodNotAllowedException(allowed, method); } return routesMatchingMethod; }
private void cleanQueue(){ stop = true; ToSend ts = incomingQueue.poll(); while(ts != null){ switch(ts.type){
public void commit(long zxid) { synchronized(this){ lastCommitted = zxid; } QuorumPacket qp = new QuorumPacket(Leader.COMMIT, zxid, null, null); sendPacket(qp); ServerMetrics.COMMIT_COUNT.add(1); }
public void shouldGetPagesFromPageContent() throws Exception { String page = "<table><tr><td>Suite</td></tr><tr><td>Title</td><td>Test</td></tr><tr><td>Content</td><td>has.*content</td></tr></table>"; assertTrue(runner.getPageListFromPageContent(page)); assertEquals(2, runner.testPageList.size()); }
public void usesTheLastConverterInstanceRegisteredForTheSpecifiedType() { converters.register(MyConverter.class); converters.register(MySecondConverter.class); mockery.checking(new Expectations() { { one(container).instanceFor(MySecondConverter.class); will(returnValue(new MySecondConverter())); } }); Converter<?> found = converters.to(MyData.class, container); assertThat(found.getClass(), is(typeCompatibleWith(MySecondConverter.class))); mockery.assertIsSatisfied(); }
public void onFollowerStarted(QuorumPeer qp, Follower newFollower);  public void onFollowerShutdown(QuorumPeer qp, Follower follower); }
public void onException(boolean showMessage) { if (showMessage) { Toast.makeText(this, R.string.fingerprint_error, Toast.LENGTH_SHORT).show();
public final void start(ServletContext context) { logger.warn("PicoProvider is deprecated. Use SpringProvider for VRaptor instead"); ComponentRegistry componentRegistry = getComponentRegistry(); registerBundledComponents(componentRegistry); this.picoContainer.addComponent(context); BasicConfiguration config = new BasicConfiguration(context); Scanner scanner = new ReflectionsScanner(config); this.picoContainer.addComponent(scanner); registerAnnotatedComponents(scanner, componentRegistry); getComponentRegistry().init(); StereotypedComponentRegistrar componentRegistrar = picoContainer.getComponent(StereotypedComponentRegistrar.class); componentRegistrar.registerFrom(scanner); registerCustomComponents(picoContainer, scanner); picoContainer.start(); registerCacheComponents(); }
public void buildFullySpecifiedTestSystemNameForDebugRun() throws Exception { WikiPage testPage = WikiPageUtil.addPage(root, PathParser.parse("TestPage"), "!define TEST_SYSTEM {system}\n" + "!define TEST_RUNNER {runner}\n"); WikiPageDescriptor wikiPageDescriptor = new WikiPageDescriptor(testPage, true, false, ""); String testSystemType = wikiPageDescriptor.getTestSystemType(); Assert.assertEquals("system", testSystemType); }
synchronized void updateProposal(long leader, long zxid, long epoch){ if(LOG.isDebugEnabled()){ LOG.debug("Updating proposal: " + leader + " (newleader), " + zxid + " (newzxid), " + proposedLeader + " (oldleader), " + proposedZxid + " (oldzxid)"); } proposedLeader = leader; proposedZxid = zxid; proposedEpoch = epoch; }
protected List list(Parse rows) { List result = new LinkedList(); while(rows != null) { result.add(rows); rows = rows.more; } return result; }
public Object invoke(Object proxy, Object[] args) { LOGGER.warn("Trying to invoke the original method for an interface Proxy. You should be checking if " + "the proxy is for an interface first. Better to avoid doing this."); return null; }
private void setCredentials(Request request, byte[] inputToken) throws GSSException, UnsupportedEncodingException {  GSSContext gssContext = manager.createContext(serverCreds); byte[] replyTokenBytes = gssContext.acceptSecContext(inputToken, 0, inputToken.length); String replyToken = replyTokenBytes == null ? null : new String(Base64.encode(replyTokenBytes), FileUtil.CHARENCODING); if (!gssContext.isEstablished()) request.setCredentials(null, replyToken);
public void create(String instanceName, String className, Object... args) throws SlimException { try { context.create(instanceName, className, args);
public void addRows(String text) throws Exception { Matcher match = pattern.matcher(text); if (match.find()) { new TableRowWidget(this, match.group(2), isLiteralTable);
public Element makeRootElement(Document document) { Element root = document.createElement("properties"); List<String> keys = new ArrayList<String>(keySet()); Collections.sort(keys); for (String key : keys) { WikiPageProperty childProperty = getProperty(key); toXml(childProperty, key, document, root); } return root; }
public void getsChildren() { TestRoot root = new TestRoot(); WikiPage page = root.makePage("PageOne"); root.makePage(page, "PageTwo"); root.makePage(page, "PageThree"); WikiSourcePage source = new WikiSourcePage(page); ArrayList<String> names = new ArrayList<>(); for (SourcePage child: source.getChildren()) names.add(child.getName()); assertEquals(2, names.size()); assertTrue(names.contains("PageTwo")); assertTrue(names.contains("PageThree")); }
private Answer<FitNesseContext> fitNesseContextWith(final FitNesse fitNesse) { return invocation -> { FitNesseContext fitNesseContext = (FitNesseContext) invocation.callRealMethod();
public Result pass(String message) { return new PlainResult(message); }
<T> String urlFor(Class<T> type, Method method, Object... params);  List<Route> allRoutes(); RouteBuilder builderFor(String uri); EnumSet<HttpMethod> allowedMethodsFor(String uri); }
public void shouldCallMethodOnGivenInstanceBeforeTryingToInvokeOnSystemUnderTest() { MyAnnotatedFixture myInstance = createAnnotatedFixture(); Object result = statementExecutor.call("myInstance", "echo"); assertEquals("/__VOID__/", result); assertTrue(myInstance.called); assertFalse(myInstance.sut.called); }
public static MBeanServerConnection jmxConn() throws IOException { return JMXEnv.conn(); }
private Response makePageHistoryResponse(Request request) throws UnsupportedEncodingException { page.setTitle("Page History"); page.put("pageHistory", pageHistory); page.setNavTemplate("viewNav"); page.put("viewLocation", request.getResource()); page.setMainTemplate("pageHistory"); return makeResponse(request); }
public void translatesMonthsFromTodays() { ParserTestHelper.assertTranslatesTo("!monthsFromToday", "04 Mar, 2003"); ParserTestHelper.assertTranslatesTo("!monthsFromToday -t", "04 Mar, 2003 15:06"); ParserTestHelper.assertTranslatesTo("!monthsFromToday -xml", "2003-03-04T15:06:07"); ParserTestHelper.assertTranslatesTo("!monthsFromToday (MMM)", "Mar"); ParserTestHelper.assertTranslatesTo("!monthsFromToday (dd MMM)", "04 Mar"); ParserTestHelper.assertTranslatesTo("!monthsFromToday (dd MMM", "!monthsFromToday (dd MMM"); ParserTestHelper.assertTranslatesTo("!monthsFromToday -t.", "04 Mar, 2003 15:06."); ParserTestHelper.assertTranslatesTo("!monthsFromToday -xml.", "2003-03-04T15:06:07."); }
public void checkSetFactory() { if (delegate != null) { delegate.checkSetFactory();
public AnnotationVisitor visitArray(final String name) { if (values == null) { values = new ArrayList(desc != null ? 2 : 1); } if (desc != null) { values.add(name); } List array = new ArrayList(); values.add(array); return new AnnotationNode(array); }
public void execute() { if (control == null || !control.isDirectory()) { throw new BuildException("you need to point the 'control' attribute to the control directory"); } if (dataProducers.size() == 0) { throw new BuildException("you need to provide at least one pointer to a tgz or directory with the data"); } if (deb == null) { throw new BuildException("you need to point the 'destfile' attribute to where the deb is supposed to be created"); } final File[] controlFiles = control.listFiles(); final DataProducer[] data = new DataProducer[dataProducers.size()]; dataProducers.toArray(data); final Processor processor = new Processor(new Console() { public void println(String s) { log(s); } }); try { processor.createDeb(controlFiles, data, new FileOutputStream(deb)); } catch (Exception e) { log("failed to create dbeian archive " + e); } log("created " + deb); }
public void testCASAppendSuccess() throws Exception { final String key = "append.key"; assertTrue(client.set(key, 5, "test").get()); CASValue<Object> casv = client.gets(key); assertTrue(client.append(casv.getCas(), key, "es").get()); assertEquals("testes", client.get(key)); }
protected WikiPage createInternalSymbolicPage(String linkPath, String linkName, BaseWikiPage parent) { WikiPagePath path = PathParser.parse(linkPath); if (path == null) { return null; } WikiPage start = (path.isRelativePath()) ? parent.getParent() : parent;
public void extractValueFromResponse() throws Exception { setValue(null); if (type.equals("contents")) setValue(Utils.unescapeHTML(FitnesseFixtureContext.sender.sentData()));
public int size() { int size = 0; for(BitHashSet watches : pathWatches.values()) { size += watches.size(); } return size; }
void containsWatcher(String path, Watcher watcher, WatcherType watcherType) throws NoWatcherException { boolean containsWatcher = false; switch (watcherType) { case Children: { synchronized (childWatches) { containsWatcher = contains(path, watcher, childWatches); } break; } case Data: { synchronized (dataWatches) { containsWatcher = contains(path, watcher, dataWatches); } synchronized (existWatches) { boolean contains_temp = contains(path, watcher, existWatches); containsWatcher |= contains_temp; } break; } case Any: { synchronized (childWatches) { containsWatcher = contains(path, watcher, childWatches); } synchronized (dataWatches) { boolean contains_temp = contains(path, watcher, dataWatches); containsWatcher |= contains_temp; } synchronized (existWatches) { boolean contains_temp = contains(path, watcher, existWatches); containsWatcher |= contains_temp; } } }
public void shouldNotComplainAboutNull() { assertThat(converter.convert(null, BigDecimal.class, bundle), is(nullValue())); }
public void translatesWithDayIncrementsAndCustomFormat() { SystemTimeKeeper.instance = new TestTimeKeeper(new GregorianCalendar(2002, 2, 4, 15, 6, 7).getTime()); ParserTestHelper.assertTranslatesTo("!today (ddMMM) +5", "09Mar"); }
public void removeVersion(FileSystemPage page, String versionName); public void prune(FileSystemPage page); public boolean isExternalRevisionControlEnabled(); }
private void getChildPage(String childName) throws Exception { childPage = crawler.getPage(root, PathParser.parse("TestPage."+ childName)); childPageData = childPage.getData(); }
private int nextBallForSpare(int firstBall) { return rolls[firstBall+2]; }
public String decode(CachedData d) { assert d.getFlags() == flags : "expected " + flags + " got " + d.getFlags(); ByteBuffer bb = ByteBuffer.wrap(d.getData()); int keyLength = bb.getInt(); byte[] keyBytes = new byte[keyLength]; bb.get(keyBytes); String k = new String(keyBytes); assertEquals(key, k); int valueLength = bb.getInt(); byte[] valueBytes = new byte[valueLength]; bb.get(valueBytes); return new String(valueBytes); }
public void shouldFoundAGetterWithAProxyObject() throws Exception { final House aSimpleJavaBeans = new House(); House beanProxified = proxify(aSimpleJavaBeans); final List<Method> methodsOfHouseClass = Arrays.asList(House.class.getMethods()); Method foundMethod = new ReflectionBasedNullHandler(proxifier).findGetter(beanProxified, "Mouse"); assertThat(methodsOfHouseClass, hasItem(foundMethod)); assertTrue(Mouse.class.isAssignableFrom(foundMethod.getReturnType())); assertThat(foundMethod.getName(), is(startsWith("getMouse"))); }
public Object unmarshal(HierarchicalStreamReader arg0, UnmarshallingContext arg1) { return null; }
public void testDigestAuthDisabledTriggersAuthFailed() throws Exception { ZooKeeper zk = createClient(); try { zk.addAuthInfo("digest", "roger:muscadet".getBytes());
public String valueOfTagWithIdIs(String id) throws Exception { return getValueOfTagWithAttributeValue("id", id); }
protected void performOperation(FileSystemPage page) throws Exception { page.execute(CHECKOUT); }
private String getBootClasspath() throws Exception { Set<String> classpath = new HashSet<String>(); addToClasspath(SCALA_GROUPID, SCALA_LIBRARY_ARTIFACTID, scalaVersion, classpath); return MainHelper.toMultiPath(classpath.toArray(new String[classpath.size()])); }
public Double convert(String value, Class<? extends Double> type, ResourceBundle bundle) { if (isNullOrEmpty(value)) { return 0d; } try { final Locale locale = localization.getLocale();
public void define() { assertParsesWithOffset("!define TEST_SYSTEM {slim}\n", "SymbolList<0..27>[Define<0..26>[Text<-1..-1>, Text<-1..-1>], Newline<26..27>]");
public void setup() { System.setProperty(NettyServerCnxnFactory.PORT_UNIFICATION_KEY, Boolean.TRUE.toString()); clientX509Util = new ClientX509Util(); String testDataPath = System.getProperty("test.data.dir", "src/test/resources/data"); System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY, "org.apache.zookeeper.server.NettyServerCnxnFactory"); System.setProperty(ZKClientConfig.ZOOKEEPER_CLIENT_CNXN_SOCKET, "org.apache.zookeeper.ClientCnxnSocketNetty"); System.setProperty(ZKClientConfig.SECURE_CLIENT, "true"); System.setProperty(clientX509Util.getSslKeystoreLocationProperty(), testDataPath + "/ssl/testKeyStore.jks"); System.setProperty(clientX509Util.getSslKeystorePasswdProperty(), "testpass"); System.setProperty(clientX509Util.getSslTruststoreLocationProperty(), testDataPath + "/ssl/testTrustStore.jks"); System.setProperty(clientX509Util.getSslTruststorePasswdProperty(), "testpass"); }
public void outjectsToResponseIfAjax() throws InterceptionException, IOException, NoSuchMethodException { outjecter.include("author", "Guilherme"); StringWriter content = new StringWriter(); final PrintWriter writer = new PrintWriter(content); final ResourceMethod method = mockery.methodFor(MyComponent.class, "ajaxed"); mockery.checking(new Expectations() { { one(info).isAjax(); will(returnValue(true)); one(response).setContentType("application/json"); one(response).setCharacterEncoding("UTF-8"); one(response).getWriter(); will(returnValue(writer)); } }); interceptor.intercept(stack, method, null); assertThat(content.getBuffer().toString(), is(equalTo("{\"author\":\"Guilherme\"}"))); mockery.assertIsSatisfied(); }
public void testGetBulkTimeout() { tryTimeout("getbulk", new Runnable() {public void run() { client.getBulk("k", "k2");
public int hashCode() { return (int) (getType() * 35 + path.hashCode() + (stat == null ? 0 : stat.getMzxid())); }
public void shouldCallCloseOnClosableTestSystemListener() throws TestExecutionException, IOException { WikiPage testPage = addTestPage(suite, "TestPage1", "!define TEST_SYSTEM {A}"); ClosableTestSystemListener listener = mock(ClosableTestSystemListener.class); PagesByTestSystem pagesByTestSystem = new PagesByTestSystem(asList(testPage), context.getRootPage()); MultipleTestsRunner runner = new MultipleTestsRunner(pagesByTestSystem, testSystemFactory); runner.addTestSystemListener(listener); runner.executeTestPages(); verify(listener).close(); }
public void testSingleObserver() throws IOException{ ClientBase.setupTestEnv(); final int CLIENT_PORT_QP1 = 3181; String quorumCfgSection = "server.1=localhost:" + (CLIENT_PORT_QP1 + 1) + ":" + (CLIENT_PORT_QP1 + 2) + "\npeerType=observer"; MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection); q1.start(); assertFalse("Observer shouldn't come up", ClientBase.waitForServerUp("localhost:" + CLIENT_PORT_QP1, CONNECTION_TIMEOUT)); q1.shutdown(); }
public void shouldAcceptAlways() { assertTrue(interceptor.accepts(null)); }
public byte[] take() throws KeeperException, InterruptedException { TreeMap<Long,String> orderedChildren;
public void testBadSaslAuthNotifiesWatch() throws Exception { ZooKeeper zk = createClient(); Thread.sleep(1000); Assert.assertEquals(authFailed.get(),1); zk.close(); }
public Maybe<String> findVariable(String name) { if (!cache.inCache(page)) {
void incrementIgnoredTestsCount(); void increment(ExecutionResult testSummary); void increment(TestSummary testSummary); TestPage getPageToTest(); void setCurrentScript(Class<? extends ScriptTable> scriptTableClass, String actorName); Class<? extends ScriptTable> getCurrentScriptClass(); String getCurrentScriptActor(); }
public ResourceMethod parse(String uri, HttpMethod method, MutableRequest request) { for (Rule rule : rules) { ResourceMethod value = rule.matches(uri, method, request); if (value != null) { return value; } } return null; }
public <T> String urlFor(Class<T> type, Method method, Object... params) { for (Route route : routes) { if (route.canHandle(type, method)) { try { DefaultResourceMethod resourceMethod = new DefaultResourceMethod(new DefaultResourceClass(type), method); return route.urlFor(type, method, creator.instanceWithParameters(resourceMethod, params)); } catch (Exception e) { throw new VRaptorException("The selected route is invalid for redirection: " + type.getName() + "." + method.getName(), e); } } } throw new RouteNotFoundException("The selected route is invalid for redirection: " + type.getName() + "." + method.getName());
private static int[] littleEndianToInt(byte[] bs, int off, int count) { int[] ns = new int[count]; for (int i = 0; i < ns.length; ++i) { ns[i] = Pack.littleEndianToInt(bs, off); off += 4; } return ns; }
WikiPage getVersion(String versionName); String getHtml(); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage(); String getVariable(String name); List<String> getXrefPages(); }
public static void initialize() { synchronized (ProviderRegistry.class) { if (initialized)
public String getHtml() throws Exception { return translateToHtml(getSyntaxTree()); }
public void translatesLinkToNonExistent() { ParserTestHelper.assertTranslatesTo(new TestSourcePage().withTarget("NonExistentPage"), "[[tag][NonExistentPage]]", "tag<a title=\"create page\" href=\"NonExistentPage?edit&amp;nonExistent=true\">[?]</a>");
public void addEntry(long ledgerId, long entryId, ByteBuffer entry, WriteCallback cb, Object ctx) throws IOException, InterruptedException {
public boolean pageExists(WikiPage context, WikiPagePath path) { return getPage(context, path) != null; }
public void set(Object value) throws Exception { field.set(target, value); }
public void execute() throws InterceptionException { interceptorStack.add(ResourceLookupInterceptor.class); interceptorStack.add(URLParameterExtractorInterceptor.class); interceptorStack.add(InterceptorListPriorToExecutionExtractor.class); interceptorStack.add(DownloadInterceptor.class); interceptorStack.add(MultipartInterceptor.class); interceptorStack.add(instantiator); interceptorStack.add(ParametersInstantiatorInterceptor.class); if(shouldRegisterHibernateValidator) { interceptorStack.add(HibernateValidatorPluginInterceptor.class); } interceptorStack.add(ValidatorInterceptor.class); interceptorStack.add(ExecuteMethodInterceptor.class); interceptorStack.add(OutjectResult.class); interceptorStack.add(OutjectionInterceptor.class); interceptorStack.add(AjaxInterceptor.class); interceptorStack.add(ViewInterceptor.class); interceptorStack.next(null, null); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root"); crawler = root.getPageCrawler(); WikiPageUtil.addPage(root, PathParser.parse("TestPage")); childName = "ChildPage"; String childContent = "child content"; String pagetype = ""; request = new MockRequest(); request.setResource("TestPage"); request.addInput("pageName", childName); request.addInput("pageContent", childContent); request.addInput("pageType", pagetype); context = FitNesseUtil.makeTestContext(root); responder = new AddChildPageResponder(); path = PathParser.parse("TestPage.ChildPage"); }
private static String toHex(byte[] b) { final StringBuffer sb = new StringBuffer(); for (int i = 0; i < b.length; ++i) { sb.append(Integer.toHexString((b[i]>>4) & 0x0f)); sb.append(Integer.toHexString(b[i] & 0x0f)); } return sb.toString(); }
protected void pass(int col, int row) { String contents = table.getCellContents(col, row); String passingContents = String.format("!style_pass(%s)", contents); table.setCell(col, row, passingContents); }
public void initContainer() { container = new SpringBasedContainer("br.com.caelum.vraptor.ioc.spring"); container.start(null); }
public String getClientAddress();  public String getLearnerType();  public long getConfigVersion();  public String getQuorumSystemInfo();  public boolean isPartOfEnsemble(); }
public static DateFormat createDateFormat() { return new SimpleDateFormat("HH:mm dd.MM.yyyy"); }
private void verifyRenderWhenMissing(String optionAndPageName) throws Exception { IncludeWidget widget = createIncludeWidget(page1, optionAndPageName); assertHasRegexp("MissingPage.*does not exist", widget.render()); }
public void parse(String[] args) { if (args.length < 2 || args.length > 4) { throw new IllegalArgumentException("Invalid args:" + Arrays.toString(args)); } clientPort = Integer.parseInt(args[0]); dataDir = args[1]; dataLogDir = dataDir; if (args.length == 3) { tickTime = Integer.parseInt(args[2]); } if (args.length == 4) { maxClientCnxns = Integer.parseInt(args[3]);
public Object convert(String value, Class type) { if(value==null) {
private Response makeDirectoryListingPage(Request request) throws UnsupportedEncodingException { HtmlPage page = context.pageFactory.newPage(); page.setTitle("Files: " + resource);
public void definedStatementSsl_returnsSslClassName() { SlimService.Options options = SlimService.parseCommandLine(new String[]{"-ssl", "fitnesse.socketservice.SslParametersWiki", "8099"}); assertEquals("fitnesse.socketservice.SslParametersWiki", options.sslParameterClassName); }
protected FixtureWithNamedSystemUnderTestBase createNamedFixture() { createFixtureInstance(namedFixtureName()); return new FixtureWithNamedSystemUnderTestJsr223( (FixtureProxyJsr223) getVerifiedInstance());
public void testGetResponderKey() throws Exception { checkResponderKey("railroad", "railroad"); checkResponderKey("responder=railroad", "railroad"); checkResponderKey("", ""); }
String getPath(); String getFullPath(); String getContent(); boolean targetExists(String wikiWordPath); String makeFullPathOfTarget(String wikiWordPath); String findParentPath(String targetName); Maybe<SourcePage> findIncludedPage(String pageName); Collection<SourcePage> getChildren(); boolean hasProperty(String propertyKey); String getProperty(String propertyKey); }
protected void createFormatters() { if (response.isXmlFormat()) { mainFormatter = newXmlFormatter(); } else if (response.isTextFormat()) { mainFormatter = newTextFormatter(); } else if (response.isJavaFormat()) { mainFormatter = newJavaFormatter(); } else { mainFormatter = newHtmlFormatter(); } formatters.addTestSystemListener(mainFormatter); if (!request.hasInput("nohistory")) { formatters.addTestSystemListener(newTestHistoryFormatter()); } formatters.addTestSystemListener(newTestInProgressFormatter()); }
public void stopRecording(boolean report) { closeAllStreams(); replaceOriginalStreams(); reportStreams(report); nullAllStreams(); }
public void testReadWriteShortMax() { testReadWriteShort(Byte.MAX_VALUE); }
public void showExecutionLogInXmlFormat() throws Exception { request.addInput("format", "xml"); request.addInput("nochunk", "nochunk"); addTestToSuite("SlimTest", simpleSlimDecisionTable); String results = runSuite(); assertHasRegexp("<executionLog>", results); assertHasRegexp("<testSystem>fit:fit.FitServer</testSystem>", results); assertHasRegexp("<testSystem>slim:in-process</testSystem>", results); assertHasRegexp("<exitCode>0</exitCode>", results); assertHasRegexp("<stdOut>.*</stdOut>", results); assertHasRegexp("<stdErr>.*</stdErr>", results); }
public void testResultsHtml() { sendTwoSystemRunToFormatter(); assertPageBufferContains("document.getElementById(\"test-summaries\")"); assertPageBufferContains("document.getElementById(\"test-system-Fit:laughing.fit\").innerHTML"); assertPageBufferContains("document.getElementById(\"test-system-Slim:very.slim\").innerHTML"); assertPageBufferContains("<h2>Test System: Slim:very.slim</h2>"); assertPageBufferContains("<h2>Test System: Fit:laughing.fit</h2>"); }
private String content() { StringBuffer buffer = new StringBuffer(); buffer.append("This is the DefaultResponder page.<br>"); buffer.append("Because you can see this page something has gone wrong.<br>"); buffer.append("If you continue to get this page, please let us know how.<br>"); buffer.append("Thanks,<br>"); buffer.append("<ul><li><a href=\"mailto:micah@objectmentor.com\">The FitNesse development team.</a></ul>"); return buffer.toString(); }
public void testHtml() throws Exception { SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); assertEquals(200, response.getStatus()); String content = response.getContent(); assertSubString("Replace", content); assertSubString("Delete Page", content); assertSubString("Rename Page", content); assertSubString("Move Page", content); }
public void acceptSocketFrom(SocketDoner donor) throws Exception { client.acceptSocketFrom(donor); }
public void testJuteToString() { SetDataRequest req = new SetDataRequest(null, null, 0); assertNotSame("ERROR", req.toString()); }
public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) { } @Override public void testOutputChunk(String output) { } @Override public void testComplete(TestSummary testSummary) { } @Override public void exceptionOccurred(Throwable e) { } @Override public void testSystemStopped(TestSystem testSystem, ExecutionLog executionLog, Throwable throwable) { } @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) { } @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) { } } }
public void tearDown() { ClassUtils.setClassLoader(null); }
public void testDigestMismatchesWhenTxnLost() throws Exception {
public void testStarted(TestPage testPage) throws IOException { latestTestTime = new TimeMeasurement().start(); super.testStarted(testPage); String fullPathName = testPage.getFullPath(); announceStartNewTest(getRelativeName(), fullPathName); }
public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setHasOptionsMenu(true); setRetainInstance(true); }
public Object answer(InvocationOnMock invocationOnMock) throws Throwable { return mockInetAddress; }
public void hit(WikiPage page) { contentReplaceObserver.hit(page); webOutputObserver.hit(page); }
static int generateOpaque() { int rv = seqNumber.incrementAndGet(); while(rv < 0) { seqNumber.compareAndSet(rv, 0); rv=seqNumber.incrementAndGet(); } return rv; }
public int addPadding( byte[] in, int inOff) { byte code = (byte)(in.length - inOff); while (inOff < in.length) { in[inOff] = code; inOff++; } return code; }
public void testComplete_shouldCountTestResultsForXmlFormatter() throws Exception { countTestResultsForFormatter(xmlFormatter); }
public void delete() { zk.delete(path, version, this, toString()); }
public void setup() { this.mockery = new Mockery(); this.method = mockery.mock(ResourceMethod.class); this.delegate = mockery.mock(TypeCreator.class); this.creator = new CacheBasedTypeCreator(delegate, mockery.mock(ParameterNameProvider.class)); mockery.checking(new Expectations() { {
public void testGetBuilderForJKSFileType() { FileKeyStoreLoader.Builder<?> builder = FileKeyStoreLoaderBuilderProvider.getBuilderForKeyStoreFileType( KeyStoreFileType.JKS); Assert.assertTrue(builder instanceof JKSFileLoader.Builder); }
private void wakeupOnEmpty() { synchronized(emptyPoolSync){ emptyPoolSync.notifyAll();
String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list); void appendCellToRow(int row, String contents); String getUnescapedCellContents(int col, int row); String getCellResult(int col,int row); void appendChildTable(int row, Table table); void setTestStatusOnRow(int row, ExecutionResult testStatus); void setCell(int col, int row, Result response); void appendToCell(int col, int row, Result response); }
public void testHostnameVerificationWithInvalidHostname(boolean fipsEnabled) throws Exception { System.setProperty(quorumX509Util.getFipsModeProperty(), Boolean.toString(fipsEnabled)); String badhostnameKeystorePath = tmpDir + "/badhost.jks"; X509Certificate badHostCert = buildEndEntityCert( defaultKeyPair, rootCertificate, rootKeyPair.getPrivate(), "bleepbloop", null, null, null); writeKeystore(badHostCert, defaultKeyPair, badhostnameKeystorePath); testHostnameVerification(badhostnameKeystorePath, false); }
public PageCrawler getPageCrawler(); public WikiPage getHeaderPage() throws Exception; public WikiPage getFooterPage() throws Exception;
protected void expected(int col, int tableRow, String actual) { String contents = table.getCellContents(col, tableRow); String failureMessage = expected(actual, contents); table.setCell(col, tableRow, failureMessage); }
Object aroundMethodInvoke(FixtureInteraction interaction, Method method, Object... arguments) throws Exception; }
public void shouldBeAbleToConvertNull() { assertThat(converter.convert(null, Date.class, bundle), is(nullValue())); }
public void testClientHostnameVerificationWithIPAddress() throws Exception { ZKTrustManager zkTrustManager = new ZKTrustManager(mockX509ExtendedTrustManager, true, true); X509Certificate[] certificateChain = createSelfSignedCertifcateChain(IP_ADDRESS, null); zkTrustManager.checkClientTrusted(certificateChain, null, mockSocket); verify(mockInetAddress, times(1)).getHostAddress(); verify(mockInetAddress, times(0)).getHostName(); verify(mockX509ExtendedTrustManager, times(1)).checkClientTrusted(certificateChain, null, mockSocket); }
public void surroundGroupsOfTestPagesWithRespectiveSetUpAndTearDowns() throws Exception { Map<String, LinkedList<WikiPage>> pageSetUpTearDownGroups = new HashMap<String, LinkedList<WikiPage>>(); createPageSetUpTearDownGroups(pageSetUpTearDownGroups); suiteContentsFinder.getTestPageList().clear(); reinsertPagesViaSetUpTearDownGroups(pageSetUpTearDownGroups); }
public void testDifferentWatchModes() { Watcher watcher = new DummyWatcher(); watchManager.addWatch("/a", watcher, WatcherMode.PERSISTENT); assertEquals(0, watchManager.getRecursiveWatchQty()); watchManager.addWatch("/a", watcher, WatcherMode.PERSISTENT_RECURSIVE); assertEquals(1, watchManager.getRecursiveWatchQty()); watchManager.addWatch("/a", watcher, WatcherMode.STANDARD); assertEquals(1, watchManager.getRecursiveWatchQty()); assertTrue(watchManager.removeWatcher("/a", watcher)); assertEquals(0, watchManager.getRecursiveWatchQty()); }
public long incr(String key, int by, long def, int exp) { return mutateWithDefault(Mutator.incr, key, (long)by, def, exp); }
public void doTable(Parse table) { summary.put(countsKey, counts()); SortedSet<String> keys = new TreeSet<String>(summary.keySet()); table.parts.more = rows(keys.iterator()); }
<T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) throws OperationTimeoutException; CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(String username, String password) throws OperationException; }
public static byte[] getFileBytes(File input) throws Exception { long size = input.length(); FileInputStream stream = null; try { stream = new FileInputStream(input);
private void deleteExpiredFiles(File[] files) { for (File file : files) deleteIfExpired(file);
boolean pageExists(WikiPagePath path); WikiPagePath getFullPathOfChild(WikiPagePath childPath); WikiPagePath getFullPath(); String getRelativeName(WikiPage page); WikiPage getRoot(); void traverse(TraversalListener<? super WikiPage> callback); void traverseAncestors(TraversalListener<? super WikiPage> callback); void traversePageAndAncestors(TraversalListener<? super WikiPage> callback); void traverseUncles(String uncleName, TraversalListener<? super WikiPage> callback); WikiPage getSiblingPage(WikiPagePath pathRelativeToSibling); WikiPage findAncestorWithName(String name); WikiPage getClosestInheritedPage(WikiPage context, String pageName); }
public void setup() { this.mockery = new Mockery(); this.container = new PicoBuilder().withCaching().build(); container.addComponent(DefaultInterceptorRegistry.class); final Router router = mockery.mock(Router.class, "registry"); container.addComponent(router); this.request = mockery.mock(MutableRequest.class, "request"); final HttpSession session = mockery.mock(HttpSession.class, "session"); mockery.checking(new Expectations() { { one(router).allResources(); will(returnValue(new HashSet<ResourceClass>())); allowing(request).getSession(); will(returnValue(session)); allowing(session).getAttribute(with(any(String.class))); will(returnValue(null)); allowing(session).setAttribute(with(any(String.class)), with(any(String.class))); will(returnValue(null)); } }); this.webRequest = new RequestInfo(null, request, mockery.mock(HttpServletResponse.class)); this.provider = new PicoContainersProvider(container); this.provider.register(ComponentFactoryRegistry.class, DefaultComponentFactoryRegistry.class); this.provider.init(); }
public void doWork() throws Exception { long startTime = Time.currentElapsedTime(); listener.processDeadWatchers(snapshot); long latency = Time.currentElapsedTime() - startTime; LOG.info("Takes {} to process {} watches", latency, total); totalDeadWatchers.addAndGet(-total); synchronized(totalDeadWatchers) { totalDeadWatchers.notifyAll();
public void close() throws IOException { long traceMask = ZooTrace.SESSION_TRACE_MASK; if (ZooTrace.isTraceEnabled(LOG, traceMask)) { ZooTrace.logTraceMessage(LOG, traceMask, "Close ClientCnxn for session: " + sessionId + "!"); } sendThread.close(); waitingEvents.add(eventOfDeath); }
public void testACLCreatedDuringFuzzySnapshotSync() throws IOException { DataTree leaderDataTree = new DataTree();
public void acceptOutput(String output) throws Exception { } public void acceptResults(TestSystemBase.TestSummary testSummary) throws Exception { } public void exceptionOccurred(Throwable e) { } }
public String buildLink(Translator translator, String body, Symbol link) { String reference = translator.translate(link.childAt(0)); String prefix = link.getContent(); HtmlTag tag = new HtmlTag("a", body); tag.addAttribute("href", reference.startsWith("files/") ? "/" + reference : prefix + reference); return tag.htmlInline();
tryTimeout("get", new Runnable() {public void run() { client.get("k"); }});
public void run() { try { zk = new ZooKeeper(qb.hostPort, CONNECTION_TIMEOUT, this);
public void shouldNotAllowMultipleAddressesWhenMultiAddressFeatureIsDisabled() throws ConfigException { System.setProperty(QuorumPeer.CONFIG_KEY_MULTI_ADDRESS_ENABLED, "false"); new QuorumServer(0, "127.0.0.1:1234:1236|127.0.0.1:2234:2236"); }
protected void registerCustomComponents(ComponentRegistry registry) { super.registerCustomComponents(registry); registry.register(JerseyResourceLookupInterceptor.class, JerseyResourceLookupInterceptor.class); registry.register(RequestExecution.class, RequestStack.class); }
public void testMatches() throws Exception { assertMatches("[[tag][link]]"); assertMatches("[[this is fun][http://www.objectmentor.com]]"); assertMatches("[[tag for link with variable][http://${variable}/rest/of/the/link]]"); assertNoMatch("[[this\nshould][not match]]"); assertNoMatch("[[][]]"); assertNoMatch("[[x][]"); assertNoMatch("[[][x]"); assertNoMatch("[[x] [x]]"); assertNoMatch("[[x]]"); }
protected Collection<Order> delegate() { return Arrays.asList(new Order(new Client("client"), 12.22, "hoay")); }
@Test public void skipSpecialPages() { WikiPageUtil.addPage(root, PathParser.parse("PageHeader"), "header"); WikiPageUtil.addPage(root, PathParser.parse("PageFooter"), "footer"); WikiPageUtil.addPage(root, PathParser.parse("files"), "files"); Publisher publisher = new Publisher(TEMPLATE, "out", root.getPageCrawler(), this::writer); publisher.traverse(root); Assert.assertEquals("out/root.html", paths); }
public void checkConnect(String host, int port, Object context) { if (delegate != null) { delegate.checkConnect(host, port, context);
public void testXMLFile() throws Exception { runPage("-xml testFile.txt", "SuitePage"); assertTrue(new File("testFile.txt").exists()); String xmlContent = FileUtil.getFileContent("testFile.txt"); Document testResultsDocument = XmlUtil.newDocument(xmlContent); Element testResultsElement = testResultsDocument.getDocumentElement(); assertEquals("testResults", testResultsElement.getNodeName()); assertEquals("SuitePage", XmlUtil.getTextValue(testResultsElement, "rootPath")); Element finalCounts = XmlUtil.getElementByTagName(testResultsElement, "finalCounts"); assertCounts(finalCounts, "1", "2", "1", "1"); NodeList results = testResultsElement.getElementsByTagName("result"); assertEquals(5, results.getLength()); assertResult(results.item(0), "TestAnotherFailing", "fitnesse.testutil.FailFixture", "0", "1", "0", "0"); assertResult(results.item(1), "TestError", "fitnesse.testutil.ErrorFixture", "0", "0", "0", "1"); assertResult(results.item(2), "TestFailing", "fitnesse.testutil.FailFixture", "0", "1", "0", "0"); assertResult(results.item(3), "TestIgnore", "fitnesse.testutil.IgnoreFixture", "0", "0", "1", "0"); assertResult(results.item(4), "TestPassing", "fitnesse.testutil.PassFixture", "1", "0", "0", "0"); }
public void set(String coin, Integer amount) { if (!COIN_VALUES.containsKey(coin)) { throw new IllegalArgumentException("Unknown coin type " + coin); } totalCents += amount * COIN_VALUES.get(coin); }
public void setup() { ClientBase.setupTestEnv(); System.setProperty("zookeeper.DigestAuthenticationProvider.superDigest", "super:D/InIHSb7yEEbrWz8b9l71RjZJU=");
SASLAuthOperation saslAuth(String[] mech, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  SASLStepOperation saslStep(String[] mech, byte[] challenge, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  Collection<Operation> clone(KeyedOperation op);  TapOperation tapBackfill(String id, long date, OperationCallback cb);  TapOperation tapCustom(String id, RequestMessage message, OperationCallback cb);  TapOperation tapAck(TapOpcode opcode, int opaque, OperationCallback cb);  TapOperation tapDump(String id, OperationCallback cb); }
public void canProvideCustomRequestScopedComponents() { checkAvailabilityFor(false, Arrays.<Class<?>>asList(MyRequestComponent.class)); }
public SymbolProvider addTypes(SymbolType[] types) { ArrayList<Matchable> defaults = currentDispatch.get(defaultMatch); for (SymbolType type: types) { if (!matchesFor(defaults, type)) defaults.add(new SymbolMatcher(type)); } return this; }
private void parseTable() { validateHeader(); String firstNameCell = table.getCellContents(1, 0); parameterized = isNameParameterized(firstNameCell); name = getScenarioName(); getTestContext().addScenario(name, this); getScenarioArguments(); }
public Then<T> shouldBe(String category, Matcher matcher) { if (!actual.that(category, instance, matcher)) { return NOTHING; } return new Then<T>(actual); }
public abstract void processPage(WikiPage currentPage) throws Exception; public boolean shouldBeApplied() throws Exception { boolean usesFileSystem = root instanceof FileSystemPage; boolean hasBeenApplied = properties.getProperty(getName()) != null; return usesFileSystem && !hasBeenApplied; } }
TestResult evaluateExpectation(Object returnValues); void handleException(ExceptionResult exceptionResult); }
private void deleteEntry() { Handler handler = new Handler(); DeleteEntry task = new DeleteEntry(KeePass.db, mPw, mAct, mAct.new RefreshTask(handler)); ProgressTask pt = new ProgressTask(mAct, task); pt.run();
WikiPage getRoot(WikiPage page) throws Exception; void traverse(WikiPage root, FitNesseTraversalListener pageCrawlerTest) throws Exception; }
