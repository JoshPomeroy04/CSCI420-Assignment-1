public void defaultIsPerTestSystemTestRun() { TestRun run = registry.createRun(Collections.emptyList()); assertEquals(PerTestSystemTestRun.class, run.getClass()); addFactory(pages -> Optional.empty()); run = registry.createRun(Collections.emptyList()); assertEquals(PerTestSystemTestRun.class, run.getClass()); }
Future<Boolean> append(long cas, String key, Object val); <T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) throws OperationTimeoutException; CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void testNullAuthId() throws Exception { ZooKeeper zk = null; try { zk = createClient();
public void testBooleanOverflow() { try { boolean b=tu.decodeBoolean(oversizeBytes);
public void shouldBeAbleToConvert() { mockery.checking(new Expectations() { { exactly(1).of(request).getAttribute("javax.servlet.jsp.jstl.fmt.locale.request"); will(returnValue("pt_br")); } }); assertThat((Double) converter.convert("8,77", double.class, bundle), is(equalTo(8.77d))); mockery.assertIsSatisfied(); }
public void shouldConvertToZeroWhenEmpty() { assertThat((Boolean) converter.convert("", boolean.class, bundle), is(equalTo(false))); }
public void executeTestPages() { try { internalExecuteTestPages();
public void testSetUpAndTearDownExcluded() throws Exception { Map<String, Boolean> attributes = new HashMap<>(); attributes.put("SetUp", false); attributes.put("TearDown", false); List<PageType> pageTypes = Arrays.asList(TEST, SUITE, STATIC); setPageProperty(page, TEST.toString(), "true"); searcher = generateSearcherByPageTypesAndSearchAttributes(pageTypes, attributes); assertTrue(searcher.pageMatches(page)); page = WikiPageUtil.addPage(root, PathParser.parse("SetUp")); assertFalse(searcher.pageMatches(page)); page = WikiPageUtil.addPage(root, PathParser.parse("TearDown")); assertFalse(searcher.pageMatches(page)); page = WikiPageUtil.addPage(root, PathParser.parse("SuiteSetUp")); assertFalse(searcher.pageMatches(page)); page = WikiPageUtil.addPage(root, PathParser.parse("SuiteTearDown")); assertFalse(searcher.pageMatches(page)); }
public CommandRunningFitClient build() { String testRunner = descriptor.getTestRunner(); String classPath = descriptor.getClassPath(); String command = buildCommand(descriptor.getCommandPattern(), testRunner, classPath); Map<String, String> environmentVariables = descriptor.createClasspathEnvironment(classPath); CommandRunningFitClient.CommandRunningStrategy runningStrategy = new CommandRunningFitClient.OutOfProcessCommandRunner(command, environmentVariables); return buildFitClient(runningStrategy); }
public InputStream getInputStream() throws IOException { return commandRunner.getReader(); }
private static File createTemporaryFolder() { File createdFolder; try { createdFolder = File.createTempFile("fitnesse", ""); } catch (IOException e) { throw new RuntimeException("Unable to create temporary folder for test execution", e); } createdFolder.delete(); createdFolder.mkdir(); return createdFolder; }
@Test public void scansDoubleQuotes() { ParserTestHelper.assertScansTokenType("''italic''", "Italic", true); ParserTestHelper.assertScansTokenType("'' 'italic' ''", "Italic", true); }
public void assertPasses(String pageName, String pageType) throws Exception{ System.out.println("fitNessePath="+fitNesseRootPath); System.out.println("outputPath="+outputPath); JavaFormatter testFormatter=JavaFormatter.getInstance(pageName); testFormatter.setResultsRepository(new JavaFormatter.FolderResultsRepository(outputPath,fitNesseRootPath)); testFormatter.setListener(resultsListener); Arguments arguments=new Arguments(); arguments.setDaysTillVersionsExpire("0"); arguments.setInstallOnly(false); arguments.setOmitUpdates(true); arguments.setRootPath(fitNesseRootPath); arguments.setCommand(pageName+"?"+pageType+"&format=java"); FitNesseMain.dontExitAfterSingleCommand=true; FitNesseMain.launchFitNesse(arguments); Assert.assertEquals("wrong", 0, testFormatter.getTotalSummary().wrong); Assert.assertEquals("exceptions", 0, testFormatter.getTotalSummary().exceptions); }
public void testInvalidPath(boolean useAsync) throws Exception { List<Integer> expectedResultCodes = new ArrayList<>(); expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue()); expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue()); expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue());
Operation removeCurrentReadOp();  Operation getCurrentWriteOp();  Operation removeCurrentWriteOp();  boolean hasReadOp();  boolean hasWriteOp();  void addOp(Operation op);  void insertOp(Operation o);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  boolean isAuthenticated();  long lastReadDelta();  void completedRead();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); MemcachedConnection getConnection(); void setConnection(MemcachedConnection connection); }
public void translatesSeamless() throws Exception { TestRoot root = new TestRoot(); WikiPage includingPage = root.makePage("PageOne", "!include -seamless PageTwo"); root.makePage("PageTwo", "two"); ParserTestHelper.assertTranslatesTo(includingPage, "two"); }
boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  void resetNonMTLSConnCount();  void resetAuthFailedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
boolean hasChildPage(String name); WikiPage getChildPage(String name); void removeChildPage(String name); List<WikiPage> getChildren(); String getName(); PageData getData(); ReadOnlyPageData readOnlyData(); Collection<VersionInfo> getVersions(); PageData getDataVersion(String versionName); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage(); }
public boolean isBlank() { return blankString.length() == 0; }
private void initForFingerprint() {
public void anotherMethod(String string, String param) { System.out.println("Do another thing by Sub Generic Controller"); }
void set(final float floatVal) { type = ClassWriter.FLOAT; intVal = Float.floatToRawIntBits(floatVal); hashCode = 0x7FFFFFFF & (type + (int) floatVal); }
public void ifListenerIsSet_AllTestingCompleteFiresAllTestingComplete() throws Exception{ jf.setListener(listener); TimeMeasurement totalTimeMeasurement = new TimeMeasurement().start().stop(); jf.close(); verify(listener).close(); }
private static void validateFormat(String s) { if ("(x,y)".length() > s.length() || !s.contains("(") || !s.contains(",") || !s.contains(")")) {
int getMaxSessionTimeout();  int getInitLimit();  int getSyncLimit();  void setInitLimit(int initLimit);  void setSyncLimit(int syncLimit);  int getTick();  String getState();  String getQuorumAddress();  int getElectionType();  String getElectionAddress();  String getClientAddress();  String getLearnerType();  long getConfigVersion();  String getQuorumSystemInfo();  boolean isPartOfEnsemble();  boolean isLeader();  int getMaxCnxns(); }
public void addJvmArgs(String... args) { if (args == null) { return; } for (String arg : args) { jvmArgs_.add(arg);
public void testSerializeDeserializeWithSNAPPY(@TempDir File tmpDir) throws IOException { testSerializeDeserialize(StreamMode.SNAPPY, ".snappy", tmpDir); }
protected Object callMethod(Object instance, Method method, Object[] convertedArgs) throws Throwable { FixtureInteraction interaction = SlimService.getInteraction(); try { Object result;
public void tableWithBadVariableHasException() throws Exception { getResultsForTable( "|DT:fitnesse.slim.test.TestSlim|\n" + "|noSuchVar|\n" + "|3|\n" ); TableScanner ts = new TableScanner(responder.getTestResults()); Table dt = ts.getTable(0); assertContainsReferenceToException(dt.getCellContents(0, 2)); }
public void testOverwriteFile() throws IOException { assertTrue("Creating empty dst file", dstFile.createNewFile()); OutputStream fos = new AtomicFileOutputStream(dstFile); assertTrue("Empty file still exists", dstFile.exists()); fos.write(TEST_STRING.getBytes()); fos.flush();
public Object intercept(Object proxy, Method method, Object[] args, SuperMethod superMethod) { if (resourceMethod != null) {
public Double convert(String value, Class<? extends Double> type) { if (value == null) { return null; } try { return Double.valueOf(value);
public void testInstallOnly() throws Exception { Arguments args = new Arguments(); args.setInstallOnly(true); FitNesse fitnesse = mock(FitNesse.class); FitNesseMain.launch(args, context, fitnesse); verify(fitnesse, never()).start(); }
private void establishRequiredDirectories() { establishDirectory(getContext().getRootPagePath()); establishDirectory(getContext().getRootPagePath() + "/files"); }
public void testOutputChunk(String output) { } @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) { } @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) { } @Override public void testSystemStarted(TestSystem testSystem) { } }
Object next();
public static void setup() {
public void testBadRequest() throws Exception { String output = getSocketOutput("Bad Request \r\n\r\n", new MockWikiPage()); assertSubString("400 Bad Request", output); assertSubString("The request string is malformed and can not be parsed", output); }
public void shouldBeAbleToConvert() { mockery.checking(new Expectations() { { exactly(1).of(request).getAttribute("javax.servlet.jsp.jstl.fmt.locale.request"); will(returnValue("pt_br")); } }); assertThat(converter.convert("05/06/2010", DateMidnight.class, bundle), is(equalTo(new DateMidnight(2010, 6, 5)))); mockery.assertIsSatisfied(); }
public void canHandleComposedUrlIfPlainRootContext() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(RequestInfo.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getContextPath(); will(returnValue("")); one(request).getRequestURI(); will(returnValue("/products/1")); one(request).getMethod(); will(returnValue("GET")); one(registry).parse("/products/1", HttpMethod.GET,webRequest); will(returnValue(expected)); one(request).getParameter("_method"); will(returnValue(null)); }}); ResourceMethod resource = translator.translate(info); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied();
public void setUp() throws Exception { schedule = new ScheduleImpl(250); counter = new Counter(); }
void testOutputChunk(TestPage testPage, String output); void testStarted(TestPage testPage); void testComplete(TestPage testPage, TestSummary testSummary); void testSystemStopped(TestSystem testSystem, Throwable cause ); void testAssertionVerified(Assertion assertion, TestResult testResult); void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); }
WikiPage addChildPage(String name); boolean hasChildPage(String name); WikiPage getChildPage(String name); void removeChildPage(String name); List<WikiPage> getChildren(); String getName(); PageData getData(); ReadOnlyPageData readOnlyData(); Collection<VersionInfo> getVersions(); WikiPage getVersion(String versionName); String getHtml(); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage(); }
private String testRunner() { String program = getVariable(TEST_RUNNER); if (program == null) program = ""; return program; }
public synchronized boolean removeWatcher(String path, Watcher watcher) { Set<String> paths = watch2Paths.get(watcher); if (paths == null || !paths.remove(path)) { return false; } Set<Watcher> list = watchTable.get(path); if (list == null || !list.remove(watcher)) { return false; } if (list.isEmpty()) { watchTable.remove(path); } watcherModeManager.removeWatcher(watcher, path); return true; }
public void testDefaultHtmlPageFactory() throws Exception { HtmlPageFactory pageFactory = factory.getHtmlPageFactory(new HtmlPageFactory(null)); assertNotNull(pageFactory); assertEquals(HtmlPageFactory.class, pageFactory.getClass()); }
public void setUp() throws Exception { System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY, "org.apache.zookeeper.server.NettyServerCnxnFactory"); NettyServerCnxnFactory.setTestAllocator(TestByteBufAllocator.getInstance()); super.setUp(); }
public static String send4LetterWord(String host, int port, String cmd) throws IOException, SSLContextException { return send4LetterWord(host, port, cmd, false); }
private void performImportWithExtraLocalPages() throws Exception { addLocalPageWithImportProperty(localRoot, "PageThree", false); addLocalPageWithImportProperty(pageOne, "ChildTwo", false); addLocalPageWithImportProperty(childPageOne, "GrandChildOne", false); localRoot.addChildPage("PageThatDoesntImport"); addLocalPageWithImportProperty(localRoot, "OtherImportRoot", true); importer.importWiki(localRoot); }
public void makesText() { TokenMatch match = new TextMaker().make(provider, "hi"); assertEquals(SymbolType.Text, match.getToken().getType()); assertEquals("hi", match.getToken().getContent()); assertEquals(2, match.getMatchLength()); }
public void shouldThrowIllegalArgumentExceptionForNotKnowHttpMethodsForRequestParameter() throws Exception { mockery.checking(new Expectations() { { one(request).getParameter("_method"); will(returnValue("JUMP!")); one(request).getMethod(); will(returnValue("POST")); } }); HttpMethod.of(request);
public void emptyTableWithResults() throws Exception { assertTableResults("", list(
private HtmlPage makeHtml() { PageCrawler pageCrawler = page.getPageCrawler(); WikiPagePath fullPath = pageCrawler.getFullPath(); String fullPathName = PathParser.render(fullPath); HtmlPage htmlPage = context.pageFactory.newPage(); htmlPage.setTitle(getTitle() + ": " + fullPathName); htmlPage.setPageTitle(new PageTitle(getTitle(), fullPath, data.getAttribute(PageData.PropertySUITES))); htmlPage.setNavTemplate("testNav.vm"); htmlPage.put("actions", new WikiPageActions(page)); htmlPage.setMainTemplate(mainTemplate()); htmlPage.put("testExecutor", new TestExecutor()); htmlPage.setFooterTemplate("wikiFooter.vm"); htmlPage.put("headerContent", new WikiPageHeaderRenderer()); htmlPage.put("footerContent", new WikiPageFooterRenderer()); htmlPage.setErrorNavTemplate("errorNavigator"); htmlPage.put("errorNavOnDocumentReady", false); htmlPage.put("multipleTestsRun", isMultipleTestsRun()); WikiImportingResponder.handleImportProperties(htmlPage, page); return htmlPage; }
public void testGetPath() throws Exception { assertEquals(defaultPath + "/RooT", root.getFileSystemPath()); }
public void testDeleteRecursiveCli() throws IOException, InterruptedException, CliException, KeeperException { final ZooKeeper zk = createClient();
protected String testPageSummary() { return "<strong>Test Pages:</strong> " + pageCounts.toString() + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"; }
public void addCounter(String name) { if (!counters.containsKey(name)) { counters.put(name, registry.counter(name));
public Collection<MatchedResult> scoreMatches(int tableRow) { Collection<MatchedResult> result = new ArrayList<>(); for (QueryResultRow row : rows) { MatchedResult match = scoreMatch(table, tableRow, row); if (match.score > 0) result.add(match); } return result; }
void movedPermanentlyTo(String url);  @Deprecated <T> T movedPermanentlyTo(Class<T> controller); }
protected void exit() { output.close();
public String toString() { return new StringBuffer().append(getKey()).append('=').append(getValue()).toString(); }
public void setup() throws Exception { root = InMemoryPage.makeRoot("root"); resultsDirectory = new File("testHistoryDirectory"); removeResultsDirectory(); resultsDirectory.mkdir(); crawler = root.getPageCrawler(); crawler.addPage(root, PathParser.parse("TestPage")); history = new TestHistory(); responder = new PurgeHistoryResponder(); responder.setResultsDirectory(resultsDirectory); context = new FitNesseContext(root); request = new MockRequest(); request.setResource("TestPage"); }
boolean resolve(final MethodWriter owner, final int position, final byte[] data) { boolean needUpdate = false; status |= RESOLVED; this.position = position; int i = 0; while (i < referenceCount) { int source = srcAndRefPositions[i++]; int reference = srcAndRefPositions[i++]; int offset; if (source >= 0) { offset = position - source; if ((offset < Short.MIN_VALUE) || (offset > Short.MAX_VALUE)) {  int opcode = data[reference - 1] & 0xFF; if (opcode <= Opcodes.JSR) {
public void run() { if ( ! mSuccess ) {
protected void protectMe() { } @Path("/staticMe") public static void staticMe() { } } @Test public void shouldFindAPublicNonStaticNonAnnotatedMethodWithTheSameNameAsTheGivenId() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/add", "POST"); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("add")))); mockery.assertIsSatisfied(); } @Test public void shouldIgnoreAResourceWithTheWrongWebMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/clients/remove", "POST"); assertThat(method, is(Matchers.nullValue())); mockery.assertIsSatisfied(); } @Test public void shouldAcceptAResultWithASpecificWebMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/clients/head", "HEAD"); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("head")))); mockery.assertIsSatisfied(); } }
public void testCachedApproximateDataSize() throws Exception { DataTree dt = new DataTree(); long initialSize = dt.approximateDataSize(); Assert.assertEquals(dt.cachedApproximateDataSize(), dt.approximateDataSize());
private void loadRespondersFromPlugin(Class<?> pluginClass, ResponderFactory responderFactory) throws PluginException { try { Method method = pluginClass.getMethod("registerResponders", ResponderFactory.class);
public void testProblemProcessor() throws Exception { NIOServerFactory factory = new NIOServerFactory(22334, problemProcessor); Socket s = new Socket("127.0.0.1", 22334); s.setSoTimeout(5000); try { s.getOutputStream().write("\0\0\0\4\0\0\0\1".getBytes());
WikiPage getSiblingPage(WikiPage page, WikiPagePath pathRelativeToSibling); WikiPage findAncestorWithName(WikiPage page, String name); WikiPage getClosestInheritedPage(WikiPage context, String pageName);
public void testParser() { VerGen.Version v = VerGen.parseVersionString(input); Assert.assertEquals(expected[0], v.maj); Assert.assertEquals(expected[1], v.min); Assert.assertEquals(expected[2], v.micro); Assert.assertEquals(expected[3], v.qualifier); }
private String evaluateXPathAgainstOutputHtml(String expression) throws Exception { XPath xpath = XPathFactory.newInstance().newXPath(); InputSource inputSource = new InputSource(getHtmlOutputStream()); return xpath.evaluate(expression, inputSource); }
public void setUp() throws Exception { service = new SlimService(8099); statements = new ArrayList<Object>(); connect(); }
public void testHierarchicalQuorum() throws Throwable { cht.runHammer(5, 10); }
public void checkRead(String file) { if (delegate != null) { delegate.checkRead(file);
public void setup() { MockitoAnnotations.initMocks(this); Locale.setDefault(Locale.ENGLISH); ValidatorFactoryCreator creator = new ValidatorFactoryCreator(); creator.buildFactory(); MethodValidatorCreator methodValidatorCreator = new MethodValidatorCreator(); methodValidatorCreator.init(); methodValidator = methodValidatorCreator.getInstance(); MessageInterpolatorFactory interpolatorFactory = new MessageInterpolatorFactory(creator.getInstance()); interpolatorFactory.createInterpolator(); interpolator = interpolatorFactory.getInstance(); provider = new ParanamerNameProvider(); validator = new MockValidator(); }
private Map<String, String> determineEnvironment() { if (environmentVariables == null) { return Collections.emptyMap(); } Map<String, String> systemVariables = new HashMap<String, String>(System.getenv()); systemVariables.putAll(environmentVariables); return systemVariables; }
public static void main(String[] args) { ZooKeeperTestClient zktc = new ZooKeeperTestClient(); try { zktc.my_test_1();
public void setup() { this.converter = new PrimitiveByteConverter(); this.errors = new ArrayList<ValidationMessage>(); this.bundle = ResourceBundle.getBundle("messages"); }
public void onApplicationEvent(ApplicationEvent event) { if (event instanceof ContextRefreshedEvent) { handleRefresh(((ContextRefreshedEvent) event).getApplicationContext());
private SimpleFixture createSimpleFixture() { createFixtureInstance(SimpleFixture.class); SimpleFixture myInstance = (SimpleFixture) statementExecutor.getInstance(INSTANCE_NAME); return myInstance; }
public void testJsonResponse() throws Exception { WikiPage page = WikiPageUtil.addPage(root, PathParser.parse("PageOne")); PageData data = page.getData(); WikiPageProperty properties = data.getProperties(); properties.set(PageType.TEST.toString(), "true"); page.commit(data); MockRequest request = new MockRequest(); request.setResource("PageOne"); request.addInput("format", "json"); Responder responder = new PropertiesResponder(); SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); assertEquals("application/json", response.getContentType()); String jsonText = response.getContent(); JSONObject jsonObject = new JSONObject(jsonText); assertTrue(jsonObject.getBoolean("Test")); assertTrue(jsonObject.getBoolean("Search")); assertTrue(jsonObject.getBoolean("Edit")); assertTrue(jsonObject.getBoolean("Properties")); assertTrue(jsonObject.getBoolean("Versions")); assertTrue(jsonObject.getBoolean("Refactor")); assertTrue(jsonObject.getBoolean("WhereUsed")); assertTrue(jsonObject.getBoolean("RecentChanges")); assertTrue(jsonObject.getBoolean("Files")); assertFalse(jsonObject.has("Help")); assertFalse(jsonObject.getBoolean("Suite")); assertFalse(jsonObject.getBoolean("Prune")); assertFalse(jsonObject.getBoolean(WikiImportProperty.SECURE_READ)); assertFalse(jsonObject.getBoolean(WikiImportProperty.SECURE_WRITE)); assertFalse(jsonObject.getBoolean(WikiImportProperty.SECURE_TEST)); }
public Index startVector(String tag) throws IOException { char c1 = (char) stream.read(); char c2 = (char) stream.read(); if (c1 != 'v' || c2 != '{') { throw new IOException("Error deserializing "+tag); } return new CsvIndex(); }
@Test public void translatesOverlappedStyle() { ParserTest.assertTranslatesTo("!style_red(!style_blue{a)}", "!style_red(<span class=\"blue\">a)</span>");
private Request createRequest(long sessionId, int opCode) { return new Request(null, sessionId, 0, opCode, null, null); }
void addExpectation(SlimTable.Expectation e); Map<String, ScenarioTable> getScenarios(); }
public SortedSet<Date> datesInChronologicalOrder() { Set<Date> dates = testResultMap.keySet(); SortedSet<Date> sortedDates = new TreeSet<Date>(Collections.reverseOrder()); sortedDates.addAll(dates); return sortedDates; }
public ParseSpecification ignoreFirst(SymbolType ignoreFirst) { ignoresFirst.add(ignoreFirst); return this; }
public void shouldRunPostConstructMethodOfApplicationScopedComponentsAtContainerStart() { assertTrue("should have called init", LifecycleComponent.initialized); }
long createSession(int sessionTimeout);  boolean trackSession(long id, int to);  boolean commitSession(long id, int to);  boolean touchSession(long sessionId, int sessionTimeout);  void setSessionClosing(long sessionId);  void shutdown();  void removeSession(long sessionId);  boolean isTrackingSession(long sessionId);  void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap();  long getLocalSessionCount(); }
public void startup(ZooKeeperServer zks) throws IOException, InterruptedException { start(); setZooKeeperServer(zks); zks.startdata(); zks.startup(); }
private Map<String, String> determineEnvironment() { if (environmentVariables == null) { return Collections.emptyMap(); } Map<String, String> systemVariables = new HashMap<>(System.getenv()); systemVariables.putAll(environmentVariables); return systemVariables; }
public void testSystemStarted(TestSystem testSystem); public void newTestStarted(WikiTestPage test) throws IOException; public void testOutputChunk(String output) throws IOException; public void testAssertionVerified(Assertion assertion, TestResult testResult); public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); public void testComplete(WikiTestPage test, TestSummary testSummary) throws IOException; public void errorOccurred(Throwable cause); }
public void tableWithSymbolSubstitution() throws Exception { getResultsForPageContents( "!|DT:fitnesse.slim.test.TestSlim|\n" + "|string|getStringArg?|\n" + "|Bob|$V=|\n" + "|$V|$V|\n" + "|Bill|$V|\n" + "|John|$Q|\n" ); TableScanner ts = getScannedResults(); Table dt = ts.getTable(0); assertEquals("$V<-[Bob]", unescape(dt.getCellContents(1, 2))); assertEquals("$V->[Bob]", unescape(dt.getCellContents(0, 3))); assertEquals("<span class=\"pass\">$V->[Bob]</span>", unescape(dt.getCellContents(1, 3))); assertEquals("[Bill] <span class=\"fail\">expected [$V->[Bob]]</span>", unescape(dt.getCellContents(1, 4))); assertEquals("[John] <span class=\"fail\">expected [$Q]</span>", unescape(dt.getCellContents(1, 5))); }
public Object previous() { AbstractInsnNode result = prev; next = result; prev = result.prev; return result; }
public void testLeftArrowOnPageThatDoesExist() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("TestPage")); crawler.addPage(page, PathParser.parse("SubPage")); WikiPage child2 = crawler.addPage(page, PathParser.parse("SubPage2")); WidgetRoot wroot = new WidgetRoot(child2); AliasLinkWidget w = new AliasLinkWidget(wroot, "[[tag][<TestPage.SubPage]]"); String html = w.render(); assertEquals("<a href=\"TestPage.SubPage\">tag</a>", html); }
public void testNavigationBackToFrontPage() throws Exception { request.setResource("files/"); DirectoryResponder responder = (DirectoryResponder) FileResponder.makeResponder(request, SampleFileUtility.base); response = responder.makeResponse(context, request); response = responder.makeResponse(context, request); MockResponseSender sender = new MockResponseSender(); sender.doSending(response); assertSubString("<a name=\"art_niche\" href=\"/FrontPage\"", sender.sentData()); }
public static String replacePattern(String[] components, String hostname) { if (components.length == 3) { return components[0] + "/" + hostname.toLowerCase() + "@"
public TargetResult findRefTarget(String fullRef, SprContextV4 ctx) { if (fullRef == null) { return null; } fullRef = fullRef.toUpperCase(Locale.ENGLISH); if (!fullRef.startsWith(STR_REF_START) || !fullRef.endsWith(STR_REF_END)) { return null; } String ref = fullRef.substring(STR_REF_START.length(), fullRef.length() - STR_REF_END.length()); if (ref.length() <= 4) { return null; } if (ref.charAt(1) != '@') { return null; } if (ref.charAt(3) != ':') { return null; } char scan = Character.MIN_VALUE; char wanted = Character.MIN_VALUE; scan = Character.toUpperCase(ref.charAt(2)); wanted = Character.toUpperCase(ref.charAt(0)); SearchParametersV4 sp = new SearchParametersV4(); sp.setupNone(); sp.searchString = ref.substring(4); if (scan == 'T') { sp.searchInTitles = true; } else if (scan == 'U') { sp.searchInUserNames = true; } else if (scan == 'A') { sp.searchInUrls = true; } else if (scan == 'P') { sp.searchInPasswords = true; } else if (scan == 'N') { sp.searchInNotes = true; } else if (scan == 'I') { sp.searchInUUIDs = true; } else if (scan == 'O') { sp.searchInOther = true; } else { return null; } List<PwEntry> list = new ArrayList<PwEntry>(); ctx.db.rootGroup.searchEntries(sp, list); if (list.size() > 0) { return new TargetResult((PwEntryV4)list.get(0), wanted); } return null; }
private String destinationPath(WikiPage page) { String pagePath = page.getFullPath().toString().replace(".", File.separator); return destination + File.separator + (pagePath.length() > 0 ? pagePath : "root") + ".html"; }
void add(Class<? extends Interceptor> interceptor);  @Deprecated void addAsNext(Class<? extends Interceptor> interceptor); }
protected void setUp() throws Exception { count = 9; peers = new HashMap<Long,QuorumServer>(count); threads = new ArrayList<LEThread>(count); votes = new Vote[count]; tmpdir = new File[count]; port = new int[count]; finalObj = new Object(); String config = "group.1=0:1:2\n" + "group.2=3:4:5\n" + "group.3=6:7:8\n\n" + "weight.0=1\n" + "weight.1=1\n" + "weight.2=1\n" + "weight.3=1\n" + "weight.4=1\n" + "weight.5=1\n" + "weight.6=1\n" + "weight.7=1\n" + "weight.8=1"; ByteArrayInputStream is = new ByteArrayInputStream(config.getBytes()); this.qp = new Properties(); qp.load(is); LOG.info("SetUp " + getName()); }
public void testParseDelegateObjectMethod() throws Exception { Date april26Of1949 = new GregorianCalendar(49 + 1900, 4, 26).getTime(); String format = new SimpleDateFormat(dateFormat).format(april26Of1949); TypeAdapter.registerParseDelegate(Date.class, new SimpleDateFormat(dateFormat)); adapter = TypeAdapter.on(f, f.getClass().getField("sampleDate")); adapter.set(adapter.parse(format)); assertEquals(april26Of1949, f.sampleDate); }
public void shouldRegisterForLotsOfInterfacesWhenArrayListAccepted() { mockery.checking(new Expectations(){{ allowing(registry).register(ArrayListSubclass.class, ArrayListSubclass.class); allowing(registry).register(ArrayList.class, ArrayListSubclass.class); allowing(registry).register(List.class, ArrayListSubclass.class); allowing(registry).register(Collection.class, ArrayListSubclass.class); allowing(registry).register(Iterable.class, ArrayListSubclass.class); allowing(registry).register(Cloneable.class, ArrayListSubclass.class); allowing(registry).register(Serializable.class, ArrayListSubclass.class); allowing(registry).register(RandomAccess.class, ArrayListSubclass.class); allowing(registry).register(AbstractList.class, ArrayListSubclass.class); allowing(registry).register(AbstractCollection.class, ArrayListSubclass.class); allowing(registry).register(List.class, ArrayListSubclass.class); allowing(registry).register(Collection.class, ArrayListSubclass.class); }}); acceptor.analyze(ArrayListSubclass.class); }
public static SymbolType closeType(char beginner) { return beginner == '[' ? SymbolType.CloseBracket : beginner == '{' ? SymbolType.CloseBrace
public static FitNesseContext makeTestContext(WikiPage root, Authenticator authenticator) { return makeTestContext(root, createTemporaryFolder(), FitNesseUtil.base, PORT, authenticator); }
public void testSuiteSetUpAndSuiteTearDownWithSetUpAndTearDown() throws Exception { responder.setFastTest(false); WikiPage suitePage = pageBuilder.addPage(root, PathParser.parse("TestSuite"), classpathWidgets()); WikiPage testPage = pageBuilder.addPage(suitePage, PathParser.parse("TestPage"), outputWritingTable("Output of TestPage")); pageBuilder.addPage(suitePage, PathParser.parse(PageData.SUITE_SETUP_NAME), outputWritingTable("Output of SuiteSetUp")); pageBuilder.addPage(suitePage, PathParser.parse("SetUp"), outputWritingTable("Output of SetUp")); pageBuilder.addPage(suitePage, PathParser.parse(PageData.SUITE_TEARDOWN_NAME), outputWritingTable("Output of SuiteTearDown")); pageBuilder.addPage(suitePage, PathParser.parse("TearDown"), outputWritingTable("Output of TearDown")); WikiPagePath testPagePath = testPage.getPageCrawler().getFullPath(); String resource = PathParser.render(testPagePath); request.setResource(resource); Response response = responder.makeResponse(context, request); MockResponseSender sender = new MockResponseSender(); sender.doSending(response); results = sender.sentData(); WikiPage errorLog = errorLogsParentPage.getPageCrawler().getPage(testPagePath); String errorLogContent = errorLog.getData().getContent(); assertMessagesOccurInOrder(errorLogContent, "Output of SuiteSetUp", "Output of SetUp", "Output of TestPage", "Output of TearDown", "Output of SuiteTearDown"); assertMessageHasJustOneOccurrenceOf(errorLogContent, "Output of SetUp"); }
public void loadsCustomFormatters() throws IOException { context.formatterFactory.registerFormatter(FooFormatter.class); FooFormatter.initialized = false; addTestToSuite("SlimTestOne", simpleSlimDecisionTable); runSuite(); assertTrue(FooFormatter.initialized); }
WikiPage getClosestInheritedPage(WikiPage context, String pageName);
<T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); <T> Future<Boolean> append(String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); Future<Boolean> prepend(String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<Boolean> prepend(String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, int exp, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void setup() throws Exception { this.mockery = new VRaptorMockery(true); this.converters = mockery.mock(Converters.class); this.mockHttpServletRequest = mockery.mock(HttpServletRequest.class); this.mockNameProvider = mockery.mock(ParameterNameProvider.class); mockContainer = mockery.mock(Container.class); mockLocalization = mockery.mock(Localization.class); mockValidator = mockery.mock(Validator.class); Instantiator<Object> instantiator = new VRaptorInstantiator(new DefaultConverters(mockContainer), mockContainer, mockLocalization, mockNameProvider, mockValidator ); this.iogiProvider = new IogiParametersProvider(mockNameProvider, mockHttpServletRequest, instantiator); this.errors = new ArrayList<Message>(); mockery.checking(new Expectations() { { allowing(converters).to((Class) with(an(Class.class))); will(returnValue(new LongConverter()));
abstract void bark(String phrase); abstract void eat(List<String> portions); abstract void dropDead(int[] positions); abstract void recurse(DogAlike[] dogs); abstract void jump(long times); abstract void dig(double amount); abstract void dig(float amount); }
public void testMatch() throws Exception { assertMatchEquals("!contents\n", "!contents"); assertMatchEquals("!contents -R\n", "!contents -R"); assertMatchEquals("!contents\r", "!contents"); assertMatchEquals("!contents -R\r", "!contents -R"); assertMatchEquals(" !contents\n", null); assertMatchEquals(" !contents -R\n", null); assertMatchEquals("!contents zap\n", null); assertMatchEquals("!contents \n", "!contents "); }
public void initializeAttributes() { if (!isErrorLogsPage()) { properties.set(PropertyEDIT); properties.set(PropertyPROPERTIES); properties.set(PropertyREFACTOR); } properties.set(PropertyWHERE_USED); properties.set(PropertyRECENT_CHANGES); properties.set(PropertyFILES); properties.set(PropertyVERSIONS); properties.set(PropertySEARCH); properties.setLastModificationTime(Clock.currentDate()); initTestOrSuiteProperty(); }
public void testCnxManager() throws Exception { CnxManagerThread thread = new CnxManagerThread(); thread.start(); QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 2, 2, 2); QuorumCnxManager cnxManager = new QuorumCnxManager(peer); QuorumCnxManager.Listener listener = cnxManager.listener; if(listener != null){ listener.start(); } else { LOG.error("Null listener when initializing cnx manager"); } cnxManager.toSend(new Long(0), createMsg(ServerState.LOOKING.ordinal(), 1, -1, 1)); Message m = null; int numRetries = 1; while((m == null) && (numRetries++ <= THRESHOLD)){ m = cnxManager.pollRecvQueue(3000, TimeUnit.MILLISECONDS); if(m == null) cnxManager.connectAll(); } Assert.assertTrue("Exceeded number of retries", numRetries <= THRESHOLD); thread.join(5000); if (thread.isAlive()) { Assert.fail("Thread didn't join");
void allTestingComplete() throws Exception { TimeMeasurement completionTimeMeasurement = new TimeMeasurement().start(); resultsListener.allTestingComplete(totalTestTime.stop()); completionTimeMeasurement.stop();
public void testGetBuilderForPKCS12FileType() { FileKeyStoreLoader.Builder<?> builder = FileKeyStoreLoaderBuilderProvider.getBuilderForKeyStoreFileType(KeyStoreFileType.PKCS12); assertTrue(builder instanceof PKCS12FileLoader.Builder); }
public void testCnxManagerNPE() throws Exception {
ResourceMethod matches(String uri, HttpMethod method, MutableRequest request);  Resource getResource();  ResourceMethod getResourceMethod();  String urlFor(Object params); }
private boolean notUnderVersionControl(File file) throws SVNException { return SVNStatusType.UNKNOWN.equals(getStatus(file)); }
public void testRejection() throws Exception { String testDataPath = System.getProperty("test.data.dir", "src/test/resources/data");
private void closeAllHandles(ZooKeeper[] zkArr) throws InterruptedException { for (ZooKeeper zk : zkArr) if (zk != null)
public String getElectionAddress();  public String getClientAddress();  public String getLearnerType();  public boolean isLeader(); }
void visitClassType(String name);  void visitInnerClassType(String name);  void visitTypeArgument();  SignatureVisitor visitTypeArgument(char wildcard);  void visitEnd(); }
private void markField(int tableRow, int matchedRow, int col) { String actualValue = queryResults.getCell(fieldNames.get(col), matchedRow); String expectedValue = table.getCellContents(col, tableRow); table.setCell(col, tableRow, replaceSymbolsWithFullExpansion(expectedValue)); if (actualValue == null) fail(col, tableRow, "field not present");
public void execute() throws InterceptionException { interceptorStack.add(ResourceLookupInterceptor.class); interceptorStack.add(FlashInterceptor.class); interceptorStack.add(InterceptorListPriorToExecutionExtractor.class); interceptorStack.add(MultipartInterceptor.class); interceptorStack.add(instantiator); interceptorStack.add(ParametersInstantiatorInterceptor.class); interceptorStack.add(DeserializingInterceptor.class); interceptorStack.add(ExecuteMethodInterceptor.class); interceptorStack.add(OutjectResult.class); interceptorStack.add(DownloadInterceptor.class); interceptorStack.add(ForwardToDefaultViewInterceptor.class); interceptorStack.next(null, null); }
public static void main(String[] a) throws Exception { AuthTest lt = new AuthTest("testuser", "testpass"); lt.init(); long start = System.currentTimeMillis(); try { lt.run(); } finally { lt.shutdown(); } long end = System.currentTimeMillis(); System.out.println("Runtime: " + (end - start) + "ms"); }
public void defaultView() { String to = resolver.pathFor(requestInfo.getResourceMethod()); logger.debug("forwarding to {}", to); try { request.getRequestDispatcher(to).forward(request, response);
public void setConnectionDecreaseRatio(double val);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); }
public boolean isEnd() { return offset >= input.length(); } public void markStart(int markStartOffset) { this.markStartOffset = markStartOffset; }
public <T> Serializer from(T object);  public <T> Serializer from(T object, String alias); public boolean accepts(String format); }
private static String checkNullToEmpty(byte[] data) { if (data == null || data.length == 0) { return ""; } return new String(data, StandardCharsets.UTF_8); }
public void pageNameDifferent() throws Exception { aa.setPageName("b"); assertFalse(aa.equals(a)); assertFalse(a.equals(aa)); }
public Stat exists(String path, Watcher watcher) throws KeeperException, InterruptedException { int count = 0; do { try { return super.exists(path, watcher); } catch (KeeperException.ConnectionLossException e) { LoggerFactory.getLogger().warn( "ZooKeeper connection lost. Trying to reconnect."); } } while (!closed && (limit == -1 || count++ < limit)); return null; }
String getRelativeName(WikiPage base, WikiPage page) throws Exception; boolean isRoot(WikiPage page) throws Exception; WikiPage getRoot(WikiPage page) throws Exception; void traverse(WikiPage root, TraversalListener pageCrawlerTest) throws Exception; WikiPage getSiblingPage(WikiPage page, WikiPagePath pathRelativeToSibling) throws Exception; WikiPage findAncestorWithName(WikiPage page, String name) throws Exception; }
Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
protected Result createEvaluationMessage(String actual, String expected) { if (actual == null) return failMessage(expected, "Returned null value.");
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); crawler = new PageCrawlerImpl(); page1Path = PathParser.parse("PageOne"); page2Path = PathParser.parse("PageTwo"); child1FullPath = PathParser.parse("PageOne.ChildOne"); grandChild1FullPath = PathParser.parse("PageOne.ChildOne.GrandChildOne"); page1 = crawler.addPage(root, page1Path); page2 = crawler.addPage(root, page2Path); child1 = crawler.addPage(page1, PathParser.parse("ChildOne")); grandChild1 = crawler.addPage(child1, PathParser.parse("GrandChildOne")); }
public Converters insideRequest(Container container) { Converters converters = container.instanceFor(Converters.class); Converter<?> converter = converters.to(Void.class, container); assertThat(converter, is(instanceOf(ConverterInTheClasspath.class))); return null; }
public static void addFile(String rootPagePath, String name, String content) { FileUtil.createFile(rootPagePath + name, content); }
@Test public void scansPreformats() { ParserTest.assertScansTokenType("{{{stuff}}}", "Preformat", true); }
public void testSerializeDeserializeWithSNAPPY() throws IOException { testSerializeDeserialize(StreamMode.SNAPPY, ".snappy"); }
public AsyncCallback.StringCallback interceptCallback(AsyncCallback.StringCallback callback) { return new ChrootCreateCallback(this, callback); }
public void setup() { executor = new ListExecutor(); statements = new ArrayList<Object>(); statements.add(list("i1", "import", "fitnesse.slim.test")); statements.add(list("m1", "make", "testSlim", "TestSlim")); expectedResults.add(list("i1", "OK")); expectedResults.add(list("m1", "OK")); }
public boolean evaluate() { return lastLoggedZxid == q3.getQuorumPeer().getLastLoggedZxid(); }
protected List<SlimTable> createSlimTables(TestPage pageToTest) { NodeList[] fragments = getHtmlFragments(pageToTest); tableScanner = new HtmlTableScanner(fragments); return createSlimTables(tableScanner); }
protected File getArtifactJar(String groupId, String artifactId, String version, String classifier) throws Exception { Artifact artifact = factory.createArtifactWithClassifier(groupId, artifactId, version, ScalaMojoSupport.JAR, classifier); resolver.resolve(artifact, remoteRepos, localRepo); return artifact.getFile(); }
public SSLSocket call() throws Exception { SSLSocket sslSocket = (SSLSocket) listeningSocket.accept(); sslSocket.addHandshakeCompletedListener(new HandshakeCompletedListener() { @Override public void handshakeCompleted(HandshakeCompletedEvent handshakeCompletedEvent) { handshakesCompleted.getAndIncrement(); handshakeCompleted.countDown(); } }); assertEquals(1, sslSocket.getInputStream().read()); try {
public DERObject toASN1Object() { ASN1EncodableVector v = new ASN1EncodableVector(); v.add(new DERInteger(getModulus())); v.add(new DERInteger(getPublicExponent())); return new DERSequence(v); }
public void scenarioTableIsRegistered() throws Exception { getResultsForPageContents("|Scenario|myScenario|\n"); assertTrue("scenario should be registered", responder.testSystem .getScenarios().containsKey("myScenario"));
long getSessionId(); int getTimeout(); boolean isClosing(); } public static interface SessionExpirer { void expire(Session session); long getServerId(); } long createSession(int sessionTimeout);  boolean trackSession(long id, int to);  boolean commitSession(long id, int to);  boolean touchSession(long sessionId, int sessionTimeout);  void setSessionClosing(long sessionId);  void shutdown();  void removeSession(long sessionId);  boolean isTrackingSession(long sessionId);  public void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  public void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap();  public long getLocalSessionCount(); }
public static void registerParseDelegate(Class<?> type, Class<?> parseDelegate) { try {
public synchronized void interruptAllPendingAuth(){ for (AuthThread toStop : nodeMap.values()) { if (toStop.isAlive()) {
public LedgerSequence readEntries(LedgerHandle lh, long firstEntry, long lastEntry) throws InterruptedException, BKException {
abstract void disableWrite(); abstract void enableReadWriteOnly(); abstract void doTransport(int waitTimeOut, List<Packet> pendingQueue, LinkedList<Packet> outgoingQueue, ClientCnxn cnxn) throws IOException, InterruptedException; abstract void testableCloseSocket() throws IOException; abstract void sendPacket(Packet p) throws IOException; }
public String makeHtml(FitNesseContext context) { WikiPage page = pageData.getWikiPage(); HtmlPage html = context.htmlPageFactory.newPage(); WikiPagePath fullPath = page.getPageCrawler().getFullPath(page); String fullPathName = PathParser.render(fullPath); html.setTitle(fullPathName); html.setPageTitle(new PageTitle(fullPath).notLinked());
public CommandRunningFitClient build() { String testRunner = getTestRunner(); String classPath = getClassPath(); String[] command = buildCommand(getCommandPattern(), testRunner, classPath); Map<String, String> environmentVariables = createClasspathEnvironment(classPath); CommandRunningFitClient.CommandRunningStrategy runningStrategy = new CommandRunningFitClient.OutOfProcessCommandRunner(command, environmentVariables); return buildFitClient(runningStrategy); }
public void testShouldUseSpecifiedRevisionController() throws Exception { testProperties.setProperty(ComponentFactory.VERSIONS_CONTROLLER, NullVersionsController.class.getName()); factory.loadVersionsController(14); VersionsController defaultRevisionController = factory.getVersionsController(); assertEquals(NullVersionsController.class, defaultRevisionController.getClass()); }
private DependencyNodeFilter createScalaDistroDependencyFilter() { List<DependencyNodeFilter> filters = new ArrayList<>(); filters.add(new ScalaDistroArtifactFilter(getScalaOrganization())); return new AndDependencyNodeFilter(filters); }
public void testGetl() { (new GetlOperationImpl("key", 10, null)).toString(); }
void removeSession(long sessionId); void checkSession(long sessionId) throws KeeperException; }
private boolean isSaveOutOfOrder() { boolean returnValue; returnValue = false; if (saveTime.containsKey(fullPageName)) { long lastSaveTime = saveTime.get(fullPageName); if (lastSaveTime > thisEditTime) { returnValue = true; } } return returnValue; }
private String[] convertTableLineToStrings(String line) { return line.split("\\|"); }
public void acceptOutput(String output) throws Exception; public void acceptResults(TestSystem.TestSummary testSummary) throws Exception; public void exceptionOccurred(Exception e); }
protected WikiPage createChildPage(final String name) throws Exception { final FileSystemPage newPage = new FileSystemPage(getFileSystemPath(), name, this, this.revisioner); final File baseDir = new File(newPage.getFileSystemPath()); baseDir.mkdirs(); return newPage; }
public void doesNotEqualAnotherSymbolicPageWithOtherNameAndTheSameRealPage() { assertNotEquals(symPage, new SymbolicPage("SymPage2", pageTwo, pageOne)); }
public void shouldCompareUnevenAmountsOfTables() throws Exception { comparer.firstFileContent = "<table><tr><td>x</td></tr></table><table><tr><td>y</td></tr></table>"; comparer.secondFileContent = "<table><tr><td>x</td></tr></table>"; assertTrue(comparer.grabAndCompareTablesFromHtml()); assertEquals(2, comparer.resultContent.size()); assertEquals("pass", comparer.resultContent.get(0)); assertEquals("fail", comparer.resultContent.get(1)); }
public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat) { if (rc == 0) { successResponse.addAndGet(1); } else { LOG.info("failed response is {}", rc); } responseReceivedLatch.countDown(); }
synchronized public boolean touchSession(long sessionId, int sessionTimeout) { touchTable.put(sessionId, sessionTimeout); return true; }
public void register(ZKMBeanInfo bean, ZKMBeanInfo parent) throws JMException { assert bean != null; String path = null; if (parent != null) { path = mapBean2Path.get(parent); assert path != null; } path = makeFullPath(path, parent); if(bean.isHidden()) return; ObjectName oname = makeObjectName(path, bean); try { synchronized (LOCK) {
protected void createExternalRoot() throws Exception { FileUtil.createDir(ROOT); root = FileSystemPage.makeRoot(ROOT, "ExternalRoot", revisionController); context = new FitNesseContext(root); }
@Test public void translatesPreformats() { ParserTest.assertTranslatesTo("{{{stuff}}}", "<pre>stuff</pre>" + HtmlElement.endl); ParserTest.assertTranslatesTo("{{{''stuff''}}}", "<pre>''stuff''</pre>" + HtmlElement.endl); }
public FitClient build() { String testRunner = descriptor.getTestRunner(); String classPath = descriptor.getClassPath(); String command = buildCommand(descriptor.getCommandPattern(), testRunner, classPath); Map<String, String> environmentVariables = descriptor.createClasspathEnvironment(classPath); int ticketNumber = socketDealer.seekingSocket(this); CommandRunningFitClient.CommandRunningStrategy runningStrategy = new CommandRunningFitClient.OutOfProcessCommandRunner(command, environmentVariables, port, ticketNumber); return buildFitClient(runningStrategy); }
private Object newInstance(Object[] args, Constructor<?> constructor) throws IllegalAccessException, InstantiationException, InvocationTargetException { Object[] initargs = ConverterSupport.convertArgs(args, constructor.getParameterTypes()); return newInstance(constructor, initargs); }
protected void evaluateResults(Map<String, Object> pseudoResults, String expectedTable) { SlimAssertion.evaluateExpectations(assertions, pseudoResults); assertEquals(expectedTable, qt.getTable().toString()); }
void notifyPreTest(TestResponder testResponder, PageData data) throws Exception; }
public String formatExceptionResult() { if (exceptionResult.hasMessage()) { return String.format("<span class=\"%s\">%s</span>",
public void addSection(String name, String loginModuleName, final Map<String, String> conf) { AppConfigurationEntry[] entries = new AppConfigurationEntry[1]; entries[0] = new AppConfigurationEntry(loginModuleName, LoginModuleControlFlag.REQUIRED, conf); this.sections.put(name, entries); }
public void sendWriteRequest() throws Exception { ByteArrayOutputStream boas = new ByteArrayOutputStream(); BinaryOutputArchive boa = BinaryOutputArchive.getArchive(boas); CreateRequest createReq = new CreateRequest( "/session" + Long.toHexString(sessionId) + "-" + (++nodeId), new byte[0], Ids.OPEN_ACL_UNSAFE, 1); createReq.serialize(boa, "request"); ByteBuffer bb = ByteBuffer.wrap(boas.toByteArray()); Request req = new Request(null, sessionId, ++cxid, OpCode.create, bb, new ArrayList<Id>()); zks.firstProcessor.processRequest(req); }
private <T> T registerAndGetFromContainer(final Class<T> componentToBeRetrieved, final Class<?> componentToRegister) { return executeInsideRequest(new WhatToDo<T>() { public T execute(RequestInfo request, final int counter) {
public void doesNotIncludeInvalidPageName() throws Exception { TestRoot root = new TestRoot(); WikiPage parent = root.makePage("ParentPage", "stuff"); WikiPage currentPage = root.makePage(parent, "PageOne", "!include not.a.+wiki.page"); ParserTestHelper.assertTranslatesTo(currentPage, String.format(HTML_ERR, "not.a.+wiki.page",
protected String createEvaluationMessage(String value, String originalValue) { return (value != null && value.equals(BooleanConverter.TRUE)) ? pass(table.literalize(originalValue)) : fail(table.literalize(originalValue));
private static Map<Long, Set<String>> deepCopy(Map<Long, Set<String>> m) { Map<Long, Set<String>> m2 = new HashMap<>(); for (Map.Entry<Long, Set<String>> e : m.entrySet()) { m2.put(e.getKey(), new HashSet<>(e.getValue())); } return m2; }
public void onInvalidKeyException() { Toast.makeText(getContext(), R.string.fingerprint_invalid_key, Toast.LENGTH_SHORT).show(); }
public Parse at(int i, int j) { return at(i).parts.at(j); }
private void maybeWriteTestSystem() throws Exception { if (testSystemFullName != null) { HtmlTag systemTitle = new HtmlTag("h2", String.format("Test System: %s", testSystemFullName));
public void allTestingCompleteShouldAddTotalsToResponse() throws Exception { ChunkedResponse response = mock(ChunkedResponse.class); TestTextFormatter formatter = new TestTextFormatter(response); clock.elapse(7600); formatter.close(); verify(response).add("--------\n0 Tests,\t0 Failures\t7" + getDecimalSeparator() + "600 seconds.\n"); }
String getClassPath(); boolean runInProcess(); boolean isDebug();
public static String generateHtml(String state, String titleText, String bodyText) { HtmlTag outerBlock = new HtmlTag("div"); outerBlock.addAttribute("class", "collapsible" + state); outerBlock.add(new RawHtml("<ul>" + "<li><a href='#' class='expandall'>Expand</a></li>" + "<li><a href='#' class='collapseall'>Collapse</a></li>" + "</ul>")); HtmlTag title = new HtmlTag("p", titleText); title.addAttribute("class", "title"); outerBlock.add(title); HtmlTag body = new HtmlTag("div", bodyText); outerBlock.add(body); return outerBlock.html(); }
public static void main(String args[]) { CmdLineParser parser = new CmdLineParser(); CmdLineParser.Option typeOpt = parser.addStringOption("type"); CmdLineParser.Option verboseOpt = parser.addBooleanOption('v', "verbose"); CmdLineParser.Option nomungeOpt = parser.addBooleanOption("nomunge"); CmdLineParser.Option linebreakOpt = parser.addStringOption("line-break"); CmdLineParser.Option preserveSemiOpt = parser.addBooleanOption("preserve-semi"); CmdLineParser.Option preserveStringLiteralsOpt = parser.addBooleanOption("preserve-strings"); CmdLineParser.Option helpOpt = parser.addBooleanOption('h', "help"); CmdLineParser.Option charsetOpt = parser.addStringOption("charset"); CmdLineParser.Option outputFilenameOpt = parser.addStringOption('o', "output"); Reader in = null; Writer out = null; try {
public void shouldFlushWholeStreamToHttpResponse() throws IOException { InputStreamDownload fd = new InputStreamDownload(inputStream, "type", "x.txt"); fd.write(response); assertArrayEquals(bytes, outputStream.toByteArray()); }
public void closeComplete(int rc, LedgerHandle lh, Object ctx) { synchronized (ctx) { ControlObj cobj = (ControlObj) ctx;
public void setUp() throws Exception { testProperties = new Properties(); responderFactory = new ResponderFactory("."); testProvider = new SymbolProvider(new SymbolType[] {}); testWikiPageFactoryRegistry = new FileSystemPageFactory(); testSlimTableFactory = new SlimTableFactory(); testCustomComparatorsRegistry = new CustomComparatorRegistry(); URL pluginLoaderTestDirectory = new File("plugin-loader-test").toURI().toURL(); classLoader = new URLClassLoader(new URL[] { pluginLoaderTestDirectory }, ClassLoader.getSystemClassLoader()); ClassUtils.setClassLoader(classLoader); testTestSystemFactory = new MultipleTestSystemFactory(testSlimTableFactory, testCustomComparatorsRegistry, classLoader); loader = new PluginsLoader(new ComponentFactory(testProperties), classLoader); assertSymbolTypeMatch("!today", false); }
public ExtJSJson selected(Object value) { wrapper.selected = value; return this; }
public void visitInnerClass(final String name, final String outerName, final String innerName, final int access) { buf.setLength(0); buf.append("cw.visitInnerClass("); appendConstant(name); buf.append(", "); appendConstant(outerName); buf.append(", "); appendConstant(innerName); buf.append(", "); appendAccess(access | ACCESS_INNER); buf.append(");\n\n"); text.add(buf.toString()); }
public Object create(String instanceName, String className, Object... constructorArgs) throws SlimException { List<Object> list = ListUtility.<Object>list(instruction.getId(), MakeInstruction.INSTRUCTION, instanceName, className); addArguments(list, constructorArgs); statementsAsList.add(list); return null; }
public static void addConverter(Class<?> clazz, Converter converter) { converters.put(clazz, converter); }
public StatsOperation stats(String arg, StatsOperation.Callback cb) { return new StatsOperationImpl(arg, cb); }
private void validateConfiguredProperties() { if (enforceAuthEnabled) { if (enforceAuthSchemes.isEmpty()) {
public boolean offer(byte[] data) throws KeeperException, InterruptedException { for (; ; ) { try {
Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode();  Transcoder<Object> getDefaultTranscoder();  boolean shouldOptimize();  int getReadBufSize();  public HashAlgorithm getHashAlg();  long getMaxReconnectDelay(); }
void incrementFailedTestsCount(); void incrementErroredTestsCount(); void incrementIgnoredTestsCount(); void increment(ExecutionResult testSummary); void increment(TestSummary testSummary); TestPage getPageToTest(); void setCurrentScriptClass(Class<? extends ScriptTable> currentScriptClass); Class<? extends ScriptTable> getCurrentScriptClass(); void setCurrentScriptActor(String currentScriptActor); String getCurrentScriptActor(); }
public void tearDown() throws Exception { } public void testHead() throws Exception { String head = formatter.head(); assertSubString("<div id=\"test-summary\">Running Tests ...</div>", head); } public void testTestSummary() throws Exception { String summary = formatter.testSummary(new Counts(4, 0, 0, 0)); assertSubString("<script>document.getElementById(\"test-summary\").innerHTML =", summary); assertSubString("<strong>Assertions:</strong> 4 right, 0 wrong, 0 ignored, 0 exceptions", summary); assertSubString("document.getElementById(\"test-summary\").className = \"pass\"", summary); summary = formatter.testSummary(new Counts(4, 1, 0, 0)); assertSubString("<strong>Assertions:</strong> 4 right, 1 wrong, 0 ignored, 0 exceptions", summary); assertSubString("document.getElementById(\"test-summary\").className = \"fail\"", summary); } public void testExecutionStatusHtml() throws Exception { ExecutionLog log = new ExecutionLog(new MockWikiPage(), new CommandRunner()); String status = formatter.executionStatus(log); assertSubString("<div id=\"execution-status\">", status); } public void testTail() throws Exception { String tail = formatter.tail(); assertSubString("</html>", tail); } }
public void isNotParsedUntilItsParsed() { assertFalse(request.hasBeenParsed()); }
public void setup() { this.creator = new JavassistTypeCreator(); this.mockery = new VRaptorMockery(); }
public void addsTheErrorsOnTheResult() { try { validator.add(A_MESSAGE); validator.onErrorUse(Results.logic()).forwardTo(MyComponent.class).logic(); } catch (ValidationException e) { } verify(result).include(eq("errors"), argThat(is(not(empty())))); }
public Object convert(String value, Class type) { if(value==null) {
static public void byteBuffer2Record(ByteBuffer bb, Record record) throws IOException { BinaryInputArchive ia; ia = BinaryInputArchive.getArchive(new ByteBufferInputStream(bb)); record.deserialize(ia, "request"); }
public boolean hasChildPage(String pageName) throws Exception { if(children.containsKey(pageName)) return true;
State getState();  ByteBuffer getBuffer();  void writeComplete();  ReadType getReadType();  void initialize();  void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data);  void handleLine(String line); }
protected String[] buildCommand() { String[] slimArguments = buildArguments(); String[] slimCommandPrefix = super.buildCommand(getCommandPattern(), getTestRunner(), getClassPath()); return (String[]) ArrayUtils.addAll(slimCommandPrefix, slimArguments); }
int getRowCount(); int getColumnCountInRow(int rowIndex); String toString(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String literalize(String s); String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); }
boolean shouldShowView(ResourceMethod method);  boolean isAjax();  Outjecter getOutjecter(); }
public Maybe<String> render(Scanner scanner) { String body = new Translator().translate(scanner, new DelimiterToken(terminator)); if (scanner.isEnd()) return Maybe.noString; return new Maybe<String>(HtmlUtil.makeSpanTag(getContent(), body).html()); }
public void testLoadJKSTrustStoreWithWrongPassword() throws Exception {
public void removingParentPageShouldDeleteAllChildern() throws Exception { File childOne = file(defaultPath + "/RooT/LevelOne"); File childTwo = file(defaultPath + "/RooT/LevelOne/LevelTwo"); expect(revisionController.add(childOne.getAbsolutePath())).andReturn(null); expect(revisionController.add(childTwo.getAbsolutePath())).andReturn(null); expect(revisionController.delete(childOne.getAbsolutePath())).andReturn(null); replay(revisionController); WikiPage levelOne = crawler.addPage(root, PathParser.parse("LevelOne")); crawler.addPage(levelOne, PathParser.parse("LevelTwo")); assertTrue(childOne.exists()); root.removeChildPage("LevelOne"); assertFalse(childTwo.exists()); assertFalse(childOne.exists()); }
public void endVector(List v, String tag) throws IOException { closeIndent(); putIndent(); stream.print("</array>"); outsideVector(tag); }
public byte readByte(String tag) throws IOException { return (byte) readLong(tag); }
private int[] underscorePositions(String str) { int[] result = new int[2]; for (int i = 0; i < result.length; i++) { int last = i == 0 ? 0 : result[i - 1]; result[i] = str.indexOf('_', last + 1); } return result; }
private void checkFlush(boolean force) { if ((force && sb.length() > 0) || sb.length() > 2048) { sendBuffer(ByteBuffer.wrap(sb.toString().getBytes(UTF_8)));
private void checkExpectation(NodeList instructionList, int index, String id, String col, String row, String status, String type, String actual, String expected, String message) throws Exception { Element instructionElement = (Element) instructionList.item(index); Element expectation = XmlUtil.getElementByTagName(instructionElement, "expectation"); assertEquals(id, XmlUtil.getTextValue(expectation, "instructionId")); assertEquals(status, XmlUtil.getTextValue(expectation, "status")); assertEquals(type, XmlUtil.getTextValue(expectation, "type")); assertEquals(col, XmlUtil.getTextValue(expectation, "col")); assertEquals(row, XmlUtil.getTextValue(expectation, "row")); assertEquals(actual, XmlUtil.getTextValue(expectation, "actual")); assertEquals(expected, XmlUtil.getTextValue(expectation, "expected")); assertEquals(message, XmlUtil.getTextValue(expectation, "evaluationMessage")); }
public boolean isXmlFormat() { return format == Format.XML; }
public void chop() { File targetFile = new File(txnLogFile.getParentFile(), txnLogFile.getName() + ".chopped" + zxid); try ( InputStream is = new BufferedInputStream(new FileInputStream(txnLogFile));
private String testResultsToWikiText() throws Exception { String wikiText = tableScanner.toWikiText() + "!* Standard Output\n\n" + slimRunner.getOutput() + "*!\n" + "!* Standard Error\n\n" + slimRunner.getError() + "*!\n"; return wikiText; }
void add(Collection<? extends Message> message); boolean hasErrors(); }
public Matcher digits() { firstIsDigit('0'); matches.add(new ScanMatch() { @Override public Maybe<Integer> match(ScanString input, SymbolStream symbols, int offset) { int size = 0; while (isDigitInput('0', input, offset + size)) size++; return size > 0 ? new Maybe<>(size) : Maybe.noInteger; } }); return this; }
public void acceptOutput(String output) throws Exception; public void acceptResults(TestSystemBase.TestSummary testSummary) throws Exception; public void exceptionOccurred(Throwable e); }
protected Set<Object> union(Set<?> a, Set<?> b) { Set<Object> result = new HashSet<Object>(); result.addAll(a); result.addAll(b); return result; }
void setSessionClosing(long sessionId);  void shutdown();  void removeSession(long sessionId);  boolean isTrackingSession(long sessionId);  public void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  public void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap();  public long getLocalSessionCount(); }
public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; WikiPageAction that = (WikiPageAction) o; if (newWindow != that.newWindow) return false; if (linkName != null ? !linkName.equals(that.linkName) : that.linkName != null) return false; if (pageName != null ? !pageName.equals(that.pageName) : that.pageName != null) return false; if (query != null ? !query.equals(that.query) : that.query != null) return false; if (shortcutKey != null ? !shortcutKey.equals(that.shortcutKey) : that.shortcutKey != null) return false; return true; }
public void sortGroupsByName() { Collections.sort(childGroups, new GroupNameComparator()); }
public void shouldOptionallyExcludeFields() { String expectedResult = "{\"order\": {\n \"comments\": \"pack it nicely, please\"\n}}"; Order order = new Order(new Client("guilherme silveira"), 15.0, "pack it nicely, please"); serialization.from(order).exclude("price").serialize(); assertThat(result(), is(equalTo(expectedResult))); }
private void appendToMessage(String value) throws Exception { messageBuffer.write(value.getBytes()); }
public static void moveChildren(List children, WikiPage root, WikiPagePath newParentPath) throws Exception { for(Iterator iterator = children.iterator(); iterator.hasNext();) {
private void handleAuthorizeCallback(AuthorizeCallback ac) { String authenticationID = ac.getAuthenticationID(); String authorizationID = ac.getAuthorizationID(); LOG.info("Successfully authenticated client: authenticationID={}; authorizationID={}.", authenticationID, authorizationID); ac.setAuthorized(true);
private void createUpdateAndDoNotCopyOverLists() { tryToGetUpdateFilesFromJarFile(); File updateFileList = new File(context.getRootPagePath(), "updateList"); File updateDoNotCopyOverFileList = new File(context.getRootPagePath(), "updateDoNotCopyOverList"); tryToParseTheFileIntoTheList(updateFileList, updateList); tryToParseTheFileIntoTheList(updateDoNotCopyOverFileList, updateDoNotCopyOver); }
private void makeTestResponse(String pageName) throws Exception { root = InMemoryPage.makeRoot("RooT"); FitNesseContext context = FitNesseUtil.makeTestContext(root); PageBuilder pageBuilder = new PageBuilder(); page = pageBuilder.addPage(root, PathParser.parse(pageName), "original content"); PageData data = page.getData(); WikiPageProperties properties = data.getProperties(); properties.set(PageData.PropertySUITES, "New Page tags"); data.setContent("new stuff"); VersionInfo commitRecord = last(page.getVersions()); oldVersion = commitRecord.getName(); page.commit(data); MockRequest request = new MockRequest(); request.setResource(pageName); request.addInput("version", oldVersion); Responder responder = new VersionResponder(); response = (SimpleResponse) responder.makeResponse(context, request); }
public Maybe<Symbol> parse(Scanner scanner) { Symbol body = new Parser(getPage()).parseIgnoreFirst(scanner, SymbolType.ClosePreformat); if (scanner.isEnd()) return Symbol.Nothing; return new Maybe<Symbol>(new Symbol(SymbolType.Preformat).add(body)); }
public void buildDefaultTestSystemName() throws Exception { WikiPage testPage = WikiPageUtil.addPage(root, PathParser.parse("TestPage"), ""); String testSystemName = new Descriptor(testPage.readOnlyData(), false, new ClassPathBuilder().getClasspath(testPage)).getTestSystemName(); Assert.assertEquals("fit:fit.FitServer", testSystemName); }
public void shouldProvideFirstExceptionWithMessage() { listener.testExceptionOccurred(null, new SlimExceptionResult("ex", SlimServer.EXCEPTION_TAG + "message:<<Bad>>")); listener.testComplete(mockWikiTestPage(), summary("-")); verify(notifier).fireTestFailure(arguments.capture()); Failure failure = arguments.getValue(); assertThat(failure.getException(), instanceOf(Exception.class)); assertThat(failure.getMessage(), is("Bad")); }
public void processResult(int rc, String path, Object ctx, List<String> children) { this.children = (children == null ? new ArrayList<String>() : children); super.processResult(Code.get(rc), path, ctx); }
public void testSuiteSetUpAndTearDownIsCalledIfSingleTestIsRun() throws Exception { responder.setFastTest(false); WikiPage suitePage = pageBuilder.addPage(root, PathParser.parse("TestSuite"), classpathWidgets()); WikiPage testPage = pageBuilder.addPage(suitePage, PathParser.parse("TestPage"), outputWritingTable("Output of TestPage")); pageBuilder.addPage(suitePage, PathParser.parse(PageData.SUITE_SETUP_NAME), outputWritingTable("Output of SuiteSetUp")); pageBuilder.addPage(suitePage, PathParser.parse(PageData.SUITE_TEARDOWN_NAME), outputWritingTable("Output of SuiteTearDown")); PageData data = testPage.getData(); WikiPageProperties properties = data.getProperties(); properties.set(PageData.PropertySUITES, "Test Page tags"); testPage.commit(data); WikiPagePath testPagePath = testPage.getPageCrawler().getFullPath(); String resource = PathParser.render(testPagePath); request.setResource(resource); Response response = responder.makeResponse(context, request); MockResponseSender sender = new MockResponseSender(); sender.doSending(response); results = sender.sentData(); assertTrue(results.contains(">Output Captured<")); assertHasRegexp("ErrorLog", results); assertSubString("Test Page tags", results); WikiPage errorLog = errorLogsParentPage.getPageCrawler().getPage(testPagePath); String errorLogContent = errorLog.getData().getContent(); assertHasRegexp("Output of SuiteSetUp", errorLogContent); assertHasRegexp("Output of TestPage", errorLogContent); assertHasRegexp("Output of SuiteTearDown", errorLogContent); }
public abstract boolean createNode(String parent, String nodeName);  public abstract boolean deleteNode(String nodePath); }
private ArrayList<WikiPage> MakeTestPageList() throws Exception { SuiteContentsFinder finder = new SuiteContentsFinder(suite, null, root); ArrayList<WikiPage> testPages = new ArrayList<WikiPage>(); for (WikiPage page : finder.getAllPagesToRunForThisSuite()) testPages.add(page); return testPages; }
public void compress(Writer out, int linebreak, boolean munge, boolean warn, boolean preserveAllSemiColons) throws IOException { this.munge = munge; this.warn = warn; buildSymbolTree(); mungeSymboltree(); StringBuffer sb = printSymbolTree(linebreak, preserveAllSemiColons); String script = sb.toString();
public Matcher ruleClass(Class<? extends Rule> ruleClass) { this.ruleClass = ruleClass; return this; }
double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size); }
private void assertRemotePeerMXBeanAttributes(QuorumServer qs, String beanName) throws Exception { assertEquals( "Mismatches LearnerType!", qs.type.name(), JMXEnv.ensureBeanAttribute(beanName, "LearnerType")); assertEquals( "Mismatches ClientAddress!", getNumericalAddrPort(qs.clientAddr.getHostString() + ":" + qs.clientAddr.getPort()), getAddrPortFromBean(beanName, "ClientAddress")); assertEquals( "Mismatches ElectionAddress!", getNumericalAddrPort(qs.electionAddr.getOne().getHostString() + ":" + qs.electionAddr.getOne().getPort()), getAddrPortFromBean(beanName, "ElectionAddress")); assertEquals( "Mismatches QuorumAddress!",
public void validCtor() { ControllerServerConfig config = new ControllerServerConfig(AnyPort, AnyPort, AnyDataDir); Assert.assertEquals(AnyPort, config.getControllerAddress().getPort()); Assert.assertEquals(AnyPort, config.getClientPortAddress().getPort()); Assert.assertEquals(AnyDataDir, config.getDataDir().getName()); }
void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public void logShouldLogExceptions() { LogRecord logRecord = new LogRecord(Level.WARNING, "message"); logRecord.setLoggerName("MyLogger"); logRecord.setThrown(new RuntimeException(new IllegalArgumentException("Something went wrong here"))); String logOutput = new LogFormatter().format(logRecord); assertTrue(logOutput, logOutput.contains("WARNING: message [java.lang.IllegalArgumentException: Something went wrong here]" + System.getProperty("line.separator"))); assertTrue(logOutput, logOutput.contains("at fitnesse.logging.LogFormatterTest.logShouldLogExceptions"));
public void testAsyncSubscribeAndCloseSubscription() throws Exception { ByteString topic = ByteString.copyFromUtf8("myAsyncSubAndCloseSubTopic"); ByteString subscriberId = ByteString.copyFromUtf8("1"); subscriber.asyncSubscribe(topic, subscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(), null); assertTrue(queue.take()); subscriber.closeSubscription(topic, subscriberId); assertTrue(true); }
boolean waitForStartupInvocation(long timeout) throws InterruptedException { return startupInvokedLatch.await(timeout, TimeUnit.SECONDS); }
public void testCreation() throws Exception { assertEquals("SymPage", symPage.getName()); }
public PageData getDataVersion(String versionName) throws Exception; public VersionInfo commit(PageData data) throws Exception; public PageCrawler getPageCrawler();
public void testRollingRestartWithoutMembershipChange() throws Exception { int serverCount = 3; String config = generateNewQuorumConfig(serverCount); List<String> joiningServers = new ArrayList<>(); QuorumPeerTestBase.MainThread[] mt = new QuorumPeerTestBase.MainThread[serverCount]; for (int i = 0; i < serverCount; ++i) { mt[i] = new QuorumPeerTestBase.MainThread(i, clientPorts.get(i), config, false); mt[i].start(); joiningServers.add(serverAddress.get(i)); } for (int i = 0; i < serverCount; ++i) { assertTrue(ClientBase.waitForServerUp("127.0.0.1:" + clientPorts.get(i), CONNECTION_TIMEOUT), "waiting for server " + i + " being up"); } for (int i = 0; i < serverCount; ++i) { mt[i].shutdown(); mt[i].start(); verifyQuorumConfig(i, joiningServers, null); verifyQuorumMembers(mt[i]); } for (int i = 0; i < serverCount; i++) { mt[i].shutdown();
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws IOException, InterceptionException { parameters.set(provider.getParametersFor(method), nameProvider.parameterNamesFor(method.getMethod())); stack.next(method, resourceInstance); }
private TestSummary createTestSummary(ExecutionResult fail) { TestSummary testSummary = new TestSummary(); testSummary.add(fail); return testSummary; }
private static FitNesseContext loadContext(Arguments arguments) throws Exception { Properties properties = loadConfigFile(arguments.getConfigFile());
protected String getNewPageName() throws Exception { return newName; }
public void testTail() throws Exception { formatter.announceNumberTestsToRun(1); formatter.testStarted(page); formatter.testComplete(page, new TestSummary(4, 1, 0, 0)); formatter.close(); assertSubString("<strong>Assertions:</strong>", pageBuffer.toString()); }
public String formatError(String message) { return translate(new Symbol(SymbolType.Meta).add(message)); }
public void testSetQuotaWhenCreateNodeExceedBytesQuota() throws Exception { final String namespace = UUID.randomUUID().toString(); final String path = "/" + namespace + "/quota"; zk.create("/" + namespace, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); zk.create(path, "01234".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); StatsTrack quota = new StatsTrack(); quota.setByteHardLimit(10); SetQuotaCommand.createQuota(zk, path, quota); try { zk.create(path + "/data", "567891".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
private SimpleResponse requestPage(String name) throws Exception { MockRequest request = new MockRequest(); request.setResource(name); Responder responder = new WikiPageResponder(); return (SimpleResponse) responder.makeResponse(FitNesseUtil.makeTestContext(root), request); }
public static byte[] decode (char[] in, int iOff, int iLen) { if (iLen%4 != 0) throw new IllegalArgumentException ("Length of Base64 encoded input string is not a multiple of 4."); while (iLen > 0 && in[iOff+iLen-1] == '=') iLen--; int oLen = (iLen*3) / 4; byte[] out = new byte[oLen]; int ip = iOff; int iEnd = iOff + iLen; int op = 0; while (ip < iEnd) { int i0 = in[ip++]; int i1 = in[ip++]; int i2 = ip < iEnd ? in[ip++] : 'A'; int i3 = ip < iEnd ? in[ip++] : 'A'; if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127) throw new IllegalArgumentException ("Illegal character in Base64 encoded data."); int b0 = map2[i0]; int b1 = map2[i1]; int b2 = map2[i2]; int b3 = map2[i3]; if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0) throw new IllegalArgumentException ("Illegal character in Base64 encoded data."); int o0 = ( b0 <<2) | (b1>>>4); int o1 = ((b1 & 0xf)<<4) | (b2>>>2); int o2 = ((b2 & 3)<<6) | b3; out[op++] = (byte)o0; if (op<oLen) out[op++] = (byte)o1; if (op<oLen) out[op++] = (byte)o2; } return out; }
private MockRequest setupRequest() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("PageOne")); PageData data = page.getData(); data.setContent("some content"); WikiPageProperties properties = data.getProperties(); properties.set("Test", "true"); properties.set("Suites", "filter1,filter2"); page.commit(data); MockRequest request = new MockRequest(); request.setResource("PageOne"); return request; }
String getName();  int getQuorumSize();  int getInitLimit();  int getSyncLimit();  void setInitLimit(int initLimit);  void setSyncLimit(int syncLimit);  boolean isSslQuorum();  boolean isPortUnification();  long getObserverElectionDelayMS();  void setObserverElectionDelayMS(long delayMS); boolean getDigestEnabled(); void disableDigest(); }
public static Database GetDb1(Context ctx, boolean forceReload) throws IOException, InvalidKeyFileException, InvalidPasswordException { if ( mDb1 == null || forceReload ) { mDb1 = GetDb(ctx, TEST1_KDB, TEST1_PASSWORD, TEST1_KEYFILE, "/sdcard/test1.kdb"); } return mDb1; }
public void shoudlComplainIfNotInAServletEnviroment() throws IOException, ServletException { ServletRequest request = mockery.mock(ServletRequest.class); ServletResponse response = mockery.mock(ServletResponse.class); new VRaptor().doFilter(request, response, null); mockery.assertIsSatisfied(); }
private void initializeFileContents(String firstFilePath, String secondFilePath) throws ParserException { String content = getFileContent(firstFilePath); firstFileContent = content == null ? "" : content; content = getFileContent(secondFilePath); secondFileContent = content == null ? "" : content; }
public void timeCached100() throws Throwable { callOften(new CachedInteraction(), 100, 100); }
int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException; }
public void setUp() throws Exception { qb.setUp(); ct.hostPort = qb.hostPort; ct.setUpAll(); }
protected Response doMakeResponse(FitNesseContext context, Request request, boolean firstTimeForNewPage) { initializeResponder(context.root, request); SimpleResponse response = new SimpleResponse(); String resource = request.getResource(); WikiPagePath path = PathParser.parse(resource); PageCrawler crawler = context.root.getPageCrawler(); page = crawler.getPage(root, path, new MockingPageCrawler()); pageData = page.getData(); content = createPageContent(); String html = doMakeHtml(resource, context, firstTimeForNewPage); response.setContent(html); response.setMaxAge(0); return response; }
private List<Symbol> extractHeaderLines(final Translator translator) { SourcePage sourcePage = translator.getPage(); return sourcePage.findHeaderLines(); }
public void shouldBeAbleToConvertWithENUS() { when(request.getAttribute("javax.servlet.jsp.jstl.fmt.locale.request")).thenReturn("en_US"); assertThat(converter.convert("10.00", double.class, bundle), is(equalTo(Double.parseDouble("10.00")))); assertThat(converter.convert("10.01", double.class, bundle), is(equalTo(Double.parseDouble("10.01")))); }
public void testUnavailableServers() { client.getVersions(); assertEquals(Collections.emptyList(), client.getUnavailableServers()); }
public void setup() { this.converter = new PrimitiveLongConverter(); this.errors = new ArrayList<ValidationMessage>(); this.bundle = ResourceBundle.getBundle("messages"); }
public Maybe<String> findVariable(String key) { String value; if (key.equals("RUNNING_PAGE_NAME")) value = page.getName(); else if (key.equals("RUNNING_PAGE_PATH")) value = page.getPageCrawler().getFullPath().parentPath().toString(); else return Maybe.noString; return new Maybe<String>(value); }
public void setup() throws Exception { this.stream = new ByteArrayOutputStream(); HttpServletResponse response = mock(HttpServletResponse.class); when(response.getWriter()).thenReturn(new PrintWriter(stream)); this.serialization = new XStreamXMLSerialization(response, new DefaultTypeNameExtractor(), new NullProxyInitializer(), XStreamBuilderImpl.cleanInstance()); }
public synchronized void delayResponses(long delayInMs) { if (delayInMs < 0) { throw new IllegalArgumentException("delay must be non-negative"); } responseDelayInMs = delayInMs; }
public void testGetStatsSizes() throws Exception { if (isMembase()) { return; }
PageCrawler getPageCrawler(); @Deprecated
protected Object[] convertArgs(Method method, Object args[]) { Class<?>[] argumentTypes = method.getParameterTypes(); return ConverterSupport.convertArgs(args, argumentTypes); }
static boolean qualifiesAsSymbolReplacement(String text) { return text.startsWith("$") && SYMBOL_REPLACEMENT_PATTERN.matcher(text).matches(); }
protected String getFitNesseRoot(Class<?> suiteClass) throws Exception { return ContextConfigurator.DEFAULT_ROOT; }
public void testComplete(WikiPage test, TestSummary testSummary) throws Exception { for (BaseFormatter formatter : formatters) formatter.testComplete(test, testSummary);
public static KeyStore loadTrustStore( String trustStoreLocation, String trustStorePassword, String trustStoreTypeProp) throws IOException, GeneralSecurityException { KeyStoreFileType storeFileType = KeyStoreFileType.fromPropertyValueOrFileName(trustStoreTypeProp, trustStoreLocation); return FileKeyStoreLoaderBuilderProvider .getBuilderForKeyStoreFileType(storeFileType)
public GetFuture<T> removeListener(GetCompletionListener listener) { super.removeFromListeners((GenericCompletionListener) listener); return this; }
public void testRenderSubPage() throws Exception { IncludeWidget widget = createIncludeWidget(page2, ">ChildOne"); String result = widget.render(); verifyRegexes(new String[]{"child page", "class=\"included\""}, result); }
public String decryptData(byte[] encrypted) throws Exception; }
SymbolMatch makeMatch(ScanString input, SymbolStream symbols); }
public void shouldNotBeEqualIfFinalCountsAreDifferent() throws Exception { report1.finalCounts = new TestSummary(1,2,3,4); report2.finalCounts = new TestSummary(4,3,2,1); assertFalse(report1.equals(report2)); }
public <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc) { return asyncCAS(key, casId, 0, value, tc); }
public static FitNesseContext makeTestContext(WikiPageFactory wikiPageFactory, Properties properties) { return makeTestContext(wikiPageFactory.makePage(createTemporaryFolder(), "RooT", null, new SystemVariableSource(properties)), PORT); }
public void ChildrenAreLoaded() throws Exception { fileSystem.makeFile("somewhere/MyTest/myfile.html", "stuff"); Assert.assertEquals(1, new ExternalSuitePage("somewhere/MyTest", "MyTest", rootPage, fileSystem).getChildren().size()); }
static ByteBuffer createMsg(int state, long leader, long zxid, long epoch) { return FastLeaderElection.buildMsg(state, leader, zxid, 1, epoch); }
public Response makeResponse(FitNesseContext context, Request request) { SimpleResponse response = new SimpleResponse(); String resource = request.getResource(); WikiPagePath path = PathParser.parse(resource); WikiPage page = context.root.getPageCrawler().getPage(path); if (page == null) return new NotFoundResponder().makeResponse(context, request); PageData data = page.getData(); saveAttributes(request, data); VersionInfo commitRecord = page.commit(data); response.addHeader("Current-Version", commitRecord.getName()); context.recentChanges.updateRecentChanges(data); response.redirect(context.contextRoot, resource); return response; }
MemcachedNode getPrimary(String k);  Iterator<MemcachedNode> getSequence(String k);  Collection<MemcachedNode> getAll();  NodeLocator getReadonlyCopy();  void updateLocator(final List<MemcachedNode> nodes); }
long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void testNextConfigCompletion() throws Exception { ClientBase.setupTestEnv();
public void shouldNotComplainAboutNull() { assertThat(converter.convert(null, Integer.class, errors, bundle), is(nullValue())); }
public void start() { client.start(); testSystemStarted(this); }
KeyStore loadTrustStore() throws IOException, GeneralSecurityException; }
@Test public void translatesWikiWords() throws Exception { WikiPage root = InMemoryPage.makeRoot("RooT"); PageCrawler crawler = root.getPageCrawler(); WikiPage pageOne = crawler.addPage(root, PathParser.parse("PageOne")); WikiPage pageOneTwo = crawler.addPage(pageOne, PathParser.parse("PageTwo")); WikiPage pageOneThree = crawler.addPage(pageOne, PathParser.parse("PageThree")); ParserTest.assertTranslates(pageOne, "PageOne", "<a href=\"PageOne\">PageOne</a>" + HtmlElement.endl); ParserTest.assertTranslates(pageOneTwo, "PageTwo", "<a href=\"PageOne.PageTwo\">PageTwo</a>" + HtmlElement.endl); ParserTest.assertTranslates(pageOneThree, ".PageOne", "<a href=\"PageOne\">.PageOne</a>" + HtmlElement.endl);
public WikiPage getHeaderPage() throws Exception; public WikiPage getFooterPage() throws Exception;
protected void ignorableProtected() { } @Path("/findable") public void findable() { } } @Test public void ignoresNonPublicMethod() { final Resource resource = mockery.resource(MyResource.class); this.router.register(resource); assertThat(router.parse("/MyResource.ignorableStatic.logic", HttpMethod.POST, request), is(nullValue())); mockery.assertIsSatisfied(); } @Test public void ignoresStaticMethod() { final Resource resource = mockery.resource(MyResource.class); this.router.register(resource); assertThat(router.parse("/MyResource.ignorableProtected.logic", HttpMethod.POST, request), is(nullValue())); mockery.assertIsSatisfied(); } @Test public void returnsNullIfNothingFound() { final Resource resource = mockery.resource(MyResource.class); this.router.register(resource); assertThat(router.parse("/MyResource.unfindable.logic", HttpMethod.POST, request), is(nullValue())); mockery.assertIsSatisfied(); } @Test public void returnsTheCorrectDefaultResourceMethodIfFound() throws SecurityException, NoSuchMethodException { final Resource resource = mockery.resource(MyResource.class); this.router.register(resource); assertThat(router.parse("/MyResource.findable.logic", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(MyResource.class.getMethod("findable")))); mockery.assertIsSatisfied(); } }
public static <T> Matcher<T> shouldBe(Matcher<T> matcher) { return new ShouldBe<T>(matcher); }
public abstract boolean isAuthenticated(String username, String password); @Override public String toString() { return getClass().getName(); } }
public String toString() { String jsonString = null; try { jsonString = mapper.writer(new MinimalPrettyPrinter()).writeValueAsString(root); } catch (JsonProcessingException e) { jsonString = "{\"ERR\", " + e.getMessage() + "}"; } return jsonString; }
public void evaluateExpectation(Map<String, Object> returnValues) { TestSummary counts = scriptTable.getTestSummary(); boolean testStatus = (counts.wrong + counts.exceptions) == 0; SlimTable parent = scriptTable.getParent(); parent.getTable().setTestStatusOnRow(row, testStatus); parent.getTestSummary().add(scriptTable.getTestSummary()); }
public void changesHttpMethodParamOnValidationRedirection() throws Exception { mockery.checking(new Expectations() { { one(request).setParameter("_method", "POST"); } }); validator.onError().goTo(MyComponent.class).annotatedLogic(); mockery.assertIsSatisfied(); }
public String toString() { return "ip: " + sock.socket().getRemoteSocketAddress() + " sessionId: 0x" + Long.toHexString(sessionId);
public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException { if (!(req instanceof HttpServletRequest) || !(res instanceof HttpServletResponse)) { throw new ServletException( "VRaptor must be run inside a Servlet environment. Portlets and others aren't supported."); } HttpServletRequest request = (HttpServletRequest) req; HttpServletResponse response = (HttpServletResponse) res; VRaptorRequest vraptorRequest = new VRaptorRequest(servletContext, request, response);
public String getHelpText() throws Exception; public boolean isOpenInNewWindow(); }
private boolean tableIsValid(String possibleTable) { if (isValidHtml(possibleTable)) { return hasOneTable();
public void disableRecv(boolean waitDisableRecv) { if (throttled.compareAndSet(false, true)) { if (LOG.isDebugEnabled()) {
private List<SlimTable> createSlimTables(TableScanner tableScanner) { List<SlimTable> allTables = new LinkedList<SlimTable>(); for (Table table : tableScanner) createSlimTable(allTables, table); return allTables; }
public int complete(String buffer, int cursor, List candidates) {
int getColumnCountInRow(int rowIndex); String toString(); String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); }
public void compress(Writer out, int linebreak, boolean munge, boolean warn, boolean preserveAllSemiColons) throws IOException { this.munge = munge; this.warn = warn; buildSymbolTree(); mungeSymboltree(); StringBuffer sb = printSymbolTree(linebreak, preserveAllSemiColons); out.write(sb.toString()); }
public void shouldReturnNullWhenFileIsNotPresent() { File home = JavaLocator.findHomeFromToolchain(new ReturningToolChain("my-path-to-java")); assertNull(home); }
public void setUp() throws Exception { mockery = new VRaptorMockery(); result = mockery.mock(Result.class); request = mockery.mock(MutableRequest.class); router = mockery.mock(Router.class); provider = mockery.mock(ParametersProvider.class); localization = mockery.mock(Localization.class); refererResult = new DefaultRefererResult(result, request, router, provider, localization); }
public void shouldBeAbleToDeserializeADogNamedDifferently() throws Exception { InputStream stream = new ByteArrayInputStream("<pet><name>Brutus</name><age>7</age></pet>".getBytes()); when(provider.parameterNamesFor(bark.getMethod())).thenReturn(new String[] {"pet"}); Object[] deserialized = deserializer.deserialize(stream, bark); assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(Dog.class))); Dog dog = (Dog) deserialized[0]; assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7)); }
public void testFourLetterWordsEnableAllCommandsThroughExplicitList() throws Exception { stopServer(); FourLetterCommands.resetWhiteList(); System.setProperty("zookeeper.4lw.commands.whitelist", "ruok, envi, conf, stat, srvr, cons, dump," + "wchs, wchp, wchc, srst, crst, " + "dirs, mntr, gtmk, isro, stmk"); startServer(); verifyAllCommandsSuccess(); }
public void testParse() throws Exception { final InputStream is = new ByteArrayInputStream( ("Key1: Value1\n" + "Key2: Value2\n" + " Value2.1\n" + " Value2.2\n" + "Key3: Value3\n").getBytes()); final PackageDescriptor d = new PackageDescriptor(is); assertTrue(d.isValid()); }
public void compress(Writer out, int linebreakpos) throws IOException { Pattern p; Matcher m; String css; StringBuffer sb; int startIndex, endIndex;
public static Leader createMockLeader(File tmpDir, QuorumPeer peer) throws IOException, NoSuchFieldException, IllegalAccessException { LeaderZooKeeperServer zk = prepareLeader(tmpDir, peer); return new MockLeader(peer, zk); }
public void cancel() { cancelled=true; wasCancelled(); callback.complete(); }
public void tryEnterWithUndefinedFunction() throws Exception { Parse table = doTableOf( row("start", "fit.testFxtr.TestActionFixture") + row("enter", "undefined", "1")); assertTrue(getStringFor(table).contains("Could not find method: undefined.")); }
public void oneRowThatFails() throws Exception { assertQueryResults("|2|4|\n", fitnesse.util.ListUtility.list(
public void test353TTL() throws KeeperException, InterruptedException { DataTree dataTree = serverFactory.zkServer.getZKDatabase().dataTree; long ephemeralOwner = EphemeralTypeEmulate353.ttlToEphemeralOwner(100); dataTree.createNode("/foo", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, ephemeralOwner, dataTree.getNode("/").stat.getCversion() + 1, 1, 1); final AtomicLong fakeElapsed = new AtomicLong(0); ContainerManager containerManager = newContainerManager(fakeElapsed); containerManager.checkContainers(); assertNotNull("Ttl node should not have been deleted yet", zk.exists("/foo", false)); fakeElapsed.set(1000); containerManager.checkContainers(); assertNull("Ttl node should have been deleted", zk.exists("/foo", false)); }
public int hashCode() { return StringUtil.join(names, "").hashCode(); }
protected void addTestSystemListeners(RunNotifier notifier, MultipleTestsRunner testRunner, Class<?> suiteClass) { testRunner.addTestSystemListener(new ListenerExtension(notifier, suiteClass)); }
<T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndLock(final String key, int exp); <T> Future<CASValue<T>> asyncGetAndLock(final String key, int exp, final Transcoder<T> tc); CASValue<Object> getAndLock(String key, int exp); <T> CASValue<T> getAndLock(String key, int exp, Transcoder<T> tc); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public boolean equals(Object arg0) { return wrapped.equals(arg0); }
public void shouldReturnTrueIfTypeEqualsGeneric() { ParameterizedType gen = (ParameterizedType) ExtGenericController.class.getGenericSuperclass(); Method method = new Mirror().on(GenericController.class).reflect().method("anotherMethod").withAnyArgs(); Class<?> param = method.getParameterTypes()[0]; Type type = gen.getActualTypeArguments()[0]; assertThat(deserializer.checkGenericEqualsToParameter(param, type), equalTo(true)); }
public void exceptionForBadMethod() throws Exception { Parse table = doTableOf(row("noSuchMethod?") + row("1")); String s = getStringFor(table); assertTrue(s.contains("Could not find method: noSuchMethod?.")); }
public void testUnGracefulName() throws Exception { assertEquals("BadCompany", GracefulNamer.disgrace("Bad Company")); assertEquals("BadCompany", GracefulNamer.disgrace("bad company")); assertEquals("BadCompany", GracefulNamer.disgrace("Bad-Company")); assertEquals("BadCompany", GracefulNamer.disgrace("Bad Company.")); assertEquals("BadCompany", GracefulNamer.disgrace("(Bad Company)")); assertEquals("BadCompany", GracefulNamer.disgrace("BadCompany")); assertEquals("Bad123Company", GracefulNamer.disgrace("bad 123 company")); assertEquals("Bad123Company", GracefulNamer.disgrace("bad 123company")); assertEquals("Bad123Company", GracefulNamer.disgrace(" bad \t123 company ")); assertEquals("Bad123Company", GracefulNamer.disgrace("Bad123Company"));
protected File destinationFile() { return new File(destination, filename); }
public void returnsTheCorrectDefaultResourceMethodIfFound() throws SecurityException, NoSuchMethodException { final ResourceClass resource = mockery.resource(MyResource.class); this.router.register(resource); assertThat(router.parse("/MyResource.findable.logic", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(MyResource.class.getMethod("findable")))); mockery.assertIsSatisfied(); }
public void checkAccept(String host, int port) { if (delegate != null) { delegate.checkAccept(host, port);
public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { testSystemFullName = (testSystemName + ":" + testRunner).replaceAll("\\\\", "/"); String tag = String.format("<h3>%s</h3>\n", testSystemFullName); HtmlTag insertScript = HtmlUtil.makeAppendElementScript(TEST_SUMMARIES_ID, tag); writeData(insertScript.html());
public void testToMap() { Map<String, Object> m = c.toMap(); assertEquals(9, m.size()); assertEquals(Integer.valueOf(1), m.get(ZooKeeperServerConf.KEY_CLIENT_PORT)); assertEquals("a", m.get(ZooKeeperServerConf.KEY_DATA_DIR)); assertEquals("b", m.get(ZooKeeperServerConf.KEY_DATA_LOG_DIR)); assertEquals(Integer.valueOf(2), m.get(ZooKeeperServerConf.KEY_TICK_TIME)); assertEquals(Integer.valueOf(3), m.get(ZooKeeperServerConf.KEY_MAX_CLIENT_CNXNS)); assertEquals(Integer.valueOf(4), m.get(ZooKeeperServerConf.KEY_MIN_SESSION_TIMEOUT)); assertEquals(Integer.valueOf(5), m.get(ZooKeeperServerConf.KEY_MAX_SESSION_TIMEOUT)); assertEquals(Long.valueOf(6L), m.get(ZooKeeperServerConf.KEY_SERVER_ID)); assertEquals(Integer.valueOf(7), m.get(ZooKeeperServerConf.KEY_CLIENT_PORT_LISTEN_BACKLOG)); }
public void shouldResolveSessionScopedAnnotationToSessionScope() { ScopeMetadata scopeMetadata = readScopeMetadata(SessionScopedComponent.class); Assert.assertEquals(ScopedProxyMode.NO, scopeMetadata.getScopedProxyMode()); Assert.assertEquals(WebApplicationContext.SCOPE_SESSION, scopeMetadata.getScopeName()); }
public void onLeaderShutdown(QuorumPeer qp, Leader leader);  public void onFollowerStarted(QuorumPeer qp, Follower newFollower);  public void onFollowerShutdown(QuorumPeer qp, Follower follower); }
private void createFakeUpdateListFiles() throws IOException { updateList = new File(GradleSupport.TEST_CLASSES_DIR + "/Resources/updateList"); updateDoNotCopyOver = new File(GradleSupport.TEST_CLASSES_DIR +"/Resources/updateDoNotCopyOverList"); FileUtil.createFile(updateList, "FitNesseRoot/files/TestFile\nFitNesseRoot/files/BestFile\n"); FileUtil.createFile(updateDoNotCopyOver, "FitNesseRoot/SpecialFile"); }
public void shouldDelegateToStatusOnNotFound() throws Exception { Status status = mockResult(Status.class); result.notFound(); verify(status).notFound();
String getContentType();  InputStream getFile();  String getFileName(); }
public static List<HostPort> parseHostPortList(String hplist) { ArrayList<HostPort> alist = new ArrayList<>(); for (String hp : hplist.split(",")) { int idx = hp.lastIndexOf(':'); String host = hp.substring(0, idx); int port; try { port = Integer.parseInt(hp.substring(idx + 1)); } catch (RuntimeException e) { throw new RuntimeException("Problem parsing " + hp + e.toString()); } alist.add(new HostPort(host, port)); } return alist; }
void readAll() { for (int i = 0; i < count; i++) { String cpath = path + "/" + i;
DeleteOperation delete(String key, int when, OperationCallback operationCallback);  FlushOperation flush(int delay, OperationCallback operationCallback);  GetOperation get(String key, GetOperation.Callback callback);  GetsOperation gets(String key, GetsOperation.Callback callback);  GetOperation get(Collection<String> value, GetOperation.Callback cb);  MutatatorOperation mutate(Mutator m, String key, int by, long def, int exp, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb); }
public void testCanCrossMultipleVirtualLinks() throws Exception { WikiPage secondTarget = crawler.addPage(root, PathParser.parse("SecondTarget")); crawler.addPage(secondTarget, PathParser.parse("ChildOfSecondTarget")); FitNesseUtil.bindVirtualLinkToPage(child1, secondTarget); WikiPage virtualChild = crawler.getPage(vlink, PathParser.parse("ChildOne.ChildOfSecondTarget")); assertNotNull(virtualChild); assertEquals("ChildOfSecondTarget", virtualChild.getName()); }
static void optimize(final File f, final File d, final Remapper remapper) throws IOException { if (f.isDirectory()) { File[] files = f.listFiles();
public void testUndefinedVariable() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("MyPage")); ParentWidget widgetRoot = new WidgetRoot("", page); VariableWidget w = new VariableWidget(widgetRoot, "${x}"); assertSubString("undefined variable: x", w.render()); }
public void shouldStoreFirstVersionAsZero() { WikiPage root = wikiPageFactory.makePage(null, "RooT", null); root.commit(root.getData()); assertEquals(1, root.getVersions().size()); assertEquals("0", root.getVersions().iterator().next().getName()); }
public void testQuorumSSL() throws Exception { q1 = new MainThread(1, clientPortQp1, quorumConfiguration, SSL_QUORUM_ENABLED); q2 = new MainThread(2, clientPortQp2, quorumConfiguration, SSL_QUORUM_ENABLED); q1.start(); q2.start(); assertTrue(ClientBase.waitForServerUp("127.0.0.1:" + clientPortQp1, CONNECTION_TIMEOUT)); assertTrue(ClientBase.waitForServerUp("127.0.0.1:" + clientPortQp2, CONNECTION_TIMEOUT)); clearSSLSystemProperties();
public void testConnections() throws IOException, InterruptedException { testCommand("connections", new Field("connections", Iterable.class), new Field("secure_connections", Iterable.class)); }
TwoWayConverter<?> twoWayConverterFor(Class<?> type, Container container); }
public void pruneVersions(FileSystemPage page, Collection<ZipFileVersionInfo> versions) { List<ZipFileVersionInfo> versionsList = makeSortedVersionList(versions); if (versions.size() > 0) { VersionInfo lastVersion = versionsList.get(versionsList.size() - 1);
Collection<? extends VersionInfo> history(FileSystemPage page); VersionInfo makeVersion(FileSystemPage page, PageData data); VersionInfo getCurrentVersion(FileSystemPage page); }
public TestResult evaluateExpectation(Object returnValue) { String value = getSymbol(this.symbolName); return super.evaluateExpectation(value); }
public void run(String[] args) throws Exception { args(args); requestTest(); discardHeaders(); String xmlDocumentString = getXmlDocument(); testResultsDocument = XmlUtil.newDocument(xmlDocumentString); gatherCounts(); writeOutputFile(); verboseOutput(); }
StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  KeyedOperation touch(String key, int expiration, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(StoreType t, String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  SASLMechsOperation saslMechs(OperationCallback cb);  SASLAuthOperation saslAuth(String[] mech, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  SASLStepOperation saslStep(String[] mech, byte[] challenge, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  Collection<Operation> clone(KeyedOperation op);  TapOperation tapBackfill(String id, long date, OperationCallback cb);  TapOperation tapCustom(String id, RequestMessage message, OperationCallback cb);  TapOperation tapAck(TapOpcode opcode, int opaque, OperationCallback cb); }
public void shouldStillFinishWhenResultsOkButSummaryReportsFailures() { TestResult testResult = SlimTestResult.ok("-"); listener.testAssertionVerified(null, testResult); listener.testComplete(mockWikiTestPage(), summary("W")); verify(notifier).fireTestFailure(arguments.capture()); verify(notifier).fireTestFinished(description); Failure failure = arguments.getValue(); assertThat(failure.getMessage(), is("Test failures occurred on page WikiPage")); }
public void onEachDir(TarArchiveEntry dirEntry) throws IOException { invocations.add(new Invocation( dirEntry.getName(),
public void setUp() throws Exception { clientX509Util = new ClientX509Util(); String testDataPath = System.getProperty("test.data.dir", "src/test/resources/data"); System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY, "org.apache.zookeeper.server.NettyServerCnxnFactory"); System.setProperty(ZKClientConfig.ZOOKEEPER_CLIENT_CNXN_SOCKET, "org.apache.zookeeper.ClientCnxnSocketNetty"); System.setProperty(ZKClientConfig.SECURE_CLIENT, "true"); System.setProperty(clientX509Util.getSslAuthProviderProperty(), "x509"); System.setProperty(clientX509Util.getSslKeystoreLocationProperty(), testDataPath + "/ssl/testKeyStore.jks"); System.setProperty(clientX509Util.getSslKeystorePasswdProperty(), "testpass"); System.setProperty(clientX509Util.getSslTruststoreLocationProperty(), testDataPath + "/ssl/testTrustStore.jks"); System.setProperty(clientX509Util.getSslTruststorePasswdProperty(), "testpass"); System.setProperty("javax.net.debug", "ssl"); System.setProperty("zookeeper.authProvider.x509", "org.apache.zookeeper.server.auth.X509AuthenticationProvider"); String host = "localhost"; int port = PortAssignment.unique(); hostPort = host + ":" + port; serverFactory = ServerCnxnFactory.createFactory(); serverFactory.configure(new InetSocketAddress(host, port), maxCnxns, -1, true); super.setUp(); }
public void error(String message, Object... args) { error(String.format(message, args), getThrowable(args)); }
public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max); public boolean getResponseCachingEnabled(); public void setResponseCachingEnabled(boolean isEnabled);  public int getConnectionMaxTokens(); public void setConnectionMaxTokens(int val); public int getConnectionTokenFillTime(); public void setConnectionTokenFillTime(int val); public int getConnectionTokenFillCount(); public void setConnectionTokenFillCount(int val); public int getConnectionFreezeTime(); public void setConnectionFreezeTime(int val); public double getConnectionDropIncrease(); public void setConnectionDropIncrease(double val); public double getConnectionDropDecrease(); public void setConnectionDropDecrease(double val); public double getConnectionDecreaseRatio(); public void setConnectionDecreaseRatio(double val);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); }
public String toString() { return "ZStat(" + path + "," + "b64[" + (data64 == null ? null : new String(data64)) + "],"
public void setup() { config = new DefaultMultipartConfig(); MockitoAnnotations.initMocks(this); mockCreator = mock(ServletFileUploadCreator.class); mockUpload = mock(ServletFileUpload.class); when(mockCreator.create(Mockito.any(FileItemFactory.class))).thenReturn(mockUpload); }
public void tearDown() throws Exception { System.setProperty("zookeeper.snapCount", snapCount); super.tearDown(); }
public Builder withTtl(long ttl) { this.ttl = ttl; return this; }
protected void maybeMakeErrorNavigatorVisible(){ if(exceptionsOrErrorsExist()){ writeData(initErroMetadata());
public Object returnValue() { if (List.class.isAssignableFrom(type) && value instanceof List) { return value;
private void sendPrimePacket() throws IOException {
public void ensureExecuteIsCalledForRowWithOnlyVariables() throws Exception { doTableOf(row("stringField") + row("whatever")); assertEquals(1, executeCalled); }
private ScenarioTable makeScenarioTable(String contents) throws Exception { String pageContents = "|" + EXTENSION_NAME + "|" + contents + "|\n"; WikiPageUtil.setPageContents(root, pageContents); TableScanner ts = new HtmlTableScanner(root.getHtml()); Table t = ts.getTable(0); SlimTestContextImpl testContext = new SlimTestContextImpl(); st = new AutoArgScenarioTable(t, "id", testContext); instructions.addAll(st.getAssertions()); return st; }
public void testIncludesBody() throws Exception { assertSubString("<body>", html); assertSubString("</body>", html); }
public static String makePageHtml(ReadOnlyPageData pageData) { StringBuffer buffer = new StringBuffer(); buffer.append(WikiPageUtil.getHeaderPageHtml(pageData.getWikiPage())); buffer.append(pageData.getHtml()); return buffer.toString(); }
protected boolean pageMatches(WikiPage page) throws Exception { String pageContent = page.getData().getContent(); Matcher matcher = regularExpression.matcher(pageContent); return matcher.find(); }
public void testFromFilename() { Assert.assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromFilename("mykey.jks")); Assert.assertEquals(KeyStoreFileType.JKS, KeyStoreFileType.fromFilename("/path/to/key/dir/mykey.jks")); Assert.assertEquals(KeyStoreFileType.PEM, KeyStoreFileType.fromFilename("mykey.pem")); Assert.assertEquals(KeyStoreFileType.PEM, KeyStoreFileType.fromFilename("/path/to/key/dir/mykey.pem"));
GetOperation get(Collection<String> value, GetOperation.Callback cb);  MutatatorOperation mutate(Mutator m, String key, int by, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb); }
public void shouldFoundAGetterWithAProxyObject() throws Exception { final House aSimpleJavaBeans = new House(); House beanProxified = proxify(aSimpleJavaBeans); final List<Method> methodsOfHouseClass = Arrays.asList(House.class.getMethods()); Method foundMethod = ReflectionBasedNullHandler.findGetter(beanProxified, "Mouse", context); assertThat(methodsOfHouseClass, hasItem(foundMethod)); assertTrue(Mouse.class.isAssignableFrom(foundMethod.getReturnType())); assertThat(foundMethod.getName(), is(startsWith("getMouse"))); }
public void setUp() throws Exception { Context ctx = InstrumentationRegistry.getInstrumentation().getTargetContext(); mDb = TestData.GetDb1(ctx, true); }
public void configure(InetSocketAddress addr, int maxcc) throws IOException { thread = new Thread(this, "NIOServerCxn.Factory:" + addr); thread.setDaemon(true); maxClientCnxns = maxcc; this.ss = ServerSocketChannel.open(); ss.socket().setReuseAddress(true); LOG.info("binding to port " + addr); ss.socket().bind(addr); ss.configureBlocking(false); ss.register(selector, SelectionKey.OP_ACCEPT); }
public void testSortVersions() throws Exception { List<VersionInfo> list = new LinkedList<VersionInfo>(); VersionInfo toms = new VersionInfo("Tom-45678901234567"); VersionInfo anons = new VersionInfo("56789012345678"); VersionInfo jerrys = new VersionInfo("Jerry-01234567890123"); VersionInfo joes = new VersionInfo("Joe-43210987654321"); list.add(toms); list.add(anons); list.add(jerrys); list.add(joes); Collections.sort(list); assertEquals(jerrys, list.get(0)); assertEquals(joes, list.get(1)); assertEquals(toms, list.get(2)); assertEquals(anons, list.get(3)); }
public void testIncompleteMessageAfterException() throws Exception { TimeMeasurement timeMeasurement = new TimeMeasurement(); formatter.setExecutionLogAndTrackingId("2", new CompositeExecutionLog(root.addChildPage("ErrorLogs"))); formatter.announceNumberTestsToRun(1); formatter.newTestStarted(page, timeMeasurement.start()); pageBuffer.setLength(0); formatter.errorOccurred(new Exception("test"));
void copyInputQueue();  void setupResend();  void fillWriteBuffer(boolean optimizeGets);  void transitionWriteItem();  Operation getCurrentReadOp();  Operation removeCurrentReadOp();  Operation getCurrentWriteOp();  Operation removeCurrentWriteOp();  boolean hasReadOp();  boolean hasWriteOp();  void addOp(Operation op);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps(); }
protected void registerComponents(ComponentRegistry container) { super.registerComponents(container); container.register(RoutesParser.class, ComponentRoutesParser.class); container.register(PathResolver.class, VRaptor2PathResolver.class); container.register(Config.class, VRaptor2Config.class); container.register(ParameterNameProvider.class, LogicAnnotationWithParanamerParameterNameProvider.class); container.register(RequestExecution.class, VRaptor2RequestExecution.class); container.register(PageResult.class, ViewsPropertiesPageResult.class); container.register(ExecuteAndViewInterceptor.class, ExecuteAndViewInterceptor.class); container.register(HibernateValidatorPluginInterceptor.class,HibernateValidatorPluginInterceptor.class); container.register(Converters.class, VRaptor2Converters.class); container.register(ValidatorInterceptor.class,ValidatorInterceptor.class); container.register(ViewInterceptor.class,ViewInterceptor.class); container.register(ComponentInfoProvider.class, DefaultComponentInfoProvider.class); container.register(OutjectionInterceptor.class,OutjectionInterceptor.class); container.register(AjaxInterceptor.class, AjaxInterceptor.class); container.register(Validator.class, MessageCreatorValidator.class); container.register(ValidationErrors.class, BasicValidationErrors.class); }
public <T> Future<T> asyncGet(final String key, final Transcoder<T> tc) { final CountDownLatch latch=new CountDownLatch(1); final OperationFuture<T> rv=new OperationFuture<T>(latch, globalOperationTimeout); Operation op=opFact.get(key, new GetOperation.Callback() { private T val=null; public void receivedStatus(OperationStatus status) { rv.set(val); } public void gotData(String k, int flags, byte[] data) { assert key.equals(k) : "Wrong key returned"; val=tc.decode(new CachedData(flags, data)); } public void complete() { latch.countDown(); }}); rv.setOperation(op); addOp(key, op); return rv; }
synchronized public void release() { useCount--; if (isClosed && useCount == 0) { try {
public void testUsernameColumnWithUser() throws Exception { PageData data = page1.getData(); data.setAttribute(PageData.LAST_MODIFYING_USER, "Aladdin"); page1.commit(data); RecentChanges.updateRecentChanges(page1.getData()); WikiPage recentChanges = rootPage.getChildPage("RecentChanges"); List<String> lines = RecentChanges.getRecentChangesLines(recentChanges.getData()); String line = lines.get(0).toString(); assertSubString("|PageOne|Aladdin|", line); }
Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
private void attemptReconnects() throws IOException { long now=System.currentTimeMillis(); for(Iterator<MemcachedNodeImpl> i= reconnectQueue.headMap(now).values().iterator(); i.hasNext();) {
public void testExecutionStatusErrorHasPriority() throws Exception { doSimpleRun(errorWritingTable("blah") + crashFixtureTable()); assertEquals("Errors Occurred", getExecutionStatusMessage()); }
public void shouldProvideOnlyIfBeanIsRegistered() { assertTrue(container.canProvide(DummyComponent.class)); assertFalse(container.canProvide(NotRegisterd.class)); }
public void announceNumberTestsToRun(int testsToRun) { } public void errorOccured() { } public void newTestStarted(WikiPage test, long time) throws Exception { } public void setExecutionLogAndTrackingId(String stopResponderId, CompositeExecutionLog log) throws Exception { } public void testComplete(WikiPage test, TestSummary testSummary) throws Exception { System.out.println(new WikiPagePath(test).toString() + " r " + testSummary.right + " w " + testSummary.wrong + " " + testSummary.exceptions); } public void testOutputChunk(String output) throws Exception { } public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { } }
public org.vafer.jdeb.mapping.Mapper createMapper() { if ("perm".equalsIgnoreCase(type)) { return new PermMapper(uid, gid, user, group, filemode, dirmode, strip, prefix); } else if ("prefix".equalsIgnoreCase(type)) { return new PrefixMapper(strip, prefix); } else if ("ls".equalsIgnoreCase(type)) { try { return new LsMapper(new FileInputStream(src)); } catch (Exception e) { e.printStackTrace(); } } return new NullMapper(); }
public void testSubmitGoodFormToSiblingChild() throws Exception { executeSymbolicLinkTestWith("SymLink", "PageTwo.ChildTwo"); }
public void canGetTestExecutionReport() throws Exception { File pageDirectory = addPageDirectory("TestPage"); File resultFile = new File(pageDirectory, "20090503110451_30_20_3_0.xml"); addDummyTestResult(resultFile); makeResultForDate("TestPage", "20090503110451"); assertHasRegexp("v1", response.getContent()); assertHasRegexp("relativePageName", response.getContent()); assertHasRegexp("11 Right", response.getContent()); assertHasRegexp("22 Wrong", response.getContent()); assertHasRegexp("33 Ignores", response.getContent()); assertHasRegexp("44 Exceptions", response.getContent()); assertHasRegexp("wad of HTML content", response.getContent()); }
public void acceptOutput(String output) throws Exception { testSystemListener.acceptOutput(output); }
public void process(WatchedEvent event) { if(event.getPath().equals("/")) fired=true;
public void newTestStarted(WikiPage test, long time) throws Exception { writeData(getPage().getData().getHeaderPageHtml()); }
Table asTemplate(CellContentSubstitution substitution) throws SyntaxError;
private boolean isPrimary(BeanDefinition definition) { return definition instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) definition).isPrimary(); }
public void testCRLEnabled( X509KeyType caKeyType, X509KeyType certKeyType, String keyPassword, Integer paramIndex) throws Exception { init(caKeyType, certKeyType, keyPassword, paramIndex); System.setProperty(x509Util.getSslCrlEnabledProperty(), "true"); x509Util.getDefaultSSLContext(); assertTrue(Boolean.valueOf(System.getProperty("com.sun.net.ssl.checkRevocation"))); assertTrue(Boolean.valueOf(System.getProperty("com.sun.security.enableCRLDP"))); assertFalse(Boolean.valueOf(Security.getProperty("ocsp.enable"))); }
private void cleanup() { clientCnxnSocket.cleanup(); synchronized (pendingQueue) { for (Packet p : pendingQueue) { conLossPacket(p); } pendingQueue.clear(); }
public Byte convert(String value, Class type, List<ValidationMessage> errors, ResourceBundle bundle) { if (value == null || value.equals("")) { return null; } try { return Byte.valueOf(value);
public static Test suite() { return TestSuiteMaker.makeSuite("refactoring", new Class[] { DeletePageResponderTest.class,
static void usage() { System.err.println("USAGE: bookeeper client|bookie"); }
public <T> boolean that(T actual, Matcher<? super T> matcher, String category, String reason, Object... messageParameters) { if (!matcher.matches(actual)) { if (reason != null) { errors.add(new I18nMessage(category, reason, messageParameters)); } else { Description description = new ResourceBundleDescription(); description.appendDescriptionOf(matcher); errors.add(new I18nMessage(category, description.toString(), actual)); } return false; } return true; }
public void testGetAllTestPagesSortsByQulifiedNames() throws Exception { setUpForGetAllTestPages(); SuiteContentsFinder finder = new SuiteContentsFinder(suite, root, null); List<WikiPage> testPages = finder.makePageList(); assertEquals(3, testPages.size()); assertEquals(testPage, testPages.get(0)); assertEquals(testPage2, testPages.get(1)); assertEquals(testChildPage, testPages.get(2)); }
public void testNoChildEvents() throws Exception { try (ZooKeeper zk = createClient()) { zk.create("/a", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
public void simpleInputAndOutputFailing() throws Exception { SlimTestContextImpl testContext = makeTables( "!|scenario|echo|input|giving|output|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|script|\n" + "|echo|7|giving|8|\n" ); Map<String, Object> pseudoResults = SlimCommandRunningClient.resultToMap( asList(asList("scriptTable_id_0/scriptTable_s_id_0", "7")) ); SlimAssertion.evaluateExpectations(assertions, pseudoResults); String scriptTable = script.getChildren().get(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output], [check, echo, 7, fail(a=7;e=8)]]"; assertEquals(expectedScript, scriptTable); assertEquals(0, testContext.getTestSummary().getRight()); assertEquals(1, testContext.getTestSummary().getWrong()); assertEquals(0, testContext.getTestSummary().getIgnores()); assertEquals(0, testContext.getTestSummary().getExceptions()); }
public boolean equals(Object obj) { return this.equals((MatchedPair)(obj)); }
void delete(String path); long lastModified(String path); }
private void getResultsForPageContents(String pageContents) throws Exception { request.setResource("TestPage"); PageData data = testPage.getData(); data.setContent(data.getContent() + "\n" + pageContents); testPage.commit(data); response = (SimpleResponse) responder.makeResponse(context, request); testResults = response.getContent(); }
public void testResponse() throws Exception { WikiPage page = WikiPageUtil.addPage(root, PathParser.parse("ChildPage"), "child content"); PageData data = page.getData(); WikiPageProperties properties = data.getProperties(); properties.set(PageData.PropertySUITES, "Wiki Page tags"); page.commit(data); final MockRequest request = new MockRequest(); request.setResource("ChildPage"); final Responder responder = new WikiPageResponder(); final SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); assertEquals(200, response.getStatus()); final String body = response.getContent(); assertSubString("<html>", body); assertSubString("<body", body); assertSubString("child content", body); assertSubString("href=\"ChildPage?whereUsed\"", body); assertSubString("Cache-Control: max-age=0", response.makeHttpHeaders()); assertSubString("<span class=\"tag\">Wiki Page tags</span>", body); }
public void close() { defaultSSLContextAndOptions.set(null); if (keyStoreFileWatcher != null) { keyStoreFileWatcher.stop(); keyStoreFileWatcher = null; } if (trustStoreFileWatcher != null) { trustStoreFileWatcher.stop();
public boolean matches(final Object o) { if (!(o instanceof TarArchiveEntry)) { return false; } final TarArchiveEntry e = (TarArchiveEntry) o; return e.getSize() == f.length() && e.getGroupId() == 0
private void removeStopTestLink() { HtmlTag script = HtmlUtil.makeReplaceElementScript("stop-test", ""); writeData(script.html()); }
protected void setupButtons() { addGroupEnabled = false; addEntryEnabled = !isRoot; }
private void addPage(String path, String content) throws Exception { crawler.addPage(root, PathParser.parse(path), content); }
public void canHandleUrlIfNonRootContext() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(RequestInfo.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getContextPath(); will(returnValue("/custom_context")); one(request).getRequestURI(); will(returnValue("/custom_context/url")); one(request).getMethod(); will(returnValue("GET")); one(router).parse("/url", HttpMethod.GET,webRequest); will(returnValue(expected)); one(request).getParameter("_method"); will(returnValue(null)); }}); ResourceMethod resource = translator.translate(info); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied();
synchronized void addWatch(String path, Watcher watcher) { HashSet<Watcher> list = watchTable.get(path); if (list == null) { list = new HashSet<Watcher>(); watchTable.put(path, list); } list.add(watcher); HashSet<String> paths = watch2Paths.get(watcher); if (paths == null) { paths = new HashSet<String>(); watch2Paths.put(watcher, paths); } paths.add(path); }
public void testPagesForTestSystemAreSurroundedBySuiteSetupAndTeardown() throws Exception { WikiPage slimPage = addTestToSuite("SlimTest", simpleSlimDecisionTable); WikiPage setUp = crawler.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = crawler.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); Map<String, LinkedList<WikiPage>> map = SuiteResponder.makeMapOfPagesByTestSystem(suite, root, null); String fitTestSystemName = TestSystem.getTestSystemName(testPage.getData()); String slimTestSystemName = TestSystem.getTestSystemName(slimPage.getData()); List<WikiPage> fitList = map.get(fitTestSystemName); List<WikiPage> slimList = map.get(slimTestSystemName); assertEquals(3, fitList.size()); assertEquals(3, slimList.size()); assertEquals(setUp, fitList.get(0)); assertEquals(testPage, fitList.get(1)); assertEquals(tearDown, fitList.get(2)); assertEquals(setUp, slimList.get(0)); assertEquals(slimPage, slimList.get(1)); assertEquals(tearDown, slimList.get(2)); }
private void handleRealmCallback(RealmCallback rc) { LOG.debug("client supplied realm: {}", rc.getDefaultText()); rc.setText(rc.getDefaultText()); }
public void testReconfigACLClearOnDeserialize() throws Exception { DataTree tree = new DataTree();
public List<SlimAssertion> getAssertions() throws SyntaxError { inputs = findArguments(ARG_PATTERN); outputs = findArguments(OUT_PATTERN); return super.getAssertions(); }
public void testClearChildrenChangingVW() throws Exception { createSimpleVirtualLink(); assertTrue(!(extension.getVirtualCoupling() instanceof NullVirtualCouplingPage));
public void testReferencesNotChangedWhenDisabled() throws Exception { pageBuilder.addPage(root, pageOnePath, "Line one\nPageTwo\nLine three"); pageBuilder.addPage(root, pageTwoPath, "Page two content"); doRename(pageTwoName, "PageThree", false); WikiPage pageOne = root.getChildPage(pageOneName); assertEquals("Line one\nPageTwo\nLine three", pageOne.getData().getContent()); }
private synchronized void sendStop(){ try{ noreception = true;
private void copyAssets() throws IOException { String base = "/fitnesse/resources/"; String cssDir = base + "css/"; addFile(cssDir + "fitnesse.css", "css/fitnesse.css"); addFile(cssDir + "fitnesse_wiki.css", "css/fitnesse_wiki.css"); addFile(cssDir + "fitnesse_pages.css", "css/fitnesse_pages.css"); addFile(cssDir + "fitnesse_straight.css", "css/fitnesse_straight.css"); String javascriptDir = base + "javascript/"; addFile(javascriptDir + "jquery-1.7.2.min.js", "javascript/jquery-1.7.2.min.js"); addFile(javascriptDir + "fitnesse.js", "javascript/fitnesse.js"); String imagesDir = base + "images/"; addFile(imagesDir + "collapsibleOpen.png", "images/collapsibleOpen.png"); addFile(imagesDir + "collapsibleClosed.png", "images/collapsibleClosed.png"); }
public WatchesReport getWatches();  public WatchesPathReport getWatchesByPath();  public void dumpWatches(PrintWriter pwriter, boolean byPath); }
long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size); }
public String contents() throws Exception { return "<pre>" + Utils.escapeText(FitnesseFixtureContext.sender.sentData()) + "</pre>"; }
public static String toHex(byte[] b) { final StringBuffer sb = new StringBuffer(); for (int i = 0; i < b.length; ++i) { sb.append(Integer.toHexString((b[i]>>4) & 0x0f)); sb.append(Integer.toHexString(b[i] & 0x0f)); } return sb.toString(); }
public void setUp() throws Exception { saveLocale = Locale.getDefault(); Locale.setDefault(Locale.US); l = new Logger(dirPath); TimeZone z = TimeZone.getTimeZone("GMT-1:00"); Calendar time = new GregorianCalendar(2003, 2, 6, 13, 42, 5); time.setTimeZone(z); ld = new LogData( "myHost",
WikiPage getParent(); boolean isRoot(); WikiPage addChildPage(String name); boolean hasChildPage(String name); WikiPage getChildPage(String name); void removeChildPage(String name); List<WikiPage> getChildren(); String getName(); PageData getData(); ReadOnlyPageData readOnlyData(); Collection<VersionInfo> getVersions(); WikiPage getVersion(String versionName); String getHtml(); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage(); }
void writing();  void writeComplete();  void initialize();  void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data);  MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to);  void timeOut();  boolean isTimedOut();  boolean isTimedOut(long ttlMillis);  boolean isTimedOutUnsent();  long getWriteCompleteTimestamp(); }
String getUnescapedCellContents(int col, int row); void appendCellToRow(int row, Table table); void setTestStatusOnRow(int row, boolean testStatus); }
public TestExecutionReport getTestExecutionReport(SuiteExecutionReport.PageHistoryReference reference) throws Exception { PageHistory pageHistory = testHistory.getPageHistory(reference.getPageName()); Date date; date = new Date(reference.getTime()); TestResultRecord record = pageHistory.get(date); return makeTestExecutionReport().read(record.getFile()); }
private void sendPing() { lastPingSentNs = System.nanoTime(); RequestHeader h = new RequestHeader(-2, OpCode.ping); queuePacket(h, null, null, null, null, null, null, null, null); }
public void reset() { } public abstract Map<String, Object> values(); }
public void testQueueSizes() { ConnectionFactory cf=new DefaultConnectionFactory(100, 1024); assertEquals(100, cf.createOperationQueue().remainingCapacity()); assertEquals(100, cf.createWriteOperationQueue().remainingCapacity()); assertEquals(110, cf.createReadOperationQueue().remainingCapacity()); }
public Collection<Dependency> elements(MavenProjectAdapter project) throws DependencyResolutionRequiredException { return project.getSystemDependencies(); }
protected void reset() { eventNotification = new CountDownLatch(1); }
public void testEmpty() { OperationException oe = new OperationException(); assertSame(OperationErrorType.GENERAL, oe.getType()); assertEquals("OperationException: GENERAL", String.valueOf(oe)); }
String toString(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; }
public void setUp() throws Exception { page = new WikiTestPage(new WikiPageDummy("page", "content")); right = new TestSummary(1, 0, 0, 0); wrong = new TestSummary(0, 1, 0, 0); exception = new TestSummary(0, 0, 0, 1); }
public static void setUpBeforeClass() throws Exception { System.setProperty(ZKAuditProvider.AUDIT_ENABLE, "true");
public void withCompleteFilePath() throws Exception { Part file0 = new VraptorPart("myFile0", "text/plain", "c:\\a\\windows\\path\\file.txt", "vraptor3".getBytes()); Part file1 = new VraptorPart("myFile0", "text/plain", "/a/unix/path/file.txt", "vraptor3".getBytes()); when(request.getContentType()).thenReturn("multipart/form-data"); when(request.getParts()).thenReturn(Arrays.asList(file0,file1)); interceptor.intercept(stack, method, instance); verify(parameters, atLeast(2)).setParameter(anyString(), anyString()); }
public void testFormatInetAddrGoodIpv6Local() {
public void loadAll() { logger.info("Starting looking for " + classes.getAbsolutePath()); List<Resource> results = new ArrayList<Resource>(); scanner.scan(classes, new ResourceAcceptor(results)); this.registry.register(results); final List<Class<Interceptor>> interceptors = new ArrayList<Class<Interceptor>>(); scanner.scan(classes, new InterceptorAcceptor(interceptors)); }
protected String[] buildArguments() { Object[] arguments = new String[] {}; String useSSL = determineClientSSLParameterClass(); if (useSSL != null){ arguments = ArrayUtils.add(arguments, "-ssl"); arguments = ArrayUtils.add(arguments, useSSL); } String slimFlags[] = getSlimFlags(); if (slimFlags != null) for (String flag : slimFlags) arguments = ArrayUtils.add(arguments, flag); arguments = ArrayUtils.add(arguments, Integer.toString(getSlimPort())); return (String[]) arguments; }
protected Response createEvaluationMessage(String actual, String expected) { return null; }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); crawler = root.getPageCrawler(); crawler.setDeadEndStrategy(new VirtualEnabledPageCrawler()); target = crawler.addPage(root, PathParser.parse("TargetPage")); vlink = crawler.addPage(root, PathParser.parse("VirtualLink")); child1 = crawler.addPage(target, child1Path); crawler.addPage(child1, PathParser.parse("GrandChildOne")); }
private boolean walk(Symbol symbol, SymbolTreeWalker walker) { for (Symbol child: symbol.children) { if (!walk(child, walker)) return false; } return walker.visit(symbol); }
public void testShouldReturnPageNotFoundMessageWhenPageDoesNotExist() throws Exception { replay(this.revisionController); final String pageName = "InvalidPageName"; this.request.setResource(pageName); invokeResponderAndCheckResponseContains("The requested resource: <i>" + pageName + "</i> was not found."); }
public void translatesWithNonWikiWord() { TestRoot root = new TestRoot(); WikiPage currentPage = root.makePage("PageOne", "!include PageTwo.non_wiki"); WikiPage pageTwo = root.makePage("PageTwo"); root.makePage(pageTwo, "non_wiki", "page ''two''"); String result = ParserTestHelper.translateTo(currentPage); assertContains(result, "class=\"collapsible\""); assertContains(result, "Included page: <a href=\"PageTwo.non_wiki\">PageTwo.non_wiki</a> <a href=\"PageTwo.non_wiki?edit&amp;redirectToReferer=true&amp;redirectAction=\" class=\"edit\">(edit)</a>"); assertContains(result, "page <i>two</i>"); }
public static void main(String[] args) { TestRunner.main(new String[]{"fitnesse.wikitext.WikiTextTranslatorTest"}); }
public String getCurrentZxid();  public String followerInfo();  public long getElectionTimeTaken();  public int getLastProposalSize();  public int getMinProposalSize();  public int getMaxProposalSize();  public void resetProposalStatistics(); }
public void testCommitInternal() throws Exception { PageData data = symPage.getData(); data.setContent("new content"); symPage.commit(data); data = pageTwo.getData(); assertEquals("new content", data.getContent()); data = symPage.getData(); assertEquals("new content", data.getContent());
public void includesUsesTheCommonAlgorithm() throws ServletException, IOException, NoSuchMethodException { mockery.checking(new Expectations() { { allowing(resource).getType(); will(returnValue(CommonComponent.class)); allowing(method).getMethod(); will(returnValue(CommonComponent.class.getMethod("base"))); one(resolver).pathFor(method, "ok"); will(returnValue("defaultPath")); one(request).getRequestDispatcher("defaultPath"); will(returnValue(dispatcher)); one(dispatcher).include(request, response); } }); this.result.include("ok"); mockery.assertIsSatisfied(); }
public void whenRefererDontMatchAControllerShouldForwardToPage() throws Exception { PageResult page = mock(PageResult.class); when(request.getHeader("Referer")).thenReturn("http://localhost:8080/vraptor/no-controller"); when(request.getContextPath()).thenReturn("/vraptor"); when(router.parse("/no-controller", HttpMethod.GET, request)).thenThrow(new ResourceNotFoundException()); doReturn(page).when(result).use(page()); refererResult.forward(); verify(page).forwardTo("/no-controller"); }
public static String makeNormalWikiPageContent(PageData pageData) { SetupTeardownAndLibraryIncluder.includeInto(pageData); return makePageHtmlWithHeaderAndFooter(pageData); }
public void testGetSize() throws Exception { HruleWidget widget = new HruleWidget(new MockWidgetRoot(), "----"); assertEquals(0, widget.size()); widget = new HruleWidget(new MockWidgetRoot(), "-----"); assertEquals(1, widget.size()); widget = new HruleWidget(new MockWidgetRoot(), "--------------"); assertEquals(10, widget.size()); }
public void loadSlimTables() throws PluginException { forEachNamedObject(ConfigurationParameter.SLIM_TABLES, new Registrar<SlimTable>() { @Override public void register(String key, Class<SlimTable> clazz) {
public void testResponse() throws Exception { WikiPage page = WikiPageUtil.addPage(root, PathParser.parse("PageOne")); PageData data = page.getData(); data.setContent("some content"); WikiPageProperties properties = data.getProperties(); properties.set(PageData.PropertySUITES, "Page Tags"); properties.set("Test", "true"); page.commit(data); MockRequest request = new MockRequest(); request.setResource("PageOne"); Responder responder = new PropertiesResponder(); SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); assertEquals("max-age=0", response.getHeader("Cache-Control")); String content = response.getContent(); assertSubString("PageOne", content); assertDoesntHaveRegexp("textarea name=\"extensionXml\"", content); assertHasRegexp("<input.*value=\"Save Properties\".*>", content); assertHasRegexp("<input.*value=\"saveProperties\"", content); assertSubString("<h5> Page Tags</h5>", content); for (String attribute : new String[]{"Search", "Edit", "Properties", "Versions", "Refactor", "WhereUsed", "RecentChanges"}) assertCheckboxChecked(attribute, content); for (String attribute : new String[]{"Prune", PageData.PropertySECURE_READ, PageData.PropertySECURE_WRITE, PageData.PropertySECURE_TEST}) assertCheckboxNotChecked(content, attribute);
public DataTree createDataTree() { return new DataTree(); }
public void testAddition() throws Exception { assertEquals("3", new EvaluatorWidget(widgetRoot, "${= 1 + 2 =}").render()); }
protected Module customModule() { return new AbstractModule() { @Override
private String imageSrc() { if (expanded) return collapsableOpenImg;
private void addPageToListWithinMap(PagesByTestSystem pagesByTestSystem, WikiPage wikiPage) { TestPage testPage = new TestPage(wikiPage); Descriptor descriptor = ClientBuilder.getDescriptor(wikiPage, isRemoteDebug); getOrMakeListWithinMap(pagesByTestSystem, descriptor).add(testPage); }
public static RequestInfo currentRequest() { return vraptorRequests.get(); }
public Response makeResponse(FitNesseContext context, Request request) { SimpleResponse response = new SimpleResponse(401); response.addHeader("WWW-Authenticate", "Basic realm=\"FitNesse\""); HtmlPage page = context.htmlPageFactory.newPage(); HtmlUtil.addTitles(page, "401 Unauthorized"); page.put("resource", request.getResource()); page.setMainTemplate("unauthorized.vm"); response.setContent(page.html()); return response; }
public void visit(AliasLinkWidget widget) throws Exception { } public void setUp() throws Exception { visits.clear(); root = InMemoryPage.makeRoot("RooT"); } public void testSimpleVisitorVisitsAllWidgets() throws Exception { WidgetRoot root = new WidgetRoot("''hello''", this.root); root.acceptVisitor(this); assertEquals(3, visits.size()); assertEquals(WidgetRoot.class, visits.get(0).getClass()); assertEquals(ItalicWidget.class, visits.get(1).getClass()); assertEquals(TextWidget.class, visits.get(2).getClass()); } public void testComplexVisitorVisitsAllWidgets() throws Exception { WidgetRoot root = new WidgetRoot("|CellOne|CellTwo|\n|''hello''|'''hello'''|\n", this.root); root.acceptVisitor(this); assertEquals(14, visits.size()); } }
public BlockingQueue<Operation> createReadOperationQueue() { return new ArrayBlockingQueue<Operation>( (int) (getOpQueueLen() * 1.1));
public byte[] serialize(Object o) { return super.serialize(o); }
private boolean isWrapper(Class<?> classArg, Class<?> classInputArg) { return ((Long.TYPE.equals(classArg)) && (Long.class.equals(classInputArg))) || ((Double.TYPE.equals(classArg)) && (Double.class.equals(classInputArg)))
protected static void parseCommandLineFailed(String[] args) { System.err.println("Invalid command line arguments:" + Arrays.asList(args));
public void widgetsThatShouldMatchThePattern() throws Exception { String matchingStrings[] = { "![\nsingle row\n]!\n", "![\nrow1\nrow2\n]!\n", "![:\nrow\n]!\n",
public void allTestingComplete(TimeMeasurement notUsed) throws IOException { totalTimeMeasurement.stop(); super.allTestingComplete(totalTimeMeasurement); suiteExecutionReport.setTotalRunTimeInMillis(totalTimeMeasurement); }
private void findComponentsFromWebInfClasses(Map<String, Set<String>> index, Set<String> stereotypeNames, Set<String> results) { for (String stereotype : stereotypeNames) { Set<String> classes = index.get(stereotype);
protected boolean opaqueIsValid() { System.err.println("Expected " + opaque + ", got " + responseOpaque); return responseOpaque == opaque; }
@Test public void parsesMissingBraces() { assertParses("!define x +1 stuff", "SymbolList[Text, Whitespace, Text, Whitespace, Delta, Whitespace, Text]"); }
private static void log(Request request, String path, String op, String acls, String createMode, Result result) { log(request.getUsersForAudit(), op, path, acls, createMode, request.cnxn.getSessionIdHex(), request.cnxn.getHostAddress(), result);
protected void bind(Parse headerRow) {
public void testGetLocalAddress() { serverSideSocket.getLocalAddress(); Assert.assertFalse(serverSideSocket.isModeKnown()); }
public Thread newThread(Runnable r) { return new Thread(r, "FutureNotifyListener"); }
public Byte convert(String value, Class<? extends Byte> type, ResourceBundle bundle) { if (isNullOrEmpty(value)) { return null; } try { return Byte.valueOf(value);
public void canHandleTheSingleCheckWhenProblematic() { Client guilherme = null; validations.that(guilherme, notNullValue()); assertThat(validations.getErrors(), hasSize(1)); }
private void doDelete(String path) throws InterruptedException, KeeperException { KeeperException lastException = null; for(int i = 0; i < maxTries; i++) { try { zk.delete(path, -1); return; } catch(NoNodeException e) { return; } catch (KeeperException e) { lastException = e; } } throw lastException; }
private void ignoreSession() { mockery.checking(new Expectations() { {
void setupResend();  void fillWriteBuffer(boolean optimizeGets);  void transitionWriteItem();  Operation getCurrentReadOp();  Operation removeCurrentReadOp();  Operation getCurrentWriteOp();  Operation removeCurrentWriteOp();  boolean hasReadOp();  boolean hasWriteOp();  void addOp(Operation op);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException; }
public void testUntrustedAuth() { X509AuthenticationProvider provider = createProvider(clientCert); MockServerCnxn cnxn = new MockServerCnxn(); cnxn.clientChain = new X509Certificate[]{unknownCert}; assertEquals(KeeperException.Code.AUTHFAILED, provider.handleAuthentication(cnxn, null)); }
void writePacketNow(QuorumPacket pp, boolean flush) throws IOException { synchronized (leaderOs) { if (pp != null) {
abstract SocketAddress getLocalSocketAddress(); abstract void cleanup(); abstract void close(); abstract void wakeupCnxn(); abstract void enableWrite(); abstract void disableWrite(); abstract void enableReadWriteOnly(); abstract void doTransport(int waitTimeOut, List<Packet> pendingQueue, LinkedList<Packet> outgoingQueue, ClientCnxn cnxn) throws IOException, InterruptedException; abstract void testableCloseSocket() throws IOException; abstract void sendPacket(Packet p) throws IOException; }
private void RefreshCache() { if (cachedDataExpired()) { PageData data = makePageData();
private HtmlTag makePropertiesForm() throws Exception { HtmlTag form = HtmlUtil.makeFormTag("post", resource); form.add(HtmlUtil.makeInputTag("hidden", "responder", "saveProperties")); HtmlTag trisection = new HtmlTag("div"); trisection.addAttribute("style", "width:100%"); HtmlTag checkBoxesSection = new HtmlTag("div"); checkBoxesSection.addAttribute("class", "properties"); checkBoxesSection.add(makePageTypeRadiosHtml(pageData)); checkBoxesSection.add(makeTestActionCheckboxesHtml(pageData)); checkBoxesSection.add(makeNavigationCheckboxesHtml(pageData)); checkBoxesSection.add(makeSecurityCheckboxesHtml(pageData)); HtmlTag virtualWikiSection = new HtmlTag("div"); virtualWikiSection.addAttribute("class", "virtual-wiki-properties"); virtualWikiSection.add(makeVirtualWikiHtml()); virtualWikiSection.add(makeTagsHtml(pageData)); virtualWikiSection.add(makeHelpTextHtml(pageData)); trisection.add(checkBoxesSection); trisection.add(virtualWikiSection); form.add(trisection); HtmlTag buttonSection = new HtmlTag("div"); buttonSection.add(HtmlUtil.BR); HtmlTag saveButton = HtmlUtil.makeInputTag("submit", "Save", "Save Properties"); saveButton.addAttribute("accesskey", "s"); buttonSection.add(saveButton); form.add(buttonSection); return form; }
private void assertEvent(BlockingQueue<WatchedEvent> events, EventType eventType, String path, Stat stat) throws InterruptedException { assertEvent(events, eventType, path, stat.getMzxid()); }
public void willSetHttpStatusCode415IfThereIsNoDeserializerButIsAccepted() throws Exception { when(request.getContentType()).thenReturn("application/xml"); when(deserializers.deserializerFor("application/xml", container)).thenReturn(null); interceptor.intercept(stack, consumeXml, null); verify(status).unsupportedMediaType("Unable to handle media type [application/xml]: no deserializer found."); verifyZeroInteractions(stack); }
public long decr(String key, int by, long def) { return mutateWithDefault(Mutator.decr, key, by, def, 0); }
private void createZKClient(final int idx) throws Exception { zkClients[idx] = null; final ClientBase.CountdownWatcher watch = new ClientBase.CountdownWatcher(); zkClients[idx] = new ZooKeeper("127.0.0.1:" + clientPorts[idx], ClientBase.CONNECTION_TIMEOUT, watch); watch.waitForConnected(ClientBase.CONNECTION_TIMEOUT); }
public void fromNestedMap_shouldCreateString() { Map nestedMap = new LinkedHashMap(); nestedMap.put("a", null); nestedMap.put(Arrays.asList("b", "c", "d"), "listValue"); nestedMap.put("listKey", Arrays.asList("e", "f")); nestedMap.put(null, true); String actual = converter.toString(nestedMap);
Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) throws OperationTimeoutException; CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
final Artifact scalaCompilerArtifact(final String scalaVersion) { return this.factory.createArtifact(this.getScalaOrganization(), ScalaMojoSupport.SCALA_COMPILER_ARTIFACTID,
public static void assertParses(String input, String expected) throws Exception { WikiPage page = new TestRoot().makePage("TestPage", input); Symbol result = parse(page, input); assertEquals(expected, serialize(result)); }
public String toString() { return "ScenarioUsage: " + usagePerPage; }
public void testLoadUnencryptedPrivateKeyFromKeyStoreWithWrongPassword() throws GeneralSecurityException, IOException { if (x509TestContext.isKeyStoreEncrypted()) { throw new IOException(); } PemReader.loadPrivateKey( x509TestContext.getKeyStoreFile(KeyStoreFileType.PEM),
private HtmlTag buildFeedbackModificationScript() throws Exception { HtmlTag script = new HtmlTag("script"); script.addAttribute("language", "javascript"); script.add("document.getElementById(\"feedback\").innerHTML = '" + getPageFooterInfo(hits) + "'"); return script; }
protected SlimTestSystem getTestSystem() throws IOException { WikiPage page = getPage(); SlimClientBuilder builder = new SlimClientBuilder(page.getData(), getDescriptor()); builder.withFastTest(fastTest); SlimClient slimClient = builder.build(); return new HtmlSlimTestSystem(slimClient, this, new ExecutionLog(page, slimClient.getTestRunner())); }
public boolean evaluate(AtomicInteger i) { return i.get() == 0; }},
public void shouldBeAbleToConvertArrayOfObjects() { MatcherAssert.assertThat(converter.extractTypeDefinition(String[].class), Matchers.is(Matchers.equalTo("[Ljava/lang/String;"))); }
public void addsAPrefixToMethodsWhenTheControllerEndsWithSlashAndTheMethodAreAnnotatedWithRelativePath() throws Exception { List<Route> routes = parser.rulesFor(mockery.resource(EndSlashAnnotatedController.class)); Route route = getRouteMatching(routes, "/endSlash/relativePath"); assertThat(route, canHandle(EndSlashAnnotatedController.class, "withRelativePath")); mockery.assertIsSatisfied(); }
public void testAddPlugins() throws Exception { testProperties.setProperty(ComponentFactory.PLUGINS, DummyPlugin.class.getName()); WikiPageFactory wikiPageFactory = new WikiPageFactory(); ResponderFactory responderFactory = new ResponderFactory("."); assertMatch("!today", false); String output = factory.loadPlugins(responderFactory, wikiPageFactory); assertSubString(DummyPlugin.class.getName(), output); assertEquals(InMemoryPage.class, wikiPageFactory.getWikiPageClass()); assertEquals(WikiPageResponder.class, responderFactory.getResponderClass("custom1")); assertEquals(EditResponder.class, responderFactory.getResponderClass("custom2")); assertMatch("!today", true); }
private int loadFor(Class<?> type) { if (type.equals(double.class)) { return DLOAD; } if (type.equals(long.class)) { return LLOAD; } return type.isPrimitive() ? ILOAD : ALOAD; }
@Test public void scansNotes() { ParserTestHelper.assertScans("!note some note\n", "NoteLine=!note,Whitespace= ,Text=some,Whitespace= ,Text=note,Newline=\n"); ParserTestHelper.assertScans("! note some note\n", "Text=!,Whitespace= ,Text=note,Whitespace= ,Text=some,Whitespace= ,Text=note,Newline=\n"); }
private void add(int c) {
public void slimHostDefaultsTolocalhost() throws Exception { WikiPage pageWithoutSlimHostVariable = WikiPageUtil.addPage(root, PathParser.parse("PageWithoutSlimHostVariable"), "some gunk\n"); assertEquals("localhost", new SlimClientBuilder(new WikiPageDescriptor(pageWithoutSlimHostVariable.getData(), false, getClassPath(pageWithoutSlimHostVariable))).determineSlimHost()); }
public void println( final String s ) { getLog().info(s); }
private static void registerAll(ComponentRegistry registry, Map<Class<?>, Class<?>> scope) { for (Map.Entry<Class<?>, Class<?>> entry : scope.entrySet()) { registry.register(entry.getKey(), entry.getValue());
static byte[] fromXMLBuffer(String s) throws IOException { ByteArrayOutputStream stream = new ByteArrayOutputStream(); if (s.length() == 0) { return stream.toByteArray(); } int blen = s.length()/2; byte[] barr = new byte[blen]; for (int idx = 0; idx < blen; idx++) { char c1 = s.charAt(2*idx); char c2 = s.charAt(2*idx+1); barr[idx] = Byte.parseByte(""+c1+c2, 16); } stream.write(barr); return stream.toByteArray(); }
private String removeChar(String type, String by) { return type.substring(type.lastIndexOf(by)+1); }
public boolean isClosed() { return getSocketAllowUnknownMode().isClosed(); }
void addAsNext(Class<? extends Interceptor>... interceptors); }
public void testDeleteSession() { ZSession session = createSession("30"); WebResource wr = sessionsr.path(session.id); Builder b = wr.accept(MediaType.APPLICATION_JSON); assertTrue(ZooKeeperService.isConnected(CONTEXT_PATH, session.id)); ClientResponse cr = b.delete(ClientResponse.class, null); assertEquals(ClientResponse.Status.NO_CONTENT, cr.getClientResponseStatus()); assertFalse(ZooKeeperService.isConnected(CONTEXT_PATH, session.id)); }
protected void onResume() { super.onResume();
public String endsWith() { if (value.endsWith(expected)) return expected;
public void acceptResultsLast(TestSummary testSummary) throws Exception; public void exceptionOccurred(Throwable e); }
public void enterChildPage(WikiPage newPage, Date lastModified) throws Exception { handledPages.add(newPage.getName()); modDates.add(lastModified); }
public void testChangedByFromChangesProvider() throws Exception { final String input = "release distribution=production, date=14:00 13.01.2007, version=12324, urgency=low, by=mrasko@test.com\n" + " * change1\n" + " * change2\n"; BinaryPackageControlFile packageControlFile = new BinaryPackageControlFile(); packageControlFile.set("Package", "package"); packageControlFile.set("Version", "version"); packageControlFile.set("Maintainer", "tcurdt@joost.com"); packageControlFile.set("Date", "Mon, 20 Aug 2007 15:25:57 +0200"); final TextfileChangesProvider provider = new TextfileChangesProvider(new ByteArrayInputStream(input.getBytes(UTF_8)), packageControlFile); final ChangeSet[] changeSets = provider.getChangesSets(); assertNotNull(changeSets); assertEquals(1, changeSets.length); ChangesFile changesFile = new ChangesFile(); changesFile.setChanges(provider.getChangesSets()); changesFile.initialize(packageControlFile); assertNotNull(changesFile); assertEquals("mrasko@test.com", changesFile.get("Changed-By")); }
private void saveFileData(String fileName, String key) { FileDbHelper db = new FileDbHelper(mCtx); db.open(); if ( ! mRememberKeyfile ) { key = ""; } db.createFile(fileName, key); db.close(); }
List<WikiPage> getAllUncles(WikiPage context, String uncleName); List<WikiPage> getAncestorsOf(WikiPage page); List<WikiPage> getAncestorsStartingWith(WikiPage context); }
public abstract List<PwEntry> getEntries(); public abstract long getNumRounds(); public abstract void setNumRounds(long rounds) throws NumberFormatException; public abstract boolean appSettingsEnabled(); public abstract PwEncryptionAlgorithm getEncAlgorithm(); }
public void testRecovery() throws Exception { File tmpDir = File.createTempFile("test", ".junit", baseTest); tmpDir = new File(tmpDir + ".dir"); tmpDir.mkdirs(); ZooKeeperServer zs = new ZooKeeperServer(tmpDir, tmpDir, 3000); int oldSnapCount = SyncRequestProcessor.snapCount; SyncRequestProcessor.snapCount = 1000; try { NIOServerCnxn.Factory f = new NIOServerCnxn.Factory(2344);
Collection<SocketAddress> getUnavailableServers(); void setTranscoder(Transcoder<Object> tc); Transcoder<Object> getTranscoder(); NodeLocator getNodeLocator(); Future<Boolean> append(long cas, String key, Object val); <T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) throws OperationTimeoutException; CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); }
public Object convert(String value, Class type) { if(value==null || value=="") { return (byte) 0; } try { return Byte.parseByte(value);
public void shouldSerializeCollectionWithPrefixTag() { String expectedResult = " {\n \"price\": 15.0,\n \"comments\": \"pack it nicely, please\"\n }"; expectedResult += ",\n" + expectedResult; expectedResult = "{\"orders\": [\n" + expectedResult + "\n]}"; Order order = new Order(new Client("guilherme silveira"), 15.0, "pack it nicely, please"); serialization.from(Arrays.asList(order, order), "orders").serialize(); assertThat(result(), is(equalTo(expectedResult))); }
public void registerAllOn(Router resourceRegistry) { LOGGER.info("registering all resources in Router: " + resources); resourceRegistry.register(resources.toArray(new Resource[resources.size()])); }
public void shouldContinueStackIfInterceptorDoesntAcceptMethod() throws Exception { mockery.checking(new Expectations() { { one(interceptor).accepts(method); will(returnValue(false)); never(interceptor).intercept(stack, method, null); one(stack).next(method, null); } }); handler.execute(stack, method, null); mockery.assertIsSatisfied(); }
public void tableWithSymbols() throws Exception { makeTableTableAndBuildInstructions(tableTableHeader + "|$X|$X|\n"); tt.setSymbol("X", "value"); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("tableTable_id_0", "OK"), list("tableTable_id_1", list( list("pass", "fail") )) ) ); Assertion.evaluateExpectations(assertions, pseudoResults); assertEquals("[[pass(Table:fixture), argument], [pass($X->[value]), fail($X->[value])]]", tt.getTable().toString()); }
private DecisionTable makeDecisionTableAndBuildInstructions(String pageContents) throws Exception { DecisionTable dt = makeDecisionTable(pageContents); dt.appendInstructions(instructions); return dt; }
public long size() throws IOException { long size = 0; for (LogIterator i : sources) { size += i.size(); } return size; }
public void testAsyncSubscribeAndUnsubscribe() throws Exception { ByteString topic = ByteString.copyFromUtf8("myAsyncUnsubTopic"); ByteString subscriberId = ByteString.copyFromUtf8("1"); subscriber.asyncSubscribe(topic, subscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(), null); assertTrue(queue.take()); subscriber.asyncUnsubscribe(topic, subscriberId, new TestCallback(), null); assertTrue(queue.take()); }
public void processTestResults(WikiPage test, TestSummary testSummary) throws Exception { getAssertionCounts().add(testSummary); xmlFormatter.processTestResults(test, testSummary); }
public void handleRequest(PubSubRequest request, Channel channel) { if (!request.hasConsumeRequest()) { UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(), "Missing consume request data"); return; } ConsumeRequest consumeRequest = request.getConsumeRequest(); try { subscriber.consume(request.getTopic(), consumeRequest.getSubscriberId(), consumeRequest.getMsgId());
public void createFile(Uri uri, Uri keyUri) { if (!enabled || uri == null || keyUri == null) return; init();
public void testShouldDeleteAllChildPages() throws Exception { revisionController.delete(contentAndPropertiesFilePathFor(FS_GRAND_CHILD_PAGE)); revisionController.delete(contentAndPropertiesFilePathFor(FS_CHILD_PAGE)); revisionController.delete(contentAndPropertiesFilePathFor(FS_PARENT_PAGE)); replay(revisionController); createPage(FS_GRAND_CHILD_PAGE); request.setResource(FS_PARENT_PAGE); invokeResponderAndCheckSuccessStatus(); }
public String createNode(String path, byte[] data, ArrayList<ACL> acl, long ephemeralOwner, long zxid, long time) throws KeeperException { String result=super.createNode(path, data, acl, ephemeralOwner, zxid, time); ObserverManager.getInstance().notifyObservers(this, new TreeEventInfo(Event.ADD,getNode(result))); return result; }
public void copyEncrypted(byte[] buf, int offset, int size) { postHeader = new byte[size]; System.arraycopy(buf, offset, postHeader, 0, size); }
public void is(PatternBasedType type, PatternBasedType method) { this.strategy = new PatternBasedStrategy(type, method); }
void internalServerError(Throwable e) throws IOException; void header(String key, String value); void created(); }
public void testSubscribeAndConsume() throws Exception { int batchSize = 10; subscribeToTopics(batchSize); publishFirstBatch(batchSize, true); }
public static void generateFile(File outputDir, Version version, int rev, String buildDate) { String path = PACKAGE_NAME.replaceAll("\\.", "/"); File pkgdir = new File(outputDir, path); if (!pkgdir.exists()) {
public void announceNumberTestsToRun(int testsToRun);
private byte[] readContentBytes(File input) throws FileNotFoundException, IOException { FileInputStream inputStream = null; try { final byte[] bytes = new byte[(int) input.length()];
public void testMultiThreadPerf() throws InterruptedException { RequestPathMetricsCollector requestPathMetricsCollector = new RequestPathMetricsCollector(); Random rand = new Random(System.currentTimeMillis()); Long startTime = System.currentTimeMillis(); ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newCachedThreadPool();
public void withConstraint(@NotNull String email) { } public void withTwoConstraints(@NotNull String name, @Valid Customer customer) { } public void withoutConstraint(@Foo String foo) { } public void cascadeConstraint(@Valid Customer customer) { } } @Target(value = { PARAMETER }) @Retention(value = RUNTIME) @Documented public @interface Foo { } }
public void testToString() { assertNotNull(instance.toString()); }
private String formatWikiWord(Symbol symbol) { return new HtmlText(formatWikiWord(symbol.getContent(), symbol)).html(); }
public void testVariableIgnoredInParentPreformatted() throws Exception {
@Test public void testGetters() { assertEquals(1, c.getClientPort()); assertEquals("a", c.getDataDir()); assertEquals("b", c.getDataLogDir()); assertEquals(2, c.getTickTime()); assertEquals(3, c.getMaxClientCnxnsPerHost()); assertEquals(4, c.getMinSessionTimeout()); assertEquals(5, c.getMaxSessionTimeout()); assertEquals(6L, c.getServerId()); assertEquals(7, c.getClientPortListenBacklog()); }
public void testShouldAskRevisionControllerToDeletePage() throws Exception { revisionController.delete(contentAndPropertiesFilePathFor(FS_GRAND_CHILD_PAGE)); replay(revisionController); createPage(FS_GRAND_CHILD_PAGE); request.setResource(FS_PARENT_PAGE + "." + FS_CHILD_PAGE + "." + FS_GRAND_CHILD_PAGE); invokeResponderAndCheckSuccessStatus(); }
public void postChange(String path, DataNode node);  public long getDigest(); }
public String toString() { elapsed = System.currentTimeMillis() - start; if (elapsed > 600000) { return d(3600000) + ":" + d(600000) + d(60000) + ":" + d(10000) + d(1000);
private boolean pageIsOfRequestedPageType(WikiPage page, List<PageType> requestedPageTypesEnum) { if (requestedPageTypesEnum == null || requestedPageTypesEnum.isEmpty()) { return true; } PageType pageType = PageType.fromWikiPage(page); return (requestedPageTypesEnum.contains(pageType)); }
private void init() { if (databases == null || keyfiles == null) { if (!upgradeFromSQL()) {
public void testStarted(WikiTestPage test) throws IOException; public void testOutputChunk(String output) throws IOException; public void testAssertionVerified(Assertion assertion, TestResult testResult); public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); public void testComplete(WikiTestPage test, TestSummary testSummary) throws IOException; public void testSystemStopped(TestSystem testSystem, ExecutionLog executionLog, Throwable cause); }
public Maybe<Symbol> parse(Symbol current, Parser parser) { List<Symbol> tokens = parser.moveNext(new SymbolType[] {SymbolType.Whitespace, SymbolType.Text}); if (tokens.isEmpty()) return Symbol.nothing; String anchor = tokens.get(1).getContent(); if (!ScanString.isWord(anchor)) return Symbol.nothing; current.add(tokens.get(1)); return new Maybe<>(current); }
public void processResult(int rc, String path, Object ctx, Stat stat); } interface DataCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, byte data[], Stat stat); } interface ACLCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, List<ACL> acl, Stat stat); } interface ChildrenCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, List<String> children); } interface Children2Callback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, List<String> children, Stat stat); } interface StringCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx, String name); } interface VoidCallback extends AsyncCallback { public void processResult(int rc, String path, Object ctx); } }
@Test public void hidesFirstRow() throws Exception { ParserTestHelper.assertTranslatesTo("![ stuff\n]!", "<table class=\"plain_text_table\">" + HtmlElement.endl +
public InputStream getData() throws IOException { unmodifable(); return new ByteArrayInputStream(buffer.toString().getBytes()); }
public Response getZNodeList( @PathParam("path") String path, @QueryParam("callback") String callback, @DefaultValue("data") @QueryParam("view") String view, @DefaultValue("base64") @QueryParam("dataformat") String dataformat, @Context UriInfo ui) throws InterruptedException, KeeperException { return getZNodeList(false, path, callback, view, dataformat, ui); }
public static void editStaticConfig(final String configFileStr, final String dynamicFileStr, final boolean eraseClientPortAddress) throws IOException {
HttpFuture<List<View>> asyncGetViews(final String designDocumentName); View getView(final String designDocumentName, final String viewName); List<View> getViews(final String designDocumentName);
public List doTable(List l) { return list( list("pass", "pass", "pass"),
public void testDeleteOK() throws Exception { zkClient.create(PARENT_PATH, DATA, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); zkClientB.delete(PARENT_PATH, -1); Assert.assertEquals("OutstandingRequests not decremented", 0,
public void fromString_should_throw_Exception_when_value_is_not_a_double() { String value = "foo"; String errorMessage = "no error"; try { converter.fromString(value); } catch (SlimError e) { errorMessage = e.getMessage(); } assertEquals("message:<<Can't convert foo to double.>>", errorMessage); }
public void includesSetupTearDownUnclesInOrder() throws Exception { addPage("TestPage.SuiteSetUp", "child set up"); addPage("TestPage.SuiteTearDown", "child tear down"); WikiPage nephew = addPage("TestPage.TestPageChild.TestPageGrandChild", "!define TEST_SYSTEM {slim}\n"); addPage("TestPage.TestPageChild.SuiteSetUp", "grand child set up"); addPage("TestPage.TestPageChild.SuiteTearDown", "grand child tear down"); properties.setProperty("ALL_UNCLE_SUITE_SETUPS", "true"); TestPage test = new TestPageWithSuiteSetUpAndTearDown(wikiPage); String html = test.getHtml(); assertSubString("Suite Set Ups", html); assertSubString("Suite Tear Downs", html); assertSubString(".SuiteSetUp", html); assertSubString(".TestPage.SuiteSetUp", html); assertSubString(".SuiteTearDown", html); assertSubString(".TestPage.SuiteTearDown", html); assertTrue("Uncle SuiteSetUp before brother", html.indexOf(">.SuiteSetUp<") < html.indexOf(">.TestPage.SuiteSetUp<")); assertTrue("Uncle SuiteTearDown after brother", html.indexOf(">.SuiteTearDown<") > html.indexOf(">.TestPage.SuiteTearDown<")); assertNotSubString(".TestPage.TestPageChild.SuiteSetUp", html); assertNotSubString(".TestPage.TestPageChild.SuiteTearDown", html); }
public void testSuiteSetUpAndTearDownIsCalledIfSingleTestIsRun() throws Exception { addSuiteSetUpTearDown(); runner.handler.addHandler(mockHandler); runPage("SuitePage.TestPassing"); List results = mockHandler.results; assertEquals(1, results.size()); checkResult(results, 0, "", new TestSummary(3, 0, 0, 0), "PassFixture"); PageResult result = (PageResult) results.get(0); String content = result.content(); assertSubString("SuiteSetUp", content); assertSubString("SuiteTearDown", content); }
public void remove(Client client) { clients.remove(client.getId()); }
public void defaultPageTitleHasNoTitleLinkOrBreadCrumbs() throws Exception { PageTitle pt = new PageTitle(); assertNull(pt.getTitle()); assertNull(pt.getLink()); assertNull(pt.getPageType()); assertEquals(0, pt.getBreadCrumbs().size()); }
boolean finish() { running = false; this.interrupt(); if (recvWorker != null) recvWorker.finish(); senderWorkerMap.remove(sid); return running; }
public void testUpdateWithMissingDirectories() throws Exception { update.doUpdate(); File file = new File(context.getRootPagePath() + File.separator + "files" + File.separator + "images" + File.separator + "testFile"); assertTrue(file.exists()); assertFalse(update.shouldBeApplied()); }
public void isCapableOfDealingIndexedArraysWithOneElement() throws Exception { requestParameterIs(array, "abc[2]", "1"); Long[] abc = getParameters(array); assertThat(abc, is(arrayContaining(1l))); }
Map<String, ? extends TestSystemFactory> getTestSystemFactories() throws PluginException; }
<T> T instanceFor(Class<T> type); void start(); void stop();  Request prepareFor(ResourceMethod method, HttpServletRequest request, HttpServletResponse response); }
public void doDump() { message.setFlags(TapRequestFlag.DUMP); }
private void pushDesc(final String desc) { int index = desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0; switch (desc.charAt(index)) { case 'V':
public Request prepare(ResourceMethod method, HttpServletRequest request, HttpServletResponse response) { PicoBasedRequestContainer container = new PicoBasedRequestContainer(this.container, method, request,response); return container.withA(RequestExecution.class); }
public void visitLdcInsn(final Object cst) { mv.visitLdcInsn(cst); if (constructor) { pushValue(OTHER);
protected PwDatabaseV4 createDB() { return new PwDatabaseV4();
protected List<File> normalize(List<String> compileSourceRootsList) { List<File> newCompileSourceRootsList = new ArrayList<File>(); if (compileSourceRootsList != null) {
public void testRemoveAllWatchesOnAPath(boolean useAsync) throws Exception { zk1.create("/node1", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
public void setup() { this.baseDir = new File(DefaultDirScannerTest.class.getResource("/") .getPath()); this.scanner = new DefaultDirScanner(); }
public void functionCallWithSequentialArgumentProcessingAndOneArgument() throws Exception { buildInstructionsFor("|function;|arg0|\n"); List<CallInstruction> expectedInstructions = list( new CallInstruction("htmlScriptTable_id_0", "htmlScriptTableActor", "function", new Object[]{"arg0"}) ); assertEquals(expectedInstructions, instructions()); }
public void testSnapFilesLessThanToRetain() throws Exception { int nRecentCount = 4; int fileToPurgeCount = 2; AtomicInteger offset = new AtomicInteger(0); File version2 = new File(tmpDir.toString(), "version-2"); assertTrue(version2.mkdir(), "Failed to create version_2 dir:" + version2.toString()); List<File> snapsToPurge = new ArrayList<File>(); List<File> logsToPurge = new ArrayList<File>(); List<File> snaps = new ArrayList<File>(); List<File> logs = new ArrayList<File>(); createDataDirFiles(offset, fileToPurgeCount, false, version2, snapsToPurge, logsToPurge); createDataDirFiles(offset, nRecentCount, false, version2, snaps, logs); logs.add(logsToPurge.remove(0));
public static String toHex( final byte[] pBytes ) { final StringBuffer sb = new StringBuffer(); for (int i = 0; i < pBytes.length; ++i) { sb.append(Integer.toHexString((pBytes[i]>>4) & 0x0f)); sb.append(Integer.toHexString(pBytes[i] & 0x0f)); } return sb.toString(); }
public void testPagesForTestSystemAreSurroundedBySuiteSetupAndTeardown() throws Exception { WikiPage slimPage = addTestPage(suite, "AaSlimTest", simpleSlimDecisionTable); WikiPage setUp = crawler.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = crawler.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); testPages = new LinkedList<WikiPage>(); testPages.add(setUp); testPages.add(slimPage); testPages.add(testPage); testPages.add(tearDown); MultipleTestsRunner runner = new MultipleTestsRunner(testPages, context, suite, null); Map<TestSystem.Descriptor, LinkedList<TestPage>> map = runner.makeMapOfPagesByTestSystem(); TestSystem.Descriptor fitDescriptor = TestSystem.getDescriptor(testPage.getData(), false); TestSystem.Descriptor slimDescriptor = TestSystem.getDescriptor(slimPage.getData(), false); List<TestPage> fitList = map.get(fitDescriptor); List<TestPage> slimList = map.get(slimDescriptor); assertEquals(3, fitList.size()); assertEquals(3, slimList.size()); assertEquals(setUp, fitList.get(0).getSourcePage()); assertEquals(testPage, fitList.get(1).getSourcePage()); assertEquals(tearDown, fitList.get(2).getSourcePage()); assertEquals(setUp, slimList.get(0).getSourcePage()); assertEquals(slimPage, slimList.get(1).getSourcePage()); assertEquals(tearDown, slimList.get(2).getSourcePage()); }
public void loadTestSystems(final TestSystemFactoryRegistrar registrar) throws PluginException { forEachNamedObject(ConfigurationParameter.TEST_SYSTEMS, new Registrar() { @Override public void register(String key, Class clazz) throws IllegalAccessException, InstantiationException {
protected void addValueContent(HtmlTag valueCell, Object entryValue) { if (entryValue != null) { Converter converter = ConverterRegistry.getConverterForClassOrStringConverter(entryValue.getClass());
protected void createMapReceptorInstance() throws Exception { statementExecutor.create(MY_INSTANCE, mapReceptorClassName(), new Object[] {}); }
public void laterVersionDateShouldBeAtLeastVersion() throws Exception { FitNesseVersion version = new FitNesseVersion("v20100613"); assertTrue(version.isAtLeast("v20100303")); }
public void testReplaceNotSerializable() throws Exception { try { client.replace("t1", 5, new Object());
public void testNewEpochZxidWithTxnlogOnly() throws Exception { long peerZxid; db.txnLog.add(createProposal(getZxid(1, 1))); db.txnLog.add(createProposal(getZxid(2, 1))); db.txnLog.add(createProposal(getZxid(2, 2))); db.txnLog.add(createProposal(getZxid(4, 1)));
public void respectsBeforeAttribute() throws Exception { TopologicalSet set = new TopologicalSet(); set.add(A.class); set.add(B.class); assertThat(set.toList(), contains(B.class, A.class)); set = new TopologicalSet(); set.add(B.class); set.add(A.class); assertThat(set.toList(), contains(B.class, A.class));
DeleteOperation delete(String key, OperationCallback operationCallback);  FlushOperation flush(int delay, OperationCallback operationCallback);  GetOperation get(String key, GetOperation.Callback callback);  GetsOperation gets(String key, GetsOperation.Callback callback);  GetOperation get(Collection<String> keys, GetOperation.Callback cb);  MutatorOperation mutate(Mutator m, String key, int by, long def, int exp, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  KeyedOperation touch(String key, int expiration, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(StoreType t, String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  SASLMechsOperation saslMechs(OperationCallback cb);  SASLAuthOperation saslAuth(String[] mech, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  SASLStepOperation saslStep(String[] mech, byte[] challenge, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  Collection<Operation> clone(KeyedOperation op); }
public void startingNewTestShouldStartTimeMeasurementAndNotifyListener() throws Exception { List<WikiPage> testPagesToRun = mock(List.class); WikiPage slimPage = addTestPage(suite, "AaSlimTest", simpleSlimDecisionTable); WikiTestPage page = new WikiTestPage(slimPage); ResultsListener resultsListener = mock(ResultsListener.class); MultipleTestsRunner runner = new MultipleTestsRunner(testPagesToRun, context, page.getSourcePage(), resultsListener); runner.startingNewTest(page); verify(resultsListener).newTestStarted(same(page), same(runner.currentTestTime)); assertThat(runner.currentTestTime, isAStartedTimeMeasurement()); }
public void addConfigNode() { DataNode zookeeperZnode = nodes.get(procZookeeper); if (zookeeperZnode != null) {
ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(StoreType t, String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  SASLMechsOperation saslMechs(OperationCallback cb);  SASLAuthOperation saslAuth(String[] mech, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  SASLStepOperation saslStep(String[] mech, byte[] challenge, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  Collection<Operation> clone(KeyedOperation op);  TapOperation tapBackfill(String id, long date, OperationCallback cb);  TapOperation tapCustom(String id, RequestMessage message, OperationCallback cb);  TapOperation tapAck(TapOpcode opcode, int opaque, OperationCallback cb); }
public void errorOccurred(Throwable cause) { if (cause != null) { LOG.log(Level.FINE, "error registered in test system", cause); } try { close();
public void testAddFailWhenLinkPathIsInvalid() throws Exception { WikiPage symlink = pageOne.addChildPage("SymLink"); symlink.commit(symlink.getData()); request.addInput("linkName", "SymLink"); request.addInput("linkPath", "PageOne PageTwo"); Response response = responder.makeResponse(FitNesseUtil.makeTestContext(root), request); assertEquals(404, response.getStatus()); String content = ((SimpleResponse) response).getContent(); assertSubString("doesn't exist", content); assertSubString("Error Occured", content); }
public void shouldPreferMethodOnFixtureOverMethodOnSystemUnderTest() throws Exception { FixtureWithNamedSystemUnderTestBase instance = createNamedFixture(); statementExecutor.call(INSTANCE_NAME, echoMethodName()); assertFalse(instance.getSystemUnderTest().echoCalled()); assertTrue(instance.echoCalled()); }
protected TestResult markField(int tableRow, int matchedRow, int col, QueryResults queryResults) { if (col >= fieldNames.size()) return null;
public void translatesImages() { ParserTestHelper.assertTranslatesTo("!img name", "<img src=\"name\"/>"); ParserTestHelper.assertTranslatesTo("!img http://name", "<img src=\"http://name\"/>"); ParserTestHelper.assertTranslatesTo("!img-l name", "<img src=\"name\" class=\"left\"/>"); ParserTestHelper.assertTranslatesTo("!img-r name", "<img src=\"name\" class=\"right\"/>"); }
public String makeHttpRequest() { String request = "GET /" + pageName + "?responder=fitClient"; if(usingDownloadedPaths) request += "&includePaths=yes"; if(suiteFilter != null) { request += "&suiteFilter=" + suiteFilter; } return request + " HTTP/1.1\r\n\r\n"; }
public void cantDeserializeStringThatDoesntEndWithBracket() throws Exception { SlimDeserializer.deserialize("[000000:"); }
public void testErrorMessageForBadUrlProvided() throws Exception { String remoteUrl = baseUrl + "blah"; Response response = makeSampleResponse(remoteUrl); String content = new MockResponseSender(response).sentData(); assertSubString("The URL's resource path, blah, is not a valid WikiWord.", content); }
public void shouldRegisterTypesOnDeserializers() throws Exception { handler.handle(MyDeserializer.class); verify(deserializers).register(MyDeserializer.class); }
public void assertSuitePasses(String suiteName) throws Exception { assertPasses(suiteName, TestHelper.PAGE_TYPE_SUITE, null); }
private void sortGroup(PwGroup group, Vector<PwGroup> groupList) {
protected String responseMessage(String resource) throws Exception { return "Click " + HtmlUtil.makeLink(resource, "here").html() + " to view the page."; }
private T decode(CachedData d) { return d == null ? null : tc.decode(d); }
public VersionInfo commit(final PageData data) { VersionInfo previousVersion = makeVersion(); createDirectoryIfNewPage(); saveContent(data.getContent()); saveAttributes(data.getProperties()); this.versionsController.prune(this); super.commit(data); return previousVersion; }
public static String stripLeadingSlash( final String s ) { if (s == null) { return s; } if (s.length() == 0) { return s; } if (s.charAt(0) == '/' || s.charAt(0) == '\\') { return s.substring(1); } return s; }
protected void finishWritingOutput() throws IOException { writeData(testSummary()); super.finishWritingOutput(); }
public void testSimpleDeletion() throws KeeperException, InterruptedException { zk.create("/foo", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER); zk.create("/foo/bar", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); zk.delete("/foo/bar", -1);
public void shouldNotIncludeContextPathIfURIIsAbsolute() throws Exception { view.redirectTo("http://vraptor.caelum.com.br"); verify(request, never()).getContextPath(); verify(response, only()).sendRedirect("http://vraptor.caelum.com.br"); }
public void testCanHandleUrlIfPlainRootContext() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(DefaultResourceTranslator.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getRequestURI(); will(returnValue("/")); one(request).getMethod(); will(returnValue("GET")); one(registry).parse("/", HttpMethod.GET,webRequest); will(returnValue(expected)); }}); ResourceMethod resource = translator.translate(webRequest); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied();
protected List<Object> list(Object[] rows) { List<Object> result = new LinkedList<Object>(); Collections.addAll(result, rows); return result; }
public void twoDecisionTablesDifferentScripts() throws Exception { SlimTestContextImpl testContext = new SlimTestContextImpl(new WikiTestPage(root)); String tableText = "!|scenario|myScenario|input|\n" + "|function|@input|\n" + "\n" + "!|" + SCRIPT_EXTENSION_NAME + "|\n" + "\n" + "!|DT:myScenario|\n" + "|input|\n" + "|7|\n" + "\n" + "!|script|\n" + "\n" + "!|DT:myScenario|\n" + "|input|\n" + "|6|\n"; WikiPageUtil.setPageContents(root, tableText); TableScanner ts = new HtmlTableScanner(root.getHtml()); Table t = ts.getTable(0); ScenarioTable st = new ScenarioTable(t, "s_id", testContext); t = ts.getTable(1); DiffScriptTable2 dst = new DiffScriptTable2(t, "ds_id", testContext); t = ts.getTable(2); dt = new DecisionTable(t, "did", testContext); t = ts.getTable(3); ScriptTable sct = new ScriptTable(t, "sct_id", testContext); t = ts.getTable(4); DecisionTable dt2 = new DecisionTable(t, "did2", testContext); assertions.addAll(st.getAssertions()); assertions.addAll(dst.getAssertions()); assertions.addAll(dt.getAssertions()); assertions.addAll(sct.getAssertions()); assertions.addAll(dt2.getAssertions()); List<CallInstruction> expectedInstructions = asList( new CallInstruction("decisionTable_did_0/"+ DIFF_SCRIPT_TABLE2_TYPE + "_s_id_0", DIFF_SCRIPT_TABLE2_TYPE + "Actor", "function", new Object[]{"7"}), new CallInstruction("decisionTable_did2_0/scriptTable_s_id_0", "scriptTableActor", "function", new Object[]{"6"}) ); assertEquals(expectedInstructions, instructions()); }
public void testUndeserializable() throws Exception { byte[] data={ -84, -19, 0, 5, 115, 114, 0, 4, 84, 101, 115, 116, 2, 61, 102, -87, -28, 17, 52, 30, 2, 0, 1, 73, 0, 9, 115, 111, 109, 101, 116, 104, 105, 110, 103, 120, 112, 0, 0, 0, 5 }; assertNull(ex.deserialize(data)); }
public void testGetMockPageMoreComplex() throws Exception { WikiPagePath otherPagePath = PathParser.parse("PageOne.SomePage.OtherPage"); WikiPage mockPage = crawler.getPage(root, otherPagePath); assertNotNull(mockPage); assertTrue(mockPage instanceof MockWikiPage); assertEquals("OtherPage", mockPage.getName()); }
private void verifySubstrings(String[] subStrings, String result) { for (int i = 0; i < subStrings.length; i++) { assertSubString(subStrings[i], result);
public void canHandleTypesWhichAreAvailableThroughItsPattern() throws SecurityException, NoSuchMethodException { PatternBasedStrategy strategy = new PatternBasedStrategy(control, new PatternBasedType(MyComponent.class.getPackage().getName()+".{_logic}"), new PatternBasedType("list"), EnumSet.noneOf(HttpMethod.class), 0); assertThat(strategy.canHandle(MyComponent.class, MyComponent.class.getDeclaredMethod("list")), is(equalTo(true))); }
<T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(String username, String password) throws OperationException; }
void register(Resource... resources); ResourceMethod gimmeThis(String name, String methodName); List<Resource> all(); }
public void test304IfNotModified() throws Exception { Locale.setDefault(Locale.US); Calendar now = new GregorianCalendar(); now.add(Calendar.DATE, -1); String yesterday = SimpleResponse.makeStandardHttpDateFormat().format(now.getTime()); now.add(Calendar.DATE, 2); String tomorrow = SimpleResponse.makeStandardHttpDateFormat().format(now.getTime()); request.setResource("files/testFile1"); request.addHeader("If-Modified-Since", yesterday); responder = (FileResponder)FileResponder.makeResponder(request, SampleFileUtility.base); response = responder.makeResponse(context, request); assertEquals(200, response.getStatus()); request.setResource("files/testFile1"); request.addHeader("If-Modified-Since", tomorrow); responder = (FileResponder)FileResponder.makeResponder(request, SampleFileUtility.base); responder = (FileResponder)FileResponder.makeResponder(request, SampleFileUtility.base); SimpleResponse notModifiedResponse = (SimpleResponse) responder.makeResponse(context, request); assertEquals(304, notModifiedResponse.getStatus()); assertEquals("", notModifiedResponse.getContent()); assertMatches(HTTP_DATE_REGEXP, notModifiedResponse.getHeader("Date")); assertNotNull(notModifiedResponse.getHeader("Cache-Control")); }
public void testTotalTimingShouldAppearInSummary() throws Exception { formatter.page = new WikiPageDummy(); formatter.announceNumberTestsToRun(1); WikiTestPage firstPage = new WikiTestPage(new WikiPageDummy("page1", "content")); formatter.testStarted(firstPage); formatter.testComplete(firstPage, new TestSummary(1, 2, 3, 4)); clock.elapse(900); formatter.close(); assertSubString("<strong>Assertions:</strong> 1 right, 2 wrong, 3 ignored, 4 exceptions (0" + getDecimalSeparator() + "900 seconds)", pageBuffer.toString()); }
FlushOperation flush(int delay, OperationCallback operationCallback);  GetOperation get(String key, GetOperation.Callback callback);  GetsOperation gets(String key, GetsOperation.Callback callback);  GetOperation get(Collection<String> keys, GetOperation.Callback cb);  MutatorOperation mutate(Mutator m, String key, int by, long def, int exp, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(StoreType t, String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  Collection<Operation> clone(KeyedOperation op); }
public Void call() throws Exception { containerManager.checkContainers(); return null; }
ScenarioTable getScenario(String scenarioName); @Deprecated void addExpectation(Expectation e); Collection<ScenarioTable> getScenarios(); void incrementPassedTestsCount(); void incrementFailedTestsCount(); void incrementErroredTestsCount(); void incrementIgnoredTestsCount(); }
synchronized void throttleSleep(int stallTime) throws InterruptedException { if (throttling != null) { throttling.countDown(); } super.throttleSleep(stallTime);
public String makeFullPathOfTarget(String wikiWordPath) { return null; }
public void write(int b) throws IOException { bb.put((byte)b); }
public void includeScenarioLibraryBrother() throws Exception { WikiPage slimTestPage = addPage("SlimTest", "!define TEST_SYSTEM {slim}\n"); TestPage testPage = new TestPage(slimTestPage); addPage("ScenarioLibrary", "scenario library"); SetupTeardownAndLibraryIncluder.includeInto(testPage); String html = testPage.getDecoratedData().getHtml(); assertSubString("scenario library", html); }
public void testMakeRelativeFilename() throws Exception { String name1 = "name1.txt"; String name2 = "name2"; String name3 = "C:\\folder\\name3.txt"; String name4 = "/home/user/name4.txt"; assertEquals("name1.txt", UploadResponder.makeRelativeFilename(name1)); assertEquals("name2", UploadResponder.makeRelativeFilename(name2)); assertEquals("name3.txt", UploadResponder.makeRelativeFilename(name3)); assertEquals("name4.txt", UploadResponder.makeRelativeFilename(name4)); }
public void setExecutionLogAndTrackingId(String stopResponderId, CompositeExecutionLog log) throws Exception { } public void announceStartTestSystem(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { } public void announceStartNewTest(WikiPage test) throws Exception { } public void processTestOutput(String output) throws Exception { } public void processTestResults(WikiPage test, TestSummary testSummary) throws Exception { } public void writeHead(String pageType) throws Exception { } }
public void shutdownOutput() { endPoint.shutdownOutput(); }
public void toInherit() { } } @br.com.caelum.vraptor.Resource public static class NoPath { @Path( {}) public void noPaths() { } } @Test(expected=IllegalArgumentException.class) public void shouldThrowExceptionIfPathAnnotationHasEmptyArray() throws Exception { this.resource = mockery.resource(NoPath.class); router.register(resource); } @Test public void shouldFindNonAnnotatedNonStaticPublicMethodWithComponentNameInVariableCamelCaseConventionAsURI() throws Exception { ResourceMethod method = router.parse("/clients/add", HttpMethod.POST, request); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("add")))); mockery.assertIsSatisfied(); } @Test public void shouldFindSeveralPathsForMethodWithManyValue() throws Exception { ResourceMethod method1 = router.parse("/path1", HttpMethod.POST, request); assertThat(method1, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("manyPaths")))); ResourceMethod method2 = router.parse("/path2", HttpMethod.GET, request); assertThat(method2, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("manyPaths")))); mockery.assertIsSatisfied(); } @Test public void shouldIgnoreAResourceWithTheWrongWebMethod() throws SecurityException { ResourceMethod method = router.parse("/clients/remove", HttpMethod.POST, request); assertThat(method, is(Matchers.nullValue())); mockery.assertIsSatisfied(); } @Test public void shouldAcceptAResultWithASpecificWebMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = router.parse("/clients/head", HttpMethod.HEAD, request); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("head")))); mockery.assertIsSatisfied(); } static class NiceClients extends Clients { } @Test public void findsInheritedMethodsWithDefaultNames() throws SecurityException, NoSuchMethodException { ResourceClass childResource = mockery.resource(NiceClients.class); router.register(childResource); ResourceMethod method = router.parse("/niceClients/toInherit", HttpMethod.POST, request); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("toInherit")))); mockery.assertIsSatisfied(); } }
private void performUpdate(Update update) { try {
<T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
public void run() {
public void shouldBeAbleToGetTheTitleRegExFromATable() throws Exception { String page = "<table><tr><td>Suite</td></tr><tr><td>Page</td><td>TestPageOne</td></tr><tr><td>Title</td><td>ChildPage</td></tr></table>"; HtmlTableScanner scanner = new HtmlTableScanner(page); Table table = scanner.getTable(0); assertTrue(runner.getImportantTableInformation(table)); assertEquals("TestPageOne", runner.searchRoot.getName()); assertEquals("ChildPage", runner.titleRegEx); }
void info( String message ); void warn( String message ); }
public void tearDown() throws Exception { } public void testRegexp() throws Exception { assertTrue(Pattern.matches(BoldWidget.REGEXP, "'''bold'''")); assertTrue(Pattern.matches(BoldWidget.REGEXP, "''''bold''''")); assertFalse(Pattern.matches(BoldWidget.REGEXP, "'' 'not bold' ''")); } public void testBadConstruction() throws Exception { BoldWidget widget = new BoldWidget(new MockWidgetRoot(), "''''some text' '''"); assertEquals(1, widget.numberOfChildren()); WikiWidget child = widget.nextChild(); assertEquals(TextWidget.class, child.getClass()); assertEquals("'some text' ", ((TextWidget) child).getText()); } public void testHtml() throws Exception { BoldWidget widget = new BoldWidget(new MockWidgetRoot(), "'''bold text'''"); assertEquals("<b>bold text</b>", widget.render()); } }
public void twoItemListSerialize() throws Exception { list.add("hello"); list.add("world"); assertEquals("[000002:000005:hello:000005:world:]", ListSerializer.serialize(list)); }
private HtmlTag makeUploadForm() throws Exception { HtmlTag uploadForm = HtmlUtil.makeFormTag("post", "/" + resource); uploadForm.addAttribute("enctype", "multipart/form-data"); uploadForm.addAttribute("class", "left"); uploadForm.add("<!--upload form-->"); uploadForm.add(HtmlUtil.makeSpanTag("caps", "Upload a file:")); uploadForm.add(HtmlUtil.makeInputTag("hidden", "responder", "upload")); uploadForm.add(HtmlUtil.BR); uploadForm.add(HtmlUtil.makeInputTag("file", "file", "")); uploadForm.add(HtmlUtil.BR); uploadForm.add(HtmlUtil.makeInputTag("submit", "", "Upload")); return uploadForm; }
long getMaxReconnectDelay();  AuthDescriptor getAuthDescriptor();  int getTimeoutExceptionThreshold(); }
public void testClassNotFound() throws Exception { CommandRunner runner = new CommandRunner(new String[] { "java", "-Duser.country=US", "-Duser.language=en", "BadClass" }, "", null); runner.run(); assertHasRegexp("Error", runner.getError()); assertEquals("", runner.getOutput()); assertTrue(0 != runner.getExitCode()); }
public void testException() throws Exception { exception = new Exception("test exception"); response = responder.makeResponse(context, new MockRequest()); String result = new MockResponseSender(response).sentData(); assertSubString("test exception", result); }
public StatsOperation keyStats(String key, Callback cb) { throw new UnsupportedOperationException("Key stats are not supported " + "for ASCII protocol");
private String[] parseCommandLine(String commandLine) { Collection<String> result = new ArrayList<String>(); Pattern p = Pattern.compile("\"([^\"]*)\"|[\\S]+"); Matcher m = p.matcher(commandLine); while(m.find()) { String token = (m.group(1)==null) ? m.group(0) : m.group(1); result.add(token); } return result.toArray(new String[result.size()]); }
public TarEntry map( final TarEntry pEntry ) { TarEntry entry = pEntry; for (Mapper mapper : mappers) { entry = mapper.map(entry); } return entry; }
public void usingRegexesWithCurlyBracesNotOnTheEnd() throws Exception { builder = new RouteBuilder(proxifier, typeFinder, converters, "/abc/{abc:[0-9A-Z]{5}}/"); builder.is(MyResource.class, method.getMethod()); Route route = builder.build(); assertFalse("invalid uri", route.canHandle("/abc/notValid/")); assertFalse("invalid uri", route.canHandle("/abc/ABC123/")); assertTrue("valid uri", route.canHandle("/abc/10AB3/"));
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws IOException, InterceptionException { Class<? extends Interceptor>[] interceptors = registry.interceptorsFor(method); stack.addAsNext(interceptors); stack.next(method, resourceInstance); }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof Create)) { return false; } Create op = (Create) o; boolean aclEquals = true; Iterator<ACL> i = op.acl.iterator(); for (ACL acl : op.acl) { boolean hasMoreData = i.hasNext(); if (!hasMoreData) { aclEquals = false; break; } ACL otherAcl = i.next(); if (!acl.equals(otherAcl)) { aclEquals = false; break; } } return !i.hasNext() && getType() == op.getType()
private void ungetCharIgnoreLineEnd(int c) { ungetBuffer[ungetCursor++] = c; }
private String readBase( final BufferedReader reader ) throws IOException, ParseError { final String line = reader.readLine(); if (line == null) { return null; } final Matcher matcher = basePattern.matcher(line); if (!matcher.matches()) { throw new ParseError("expected base line but got \"" + line + "\""); } return matcher.group(1); }
public void setup() { this.mockery = new VRaptorMockery(); this.container = mockery.container(MyInterceptor.class, null); this.handler = new ToInstantiateInterceptorHandler(container, MyInterceptor.class); }
public static void pipeAll(InputStream inStr, OutputStream outStr) throws IOException { byte[] bs = new byte[BUFFER_SIZE]; int numRead; while ((numRead = inStr.read(bs, 0, bs.length)) >= 0) {
void containsWatcher(String path, Watcher watcher, WatcherType watcherType) throws NoWatcherException { boolean containsWatcher = false; switch (watcherType) { case Children: { synchronized (childWatches) { containsWatcher = contains(path, watcher, childWatches); } break; } case Data: { synchronized (dataWatches) { containsWatcher = contains(path, watcher, dataWatches); } synchronized (existWatches) { boolean contains_temp = contains(path, watcher, existWatches); containsWatcher |= contains_temp; } break; } case Any: { synchronized (childWatches) { containsWatcher = contains(path, watcher, childWatches); } synchronized (dataWatches) { boolean contains_temp = contains(path, watcher, dataWatches); containsWatcher |= contains_temp; } synchronized (existWatches) { boolean contains_temp = contains(path, watcher, existWatches); containsWatcher |= contains_temp; } } }
public boolean onCreateOptionsMenu(Menu menu) { menu.add(0, MENU_DONATE, 0, R.string.menu_donate); menu.findItem(MENU_DONATE).setIcon(android.R.drawable.ic_menu_share); menu.add(0, MENU_LOCK, 0, R.string.menu_lock); menu.findItem(MENU_LOCK).setIcon(android.R.drawable.ic_lock_lock);  return true;
@Test public void translatesHashTables() { ParserTest.assertTranslates("!{a:b,c:d}", "<table class=\"hash_table\">" + HtmlElement.endl +
public static MethodExecutionResult noInstance(String instanceName) { return new NoInstance(instanceName); }
public void setup() throws NoSuchMethodException { this.mockery = new Mockery(); this.provider = mockery.mock(ParametersProvider.class); this.result = mockery.mock(PageResult.class); }
public void add(long value) { } } private static final class NullSummarySet implements SummarySet { private static final NullSummarySet INSTANCE = new NullSummarySet(); @Override public void add(String key, long value) { } } }
private double scoreRowTopology() { double score = 0.0; for (int row = 0; row < table1rows; row++) { int table1Cols = table1.getColumnCountInRow(row); int table2Cols = table2.getColumnCountInRow(row); if (table1Cols == table2Cols) score += .1 * (2.0 / (table1rows + table2rows)); } return score; }
public void testValidateSocketTimeout() throws Exception {  String resp = sendRequest("isro", 2000); Assert.assertTrue(resp.contains("rw")); }
public void nullResultsForNullTable() throws Exception { assertQueryResults("", new ArrayList<List<List<String>>>(), "[" +
public void testSystemStopped(TestSystem testSystem, Throwable cause) throws IOException { super.testSystemStopped(testSystem, cause); if (cause != null) { suiteExecutionReport.tallyPageCounts(ExecutionResult.ERROR); } if (testHistoryFormatter != null) { FileUtil.close(testHistoryFormatter);
protected SecureRandom setIVs(PwDbHeader header) throws PwDbOutputException { SecureRandom random = super.setIVs(header); PwDbHeaderV4 h = (PwDbHeaderV4) header; random.nextBytes(h.protectedStreamKey); return random; }
public void toXml(Writer writer, VelocityEngine velocityEngine) throws Exception { VelocityContext velocityContext = new VelocityContext(); velocityContext.put("response", this); Template template = velocityEngine.getTemplate("testResults.vm"); template.merge(velocityContext, writer); }
public InputStream getContent() throws IOException {
private void footer() { if (keys.size() > 0) buffer.append("<hr/>");
private void addFilePathsToList(String path) { File f = new File(path); if (f.isDirectory()) { File[] files = FileUtil.getDirectoryListing(f);
public void testStandardOutput() throws Exception { responder.setFastTest(false); String content = classpathWidgets() + outputWritingTable("output1") + outputWritingTable("output2") + outputWritingTable("output3"); String errorLogContent = doRunAndGetErrorLog(content); assertHasRegexp("output1", errorLogContent); assertHasRegexp("output2", errorLogContent); assertHasRegexp("output3", errorLogContent); }
public void shouldBeAbleToDeserializeADogWithDeserializerAdapter() throws Exception { List<JsonDeserializer> deserializers = new ArrayList<JsonDeserializer>(); deserializers.add(new DogDeserializer()); deserializer = new GsonDeserialization(provider, new DefaultJsonDeserializers(deserializers), request); InputStream stream = new ByteArrayInputStream("{'dog':{'name':'Renan Reis','age':'0'}}".getBytes()); when(provider.parameterNamesFor(bark.getMethod())).thenReturn(new String[] { "dog" }); Object[] deserialized = deserializer.deserialize(stream, bark); assertThat(deserialized.length, is(1)); assertThat(deserialized[0], is(instanceOf(Dog.class))); Dog dog = (Dog) deserialized[0]; assertThat(dog.name, is("Renan")); assertThat(dog.age, is(25)); }
Value ternaryOperation( AbstractInsnNode insn, Value value1, Value value2, Value value3) throws AnalyzerException;  Value naryOperation(AbstractInsnNode insn, List values) throws AnalyzerException;  Value merge(Value v, Value w); }
public void testRegexp() throws Exception { assertMatch("!define xyz {\n123\r\n456\r\n}"); assertMatch("!define abc {1}"); assertMatch("!define abc (1)"); assertMatch("!define x (!define y {123})"); assertNoMatch("!define"); assertNoMatch("!define x"); assertNoMatch(" !define x {1}");
public void shouldFailIfUsingConstructorParametersOnAcceptsMethod() throws Exception { StaticInterceptorHandler handler = new StaticInterceptorHandler(container, InterceptorUsingConstructorParametersOnAccepts.class); handler.execute(stack,method,instance); }
public void execute(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws IOException, InterceptionException { Interceptor interceptor = Interceptor.class.cast(container.instanceFor(type)); interceptor.intercept(stack, method, resourceInstance); }
public void assertTestPasses(String testName) throws Exception { Counts ct = trinidad.runTest(testName); Assert.assertEquals("exceptions in tests", 0, ct.exceptions); Assert.assertEquals("wrong tests", 0, ct.wrong); }
private long processLogFiles(DataTreeV1 oldTree, File[] logFiles) throws IOException { long zxid = 0; for (File f: logFiles) { LOG.warn("Processing log file: " + f); InputStream logIs = new BufferedInputStream(new FileInputStream(f)); zxid = playLog(BinaryInputArchive.getArchive(logIs)); logIs.close(); } return zxid; }
public void verboseFailing() throws Exception { runPage("-v", "SuitePage.TestFailing"); String output = outputBytes.toString(); assertSubString("Test Runner for Root Path: TestFailing", output); assertSubString("* Page:TestFailing right:0, wrong:1, ignored:0, exceptions:0", output); assertSubString("Test Pages: 0 right, 1 wrong, 0 ignored, 0 exceptions", output); assertSubString("Assertions: 0 right, 1 wrong, 0 ignored, 0 exceptions", output); }
protected void pass(int col, int row, String passMessage) { Response passingContents = pass(passMessage); table.setCell(col, row, passingContents); }
public void testTurnOffChunking() throws IOException { response.turnOffChunking(); response.add("one"); response.add("two"); response.close(); assertMatches("onetwo$", buffer.toString()); }
public void simpleInputAndOutputPassing() throws Exception { makeTables( "!|scenario|echo|input|giving|output|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|script|\n" + "|echo|7|giving|7|\n" ); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("scriptTable_id.0_0", "7") ) ); evaluateExpectations(pseudoResults); String scriptTable = script.getChild(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output], [check, echo, 7, pass(7)]]"; assertEquals(expectedScript, scriptTable); String dtHtml = script.getTable().toString(); assertSubString("<span id=\"test_status\" class=pass>Scenario</span>", dtHtml); assertEquals(1, script.getTestSummary().right); assertEquals(0, script.getTestSummary().wrong); assertEquals(0, script.getTestSummary().ignores); assertEquals(0, script.getTestSummary().exceptions); }
public void testSimple() throws Exception { WikiPageUtil.addPage(root, PathParser.parse("SomePage"), "some string"); String output = getSocketOutput("GET /SomePage HTTP/1.1\r\n\r\n"); String statusLine = "HTTP/1.1 200 OK\r\n"; assertTrue("Should have statusLine", Pattern.compile(statusLine, Pattern.MULTILINE).matcher(output).find()); assertTrue("Should have canned Content", hasSubString("some string", output)); }
public void testResponseWithMatchesWillReturnPageList() throws Exception { MockRequest request = setupRequest(); request.addInput(PAGE_TYPE_ATTRIBUTE, TEST.toString()); String content = invokeResponder(request); String[] titles = { "Page", TEST.toString(), "PageOne"}; assertOutputHasRowWithLink(content, titles); request.addInput("Suites", "filter1"); content = invokeResponder(request); assertHasRegexp("result for your search", content); String[] titles1 = { "Page", TEST.toString(), "Tags", "PageOne" }; assertOutputHasRowWithLink(content, titles1); assertOutputHasRowWithLabels("filter1,filter2"); }
protected void tearDown() throws Exception { LOG.info("FINISHED " + getName()); }
public void shouldAddInterceptorsInOrder() throws InterceptionException, IOException { final Sequence sequence = mockery.sequence("executionSequence"); mockery.checking(new Expectations() { { one(stack).add(ResourceLookupInterceptor.class); inSequence(sequence); one(stack).add(URLParameterExtractorInterceptor.class); inSequence(sequence); one(stack).add(InterceptorListPriorToExecutionExtractor.class); inSequence(sequence); one(stack).add(instantiator); inSequence(sequence); one(stack).add(ParametersInstantiatorInterceptor.class); inSequence(sequence); one(stack).add(ExecuteMethodInterceptor.class); inSequence(sequence); one(stack).add(ForwardToDefaultViewInterceptor.class); inSequence(sequence); one(stack).next(null, null); inSequence(sequence); } }); execution.execute(); mockery.assertIsSatisfied(); }
private void testWikiImportUpdateWith(WikiImportProperty property) throws Exception { WikiPage page = root.addChildPage("SomePage"); PageData data = page.getData(); property.addTo(data.getProperties()); page.commit(data); getPropertiesContentFromPage(page); checkUpdateForm(); assertSubString("Wiki Import Update.", content); assertSubString("<a href=\"http://my.host.com/PageRoot\">http://my.host.com/PageRoot</a>", content); assertNotSubString("value=\"Import\"", content); }
public static void main(String[] args) throws Exception { if (parseCommandLine(args)) { startWithFactory(args, new JavaSlimFactory());
public void testQuerySetStale() throws Exception { Query query = new Query(); View view = client.getView(DESIGN_DOC_W_REDUCE, VIEW_NAME_W_REDUCE); HttpFuture<ViewResponseWithDocs> future = client.asyncQuery(view, query.setStale(Stale.OK)); ViewResponseWithDocs response = future.get(); assert response != null : future.getStatus(); }
MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to);  void timeOut();  boolean isTimedOut();  boolean isTimedOut(long ttlMillis);  boolean isTimedOutUnsent();  long getWriteCompleteTimestamp();  byte[] getErrorMsg();  void addClone(Operation op);  int getCloneCount();  void setCloneCount(int count); }
private boolean isSetup(String option) { return "-setup".equals(option); }
public void submitRequest(ServerCnxn cnxn, long sessionId, int type, int xid, ByteBuffer bb, ArrayList<Id> authInfo) { if (firstProcessor == null) { synchronized (this) { try { while (!running) { wait(1000); } } catch (InterruptedException e) { ZooLog.logException(e); } if (firstProcessor == null) { throw new RuntimeException("Not started"); } } } try { touch(cnxn);
public boolean exec() throws CliException { byte[] b = null; if (args.length >= 3) { b = args[2].getBytes(); } zk.addAuthInfo(args[1], b); return false; }
public void run() { try { ServerConfig cc = new ServerConfig();
public void renameFile(File file, File oldFile) { Repository repository = getRepository(file); persistence.renameFile(file, oldFile); Git git = new Git(repository); try { git.add()
public void testVariableIsRenderedInAliasLink() throws Exception { ParentWidget wroot = new WidgetRoot(root); wroot.addVariable("X", "Y"); AliasLinkWidget w = new AliasLinkWidget(wroot, "[[x][${X}]]"); assertEquals("<a href=\"Y\">x</a>", w.render()); }
private void addBadDummyTestResult(File resultFile) throws Exception { FileUtil.createFile(resultFile, "JUNK"); }
protected BaseFormatter newJunitFormatter() { return new JunitReFormatter(context, page, response.getWriter(), getSuiteHistoryFormatter()); }
private byte[] preformRead() throws IOException { setReadMode(); clearBuffer(); readUntilFinished(); return getBufferedBytes(); }
public void shouldForward() throws SecurityException, InterceptionException, NoSuchMethodException { this.method = mockery.methodFor(VRaptor2Component.class, "method"); mockery.checking(new Expectations() { { one(info).shouldShowView(method); will(returnValue(true)); one(result).forwardTo(); } }); interceptor.intercept(null, this.method, null); mockery.assertIsSatisfied(); }
private void addToClasspath( String groupId, String artifactId, String version, Set<String> classpath) throws Exception { addToClasspath(groupId, artifactId, version, classpath, true); }
void appendCellToRow(int row, String contents); String getUnescapedCellContents(int col, int row); String getCellResult(int col,int row); void appendChildTable(int row, Table table); void setTestStatusOnRow(int row, ExecutionResult testStatus); void setCell(int col, int row, Result response); void appendToCell(int col, int row, Result response); }
public boolean isLeader() { return localPeer.isLeader(peer.getId()); }
public boolean update() throws IOException { if (shouldUpdate()) { LOG.info("Unpacking new version of FitNesse resources. Please be patient..."); performAllupdates(); getProperties().put("Version", fitNesseVersion); saveProperties(); return true; } return false; }
public void afterTest() throws Exception {
private void verifyLiteralsGetRendered(String option, String pageName) throws Exception { crawler.addPage(root, PathParser.parse(pageName), "!-one-!, !-two-!, !-three-!"); WidgetRoot widgetRoot = new WidgetRoot(page1); IncludeWidget widget = createIncludeWidget(widgetRoot, option + pageName); final String result = widget.render(); assertSubString("one, two, three", result); assertEquals("one", widgetRoot.getLiteral(0)); assertEquals("two", widgetRoot.getLiteral(1)); assertEquals("three", widgetRoot.getLiteral(2)); }
public boolean accepts(ResourceMethod method) { if (!request.getMethod().toUpperCase().equals("POST")) return false; String contentType = request.getContentType(); return contentType != null && contentType.startsWith(ACCEPT_MULTIPART); }
protected WikiPage createChildPage(final String name) throws Exception { final FileSystemPage newPage = new FileSystemPage(getFileSystemPath(), name, this, this.revisioner); String newPagePath = newPage.getFileSystemPath(); final File baseDir = new File(newPagePath); baseDir.mkdirs(); cmSystem.update(newPagePath); return newPage; }
public void testVerboseDisabled() { ByteArrayOutputStream out = new ByteArrayOutputStream(); redirectOutput(out); project.executeTarget("verbose-disabled"); assertTrue(!out.toString().contains("Total size")); }
String error(String s); String pass(String s); String fail(String s); String ignore(String s); }
public void justSomeXmlDoesNotQualify() { assertFalse(qualifiesAsHtml("<content>blah</content>")); }
protected void setUp() throws Exception { passwd = new File(passwordFilename); ps = new PrintStream(new FileOutputStream(passwd)); ps.println("uncle:bob"); ps.println("micah:boy"); ps.close(); a = new MultiUserAuthenticator(passwordFilename); }
protected void prepareForExecution() throws Exception { addToResponse(HtmlUtil.getHtmlOfInheritedPage("PageHeader", page)); testableHtml = SetupTeardownIncluder.render(data, true); if(testableHtml.length() == 0) testableHtml = handleBlankHtml(); classPath = new ClassPathBuilder().getClasspath(page); }
public final void visitIincInsn(final int var, final int increment) { AttributesImpl attrs = new AttributesImpl(); attrs.addAttribute("", "var", "var", "", Integer.toString(var)); attrs.addAttribute("", "inc", "inc", "", Integer.toString(increment)); addElement(AbstractVisitor.OPCODES[Opcodes.IINC], attrs); }
private void aasertToString(String value, String dataType) throws InvalidInputException { String expectedToStringValue = "DataType = " + dataType + " and value = " + value; assertEquals(expectedToStringValue, new Delta(dataType, value).toString()); }
public void removeAttribute(String name) { attributes.remove(name); }
void start(String webxml) { System.out.println("Starting VRaptor's static classpath scanning"); ClasspathResolver cpr; if (webxml == null) { cpr = new StandaloneClasspathResolver(); } else { cpr = new StandaloneClasspathResolver(webxml); } System.out.print("Initiating the scanning..."); ComponentScanner scanner = new ScannotationComponentScanner(); Collection<String> classes = scanner.scan(cpr); System.out.println(" done."); System.out.print("Generating the static registry..."); BootstrapGenerator generator = new JavassistBootstrapGenerator(); generator.generate(classes, cpr); System.out.println(" done."); }
public void run() {
public <T> T goTo(Class<T> type) { this.typeToUse = type; return proxifier.proxify(type, new MethodInvocation<T>() {
public static Test suite() { return TestSuiteMaker.makeSuite("authentication", new Class[] { AuthenticatorTest.class,
public static void writeRequiredControllerConfig(File file, int controllerPort, int zkServerPort, int adminServerPort) throws IOException { PrintWriter writer = new PrintWriter(file); writer.write("dataDir=anywhere\n"); writer.write("controllerPort=" + controllerPort + "\n"); writer.write("clientPort=" + zkServerPort + "\n"); writer.write("adminPort=" + adminServerPort + "\n"); writer.close(); }
public void testGenerateDigest() throws NoSuchAlgorithmException { assertEquals("super:D/InIHSb7yEEbrWz8b9l71RjZJU=", DigestAuthenticationProvider.generateDigest("super:test")); assertEquals("super:yyuhPKumRtNj4r8GnSbbwuq1vhE=", DigestAuthenticationProvider.generateDigest("super:zookeeper")); assertEquals("super:t6lQTvqID/Gl5Or0n4FYE6kKP8w=", DigestAuthenticationProvider.generateDigest(("super:foo"))); assertEquals("super:hTdNN4QH4isoRvCrQ1Jf7REREQ4=", DigestAuthenticationProvider.generateDigest(("super:bar"))); }
public String toString(StringBuilder o) { return "customConverter"; }
public static void clearDelegatesForNextTest() { PARSE_DELEGATES.clear(); }
private GsonJSONSerialization serializationWithAdapter(JsonSerializer adapter) { return new GsonJSONSerialization(response, extractor, initializer, createBuilder(adapter), serializee); }
@Test public void testGetPageNames() { List<String> pathList = new ArrayList<>(); pathList.add(REGULAR_PARENT_PATH); pathList.add(ROOT_PARENT_PATH); Map<String, String> pathMap = TemplateUtil.getPageNames(pathList); assertEquals(REGULAR_PARENT_PATH, pathMap.get("Template One")); assertEquals(ROOT_PARENT_PATH, pathMap.get("Template From Root")); }
GetOperation get(String key, GetOperation.Callback callback);  GetsOperation gets(String key, GetsOperation.Callback callback);  GetOperation get(Collection<String> value, GetOperation.Callback cb);  MutatatorOperation mutate(Mutator m, String key, int by, long def, int exp, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  Collection<Operation> clone(KeyedOperation op); }
void rollLog() throws IOException;  boolean append(TxnHeader hdr, Record r) throws IOException;  TxnIterator read(long zxid) throws IOException;  long getLastLoggedZxid() throws IOException;  boolean truncate(long zxid) throws IOException;  long getDbId() throws IOException;  void commit() throws IOException;  long getTxnLogSyncElapsedTime();  public interface TxnIterator extends Closeable {  TxnHeader getHeader();  Record getTxn();  boolean next() throws IOException;  long getStorageSize() throws IOException; } }
public void testClientwithoutWatcherObj() throws IOException, InterruptedException, KeeperException { performClientTest(false); }
public static WikiPage makeRoot(String name, Properties properties, MemoryFileSystem fileSystem) { WikiPageFactory factory = new FileSystemPageFactory(fileSystem, new MemoryVersionsController(fileSystem), new SystemVariableSource(properties)); FileSystemPage page = (FileSystemPage) factory.makePage(new File("."), name, null); return page; }
public void methodReturnsVoid() throws Exception { String retval = caller.call("testSlim", "nilad"); assertEquals("VOID", retval); }
public void testComplete(WikiTestPage test, TestSummary testSummary) { increaseCompletedTests(); if (firstFailure != null) { notifier.fireTestFailure(new Failure(descriptionFor(test), firstFailure));
public void ignoresAnHttpMethodLimitedMappingRule() throws NoSuchMethodException { new Rules(router) { public void routes() { routeFor("/clients/add").with(HttpMethod.GET).is(MyControl.class).add(null); } }; assertThat(router.parse("/clients/add", HttpMethod.POST, request), is(nullValue())); mockery.assertIsSatisfied(); }
public Response makeResponse(FitNesseContext context, Request request) throws Exception { prepareResponse(context, request); if (request.hasInput("resultDate")) { return tryToMakeTestExecutionReport(context, request);
private String getBootClasspath() throws Exception { Set<String> classpath = new HashSet<String>(); addToClasspath(SCALA_GROUPID, SCALA_LIBRARY_ARTIFACTID, scalaVersion, classpath); return JavaCommand.toMultiPath(classpath.toArray(new String[classpath.size()])); }
public void connect() throws IOException, SlimVersionMismatch { throw new UnsupportedOperationException(); }
public void output() throws IOException {
private void watchForOutput(final InputStream processOutput, final PrintStream consoleOutput) { new Thread() { public void run() {
public void output() throws IOException { outputBytes += 134;
public void testShouldCollect_limitPath() { final String limitPath = Quotas.quotaPath("/ns1") + QuotaMetricsUtils.LIMIT_END_STRING; assertTrue(QuotaMetricsUtils.shouldCollect(limitPath, QuotaMetricsUtils.QUOTA_LIMIT_USAGE_METRIC_TYPE.QUOTA_COUNT_LIMIT)); assertTrue(QuotaMetricsUtils.shouldCollect(limitPath, QuotaMetricsUtils.QUOTA_LIMIT_USAGE_METRIC_TYPE.QUOTA_BYTES_LIMIT)); assertFalse(QuotaMetricsUtils.shouldCollect(limitPath, QuotaMetricsUtils.QUOTA_LIMIT_USAGE_METRIC_TYPE.QUOTA_COUNT_USAGE)); assertFalse(QuotaMetricsUtils.shouldCollect(limitPath, QuotaMetricsUtils.QUOTA_LIMIT_USAGE_METRIC_TYPE.QUOTA_BYTES_USAGE)); }
public void parse(String input, ParsingPage parsingPage) { this.parsingPage = parsingPage; tree = Parser.make(parsingPage, input, symbolProvider).parse(); }
public void handleException(ExceptionResult exceptionResult) { table.updateContent(col, row, exceptionResult); getTestContext().incrementErroredTestsCount(); }
private List<Object> instructionForRow(int row) throws SyntaxError { String firstCell = table.getCellContents(0, row).trim(); List<Object> instruction; String match; if (firstCell.equalsIgnoreCase("start")) instruction = startActor(row); else if (firstCell.equalsIgnoreCase("check")) instruction = checkAction(row); else if (firstCell.equalsIgnoreCase("check not")) instruction = checkNotAction(row); else if (firstCell.equalsIgnoreCase("reject")) instruction = reject(row); else if (firstCell.equalsIgnoreCase("ensure")) instruction = ensure(row); else if (firstCell.equalsIgnoreCase("show")) instruction = show(row); else if (firstCell.equalsIgnoreCase("note")) instruction = note(row); else if ((match = ifSymbolAssignment(0, row)) != null) instruction = actionAndAssign(match, row); else if (firstCell.length() == 0) instruction = note(row); else if (firstCell.trim().startsWith("#") || firstCell.trim().startsWith("*")) instruction = note(row); else {
public void DefineVariableInAliasIsPreserved() throws Exception { String content = "[[${a}][${b}]]"; String newContent = ParserTestHelper.roundTrip(new TestSourcePage(), content); assertEquals(content, newContent); }
private void mknod_inner(String path, CreateMode mode) throws KeeperException, InterruptedException { for(int i = 0; i < maxTries; i++) { try {
public MutablePicoContainer addBundledComponent(Object componentKey, Object componentImplementationOrInstance, Parameter... parameters) { containerForBundledComponents.addComponent(componentKey, componentImplementationOrInstance, parameters); return this; }
public void testSingleGetsOperationCloning() { GetsOperation.Callback callback = (GetsOperation.Callback)mock(GetsOperation.Callback.class).proxy(); GetsOperation op = ofact.gets(TEST_KEY, callback); GetsOperation op2 = cloneOne(GetsOperation.class, op); assertKey(op2); assertSame(callback, op.getCallback()); }
public void describeTo(final Description description) { } }) ); } } }
public Maybe<Symbol> parse(Parser parser) { Scanner scanner = parser.getScanner(); List<Symbol> tokens = scanner.nextTokens(new SymbolType[] {SymbolType.Whitespace, SymbolType.Text, SymbolType.Whitespace}); if (tokens.size() == 0) return Symbol.Nothing; String name = tokens.get(1).getContent(); if (!ScanString.isWord(name)) return Symbol.Nothing; scanner.moveNext(); SymbolType open = scanner.getCurrent().getType(); SymbolType close = SymbolType.closeType(open); if (close == SymbolType.Empty) return Symbol.Nothing; int start = scanner.getOffset(); scanner.markStart(); Symbol value = Parser.makeIgnoreFirst(getPage(), scanner, close).parse(); if (scanner.isEnd()) return Symbol.Nothing; return new Maybe<Symbol>(new Symbol(SymbolType.Define) .add(name)
public void removeChildPage(String name) throws Exception; public List<WikiPage> getChildren() throws Exception; public String getName(); public PageData getData() throws Exception; public PageData getDataVersion(String versionName) throws Exception; public VersionInfo commit(PageData data) throws Exception; public PageCrawler getPageCrawler(); public WikiPage getHeaderPage() throws Exception; public WikiPage getFooterPage() throws Exception;
public int getPendingRevalidationCount();  public long getElectionTimeTaken();  public int getObserverMasterPacketSizeLimit();  public void setObserverMasterPacketSizeLimit(int sizeLimit); }
protected void tearDown() throws Exception { ServerStats.unregister(); }
public void hit(WikiPage page) throws Exception { for (WikiPage hit : testPageList) { if (hit == page) return; } if (page.getData().hasAttribute("Test")) testPageList.add(page);
public float readFloat(String tag) throws IOException { return in.readFloat(); }
public void testOrderWithExtraPrefixes() throws Exception { String[] names = {"r-1-3-2", "r-2-2-1", "r-3-1-3"}; ZNodeName zname; final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream() .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList()); final Iterator<ZNodeName> it = nodeNames.iterator(); zname = it.next(); assertEquals("r-2-2-1", zname.getName()); assertEquals("r-2-2", zname.getPrefix()); assertEquals(Integer.valueOf(1), zname.getSequence().get()); zname = it.next(); assertEquals("r-1-3-2", zname.getName()); assertEquals("r-1-3", zname.getPrefix()); assertEquals(Integer.valueOf(2), zname.getSequence().get()); zname = it.next(); assertEquals("r-3-1-3", zname.getName()); assertEquals("r-3-1", zname.getPrefix()); assertEquals(Integer.valueOf(3), zname.getSequence().get()); }
<T> Future<Boolean> append(String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); Future<Boolean> prepend(String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<Boolean> prepend(String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, int exp, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void LoadData(Context ctx, InputStream is, String password, String keyfile) throws InvalidCipherTextException, IOException, InvalidKeyFileException { LoadData(ctx, is, password, keyfile, !ImporterV3.DEBUG); }
public void testAuthenticatorCustomCreation() throws Exception { testProperties.setProperty(ConfigurationParameter.AUTHENTICATOR, SimpleAuthenticator.class.getName()); Authenticator authenticator = loader.getAuthenticator(new PromiscuousAuthenticator()); assertNotNull(authenticator); assertEquals(SimpleAuthenticator.class, authenticator.getClass()); }
private void delete(File f) { if (f.isFile()) { if (! f.delete()) {
public void gotAck(TapOpcode opcode, int opaque) { tapAck(conn, opcode, opaque, this); }
public void parses() { ParserTestHelper.assertParsesWithOffset("!-stuff-!", "SymbolList<0..9>[Literal<0..9>]"); ParserTestHelper.assertParsesWithOffset("foo!-stuff-!bar", "SymbolList<0..15>[Text<0..3>, Literal<3..12>, Text<12..15>]"); }
public static String replaceVariables( final VariableResolver pResolver, final String pExpression, final String pOpen, final String pClose ) throws ParseException { final char[] s = pExpression.toCharArray(); final char[] open = pOpen.toCharArray(); final char[] close = pClose.toCharArray(); final StringBuilder out = new StringBuilder(); StringBuilder sb = new StringBuilder(); char[] watch = open; int w = 0; for (int i = 0; i < s.length; i++) { char c = s[i]; if (c == watch[w]) { w++; if (watch.length == w) {
public void assertTestPasses_RunsATestThroughFitNesseAndWeCanInspectTheResultUsingJavaFormatter() throws Exception{ String testName="FitNesse.SuiteAcceptanceTests.SuiteSlimTests.TestTwoIdenticalTablesOnPageDontConflict"; helper.assertTestPasses(testName); JavaFormatter formatter=JavaFormatter.getInstance(testName); Assert.assertEquals(testName,formatter.getTestsExecuted().get(0)); Assert.assertEquals(1,formatter.getTestsExecuted().size()); }
public void throwMethodNotCalledErrorIfNoSuchMethodAndListAvailableMethodsSorted() throws Exception { super.throwMethodNotCalledErrorIfNoSuchMethodAndListAvailableMethodsSorted(); validateNoMethodIntercepted(); }
public void testWithoutAutoCreateDataDir() throws Exception { assertThrows(FileTxnSnapLog.DatadirException.class, () -> { assertFalse(logDir.exists(), "log directory already exists");
public void shouldAddVersionWhenAvailable() { assertTrue("Version not added for rt.jar", enricher.getStackTraceAsString(exception).contains(RT_JAR + ":" + javaVersion));
public void testAliasLinWithLiteralDoesntGetCorrupted() { checkChangesOnPageOne("gunk [[!-gunk-!][PageTwo]] gunk", "gunk [[!-gunk-!][PageThree]] gunk"); }
public void testVersionConversion() { Calendar cal = new GregorianCalendar(2013, Calendar.FEBRUARY, 17); assertEquals("should match", "1.0", Utils.convertToDebianVersion("1.0", false, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~SNAPSHOT", Utils.convertToDebianVersion("1.0+SNAPSHOT", false, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~SNAPSHOT", Utils.convertToDebianVersion("1.0-SNAPSHOT", false, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~20130217000000", Utils.convertToDebianVersion("1.0+SNAPSHOT", true, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~RC2", Utils.convertToDebianVersion("1.0-RC2", true, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~alpha3", Utils.convertToDebianVersion("1.0-alpha3", true, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~Beta+4", Utils.convertToDebianVersion("1.0.Beta-4", true, "SNAPSHOT", cal.getTime())); assertEquals("should match", "1.0~rc7", Utils.convertToDebianVersion("1.0rc7", true, "SNAPSHOT", cal.getTime())); }
public Table firstCellValue(Table table) { return table.tableAt(0,0,0); }
public ZookKeeperServerEmbeddedBuilder exitHandler(ExitHandler exitHandler) { this.exitHandler = Objects.requireNonNull(exitHandler); return this; }
public Map<String, ? extends CustomComparator> getCustomComparators() throws PluginException { return createMap(); }
public void testEmptyTestPage() throws Exception { PageData data = root.getData(); data.setContent(classpathWidgets()); root.commit(data); testPage = WikiPageUtil.addPage(root, PathParser.parse("EmptyTestPage"), ""); request.setResource(testPage.getName()); response = responder.makeResponse(context, request); sender = new MockResponseSender(); sender.doSending(response); sender.sentData(); String errorLogContent = getExecutionLog(); assertNotSubString("Exception", errorLogContent); assertSubString("No execution log available.", errorLogContent); }
public static void after() throws Exception {
public void teardownsAreHiddenAndMarked() throws Exception { String result = ParserTestHelper.translateTo(makePageThatIncludesTeardown()); assertContains(result, "class=\"collapsible closed teardown\""); assertContains(result, "<a href=\"PageTwo.TearDown\">"); }
public SlimClient build() { final SlimService.Options options = SlimService.parseCommandLine(getSlimFlags()); Integer statementTimeout = options != null ? options.statementTimeout : null; FixtureInteraction interaction = options != null ? options.interaction : JavaSlimFactory.createInteraction(null); SlimServer slimServer = createSlimServer(interaction, statementTimeout, isDebug()); return new InProcessSlimClient(getTestSystemName(), slimServer, getExecutionLogListener()); }
public void shouldNamePrimitiveTypeAsItsSimpleName() throws SecurityException, NoSuchMethodException { assertThat(provider.parameterNamesFor(Horse.class.getMethod("rest", int.class))[0], is(equalTo(int.class.getSimpleName()))); }
public void testParseException() { try { new Parse("leader<table><tr><th>one</th><th>two</th><th>three</th></tr><tr><td>four</td></tr></table>trailer"); } catch(FitParseException e) { assertEquals(17, e.getErrorOffset()); assertEquals("Can't find tag: td", e.getMessage()); return; } fail("exptected exception not thrown"); }
public static FitNesseContext makeTestContext() { return makeTestContext(InMemoryPage.makeRoot("root")); }
public void tallyPageCounts(ExecutionResult result) { switch (result) { case ERROR:
public void insertBefore(final AbstractInsnNode location, final AbstractInsnNode insn) { if (check && !(contains(location) && (insn.index == -1))) { throw new IllegalArgumentException(); } ++size; AbstractInsnNode prev = location.prev; if (prev == null) { first = insn; } else { prev.next = insn; } location.prev = insn; insn.next = location; insn.prev = prev; cache = null; insn.index = 0;
private void testSnapshot(final boolean streaming) throws IOException, InterruptedException { System.setProperty(ADMIN_SNAPSHOT_ENABLED, "true"); System.setProperty(ADMIN_SNAPSHOT_INTERVAL, "0"); System.setProperty(ZOOKEEPER_SERIALIZE_LAST_PROCESSED_ZXID_ENABLED, "true"); try { final Map<String, String> kwargs = new HashMap<>();
public <T> boolean that(T actual, Matcher<? super T> matcher, String category, String reason, Object... messageParameters) { if (!matcher.matches(actual)) { if (reason != null) { errors.add(new ValidationMessage(i18n(reason), category, messageParameters)); } else { Description description = new ResourceBundleDescription(bundle); description.appendDescriptionOf(matcher); errors.add(new ValidationMessage(description.toString(), category)); } return false; } return true; }
public void testPasteFromExcelExists() throws Exception { SimpleResponse response = (SimpleResponse) responder.makeResponse(new FitNesseContext(root), request); String body = response.getContent(); assertMatches("SpreadsheetTranslator.js", body); }
protected boolean checkPasswd(long sessionId, byte[] passwd) { return sessionId != 0 && Arrays.equals(passwd, generatePasswd(sessionId));
public static KeyPair generateECKeyPair() throws GeneralSecurityException { KeyPairGenerator keyGen = KeyPairGenerator.getInstance("EC"); keyGen.initialize(new ECGenParameterSpec(DEFAULT_ELLIPTIC_CURVE_NAME), PRNG); return keyGen.generateKeyPair(); }
public void testShouldReportPerformRevisionControlOperation() throws Exception { final String expectedResponse = "Attempted to '" + revisionControlOperation + "' the page '" + pageName + "'. The result was:<br/><br/><pre>Operation: '" + revisionControlOperation + "' was successful."; revisionController = createNiceMock(RevisionController.class); expect(revisionController.history((FileSystemPage) anyObject())).andStubReturn(new HashSet<VersionInfo>()); expect(revisionController.checkState((String) anyObject())).andStubReturn(NullState.UNKNOWN); replay(revisionController); createExternalRoot(); root.getPageCrawler().addPage(root, PathParser.parse(pageName), "Test Page Content"); request.setResource(pageName); invokeResponderAndCheckResponseContains(expectedResponse); verify(revisionController); }
public TestSystem create(FitNesseContext context, Descriptor descriptor, TestSystemListener testSystemListener) throws IOException { SlimCommandRunningClient slimClient = new InProcessSlimClientBuilder(descriptor).build(); HtmlSlimTestSystem testSystem = new HtmlSlimTestSystem(descriptor.getTestSystemName(), slimClient, testSystemListener); return testSystem; }
private SimpleResponse makeResponseWithxml(Document doc) throws IOException {
public void testOnePassingTestWhenServerHasAuthenticaltionEnabled() throws Exception { tearDown(); enableTestExecuteProtectionOnPage(root); FitNesseUtil.startFitnesseWithContext(testContextWithAuthentication("user", "passw0rd")); runPage("-credentials user:passw0rd", "SuitePage.TestPassing"); assertEquals(new TestSummary(1, 0, 0, 0), runner.getCounts()); assertEquals(0, runner.exitCode()); }
void encode(DEROutputStream out) throws IOException { out.writeEncoded(GENERAL_STRING, this.getOctets()); }
public void returnsNullIfNothingFound() { final Resource resource = mockery.resource(MyResource.class); this.router.register(resource); assertThat(router.parse("/MyResource.unfindable.logic", HttpMethod.POST, request), is(nullValue())); mockery.assertIsSatisfied(); }
private void addMap(HashMap<String, Object> map, StringBuffer buffer) { if (map.size() == 0) { buffer.append("\tempty"); } for (Iterator<String> iterator = map.keySet().iterator(); iterator .hasNext();) {
public void tallyPageCounts(ExecutionResult result) { finalCounts.tallyPageCounts(result); }
@Test public void scansLiteral() { ParserTest.assertScansTokenType("!- stuff -!", TokenType.OpenLiteral, true); }
public int size() { purgeBeforeRead(); return super.size(); }
private String javaExecutablePrefix() { String javaHome = System.getenv("JAVA_HOME"); if (javaHome == null) { return "";
public void setup() throws Exception { MockitoAnnotations.initMocks(this); when(response.getOutputStream()).thenReturn(outputStream); interceptor = new DownloadInterceptor(response, info, result); }
public static void assertHasRegexp(String regexp, String output) { Matcher match = Pattern.compile(regexp, Pattern.MULTILINE | Pattern.DOTALL).matcher(output); boolean found = match.find(); if (!found) fail("The regexp <" + regexp + "> was not found.");
public static int findWikiWordLength(String text) { String candidate = text + "."; int offset = "<>^.".contains(candidate.substring(0, 1)) ? 1 : 0; while (offset < candidate.length()) { int dot = candidate.indexOf(".", offset); int word = wikiWordLength(candidate.substring(offset, dot)); if (word == 0) return offset > 1 ? offset - 1 : 0; if (offset + word < dot) return offset + word; offset = dot + 1; } return text.length(); }
boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public void convertBooleanFalse() throws Exception { BooleanConverter converter = new BooleanConverter(); assertConverts(converter, "false"); assertConverts("false", converter, "FALSE"); assertConverts("false", converter, "False"); assertConverts("false", converter, "no"); assertConverts("false", converter, "NO"); assertConverts("false", converter, "0"); assertConverts("false", converter, "1"); assertConverts("false", converter, "x"); }
public void reset() {  digest.reset();  digest.update(inputPad, 0, inputPad.length); }
public HtmlTag makeEditForm(String resource) throws Exception { HtmlTag form = new HtmlTag("form"); form.addAttribute("name", "f"); form.addAttribute("action", resource); form.addAttribute("method", "post"); form.add(HtmlUtil.makeInputTag("hidden", "responder", "saveData")); form.add(HtmlUtil.makeInputTag("hidden", SAVE_ID, String.valueOf(SaveRecorder.newIdNumber()))); form.add(HtmlUtil.makeInputTag("hidden", TICKET_ID, String.valueOf((SaveRecorder.newTicket())))); if(request.hasInput("redirectToReferer") && request.hasHeader("Referer")) { String redirectUrl = request.getHeader("Referer").toString(); int questionMarkIndex = redirectUrl.indexOf("?"); if(questionMarkIndex > 0) redirectUrl = redirectUrl.substring(0, questionMarkIndex); redirectUrl += "?" + request.getInput("redirectAction").toString(); form.add(HtmlUtil.makeInputTag("hidden", "redirect", redirectUrl)); } form.add(createTextarea()); form.add(createButtons()); HtmlTag wizardForm = makeWizardForm(resource); TagGroup group = new TagGroup(); group.add(form); group.add(wizardForm); return group; }
private void notFound(final HttpServletRequest req) { req.setAttribute(DefaultJersey.FOUR_O_FOURED, true); }
private void reinsertPagesViaSetUpTearDownGroups(Map<String, LinkedList<TestPage>> pageSetUpTearDownGroups) { Set<String> groupKeys = pageSetUpTearDownGroups.keySet(); for (String groupKey : groupKeys) { LinkedList<TestPage> pageGroup = pageSetUpTearDownGroups.get(groupKey);
public void testRegexpForCommentedTable() throws Exception { assertMatch("#|comment|\n"); assertMatch("#|something|\n"); assertMatch("#!|something|\n"); assertNoMatch("# |a|\n"); assertNoMatch(" #|a|\n"); assertNoMatch("# !|a|\n"); assertNoMatch("!#|a|\n"); }
Record getTxn();  boolean next() throws IOException;  void close() throws IOException;  long getStorageSize() throws IOException; } }
public void complete() { System.err.println("Complete."); }
public static void UpdateEntry(PwEntry oldE, PwEntry newE) throws IOException, PwManagerOutputException { if ( ! oldE.title.equals(newE.title) ) { PwGroup parent = oldE.parent; if ( parent != null ) {
public void testMultipleGetOperationCloning() { Collection<String> keys = Arrays.asList("k1", "k2", "k3"); GetOperation.Callback callback = (GetOperation.Callback)mock(GetOperation.Callback.class).proxy(); GetOperation op = ofact.get(keys, callback); Collection<Operation> ops = ofact.clone(op); assertEquals(3, ops.size()); Collection<String> mutableKeys = new ArrayList<String>(keys); int i = 3; for(Operation o : ops) { assertEquals(i, mutableKeys.size());
private String makeLinkTagForWikiWord(String url, String urlSuffix) throws Exception { WikiWordWidget www = new WikiWordWidget(new BlankParentWidget(this, ""), url); String theWord = www.getWikiWord(); WikiPagePath wikiWordPath = PathParser.parse(theWord); WikiPagePath fullPathOfWikiWord = parentPage.getPageCrawler().getFullPathOfChild(parentPage, wikiWordPath); String qualifiedName = PathParser.render(fullPathOfWikiWord); if(parentPage.getPageCrawler().pageExists(parentPage, PathParser.parse(theWord))) return ("<a href=\"" + qualifiedName + urlSuffix + "\">" + childHtml() + "</a>");
protected synchronized void saveAttributes(final FileSystemPage page, final WikiPageProperties attributes) { String propertiesFilePath = "<unknown>"; try { propertiesFilePath = getFileSystemPath(page) + propertiesFilename;
public void testDeleteRecursiveCli() throws IOException, InterruptedException, CliException, KeeperException { final ZooKeeper zk = createClient();
public void processResult(int rc, String path, Object ctx, List<String> children) { ((List<Integer>) ctx).add(rc); opsCount.countDown(); }
public Map<String, Object> toMap() { Map<String, Object> conf = new LinkedHashMap<String, Object>(); conf.put(KEY_CLIENT_PORT, clientPort); conf.put(KEY_DATA_DIR, dataDir); conf.put(KEY_DATA_LOG_DIR, dataLogDir); conf.put(KEY_TICK_TIME, tickTime); conf.put(KEY_MAX_CLIENT_CNXNS, maxClientCnxnsPerHost); conf.put(KEY_MIN_SESSION_TIMEOUT, minSessionTimeout); conf.put(KEY_MAX_SESSION_TIMEOUT, maxSessionTimeout); conf.put(KEY_SERVER_ID, serverId); conf.put(KEY_CLIENT_PORT_LISTEN_BACKLOG, clientPortListenBacklog); return conf; }
public void testReconfigWithAnotherOutstandingChange() throws Exception { QuorumPeerConfig.setReconfigEnabled(true); QuorumPeerConfig.setStandaloneEnabled(false); QuorumPeer qp = new QuorumPeer(); QuorumVerifier quorumVerifierMock = mock(QuorumVerifier.class); when(quorumVerifierMock.getAllMembers()).thenReturn(LeaderBeanTest.getMockedPeerViews(qp.getId())); qp.setQuorumVerifier(quorumVerifierMock, false); FileTxnSnapLog snapLog = new FileTxnSnapLog(tmpDir, tmpDir); LeaderZooKeeperServer lzks = new LeaderZooKeeperServer(snapLog, qp, new ZKDatabase(snapLog)); qp.leader = new Leader(qp, lzks); lzks.sessionTracker = new MySessionTracker(); ZooKeeperServer.setDigestEnabled(true); processor = new PrepRequestProcessor(lzks, new MyRequestProcessor()); Record record = new CreateRequest("/foo", "data".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT.toFlag()); pLatch = new CountDownLatch(1); processor.pRequest(createRequest(record, OpCode.create, false)); assertTrue("request hasn't been processed in chain", pLatch.await(5, TimeUnit.SECONDS)); String newMember = "server.0=localhost:" + PortAssignment.unique() + ":" + PortAssignment.unique() + ":participant"; record = new ReconfigRequest(null, null, newMember, 0); pLatch = new CountDownLatch(1); processor.pRequest(createRequest(record, OpCode.reconfig, true)); assertTrue("request hasn't been processed in chain", pLatch.await(5, TimeUnit.SECONDS)); assertEquals(outcome.getHdr().getType(), OpCode.reconfig);
public void testPageTypePropertiesSuiteHtml() throws Exception { WikiPage page = root.addChildPage("SomePage"); PageData data = page.getData(); data.setAttribute("Suite"); String html = new PropertiesResponder().makePageTypeRadiosHtml(data).html(); assertSubString("<div style=\"float: left; width: 150px;\">Page type:", html); assertSubString("Page type:", html); assertSubString("<input type=\"radio\" name=\"PageType\" value=\"Normal\"/> - Normal", html); assertSubString("<input type=\"radio\" name=\"PageType\" value=\"Test\"/> - Test", html); assertSubString("<input type=\"radio\" name=\"PageType\" value=\"Suite\" checked=\"checked\"/> - Suite", html); }
public void setUp() throws Exception { testDir = testRoot.newFolder("TestDir"); root = new FileSystemPageFactory().makePage(testDir, rootName, null, new SystemVariableSource()); context = FitNesseUtil.makeTestContext(new FileSystemPageFactory(), testRoot.getRoot().getPath(), testDir.getName(), 0); pageOne = WikiPageUtil.addPage(root, PathParser.parse("PageOne"), "some content"); pageTwo = WikiPageUtil.addPage(pageOne, PathParser.parse("PageTwo"), "page two content"); updater = new WikiContentUpdater(context); update = makeUpdate();
private void evaluateTables() { for (SlimTable table : testTables) evaluateTable(table);
public void shouldRetrieveTheURIForARoute() throws SecurityException, NoSuchMethodException { Routes routes = mock(Routes.class); ControllerBasedRelation relation = new ControllerBasedRelation(CustomController.class, null, CustomController.class.getDeclaredMethod("show", int.class), new Object[]{15}, routes); CustomController controller = new CustomController(); when(routes.uriFor(CustomController.class)).thenReturn(controller); when(routes.getUri()).thenReturn("http://caelumobjects.com"); assertEquals("http://caelumobjects.com", relation.getUri()); assertEquals(15, controller.id); }
public void setUp() throws InterruptedException, IOException { createSlimService(); slimClient = new SlimCommandRunningClient(new MockCommandRunner(), "localhost", 8099); statements = new ArrayList<Instruction>(); slimClient.connect(); }
public HtmlPage newPage() { return new HtmlPage("skeleton.vm"); }
public int size() { return e1 == null ? 0 : (e2 == null ? 1 : 2); }
public void testExecutionReport_Output() throws Exception { MockCommandRunner mockCommandRunner = new MockCommandRunner(); mockCommandRunner.setOutput("I wrote something here"); CommandRunnerExecutionLog executionLog = new CommandRunnerExecutionLog(mockCommandRunner); assertTrue(executionLog.getExceptions().isEmpty()); assertTrue(executionLog.hasCapturedOutput()); }
private ByteBuffer voteFree(ArrayList<ByteBuffer> list){ HashMap<ByteBuffer, Integer> map = new HashMap<ByteBuffer, Integer>(); for(ByteBuffer bb : list){ bb.position(24); if(!map.containsKey(bb)){ map.put(bb, Integer.valueOf(0)); } map.put(bb, map.get(bb) + 1); if(map.get(bb) == list.size()) return bb; } return null; }
Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void userClicksOnRunStory(){ runStory = home.runStory(pageFactory); }
public abstract void addJvmArgs(String... args);  public abstract void addArgs(String... args);  public abstract void addOption(String key, String value);  public abstract void addOption(String key, File value);  public abstract void addOption(String key, boolean value);  public abstract void setLogOnly(boolean v);
public void shouldBeAbleToConvertIntegerNumbers(){ assertThat(converter.convert("2.3", BigDecimal.class, errors, bundle), is(equalTo(new BigDecimal("2.3")))); }
public static LevelState levelStateOf(String line, LevelState previous) throws Exception { LevelState back = new LevelState(); String lineLowerCase = line.toLowerCase(); if (lineLowerCase.indexOf("error") > -1) { back.level = Level.ERROR; if (lineLowerCase.contains(".scala")) { back.untilContains = "^"; } } else if (lineLowerCase.indexOf("warn") > -1) { back.level = Level.WARNING; if (lineLowerCase.contains(".scala")) { back.untilContains = "^"; } } else if (previous.untilContains != null) { if (!lineLowerCase.contains(previous.untilContains)) { back = previous; } else { back.level = previous.level; back.untilContains = null; } } return back; }
public void doStuff() throws Exception { DummyMetricCollector collector = new DummyMetricCollector(); ConnectionFactory cf = new ConnectionFactoryBuilder() .setEnableMetrics(MetricType.DEBUG) .setMetricCollector(collector) .build(); MemcachedClient client = new MemcachedClient(cf, AddrUtil.getAddresses(TestConfig.IPV4_ADDR + ":" + TestConfig.PORT_NUMBER)); assertTrue(client.set("metrics:test", 0, "value").get()); assertNotNull(client.get("metrics:test")); HashMap<String, Integer> metrics = collector.getMetrics(); assertTrue(metrics.get("[MEM] Average Bytes written to OS per write") > 0); assertEquals(2, (long) metrics.get("[MEM] Response Rate: Success")); client.shutdown(); }
SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException; }
public T execute(VRaptorRequest request, final int counter) { return provider.provideForRequest(request, new Execution<T>() { public T insideRequest(Container firstContainer) {
private List<Assertion> invokeRow(int row) throws SyntaxError { List<Assertion> assertions = new ArrayList<Assertion>(); checkRow(row); assertions.add(callUnreportedFunction("reset")); assertions.addAll(setVariables(row)); assertions.add(callUnreportedFunction("execute")); assertions.addAll(callFunctions(row)); return assertions; }
public void commit(Request request) { if (stopped || request == null) { return; } if (LOG.isDebugEnabled()) { LOG.debug("Committing request:: " + request); } committedRequests.add(request); if (!isProcessingCommit()) { wakeup();
@Test public void translatesBoldItalic() { ParserTest.assertTranslatesTo("'''''stuff&nonsense'''''", "<b><i>stuff&amp;nonsense</i></b>");
public static void makeVelocityFactory(FitNesseContext context) { if (instance==null) instance = new VelocityFactory(context.rootPath, context.rootDirectoryName);
private void purgeHistory(Request request) throws ParseException { int days = getDaysInput(request); deleteTestHistoryOlderThanDays(days); }
public void testClientRenegotiationFails() throws Throwable { int port = PortAssignment.unique(); ExecutorService workerPool = Executors.newCachedThreadPool(); final SSLServerSocket listeningSocket = x509Util.createSSLServerSocket(); SSLSocket clientSocket = null; SSLSocket serverSocket = null; final AtomicInteger handshakesCompleted = new AtomicInteger(0); try { InetSocketAddress localServerAddress = new InetSocketAddress(
public void canBuildInstructionsForMultipleCallsToSameFunction() throws Exception { makeDynamicDecisionTableAndBuildInstructions(dynamicDecisionTableWithSameFunctionMultipleTimes); int n = 0; List<Instruction> expectedInstructions = asList( new MakeInstruction(id(n++), TABLE_INSTANCE_NAME, "fixture", new Object[]{"argument"}), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "table", new Object[]{asList(asList("func?", "func?"), asList("3", "5"), asList("7", "9"))}), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "beginTable"), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "reset"), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "execute"), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "get", new Object[]{"func"}), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "get", new Object[]{"func"}), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "reset"), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "execute"), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "get", new Object[]{"func"}), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "get", new Object[]{"func"}), new CallInstruction(id(n++), TABLE_INSTANCE_NAME, "endTable") ); assertEquals(expectedInstructions, instructions); }
public boolean render(InternalContextAdapter context, Writer writer, Node node) throws IOException { Object value = node.jjtGetChild(0).value(context); if (value != null) { String text = HtmlUtil.escapeHTML(getValueString(value)); writer.write(text); } return true; }
public boolean isValid(String id) { String[] parts = id.split("/", 2); byte[] aclAddr = addr2Bytes(parts[0]); if (aclAddr == null) { return false; } if (parts.length == 2) { try { int bits = Integer.parseInt(parts[1]); if (bits < 0 || bits > aclAddr.length * 8) { return false; } } catch (NumberFormatException e) { return false; } } return true; }
public void appendResultChunk(String content) throws IOException { currentWriter.write(content.replace("src=\"/files/images/", "src=\"images/")); }
private Node unaryExpr() throws IOException, ParserException { int tt; tt = peekToken(); switch(tt) { case Token.VOID: case Token.NOT: case Token.BITNOT: case Token.TYPEOF: consumeToken(); decompiler.addToken(tt); return nf.createUnary(tt, unaryExpr()); case Token.ADD: consumeToken();
public void setup() { MockitoAnnotations.initMocks(this); this.logicResult = new DefaultLogicResult(new DefaultProxifier(), router, request, response, container, resolver, extractor, flash);
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException { for (Class<? extends Interceptor> type : Lists.reverse(registry.all())) { stack.addAsNext(type); } stack.next(method, resourceInstance); }
public int getInitLimit();  public int getSyncLimit();  public void setInitLimit(int initLimit);  public void setSyncLimit(int syncLimit);  public boolean isSslQuorum();  public boolean isPortUnification();  public long getObserverElectionDelayMS();  public void setObserverElectionDelayMS(long delayMS); }
private Stat createWithStatVerifyResult(String newName) throws KeeperException, InterruptedException { assertNull(zk.exists(newName, false), "Node existed before created"); Stat stat = new Stat(); zk.create(newName, newName.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.CONTAINER, stat); validateCreateStat(stat, newName); Stat referenceStat = zk.exists(newName, false); assertNotNull(referenceStat, "Node was not created as expected"); assertEquals(referenceStat, stat); return stat; }
public void setConnectionMaxTokens(int val); public int getConnectionTokenFillTime(); public void setConnectionTokenFillTime(int val); public int getConnectionTokenFillCount(); public void setConnectionTokenFillCount(int val); public int getConnectionFreezeTime(); public void setConnectionFreezeTime(int val); public double getConnectionDropIncrease(); public void setConnectionDropIncrease(double val); public double getConnectionDropDecrease(); public void setConnectionDropDecrease(double val); public double getConnectionDecreaseRatio(); public void setConnectionDecreaseRatio(double val);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); public long getFlushDelay(); public void setFlushDelay(long delay); public long getMaxWriteQueuePollTime(); public void setMaxWriteQueuePollTime(long delay); public int getMaxBatchSize(); public void setMaxBatchSize(int size); }
int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public void setUp() throws Exception { count = 3; peers = new HashMap<Long,QuorumServer>(count); tmpdir = new File[count]; port = new int[count]; LOG.info("SetUp " + getName()); }
public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) { CommandResponse response = initializeResponse(); response.put("read_only", zkServer instanceof ReadOnlyZooKeeperServer); return response; }
public void shouldUseTheDefaultLocale() throws ParseException { mockery.checking(new Expectations() { { one(request).getAttribute("javax.servlet.jsp.jstl.fmt.locale.request"); will(returnValue(null)); one(request).getSession(); will(returnValue(session)); one(session).getAttribute("javax.servlet.jsp.jstl.fmt.locale.session"); will(returnValue(null)); one(context).getAttribute("javax.servlet.jsp.jstl.fmt.locale.application"); will(returnValue(null)); one(context).getInitParameter("javax.servlet.jsp.jstl.fmt.locale"); will(returnValue(null)); one(request).getLocale(); will(returnValue(Locale.getDefault())); } }); Date date = new SimpleDateFormat("dd/MM/yyyy").parse("10/05/2010"); Calendar cal = new GregorianCalendar(); cal.setTime(date); String formattedToday = DateFormat.getDateInstance(DateFormat.SHORT).format(date); assertThat(converter.convert(formattedToday, Calendar.class, bundle), is(equalTo(cal))); mockery.assertIsSatisfied(); }
public void testPagesForTestSystemAreSurroundedBySuiteSetupAndTeardown() throws Exception { WikiPage slimPage = addTestPage(suite, "AaSlimTest", simpleSlimDecisionTable); WikiPage setUp = crawler.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = crawler.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); testPages = new LinkedList<WikiPage>(); testPages.add(setUp); testPages.add(slimPage); testPages.add(testPage); testPages.add(tearDown); MultipleTestsRunner runner = new MultipleTestsRunner(testPages, null, suite, null); Map<TestSystem.Descriptor, LinkedList<WikiPage>> map = runner.makeMapOfPagesByTestSystem(); TestSystem.Descriptor fitDescriptor = TestSystem.getDescriptor(testPage.getData()); TestSystem.Descriptor slimDescriptor = TestSystem.getDescriptor(slimPage.getData()); List<WikiPage> fitList = map.get(fitDescriptor); List<WikiPage> slimList = map.get(slimDescriptor); assertEquals(3, fitList.size()); assertEquals(3, slimList.size()); assertEquals(setUp, fitList.get(0)); assertEquals(testPage, fitList.get(1)); assertEquals(tearDown, fitList.get(2)); assertEquals(setUp, slimList.get(0)); assertEquals(slimPage, slimList.get(1)); assertEquals(tearDown, slimList.get(2)); }
public int exceptionCount() { int count = 0; for (ExecutionLog log : logs.values()) count += log.exceptionCount(); return count; }
public Paginator paginatedQuery(View view, Query query, int docsPerPage) { return new Paginator(this, view, query, 10); }
private void delete(File f) { if (f.isFile()) { if (!f.delete()) {
public static List<Object> deserialize(String serialized) { return new SlimDeserializer(serialized).deserialize(); }
public void shouldBeAbleToConvertNull() { assertThat(converter.convert(null, LocalDateTime.class, bundle), is(nullValue())); mockery.assertIsSatisfied(); }
public void testMultiRollbackNoLastChange() throws Exception { zks.getZKDatabase().dataTree.createNode("/foo", new byte[0], Ids.OPEN_ACL_UNSAFE, 0, 0, 0, 0); zks.getZKDatabase().dataTree.createNode("/foo/bar", new byte[0], Ids.OPEN_ACL_UNSAFE, 0, 0, 0, 0); Assert.assertNull(zks.outstandingChangesForPath.get("/foo"));
public Response makeResponse(FitNesseContext context, Request request) throws Exception { SimpleResponse response = new SimpleResponse(401); response.addHeader("WWW-Authenticate", "Basic realm=\"" + realm + "\""); HtmlPage page = context.pageFactory.newPage(); page.addTitles("401 Unauthorized"); page.put("resource", request.getResource()); page.setMainTemplate("unauthorized.vm"); response.setContent(page.html(request)); return response; }
Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); CountDownLatch broadcastOp(final BroadcastOpFactory of); CountDownLatch broadcastOp(final BroadcastOpFactory of, Collection<MemcachedNode> nodes);  Set<String> listSaslMechanisms(); }
void transitionWriteItem();  Operation getCurrentReadOp();  Operation removeCurrentReadOp();  Operation getCurrentWriteOp();  Operation removeCurrentWriteOp();  boolean hasReadOp();  boolean hasWriteOp();  void addOp(Operation op);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException; }
public boolean matches(String id, String aclExpr) { String parts[] = aclExpr.split("/", 2); byte aclAddr[] = addr2Bytes(parts[0]); if (aclAddr == null) { return false; } int bits = aclAddr.length * 8; if (parts.length == 2) { try { bits = Integer.parseInt(parts[1]); if (bits < 0 || bits > aclAddr.length * 8) { return false; } } catch (NumberFormatException e) { return false; } } mask(aclAddr, bits); byte remoteAddr[] = addr2Bytes(id); if (remoteAddr == null) { return false; } mask(remoteAddr, bits); for (int i = 0; i < remoteAddr.length; i++) { if (remoteAddr[i] != aclAddr[i]) { return false; } } return true; }
public long incr(String key, int by, int def) throws OperationTimeoutException { return mutateWithDefault(Mutator.incr, key, by, def, 0); }
public void setUp() throws Exception { createSlimService(); slimClient = new SlimClient("localhost", 8099); statements = new ArrayList<Instruction>(); slimClient.connect(); }
void setMaxSessionTimeout(int max); boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size); }
public void usesNowIfNoDate() throws Exception { SystemClock.instance = new TestClock(new GregorianCalendar(2002, 2, 4, 5, 6, 7).getTime()); TestSourcePage page = makeTestPage(); ParserTest.assertTranslatesTo(page, ParserTest.metaHtml("Last modified anonymously on Mar 04, 2002 at 05:06:07 AM")); }
public Set<Entry<String, Object>> entrySet() { Set<Entry<String, Object>> set = new HashSet<Entry<String, Object>>(); for (ViewRow r : rows) { set.add(new ViewResponseEntry<String, Object>(r.getId(), map.get(r.getId()))); } return null; }
public static Class<Status> status() { return Status.class; }
public void testInvalidKey1() throws Exception { try { client.get("key with spaces");
public void testThatExamplesAtEndOfNameSetsSuiteProperty() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("PageExamples")); PageData data = new PageData(page); assertTrue(data.hasAttribute(SUITE.toString())); }
protected SlimTestResult createEvaluationMessage(String actual, String expected) { setSymbol(symbolName, actual); return SlimTestResult.plain(String.format("$%s<-[%s]", symbolName, actual)); }
public void testCharacter() throws Exception { assertEquals('c', tc.decode(tc.encode('c'))); }
public void shouldLoadInitParameterForBasePackages() { defaultExpectations(); SpringProvider provider = new SpringProvider(); provider.start(servletContext); }
public void execute() throws InterceptionException { interceptorStack.add(ResourceLookupInterceptor.class); interceptorStack.add(URLParameterExtractorInterceptor.class); interceptorStack.add(InterceptorListPriorToExecutionExtractor.class); interceptorStack.add(instantiator); interceptorStack.add(ParametersInstantiatorInterceptor.class); if(shouldRegisterHibernateValidator) { interceptorStack.add(HibernateValidatorPluginInterceptor.class); } interceptorStack.add(ValidatorInterceptor.class); interceptorStack.add(ExecuteAndViewInterceptor.class); interceptorStack.add(OutjectionInterceptor.class); interceptorStack.add(AjaxInterceptor.class); interceptorStack.add(ViewInterceptor.class); interceptorStack.next(null, null); }
public void tableMethodReturnsNull() throws Exception { assertTableResults("|2|4|\n", null, "[[pass(Table:fixture), ignore(No results from table)], [2, 4]]"
public void _dispatch(Object resource, HttpContext context) throws IllegalAccessException, InvocationTargetException {
public void slimHostVariableSetsTheHost() throws Exception { Descriptor descriptor = mock(Descriptor.class); when(descriptor.getVariable("SLIM_HOST")).thenReturn("somehost"); assertEquals("somehost", new SlimClientBuilder(descriptor).determineSlimHost()); }
public void doMethod(TreeItem item) { item.compactWithChildIfOnlyOneChild(); }
protected WikiPage createChildPage(final String name) { return wikiPageFactory.makeChildPage(name, this); }
public void testChildPagesStayIntactWhenParentIsRenamed() throws Exception { crawler.addPage(root, pageOnePath, "page one"); crawler.addPage(root, PathParser.parse("PageOne.ChildPage"), "child page"); crawler.addPage(root, PathParser.parse("PageOne.ChildPage.GrandChild"), "grand child"); doRename(pageOneName, pageTwoName, true); WikiPagePath path = PathParser.parse("PageTwo.ChildPage"); assertTrue(crawler.pageExists(root, path)); WikiPage page = crawler.getPage(root, path); assertNotNull(page); assertEquals("child page", page.getData().getContent()); WikiPagePath grandChildPath = PathParser.parse("PageTwo.ChildPage.GrandChild"); assertTrue(crawler.pageExists(root, grandChildPath)); page = crawler.getPage(root, grandChildPath); assertNotNull(page); assertEquals("grand child", page.getData().getContent()); }
private HtmlTag makeMovePageForm() throws Exception { HtmlTag form = HtmlUtil.makeFormTag("get", resource); form.add(HtmlUtil.makeInputTag("hidden", "responder", "movePage")); form.add("New Location: "); form.add(HtmlUtil.makeInputTag("text", "newLocation", "")); form.add(HtmlUtil.BR); form.add(HtmlUtil.makeInputTag("checkbox", "refactorReferences")); form.add(" - Find all references to this page and change them accordingly (May take several minutes)"); form.add(HtmlUtil.BR); form.add(HtmlUtil.makeInputTag("submit", "", "Move Page")); return form; }
default void registerCustomComparators(CustomComparatorRegistry customComparatorRegistry) throws PluginException { } default void registerTestRunFactories(TestRunFactoryRegistry runFactoryRegistry) throws PluginException { } default void registerMarkupSystems(MarkUpSystems systems) {} }
void traverse(WikiPage root, TraversalListener<? super WikiPage> callback); WikiPage getSiblingPage(WikiPage page, WikiPagePath pathRelativeToSibling); WikiPage findAncestorWithName(WikiPage page, String name); WikiPage getClosestInheritedPage(WikiPage context, String pageName);
private HtmlTag buildHeaderRow() { HtmlTag headerRow = new HtmlTag("tr"); HtmlTag pageColumnHeader = new HtmlTag("td", "Page"); pageColumnHeader.addAttribute("class", "resultsHeader"); HtmlTag lastModifiedColumnHeader = new HtmlTag("td", "Last Modified"); lastModifiedColumnHeader.addAttribute("class", "resultsHeader"); headerRow.add(pageColumnHeader); headerRow.add(lastModifiedColumnHeader); return headerRow; }
public static void main(String[] args) { junit.textui.TestRunner.run(StrikeWidgetTest.class); }
public void visit(TarArchiveEntry entry, byte[] content) throws IOException { } }, Compression.NONE); assertTrue("tar file not found", found); } }
public XStreamBuilder indented() { indented = true; return this; }
<T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void stop() { applicationContext.stop(); applicationContext.destroy(); applicationContext = null; }
public long tickOfNextAckDeadline() { return tickOfNextAckDeadline; }
protected void registerComponents(ComponentRegistry container) { singleInterfaceRegister(StupidTranslator.class, container); singleInterfaceRegister(DefaultResourceRegistry.class, container); singleInterfaceRegister(DefaultResourceNotFoundHandler.class, container); singleInterfaceRegister(DefaultDirScanner.class, container); singleInterfaceRegister(WebInfClassesScanner.class, container); singleInterfaceRegister(DefaultInterceptorRegistry.class, container); singleInterfaceRegister(DefaultMethodLookupBuilder.class, container); singleInterfaceRegister(DefaultPathResolver.class, container); singleInterfaceRegister(ParanamerNameProvider.class, container); singleInterfaceRegister(DefaultConverters.class, container); singleInterfaceRegister(DefaultMethodParameters.class, container); singleInterfaceRegister(DefaultRequestParameters.class, container); singleInterfaceRegister(DefaultInterceptorStack.class, container); singleInterfaceRegister(DefaultRequestExecution.class, container); singleInterfaceRegister(DefaultResult.class, container); singleInterfaceRegister(OgnlParametersProvider.class, container); singleInterfaceRegister(DefaultRequestInfo.class, container); singleInterfaceRegister(DefaultValidator.class, container); container.register(ForwardToDefaultViewInterceptor.class, ForwardToDefaultViewInterceptor.class); container.register(LogicResult.class, DefaultLogicResult.class); container.register(RequestResult.class, RequestResult.class); container.register(PageResult.class, DefaultPageResult.class); container.register(TypeCreator.class, AsmBasedTypeCreator.class); container.register(EmptyElementsRemoval.class, EmptyElementsRemoval.class); container.register(ParametersInstantiatorInterceptor.class, ParametersInstantiatorInterceptor.class); container.register(InterceptorListPriorToExecutionExtractor.class, InterceptorListPriorToExecutionExtractor.class); container.register(URLParameterExtractorInterceptor.class, URLParameterExtractorInterceptor.class); container.register(ResourceLookupInterceptor.class, ResourceLookupInterceptor.class); container.register(InstantiateInterceptor.class, InstantiateInterceptor.class); container.register(ExecuteMethodInterceptor.class, ExecuteMethodInterceptor.class); }
public void addToRecvQueue(Message msg) { synchronized (recvQLock) { if (recvQueue.remainingCapacity() == 0) {
public void shouldWakeUpOnIdle() throws Exception { CountDownLatch latch = new CountDownLatch(3); MemcachedConnection connection = new InstrumentedConnection( latch, 1024, new BinaryConnectionFactory(), Arrays.asList(new InetSocketAddress(11210)), Collections.<ConnectionObserver>emptyList(), FailureMode.Redistribute, new BinaryOperationFactory() ); assertTrue(latch.await(5, TimeUnit.SECONDS)); }
void visit( int version, int access, String name, String signature, String superName, String[] interfaces);  void visitSource(String source, String debug);  void visitOuterClass(String owner, String name, String desc);  AnnotationVisitor visitAnnotation(String desc, boolean visible);  void visitAttribute(Attribute attr);  void visitInnerClass( String name, String outerName, String innerName, int access);  FieldVisitor visitField( int access, String name, String desc, String signature, Object value);  MethodVisitor visitMethod( int access, String name, String desc, String signature, String[] exceptions);  void visitEnd(); }
public void tearDown() throws Exception { super.tearDown(); System.clearProperty("zookeeper.authProvider.1"); System.clearProperty(EnsembleAuthenticationProvider.ENSEMBLE_PROPERTY); ProviderRegistry.removeProvider("ensemble"); }
private void runZookeeper(int maxCC) throws IOException{
public final TestSystem create(Descriptor descriptor) { SlimClientBuilder clientBuilder = new SlimClientBuilder(descriptor); SlimCommandRunningClient slimClient = clientBuilder.build(); HtmlSlimTestSystem testSystem = new HtmlSlimTestSystem(clientBuilder.getTestSystemName(), slimClient, slimTableFactory.copy(), customComparatorRegistry); return testSystem; }
OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon();  boolean useNagleAlgorithm();  Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode();  Transcoder<Object> getDefaultTranscoder();  boolean shouldOptimize();  int getReadBufSize();  HashAlgorithm getHashAlg();  long getMaxReconnectDelay();  AuthDescriptor getAuthDescriptor();  int getTimeoutExceptionThreshold(); }
private ScriptTable makeScriptTable(String tableText) throws Exception { WikiPageUtil.setPageContents(root, tableText); TableScanner ts = new HtmlTableScanner(root.getData().getHtml()); Table t = ts.getTable(0); SlimTestContextImpl testContext = new SlimTestContextImpl(); return new HtmlScriptTable(t, "id", testContext); }
public void ignore_testGetVersionsList() throws Exception {
public void initHelper() throws Exception { helper = new JUnitHelper(new TestRunner(new FitNesseRepository("."), new SlimTestEngine(), new File(System.getProperty("java.io.tmpdir"),
public void tearDown() throws Exception { } public void testNotAuthenticated() throws Exception { makeResponder(); assertEquals(UnauthorizedResponder.class, responderType); } public void testAuthenticated() throws Exception { authenticator.authenticated = true; makeResponder(); assertEquals(WikiPageResponder.class, responderType); } private void makeResponder() throws Exception { responder = authenticator.authenticate(context, request, privilegedResponder); responderType = responder.getClass(); } }
public void commonOverrideExecutesForward() throws ServletException, IOException, NoSuchMethodException { mockery.checking(new Expectations() { { allowing(resource).getType(); will(returnValue(CommonComponentOld.class)); allowing(method).getMethod(); will(returnValue(CommonComponentOld.class.getMethod("base"))); one(config).getForwardFor("CommonComponentOld.base.ok"); will(returnValue("serverSide")); one(request).getRequestDispatcher("serverSide"); will(returnValue(dispatcher)); one(dispatcher).forward(request, response); } }); this.result.forwardTo(); mockery.assertIsSatisfied(); }
Collection<Operation> clone(KeyedOperation op);  TapOperation tapBackfill(String id, long date, OperationCallback cb);  TapOperation tapCustom(String id, RequestMessage message, OperationCallback cb);  TapOperation tapAck(TapOpcode opcode, int opaque, OperationCallback cb); }
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException { if (info.shouldShowView(method)) { this.result.forward(reqResult.getValue());
public String toString() { return "ConnectionBean{ClientIP=" + ObjectName.quote(getSourceIP()) + ",SessionId=0x" + getSessionId() + "}"; }
public ContextConfigurator withParameter(ConfigurationParameter parameter, String value) { switch (parameter) { case ROOT_PATH: rootPath = value; break; case ROOT_DIRECTORY: rootDirectoryName = value; break; case CONTEXT_ROOT: contextRoot = value; if (!contextRoot.startsWith("/")) { contextRoot = "/" + contextRoot; } if (!contextRoot.endsWith("/")) { contextRoot = contextRoot + "/"; } break; case PORT: port = Integer.parseInt(value); break; case MAXIMUM_WORKERS: maximumWorkers = Integer.parseInt(value); break; default: properties.setProperty(parameter.getKey(), value); break; } return this; }
private Object createInstanceOfConstructor(String className, Object[] args) throws Exception { Class k = searchPathsForClass(className); Constructor constructor = getConstructor(k.getConstructors(), args); if (constructor == null) throw new SlimError(String.format("Class %s has no appropriate constructor.", className)); return constructor.newInstance(convertArgs(args, constructor.getParameterTypes())); }
String getCellResult(int col,int row); void appendChildTable(int row, Table table); void setTestStatusOnRow(int row, ExecutionResult testStatus); void setName(String tableName); void setCell(int col, int row, Result response); void appendToCell(int col, int row, Result response); }
public static long timeStamp() { return System.currentTimeMillis(); }
void observeLeader() throws Exception { zk.registerJMX(new ObserverBean(this, zk), self.jmxLocalPeerBean); try { InetSocketAddress addr = findLeader();
public String asWikiText() throws Exception { StringBuffer wikiText = new StringBuffer(); if (isCommentTable) { wikiText.append("#"); } if (isLiteralTable) wikiText.append("!"); appendTableWikiText(wikiText); return wikiText.toString(); }
protected void makeZipVersion(FileVersion... fileVersions) throws IOException { if (!exists(fileVersions)) { return; } ZipOutputStream zos = null; File commonBaseDir = commonBaseDir(fileVersions); try { final File zipFile = makeVersionFileName(commonBaseDir, makeVersionName(fileVersions[0]));
protected String doInBackground() throws Exception { return NodeViewerData.this.zooInspectorManager .getData(NodeViewerData.this.selectedNode);
public void unregisterLearnerHandlerBean(final LearnerHandler learnerHandler) { LearnerHandlerBean bean = connectionBeans.remove(learnerHandler); if (bean != null) { MBeanRegistry.getInstance().unregister(bean);
public ProcessTxnResult processTxn(TxnHeader hdr, Record txn) { processTxnForSessionEvents(null, hdr, txn); return processTxnInDB(hdr, txn, null); }
public void testGetStatsSlabs() throws Exception { if (TestConfig.isMembase() || isMoxi()) { return; }
public VersionInfo commit(PageData data) throws Exception; public PageCrawler getPageCrawler();
public void testHtmlFormatter() throws Exception { checkFormtterCreated("html", HtmlResultFormatter.class); }
private static int checkAndIncVersion(int currentVersion, int expectedVersion, String path) throws KeeperException.BadVersionException { if (expectedVersion != -1 && expectedVersion != currentVersion) { throw new KeeperException.BadVersionException(path); }
private void addBodyPart(String input) throws UnsupportedEncodingException { byte[] bytes = input.getBytes(CHARENCODING); bodyParts.add(new ByteArrayInputStream(bytes)); bodyLength += bytes.length; }
public void shouldDeletePages() { fileSystem.delete("PageOne"); assertFalse(fileSystem.exists("PageOne")); assertFalse(fileSystem.exists("PageOne/content.txt")); }
private void inflate(Context context) { LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE); inflater.inflate(R.layout.group_add_entry, this);
public void removeGroup(PwGroup group) { group.parent.childGroups.remove(group); groups.remove(group); }
public void removeVersion(final FileSystemPage page, final String versionName) { final String versionFileName = makeVersionFileName(page, versionName); final File versionFile = new File(versionFileName); versionFile.delete(); }
int decodeInt(byte[] in) { assert in.length <= 4 : "Too long to be an int (" + in.length + ") bytes"; return (int)decodeLong(in); }
protected void initServiceCredentials() throws Exception { manager = GSSManager.getInstance(); if (serviceName == null) serverCreds = null;
public void testACLWithExtraAgruments() throws Exception { final ZooKeeper zk = createClient(); ZooKeeperMain zkMain = new ZooKeeperMain(zk);
public static String movePath( final String file, final String target ) { final String name = new File(file).getName(); return target.endsWith("/") ? target + name : target + '/' + name; }
public Set<Watcher> materialize(int state, int type, String path); }
private void setupAdminServerProperties() { System.setProperty("zookeeper.admin.enableServer", "true"); System.setProperty(ADMIN_RATE_LIMITER_INTERVAL, "0"); System.setProperty(ADMIN_SNAPSHOT_ENABLED, "true"); System.setProperty(ZOOKEEPER_SERIALIZE_LAST_PROCESSED_ZXID_ENABLED, "true"); System.setProperty(ADMIN_RESTORE_ENABLED, "true"); }
public void onClick(View v) { String fileName = Util.getEditText(mAct, R.id.file_filename); try { PasswordActivity.Launch(mAct, fileName);
public Stat exists(String path, boolean watch) throws KeeperException, InterruptedException { return exists(path, watch ? watchManager.defaultWatcher : null); }
int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public void testRemovePage() throws Exception { WikiPage levelOne = crawler.addPage(root, PathParser.parse("LevelOne")); levelOne.commit(levelOne.getData()); crawler.addPage(levelOne, PathParser.parse("LevelTwo")); levelOne.removeChildPage("LevelTwo"); File fileOne = new File(defaultPath + "/RooT/LevelOne"); File fileTwo = new File(defaultPath + "/RooT/LevelOne/LevelTwo"); assertTrue(fileOne.exists()); assertFalse(fileTwo.exists()); }
public void nullResultsForNullTable() throws Exception { assertQueryResults("", list(), "[" +
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException { stack.next(method, resourceInstance); }
public void testMakeResponseSpaceInFileName() throws Exception { request.addUploadedFile("file", new UploadedFile("source filename.txt", "plain/text", testFile)); request.setResource("files/"); Response response = responder.makeResponse(context, request); File file = new File(context.getRootPagePath() + "/files/source filename.txt"); assertTrue(file.exists()); assertEquals("test content", FileUtil.getFileContent(file)); assertEquals(303, response.getStatus()); assertEquals("/files/", response.getHeader("Location")); }
<T> Future<Boolean> prepend(String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, int exp, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
protected void detectAndLoadVirtualChildren() throws Exception { PageData data = hostPage.getData(); if (data.hasAttribute(WikiPageProperties.VIRTUAL_WIKI_ATTRIBUTE)) loadVirtualChildren(data.getAttribute(WikiPageProperties.VIRTUAL_WIKI_ATTRIBUTE));
public void shouldIgnoreHtmlFormat() throws NoSuchMethodException { mockery.checking(new Expectations() { { one(method).getResource(); will(returnValue(resource)); one(method).getMethod(); will(returnValue(DogController.class.getDeclaredMethod("bark"))); one(resource).getType(); will(returnValue(DogController.class)); one(request).getParameter("_format"); will(returnValue("html")); } }); DefaultPathResolver resolver = new DefaultPathResolver(request); String result = resolver.pathFor(method); MatcherAssert.assertThat(result, Matchers.is(Matchers.equalTo("/WEB-INF/jsp/dog/bark.jsp"))); mockery.assertIsSatisfied(); }
public void testFNV164() { HashMap<String, Long> exp = new HashMap<String, Long>(); exp.put("", 0x84222325L); exp.put(" ", 0x8601b7ffL); exp.put("hello world!", 0xb97b86bcL); exp.put("Lorem ipsum dolor sit amet, consectetuer adipiscing elit.", 0xe87c054aL); exp.put("wd:com.google", 0x071b08f8L); exp.put("wd:com.google ", 0x12f03d48L); for (Map.Entry<String, Long> me : exp.entrySet()) { assertHash(DefaultHashAlgorithm.FNV1_64_HASH, me.getKey(),
public void shouldSupportPathsWithDotsAndAsterisks() throws SecurityException, NoSuchMethodException { builder = new RouteBuilder(proxifier, typeFinder, converters, "/my/{abc.def*}"); Method method = AbcResource.class.getDeclaredMethods()[0]; builder.is(AbcResource.class, method); Route route = builder.build(); assertTrue(route.canHandle("/my/troublesome/uri")); }
public void testOffer2() throws Exception { String dir = "/testOffer2"; String testString = "Hello World"; final int numClients = 2; ZooKeeper[] clients = new ZooKeeper[numClients]; DistributedQueue[] queueHandles = new DistributedQueue[numClients]; for (int i = 0; i < clients.length; i++) { clients[i] = createClient(); queueHandles[i] = new DistributedQueue(clients[i], dir, null); } queueHandles[0].offer(testString.getBytes(UTF_8)); byte[] dequeuedBytes = queueHandles[1].remove(); assertEquals(new String(dequeuedBytes, UTF_8), testString); }
private CountDownLatch broadcastOp(BroadcastOpFactory of, Collection<MemcachedNode> nodes, boolean checkShuttingDown) { if (checkShuttingDown && shuttingDown) { throw new IllegalStateException("Shutting down"); } return conn.broadcastOperation(of, nodes); }
public void addToResponse(byte[] output) { if (!isClosed()) { response.add(output);
public MemcachedConnection createConnection(List<InetSocketAddress> addrs) throws IOException { MemcachedConnection rv = super.createConnection(addrs); return rv; }
public void justTooBig() throws Exception { assertFalse(approximatelyEqual("3.000", "3.0005")); }
private String[] replaceVariables(String[] args) { String result[] = new String[args.length]; for (int i = 0; i < args.length; i++) result[i] = replaceIfVariable(args[i]); return result; }
public void completed() { if (this.completed) { return; } this.completed = true; this.connMgr.releaseConnection(this.conn); synchronized (this) { notifyAll();
public void failsOnCycles() throws Exception { TopologicalSet set = new TopologicalSet(); set.add(A.class); set.add(C.class); set.add(E.class); set.toList(); }
void followLeader() throws InterruptedException { self.end_fle = Time.currentElapsedTime(); long electionTimeTaken = self.end_fle - self.start_fle; self.setElectionTimeTaken(electionTimeTaken); ServerMetrics.getMetrics().ELECTION_TIME.add(electionTimeTaken); LOG.info("FOLLOWING - LEADER ELECTION TOOK - {} {}", electionTimeTaken, QuorumPeer.FLE_TIME_UNIT); self.start_fle = 0; self.end_fle = 0; fzk.registerJMX(new FollowerBean(this, zk), self.jmxLocalPeerBean); long connectionTime = 0; boolean completedSync = false; try { self.setZabState(QuorumPeer.ZabState.DISCOVERY);
protected void describeMismatchSafely(Interceptor item, Description mismatchDescription) { } }; } private Matcher<byte[]> arrayStartingWith(final byte[] array) { return new TypeSafeMatcher<byte[]>() { protected void describeMismatchSafely(byte[] item, Description mismatchDescription) { } protected boolean matchesSafely(byte[] item) { if (item.length < array.length) { return false; } for (int i = 0; i < array.length; i++) { if (array[i] != item[i]) { return false; } } return true; } public void describeTo(Description description) { description.appendText("a byte array starting with " + Arrays.toString(array)); } }; } static class FakeResource { public String string() { return null; } public File file() { return null; } public InputStream input() { return null; } public Download download() { return null; } public byte[] asByte() { return null; } } }
public String translate(Translator translator) { return translator.translateTree(tree); }
private void addToOptions(final String optionValue) { current.putProperty(normalizeOptionKey(previousOption), optionValue); }
public void testPageTypePropertiesSuiteHtml() throws Exception { WikiPage page = root.addChildPage("SomePage"); PageData data = page.getData(); data.setAttribute("Suite"); page.commit(data); assertEquals(page, context.root.getPageCrawler().getPage(PathParser.parse(".SomePage"))); request.setResource(page.getPageCrawler().getFullPath().toString()); SimpleResponse response = (SimpleResponse) new PropertiesResponder().makeResponse(context, request); String html = response.getContent(); assertSubString("Page type:", html); assertSubString("<input type=\"radio\" id=\"Static\" name=\"PageType\" value=\"Static\"/>", html); assertSubString("<input type=\"radio\" id=\"Test\" name=\"PageType\" value=\"Test\"/>", html); assertSubString("<input type=\"radio\" id=\"Suite\" name=\"PageType\" value=\"Suite\" checked=\"checked\"/>", html); assertSubString("<input type=\"checkbox\" id=\"Prune\" name=\"Prune\"/>", html); }
public void announceNumberTestsToRun(int testsToRun) { } @Override public void errorOccured() { } @Override public void setExecutionLogAndTrackingId(String stopResponderId, CompositeExecutionLog log) throws Exception { } @Override public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { } @Override public void newTestStarted(WikiPage test, TimeMeasurement timeMeasurement) throws Exception { } @Override public void testOutputChunk(String output) throws Exception { } @Override public void testComplete(WikiPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws Exception { } @Override public void writeHead(String pageType) throws Exception { } }
public void testSetUpAndTearDown() throws Exception { WikiPage setUp = crawler.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = crawler.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); List<?> testPages = responder.makePageList(); assertEquals(3, testPages.size()); assertSame(setUp, testPages.get(0)); assertSame(tearDown, testPages.get(2)); }
public void testApplicationWadl() { WebResource r = c.resource(BASEURI); String serviceWadl = r.path("application.wadl"). accept(MediaTypes.WADL).get(String.class); assertTrue("Something wrong. Returned wadl length not > 0.", serviceWadl.length() > 0);
Collection<Operation> destroyInputQueue();  void setupResend();  void fillWriteBuffer(boolean optimizeGets);  void transitionWriteItem();  Operation getCurrentReadOp();  Operation removeCurrentReadOp();  Operation getCurrentWriteOp();  Operation removeCurrentWriteOp();  boolean hasReadOp();  boolean hasWriteOp();  void addOp(Operation op);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps(); }
public void tearDown() throws Exception { System.clearProperty(authProvider); try { if (qu != null) {
private void assertSymbolTypeMatch(String input, boolean expected) { SymbolMatch match = new ParseSpecification().provider(testProvider).findMatch(new ScanString(input, 0), 0, new SymbolStream()); assertEquals(match.isMatch(), expected); }
public void slimHostVariableSetsTheHost() throws Exception { WikiPage pageWithSlimHostVariable = WikiPageUtil.addPage(root, PathParser.parse("PageWithSlimHostVariable"), "!define SLIM_HOST {somehost}\n"); assertEquals("somehost", new SlimTestSystem.SlimDescriptor(TestSystem.getDescriptor(pageWithSlimHostVariable, null, false)).determineSlimHost()); }
public WikiPage getFooterPage() throws Exception { return PageCrawlerImpl.getInheritedPage("PageFooter", this); }
public void testACLWithExtraArguments() throws Exception { final ZooKeeper zk = createClient(); ZooKeeperMain zkMain = new ZooKeeperMain(zk);
public static String howLongAgoString(Date now, Date then) { long time = Math.abs(now.getTime() - then.getTime()) / 1000; if(time < 60) return pluralize(time, "second");
WikiPagePath getFullPath(); String getRelativeName(WikiPage page); WikiPage getRoot(); void traverse(TraversalListener<? super WikiPage> callback); void traversePageAndAncestors(TraversalListener<? super WikiPage> callback); void traverseUncles(String uncleName, TraversalListener<? super WikiPage> callback); WikiPage getSiblingPage(WikiPagePath pathRelativeToSibling); WikiPage findAncestorWithName(String name); WikiPage getClosestInheritedPage(WikiPage context, String pageName); }
public void deny(RequestInfo request, Set<HttpMethod> allowedMethods) { request.getResponse().addHeader( "Allow", allowedMethods.toString().replaceAll("\\[|\\]", "")); try { request.getResponse().sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
public void testIsComposit() throws Exception { CachingResultFormatter formatter = new CachingResultFormatter(); MockResultFormatter mockFormatter = new MockResultFormatter(); formatter.addHandler(mockFormatter); PageResult result = new PageResult("PageTitle", new TestSystem.TestSummary(1, 2, 3, 4), "content"); formatter.acceptResult(result); TestSystem.TestSummary testSummary = new TestSystem.TestSummary(1, 2, 3, 4); formatter.acceptFinalCount(testSummary); assertEquals(1, mockFormatter.results.size()); assertEquals(result.toString(), mockFormatter.results.get(0).toString()); assertEquals(testSummary, mockFormatter.finalSummary); }
public static String generateDigest(String idPassword) throws NoSuchAlgorithmException { String[] parts = idPassword.split(":", 2); byte[] digest = MessageDigest.getInstance("SHA1").digest(idPassword.getBytes()); return parts[0] + ":" + base64Encode(digest); }
private void initializeImporter() throws IOException { importer.setWikiImporterClient(this); importer.setLocalPath(pagePath); importer.parseUrl(remoteWikiUrl); }
public void visitClassType(final String name) { buf.append('L'); buf.append(name); argumentStack *= 2; }
public void fixTime() throws ParseException { clock = new DateAlteringClock(new SimpleDateFormat("HH:mm:ss").parse(START_TIME)).freeze(); }
public void setUp() throws Exception { super.setUp(); moveResponder = (MovePageResponder) responder; pageOne = crawler.addPage(root, PathParser.parse("PageOne"), "^PageA"); pageA = crawler.addPage(pageOne, PathParser.parse("PageA"), "content"); pageTwo = crawler.addPage(root, PathParser.parse("PageTwo")); }
private String getOutputForResultWithCount(String title, TestSystem.TestSummary testSummary) throws Exception { PageResult result = new PageResult(title); result.setTestSummary(testSummary); handler.acceptResult(result); String output = bytes.toString(); return output; }
public void testReceiveMessage() throws Exception { ss = new SocketService(portNumber, new EchoService()); Socket s = new Socket("localhost", portNumber); BufferedReader br = GetBufferedReader(s); PrintStream ps = GetPrintStream(s); ps.println("MyMessage"); String answer = br.readLine(); s.close(); ss.close(); assertEquals("MyMessage", answer); }
<T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by, long def, int exp); Future<Long> asyncIncr(String key, int by, long def, int exp); Future<Long> asyncDecr(String key, long by, long def, int exp); Future<Long> asyncDecr(String key, int by, long def, int exp); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Long> asyncIncr(String key, long by, long def); Future<Long> asyncIncr(String key, int by, long def); Future<Long> asyncDecr(String key, long by, long def); Future<Long> asyncDecr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); CountDownLatch broadcastOp(final BroadcastOpFactory of); CountDownLatch broadcastOp(final BroadcastOpFactory of, Collection<MemcachedNode> nodes);  Set<String> listSaslMechanisms(); }
public void gotData(String k, int flags, long cas, byte[] data) { assert key.equals(k) : "Wrong key returned"; assert cas > 0 : "CAS was less than zero: " + cas; val=new CASValue(cas, tc.decode(new CachedData(flags, data)));
public boolean cancel(boolean ign) { assert op != null : "No operation"; op.cancel();
public void checkingIfThereIsAUserWithAGivenLogin() throws Exception { User user = new User(); user.setName("Test Boy"); user.setLogin("myLogin"); user.setPassword("secret!"); dao.add(user); assertTrue(dao.containsUserWithLogin("myLogin")); assertFalse(dao.containsUserWithLogin("mispelledLogin"));
public void init() throws Exception { client = new MemcachedClient(new ConnectionFactoryBuilder() .setProtocol(Protocol.BINARY)
private String generateWikiTextForTestResults() throws Exception { replaceExceptionsWithLinks(); evaluateTables(); return ExceptionList.toHtml(exceptions) + testResultsToWikiText(); }
public Object createComponent(ConfigurationParameter componentType, Class<?> defaultComponent) { return createComponent(componentType.getKey(), defaultComponent); }
private UUID ReadUuid(XmlPullParser xpp) throws IOException, XmlPullParserException { String encoded = ReadString(xpp); if (encoded == null || encoded.length() == 0 ) { return PwDatabaseV4.UUID_ZERO; }
public void canEvaluateReturnValuesAndColorizeTable() throws Exception { DecisionTable dt = makeDecisionTableAndBuildInstructions(simpleDecisionTable); int n=0; Map<String, Object> pseudoResults = SlimCommandRunningClient.resultToMap( list( list(id(n++), "OK"), list(id(n++), VoidConverter.VOID_TAG), list(id(n++), VoidConverter.VOID_TAG),
public void shouldHaveHeadersIfXml() throws Exception { Response response = new MockResponse("xml"); response.addStandardHeaders(); assertTrue(response.makeHttpHeaders().indexOf("HTTP/1.1 200 OK") != -1); }
private void addChildFromXml(Element pageElement, WikiPage context, XmlizerPageHandler handler) throws Exception { String name = XmlUtil.getTextValue(pageElement, "name"); String modifiedDateString = XmlUtil.getTextValue(pageElement, "lastModified"); Date modifiedDate = dateFormat.parse(modifiedDateString); WikiPage childPage = context.getChildPage(name); if(childPage == null) childPage = context.addChildPage(name); handler.enterChildPage(childPage, modifiedDate); addChildrenFromXml(pageElement, childPage, handler); handler.exitPage(); }
public void testGetAllTestPages() { setUpForGetAllTestPages(); SuiteContentsFinder finder = new SuiteContentsFinder(suite, null, root); List<WikiPage> testPages = finder.getAllPagesToRunForThisSuite(); assertEquals(3, testPages.size()); assertTrue(testPages.contains(testPage)); assertTrue(testPages.contains(testPage2)); assertTrue(testPages.contains(testChildPage)); }
public void run() { threadCnt.incrementAndGet(); try {  ArrayBlockingQueue<ByteBuffer> bq = queueSendMap.get(sid); if (bq == null || isSendQueueEmpty(bq)) { ByteBuffer b = lastMessageSent.get(sid); if (b != null) { LOG.debug("Attempting to send lastMessage to sid=" + sid); send(b); } } } catch (IOException e) { LOG.error("Failed to send last message. Shutting down thread.", e); this.finish(); } try { while (running && !shutdown && sock != null) { ByteBuffer b = null; try { ArrayBlockingQueue<ByteBuffer> bq = queueSendMap .get(sid); if (bq != null) { b = pollSendQueue(bq, 1000, TimeUnit.MILLISECONDS); } else { LOG.error("No queue of incoming messages for " + "server " + sid); break; } if(b != null){ lastMessageSent.put(sid, b); send(b); } } catch (InterruptedException e) { LOG.warn("Interrupted while waiting for message on queue", e); } } } catch (Exception e) { LOG.warn("Exception when using channel: for id " + sid + " my id = " + self.getId() + " error = " + e); } this.finish(); LOG.warn("Send worker leaving thread"); }
private LinkedList getPasswordFileLines() throws Exception { LinkedList lines = new LinkedList(); if(passwordFile.exists()) lines = FileUtil.getFileLines(passwordFile); return lines; }
static File createArgFile(List<String> args) throws IOException { final File argFile = File.createTempFile(argFilePrefix, argFileSuffix);
public void NewParser() throws Exception { long start = System.currentTimeMillis(); String result = ParserTest.translateTo(new TestRoot().makePage("NewTest"), pageContent); System.out.println(System.currentTimeMillis() - start);
public float readFloat(String tag) throws IOException { return (float) readDouble(tag); }
public static byte[] encodeBoolean(boolean b) { byte[] rv=new byte[1]; rv[0]=(byte)(b?'1':'0'); return rv; }
public Matcher startLine() { matches.add((input, symbols, match) -> match.setMatched(isStartLine(input, symbols, match.getLength()))); return this; }
public boolean add(final Object o) { annotationDefault = o; return super.add(o); }
private void digestAddCounter(long seed) { for (int i = 0; i != 8; i++) {
public String toString(Object o) { if (o == null) return "null"; Double[] doubles = (Double[]) o; return Arrays.asList(doubles).toString(); }
public void visitTypeInsn(final int opcode, final String type) { buf.setLength(0); buf.append("mv.visitTypeInsn(").append(OPCODES[opcode]).append(", "); appendConstant(type); buf.append(");\n"); text.add(buf.toString()); }
public String genJavaCompareTo(String fname) { return " ret = (" + fname + " == peer." + fname + ")? 0 : (" + fname + "?1:-1);\n"; }
public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max); public boolean getResponseCachingEnabled(); public void setResponseCachingEnabled(boolean isEnabled);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); }
public void canDealWithNoMethod() { String findMethod = "addChildTable"; Method method = interaction.findMatchingMethod(findMethod, SlimTable.class, 3); assertNull(method); verify(interaction, times(1)).handleMethodCacheMiss(findMethod, SlimTable.class, new Integer[] { 3 });
public void testHtmlEscape() throws Exception { String wikiText = "<h1>this \"&\" that</h1>"; String html = "&lt;h1&gt;this \"&amp;\" that&lt;/h1&gt;"; assertEquals(html, translate(wikiText, new MockWikiPage())); }
private void dispatchEvent(EventType eventType) { LOG.debug("Dispatching event: {}", eventType); synchronized (listeners) { if (listeners.size() > 0) {
public void visitTypeArgument() { if (argumentStack % 2 == 0) { ++argumentStack; buf.append('<'); } buf.append('*'); }
synchronized public void waitForDisconnected(long timeout) throws InterruptedException, TimeoutException { long expire = Time.currentElapsedTime() + timeout; long left = timeout; while(connected && left > 0) { wait(left); left = expire - Time.currentElapsedTime(); } if (connected) { throw new TimeoutException("Did not disconnect");
public void shouldNotAcceptIfMethodHasConstraint() { interceptor = new MethodValidatorInterceptor(null, null, null, null, factory.getValidator(), null); assertThat(interceptor.accepts(withoutConstraint), is(false)); }
public void testConnFactoryWithoutConns() throws Exception { try { client = new MemcachedClient(new DefaultConnectionFactory(){
public static String unescape(String s) { int i = -1, j; while((i = s.indexOf('&', i + 1)) >= 0) { if((j = s.indexOf(';', i + 1)) > 0) { String from = s.substring(i + 1, j).toLowerCase(); String to = null; if((to = replacement(from)) != null) { s = s.substring(0, i) + to + s.substring(j + 1); } } } return s; }
WikiPage getParent(); WikiPage addChildPage(String name); boolean hasChildPage(String name); WikiPage getChildPage(String name); void removeChildPage(String name); List<WikiPage> getChildren(); String getName(); PageData getData(); ReadOnlyPageData readOnlyData(); Collection<VersionInfo> getVersions(); PageData getDataVersion(String versionName); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage(); }
private void appendCell(Cell newCell) { rowNode.getChildren().add(newCell.getColumnNode()); cells.add(newCell); }
public void testLearnerSessionTracker() throws Exception { Expirer expirer = new Expirer(1);
public Collection<WikiPageIdentity> identities() { return pagesByTestSystem.keySet(); }
public ProcessTxnResult processTxn(TxnHeader hdr, Record txn, TxnDigest digest) { return dataTree.processTxn(hdr, txn, digest); }
public void announceTotalTestsToRunShouldStartTotalTimeMeasurement() throws Exception { List<WikiPage> testPagesToRun = mock(List.class); WikiPage page = mock(WikiPage.class); FitNesseContext fitNesseContext = mock(FitNesseContext.class); ResultsListener resultsListener = mock(ResultsListener.class); MultipleTestsRunner runner = new MultipleTestsRunner(testPagesToRun, fitNesseContext, page, resultsListener); runner.announceTotalTestsToRun(new PagesByTestSystem()); verify(resultsListener).announceNumberTestsToRun(0); assertThat(runner.totalTestTime, isAStartedTimeMeasurement()); }
public int compareTo(WikiPage other) { try { WikiPagePath path1 = getPageCrawler().getFullPath();
boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public void shouldBeAbleToConvertNumbers(){ assertThat((Integer) converter.convert("2", int.class), is(equalTo(2))); }
public String stopAllProcesses() { int count = 0; for (Stoppable process : processes.values()) { stopProcess(process); count++; } return "Stopped " + Integer.toString(count) + " test(s) or suite(s)"; }
public static FitNesseContext makeTestContext(WikiPage root, int port) { return makeTestContext(root, null, SampleFileUtility.base, port); }
protected void registerComponents(ComponentRegistry container) { singleInterfaceRegister(StupidTranslator.class, container); singleInterfaceRegister(DefaultResourceRegistry.class, container); singleInterfaceRegister(DefaultResourceNotFoundHandler.class, container); singleInterfaceRegister(DefaultDirScanner.class, container); singleInterfaceRegister(WebInfClassesScanner.class, container); singleInterfaceRegister(DefaultInterceptorRegistry.class, container); singleInterfaceRegister(DefaultMethodLookupBuilder.class, container); singleInterfaceRegister(DefaultPathResolver.class, container); singleInterfaceRegister(ParanamerNameProvider.class, container); singleInterfaceRegister(DefaultConverters.class, container); singleInterfaceRegister(DefaultMethodInfo.class, container); singleInterfaceRegister(DefaultRequestParameters.class, container); singleInterfaceRegister(DefaultInterceptorStack.class, container); singleInterfaceRegister(DefaultRequestExecution.class, container); singleInterfaceRegister(DefaultResult.class, container); singleInterfaceRegister(OgnlParametersProvider.class, container); singleInterfaceRegister(DefaultMethodInfo.class, container); singleInterfaceRegister(DefaultValidator.class, container); singleInterfaceRegister(JstlLocalization.class, container); container.register(ForwardToDefaultViewInterceptor.class, ForwardToDefaultViewInterceptor.class); container.register(LogicResult.class, DefaultLogicResult.class); container.register(RequestResult.class, RequestResult.class); container.register(PageResult.class, DefaultPageResult.class); container.register(TypeCreator.class, AsmBasedTypeCreator.class); container.register(EmptyElementsRemoval.class, EmptyElementsRemoval.class); container.register(ParametersInstantiatorInterceptor.class, ParametersInstantiatorInterceptor.class); container.register(InterceptorListPriorToExecutionExtractor.class, InterceptorListPriorToExecutionExtractor.class); container.register(URLParameterExtractorInterceptor.class, URLParameterExtractorInterceptor.class); container.register(ResourceLookupInterceptor.class, ResourceLookupInterceptor.class); container.register(InstantiateInterceptor.class, InstantiateInterceptor.class); container.register(ExecuteMethodInterceptor.class, ExecuteMethodInterceptor.class); }
public void saslCompleted() { sendThread.getClientCnxnSocket().saslCompleted(); }
public void testSeq1() { assertSequence("dustin", 2, 3, 0, 1); assertSequence("noelani", 1, 2, 3, 0); }
boolean isTrackingSession(long sessionId);  void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap();  long getLocalSessionCount(); boolean isLocalSessionsEnabled();  Set<Long> globalSessions();  Set<Long> localSessions(); }
public void info(String message) { } public void warn(String message) { } }
public boolean trackSession(long sessionId, int sessionTimeout) { boolean tracked = globalSessionTracker.trackSession(sessionId, sessionTimeout); if (localSessionsEnabled && tracked) {
<T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by); long decr(String key, int by); long incr(String key, int by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
private String translate(String input) throws Exception { WikiPage root = InMemoryPage.makeRoot("RooT"); PageCrawler crawler = root.getPageCrawler(); crawler.setDeadEndStrategy(new VirtualEnabledPageCrawler()); WikiPage currentPage = crawler.addPage(root, PathParser.parse("PageOne"), "page one"); crawler.addPage(root, PathParser.parse("PageTwo"), "page two"); String result = new Translator(currentPage).translate(input); return result; }
public static boolean isTestPage(ReadOnlyPageData pageData) { return pageData.hasAttribute("Test"); }
public void executeSingleCommand(String command, OutputStream out) throws Exception { Request request = new MockRequest(); request.parseRequestUri(command); FitNesseExpediter expediter = new FitNesseExpediter(new MockSocket(), context); Response response = expediter.createGoodResponse(request); MockResponseSender sender = new MockResponseSender.OutputStreamSender(out); sender.doSending(response); }
public void testStringBuffer() throws Exception { StringBuffer sb = new StringBuffer("test"); StringBuffer sb2 = (StringBuffer) tc.decode(tc.encode(sb)); assertEquals(sb.toString(), sb2.toString()); }
private void insertPagesOfThisGroup(LinkedList<WikiPage> pageGroup) { for (WikiPage page : pageGroup) testPageList.add(page);
boolean isDebugEnabled();  boolean isInfoEnabled();  void log(Level level, Object message, Throwable exception);  void log(Level level, Object message);  void debug(Object message, Throwable exception);  void debug(Object message);  void debug(String message, Object... args);  void info(Object message, Throwable exception);  void info(Object message);  void info(String message, Object... args);  void warn(Object message, Throwable exception);  void warn(Object message);  void warn(String message, Object... args);  void error(Object message, Throwable exception);  void error(Object message);  void error(String message, Object... args);  void fatal(Object message, Throwable exception);  void fatal(Object message);  void fatal(String message, Object... args); }
public Set<Entry<String, ProtectedBinary>> entrySet() { return pool.entrySet(); }
private void startServer(int id, String config) throws Exception { peers[id] = new MainThread(id, clientPorts[id], config); peers[id].start(); Assert.assertTrue("Server " + id + " is not up", ClientBase.waitForServerUp("127.0.0.1:" + clientPorts[id], CONNECTION_TIMEOUT)); Assert.assertTrue("Error- Server started in Standalone Mode!", peers[id].isQuorumPeerRunning()); zkHandles[id] = ClientBase.createZKClient("127.0.0.1:" + clientPorts[id]); }
protected void markMissingRows(List<Integer> missingRows) { for (int missingRow : missingRows) { markMissingRow(missingRow);
public void write(Element element, int tabs) throws Exception { if(! isNewLine) write(endl); if(!element.hasChildNodes()) { writeTabs(tabs); write("<" + element.getTagName() + writeAttributes(element) + "/>"); } else { writeTabs(tabs); write("<" + element.getTagName() + writeAttributes(element) + ">"); write(element.getChildNodes(), tabs + 1); if(isNewLine) writeTabs(tabs); write("</" + element.getTagName() + ">"); } write(endl); }
public void testPageMatchesQueryWithExcludedSetUps() throws Exception { Map<String, Boolean> attributes = new HashMap<String, Boolean>(); attributes.put("SetUp", false); List<PageType> pageTypes = Arrays.asList(TEST, NORMAL, SUITE); searcher = generateSearcherByPageTypesAndSearchAttributes(pageTypes, attributes); setPageProperty(page, TEST.toString(), "true"); assertTrue(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SetUp")); assertFalse(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("TearDown")); assertTrue(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SuiteSetUp")); assertFalse(searcher.pageMatches(page)); page = crawler.addPage(root, PathParser.parse("SuiteTearDown")); assertTrue(searcher.pageMatches(page)); }
public void setup() { this.mockery = new Mockery(); this.registry = new DefaultResourceRegistry(); }
WikiPage getParent();  boolean isRoot();  WikiPage addChildPage(String name); boolean hasChildPage(String name); WikiPage getChildPage(String name);  @Deprecated void removeChildPage(String name);  void remove();  List<WikiPage> getChildren(); String getName(); PageData getData();  Collection<VersionInfo> getVersions(); WikiPage getVersion(String versionName); String getHtml();  VersionInfo commit(PageData data); PageCrawler getPageCrawler(); PageCrawler getPageCrawler(PagePruningStrategy strategy); String getVariable(String name); }
public void setup() throws Exception { System.setProperty(ZooKeeperServer.GET_DATA_RESPONSE_CACHE_SIZE, "32"); System.setProperty(ZooKeeperServer.GET_CHILDREN_RESPONSE_CACHE_SIZE, "64"); super.setUp(); }
public void noCrashOnCommittedRequestsOfUnseenRequestTest() throws Exception { final String path = "/noCrash/OnCommittedRequests/OfUnseenRequestTest"; final int numberofReads = 10; final int sessionid = 0x123456; final int firstCXid = 0x100; int readReqId = firstCXid; processor.stoppedMainLoop = true; HashSet<Request> localRequests = new HashSet<Request>();
public void singleResultShouldShowPassFailBar() throws Exception { addPageDirectory("TestPage"); File pageDirectory = addPageDirectory("TestPage"); addTestResult(pageDirectory, "20090503110451_30_20_3_0"); makeResponse(); StringBuilder expected = new StringBuilder(); for (int i = 0; i < 30; i++) { expected.append("<td id=\"element\" class=\"pass\">&nbsp</td>"); } expected.append(".*"); for (int i = 0; i < 20; i++) { expected.append("<td id=\"element\" class=\"fail\">&nbsp</td>"); } assertHasRegexp(expected.toString(), response.getContent()); }
public void processPage(WikiPage currentPage) throws Exception { if (isHit(currentPage)) observer.hit(currentPage);
private BERConstructedOctetString buildConstructedOctetString() throws IOException { Vector octs = new Vector(); for (;;) { DERObject o = readObject(); if (o == END_OF_STREAM) { break; } octs.addElement(o); } return new BERConstructedOctetString(octs); }
public void testDot() throws Exception { path = makePath("."); assertEquals(WikiPagePath.ROOT, path.getFirst()); assertTrue(path.getRest().isEmpty()); }
public MapIterator mapIterator() { if (size == 0) { return EmptyMapIterator.INSTANCE; } return new HashMapIterator(this); }
public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { TextView password = (TextView) findViewById(R.id.pass_password); if ( isChecked ) { password.setTransformationMethod(null);
public void testLoadTrustStore() throws Exception { String path = x509TestContext.getTrustStoreFile(KeyStoreFileType.JKS).getAbsolutePath(); KeyStore ts = new JKSFileLoader.Builder().setTrustStorePath(path).setTrustStorePassword(x509TestContext.getTrustStorePassword()).build().loadTrustStore(); assertEquals(1, ts.size()); }
int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
public void testCanFindExistingPages() throws Exception { crawler.addPage(root, PathParser.parse("FrontPage"), "front page"); WikiPage newRoot = new FileSystemPage(defaultPath, "RooT"); assertNotNull(newRoot.getChildPage("FrontPage")); }
protected void updateColumns(Parse column, double actual, double expected, boolean greaterThan) { if (checkFailureBasedOnGreaterThanOrLessThan(actual, expected, greaterThan)) { super.wrong(column, Double.toString(actual));
protected abstract String mapConstructorClassName(); private void assertConvertsTo(String string, List<List<String>> list) throws Exception { assertEquals("true", statementExecutor.call(MY_INSTANCE, "setMap", string)); assertEquals(list, statementExecutor.call(MY_INSTANCE, "query", new Object[] {})); statementExecutor.create(OTHER_INSTANCE, mapConstructorClassName(), new Object[] {string}); assertEquals(list, statementExecutor.call(OTHER_INSTANCE, "query", new Object[] {})); } @Test public void fromEmptyString_shouldCreateEmptyMap() throws Exception { assertConvertsTo("", new ArrayList<List<String>>()); } @Test public void fromGarbageString_shouldCreateEmptyMap() throws Exception { assertConvertsTo("sdfwewdfsdfwefsdfsdfswe", new ArrayList<List<String>>()); } @Test public void fromEmptyTable_shouldCreateEmptyMap() throws Exception { assertConvertsTo("<table></table>", new ArrayList<List<String>>()); } @Test public void fromTableWithNoColumns_shouldCreateEmptyMap() throws Exception { assertConvertsTo("<table><tr></tr><tr></tr></table>", new ArrayList<List<String>>()); } @Test public void fromTableWithOneColumn_shouldCreateEmptyMap() throws Exception { assertConvertsTo("<table><tr><td>0</td></tr></table>", new ArrayList<List<String>>()); } @Test public void fromTableWithMoreThanTwoColumns_shouldCreateEmptyMap() throws Exception { assertConvertsTo( "<table>" + "<tr>" + " <td>0</td>" + " <td>0</td>" + " <td>0</td>" + "</tr>" + "</table>", new ArrayList<List<String>>()); } @Test public void fromTableWithTwoColumnsAndOneRow_shouldCreateMapWithOneEntry() throws Exception { assertConvertsTo( "<table>" + "<tr>" + " <td>name</td>" + " <td>Bob</td>" + "</tr>" + "</table>", asList(asList("name", "Bob"))); } @Test public void fromTableWithTwoColumnsAndTwoRows_shouldCreateMapWithTwoEntries() throws Exception { assertConvertsTo( "<table>" + "<tr>" + " <td>name</td>" + " <td>Bob</td>" + "</tr>" + "<tr>" + " <td>address</td>" + " <td>here</td>" + "</tr>" + "</table>", asList(asList("address", "here"), asList("name", "Bob"))); } @Test public void fromTwoValidTables_shouldCreateEmptyMap() throws Exception { assertConvertsTo( "<table>" + "<tr>" + " <td>name</td>" + " <td>Bob</td>" + "</tr>" + "</table>" + "<table>" + "<tr>" + " <td>name</td>" + " <td>Bob</td>" + "</tr>" + "</table>", new ArrayList<List<String>>()); } }
public Maybe<String> findSpecialVariableValue(String key) { final FitNesseContext context = getFitNesseContext(); final SourcePage sourcePage = page.getPage(); final SourcePage namedSourcePage = page.getNamedPage(); String value; if (key.equals("RUNNING_PAGE_NAME")) value = sourcePage.getName(); else if (key.equals("RUNNING_PAGE_PATH")) value = sourcePage.getPath(); else if (key.equals("PAGE_NAME")) value = namedSourcePage.getName(); else if (key.equals("PAGE_PATH")) value = namedSourcePage.getPath(); else if (key.equals("FITNESSE_PORT")) value = Integer.toString(context != null ? context.port : -1); else if (key.equals("FITNESSE_ROOTPATH")) value = context != null ? context.rootPath : ""; else if (key.equals("FITNESSE_VERSION")) value = new FitNesseVersion().toString(); else return Maybe.noString; return new Maybe<String>(value); }
public void assign(PwEntry source) { setUUID(source.getUUID()); title = source.title; url = source.url; additional = source.additional; }
public void shouldThrowExceptionWhenNothingCouldBeFound() throws IOException { Toolchain toolchain = new ReturningToolChain(null); System.clearProperty("java.home"); environmentVariables.set("JAVA_HOME", null); try { JavaLocator.findExecutableFromToolchain(toolchain);
public void should18nalizeTheCategoryParameterUsingGivenBundle() { Validations validations = new Validations() {{ that(false, i18n("some.category"), "some.message"); }}; List<Message> errors = validations.getErrors(singletonBundle("some.category", "The Category")); assertThat(errors.get(0).getCategory(), is("The Category")); }
public long skip(long n) throws IOException { long newPos = bb.position() + n; if (newPos > bb.remaining()) { n = bb.remaining(); } bb.position(bb.position() + (int) n); return n; }
private ScenarioTable makeScenarioTable(String pageContents) throws Exception { WikiPageUtil.setPageContents(root, pageContents); TableScanner ts = new HtmlTableScanner(root.getData().getHtml()); Table t = ts.getTable(0); testContext = new SlimTestContextImpl(); st = new ScenarioTable(t, "id", testContext); instructions.addAll(st.getAssertions()); return st; }
public void evaluationMessageForBlankInput() throws Exception { assertExpectationMessage("", "", "!style_pass(BLANK)"); }
private boolean isSymbolAssignment(String firstCell) { symbolAssignmentMatcher = symbolAssignmentPattern.matcher(firstCell); return symbolAssignmentMatcher.matches(); }
public void setup() { this.mockery = new Mockery(); this.request = mockery.mock(HttpServletRequest.class); this.response = mockery.mock(HttpServletResponse.class); this.session = mockery.mock(HttpSession.class); this.method = mockery.mock(ResourceMethod.class); this.requestInfo = mockery.mock(MethodInfo.class); this.resource = mockery.mock(Resource.class); this.config = mockery.mock(Config.class); this.resolver = mockery.mock(PathResolver.class); this.dispatcher = mockery.mock(RequestDispatcher.class); mockery.checking(new Expectations() { { allowing(request).getParameterMap(); will(returnValue(new HashMap<String, Object>())); allowing(request).getSession(); will(returnValue(session)); allowing(session).getAttribute("org.vraptor.scope.ScopeType_FLASH"); will(returnValue(new HashMap<String, Object>())); allowing(requestInfo).getResourceMethod(); will(returnValue(method)); allowing(method).getResource(); will(returnValue(resource)); } }); this.webRequest = new RequestInfo(context, request, response); this.result = new ViewsPropertiesPageResult(this.config, this.resolver, this.requestInfo, this.webRequest); }
public void toInherit() { } } @Test public void shouldFindNonAnnotatedNonStaticPublicMethodWithComponentNameInVariableCamelCaseConventionAsURI() throws Exception { ResourceMethod method = router.parse("/clients/add", HttpMethod.POST, request); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("add")))); mockery.assertIsSatisfied(); } @Test public void shouldIgnoreAResourceWithTheWrongWebMethod() throws SecurityException { ResourceMethod method = router.parse("/clients/remove", HttpMethod.POST, request); assertThat(method, is(Matchers.nullValue())); mockery.assertIsSatisfied(); } @Test public void shouldAcceptAResultWithASpecificWebMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = router.parse("/clients/head", HttpMethod.HEAD, request); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("head")))); mockery.assertIsSatisfied(); } static class NiceClients extends Clients { } @Test public void findsInheritedMethodsWithDefaultNames() throws SecurityException, NoSuchMethodException { StereotypedClass childResource = mockery.resource(NiceClients.class); router.register(childResource); ResourceMethod method = router.parse("/niceClients/toInherit", HttpMethod.POST, request); assertThat(method, is(VRaptorMatchers.resourceMethod(Clients.class.getMethod("toInherit")))); mockery.assertIsSatisfied(); } }
public void processTestResults(final String relativeTestName, TestSummary testSummary, TimeMeasurement notUsed) { finalSummary = new TestSummary(testSummary); TestExecutionReport.TestResult currentResult = newTestResult(); testResponse.results.add(currentResult); currentResult.startTime = currentTestStartTime.startedAt(); currentResult.content = outputBuffer == null ? null : outputBuffer.toString(); outputBuffer = null; addCountsToResult(currentResult, testSummary); currentResult.runTimeInMillis = String.valueOf(currentTestStartTime.elapsed()); currentResult.relativePageName = relativeTestName; currentResult.tags = page.readOnlyData().getAttribute(PageData.PropertySUITES); currentResult.getInstructions().addAll(instructionResults); instructionResults = new ArrayList<TestExecutionReport.InstructionResult>();
public void unableToStartTestSystem(final String testSystemName, final Throwable cause) throws IOException { safeInvoke(new Handler() { @Override public void invoke(TestSystemListener listener) throws IOException {
private static String translateUnicode(String name) { StringBuffer b = new StringBuffer(name.length()); for (int i = 0; i < name.length(); i++) { char ch = name.charAt(i);
private FitNesseExpediter preparePipedFitNesseExpediter() throws Exception { PipedInputStream socketInput = new PipedInputStream(); clientOutput = new PipedOutputStream(socketInput); clientInput = new PipedInputStream(); PipedOutputStream socketOutput = new PipedOutputStream(clientInput); MockSocket socket = new MockSocket(socketInput, socketOutput); return new FitNesseExpediter(socket, context, executorService, REQUEST_PARSING_TIME_LIMIT); }
public void acceptOutputFirst(String output) throws Exception { } public void testComplete(TestSummary testSummary) throws Exception { } public void exceptionOccurred(Throwable e) { } }
public void testFormatSimpleValue() { ControlField field = new ControlField("Field-Name"); assertEquals("Field-Name: value\n", field.format("value")); }
public void canUseBangToCallFunction() throws Exception { makeDecisionTableAndBuildInstructions( "|DT:fixture|argument|\n" + "|var|func!|\n" + "|3|5|\n" + "|7|9|\n"); int n=0; List<Instruction> expectedInstructions = list( new MakeInstruction(id(n++), "decisionTable_id", "fixture", new Object[]{"argument"}), new CallInstruction(id(n++), "decisionTable_id", "table", new Object[]{list(list("var", "func!"), list("3", "5"), list("7", "9"))}), new CallInstruction(id(n++), "decisionTable_id", "beginTable"), new CallInstruction(id(n++), "decisionTable_id", "reset"), new CallInstruction(id(n++), "decisionTable_id", "setVar", new Object[]{"3"}), new CallInstruction(id(n++), "decisionTable_id", "execute"), new CallInstruction(id(n++), "decisionTable_id", "func"), new CallInstruction(id(n++), "decisionTable_id", "reset"), new CallInstruction(id(n++), "decisionTable_id", "setVar", new Object[]{"7"}), new CallInstruction(id(n++), "decisionTable_id", "execute"), new CallInstruction(id(n++), "decisionTable_id", "func"), new CallInstruction(id(n++), "decisionTable_id", "endTable") ); assertEquals(expectedInstructions, instructions()); }
public void LoadData(Context ctx, InputStream is, String password, String keyfile, UpdateStatus status, boolean debug) throws InvalidCipherTextException, IOException, InvalidKeyFileException { ImporterV3 Importer = new ImporterV3(debug); mPM = Importer.openDatabase(is, password, keyfile, status); if ( mPM != null ) { mPM.constructTree(null); populateGlobals(null); } status.updateMessage(R.string.building_search_idx); searchHelper = new SearchDbHelper(ctx); buildSearchIndex(); loaded = true; }
private List<Instruction> callScenarioForRow(ScenarioTable scenario, int row) throws SyntaxError { checkRow(row); return scenario.call(getArgumentsForRow(row), DecisionTable.this, row); }
private void addRow(String wikiTextRow, boolean markAsCommentRow) throws Exception { TableRowWidget rowWidget = new TableRowWidget(this, wikiTextRow, isLiteralTable); if (markAsCommentRow) { rowWidget.markAsCommentRow();
public void testTestSummaryTestPass() throws Exception { formatter.announceNumberTestsToRun(1); formatter.newTestStarted(page); formatter.testComplete(page, new TestSummary(4, 0, 0, 0)); formatter.allTestingComplete(null); assertSubString("<script>document.getElementById(\"test-summary\").innerHTML =", pageBuffer.toString()); assertSubString("<strong>Assertions:</strong> 4 right, 0 wrong, 0 ignored, 0 exceptions", pageBuffer.toString()); assertSubString("document.getElementById(\"test-summary\").className = \"pass\"", pageBuffer.toString()); }
public String toString() { return "Execution Report: " + message;
public boolean equals(Object o) { if (!(o instanceof ExecutionReport)) return false; ExecutionReport e = (ExecutionReport) o; if (!StringUtil.stringsNullOrEqual(rootPath, e.rootPath)) return false; else if (!StringUtil.stringsNullOrEqual(version, e.version)) return false; else if (!DateTimeUtil.datesNullOrEqual(date, e.date)) return false; else if(!finalCounts.equals(e.finalCounts)) return false; else if(totalRunTimeInMillis != e.totalRunTimeInMillis) return false; return true; }
public void testHtmlOption() throws Exception { runner.args(new String[]{"-html", "stdout", "blah", "80", "blah"}); assertEquals(1, runner.formatters.size()); FormattingOption option = (FormattingOption)runner.formatters.get(0); assertEquals("html", option.format); }
public ResourceMethod parse(String id, HttpMethod methodName, MutableRequest request) { for (ResourceAndMethodLookup lookuper : lookup) { ResourceMethod method = lookuper.methodFor(id, methodName); if (method != null) { return method; } } return null; }
public static void setupRootACLForDigest(final ZooKeeper zk) throws Exception { final String idPassword = String.format("%s:%s", ROOT_USER, ROOT_PASSWORD); final String digest = DigestAuthenticationProvider.generateDigest(idPassword); final ACL acl = new ACL(ZooDefs.Perms.ALL, new Id(DIGEST_SCHEMA, digest)); zk.setACL(Commands.ROOT_PATH, Collections.singletonList(acl), -1); }
public void methodNotAllowed(EnumSet<HttpMethod> allowedMethods) { header("Allow", allowedMethods.toString().replaceAll("\\[|\\]", "")); response.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED); result.use(Results.nothing()); }
protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Intent i = getIntent(); prefs = PreferenceManager.getDefaultSharedPreferences(this); mRememberKeyfile = prefs.getBoolean(getString(R.string.keyfile_key), getResources().getBoolean(R.bool.keyfile_default)); setContentView(R.layout.password); confirmButton = (Button) findViewById(R.id.pass_ok); new InitTask().execute(i); initForFingerprint(); }
public void whenMethodIsAnnotatedAddsItsContent() { XStream x = new XStream(); x.alias("player", Player.class); x.registerConverter(new MethodValueSupportConverter(new ReflectionConverter(x.getMapper(), x.getReflectionProvider())), XStream.PRIORITY_LOW); String content = x.toXML(new Player()); assertThat(content, is(equalTo("<player>\n <name>custom_name</name>\n</player>"))); }
public static WikiPage makeRoot(String name) throws Exception { return new InMemoryPage(name, null); }
protected Leader makeLeader(FileTxnSnapLog logFactory) throws IOException { return new Leader(this, new LeaderZooKeeperServer(logFactory, this,new ZooKeeperServer.BasicDataTreeBuilder()));
private FitNesseExpediter preparePipedFitNesseExpediter() throws Exception { PipedInputStream socketInput = new PipedInputStream(); clientOutput = new PipedOutputStream(socketInput); clientInput = new PipedInputStream(); PipedOutputStream socketOutput = new PipedOutputStream(clientInput); MockSocket socket = new MockSocket(socketInput, socketOutput); final FitNesseExpediter sender = new FitNesseExpediter(socket, context, REQUEST_PARSING_TIME_LIMIT); return sender; }
public void usingUnixLikeSeparators() throws Exception { DefaultUploadedFile file = new DefaultUploadedFile(CONTENT, "/a/unix/path/file.txt", "text/plain", 0); assertThat(file.getFileName(), is("file.txt")); assertThat(file.getCompleteFileName(), is("/a/unix/path/file.txt")); assertThat(file.toString(), Matchers.containsString(file.getFileName())); }
public Matcher string(final String delimiter) { if (firsts == null) { firsts = new ArrayList<Character>(); firsts.add(delimiter.charAt(0)); } matches.add(new ScanMatch() { public Maybe<Integer> match(ScanString input, int offset) { return input.matches(delimiter, offset) ? new Maybe<Integer>(delimiter.length()) : Maybe.noInteger; } }); return this; }
public boolean hasMode(WatcherMode mode) { int flags = modeToFlag(mode); return (this.flags & flags) != 0; }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); WikiPageUtil.addPage(root, PathParser.parse("TestPageOne"), "TestPageOne has some testing content and a child\nThe meaning of life, the universe, and evertything is 42"); WikiPageUtil.addPage(root, PathParser.parse("TestPageOne.ChildPage"), "ChildPage is a child of TestPageOne\nDo you believe in love after life?"); WikiPageUtil.addPage(root, PathParser.parse("TestPageTwo"), "TestPageTwo has a bit of content too\nThere is no life without death"); hits.clear(); }
private void assertResponderType(Class<?> expectedClass, WikiPage page) throws Exception { Responder responder = factory.makeResponder(request); assertEquals(expectedClass, responder.getClass()); }
public Collection<MatchedResult> scorePotentialMatches() { Collection<MatchedResult> result = new ArrayList<>(); int rows = table.getRowCount(); for (int tableRow = 2; tableRow < rows; tableRow++) result.addAll(new QueryMatcher(fieldNames).scoreMatches(tableRow)); return result; }
public void pageImported(WikiPage localPage) throws Exception { } public void pageImportError(WikiPage localPage, Exception e) throws Exception { e.printStackTrace(); } }
public File image() { return new File(getResource("/filecontroller_test/baby_seal.jpg")); }
public void sendHtmlInstructionForTable() throws Exception { String newLine = System.getProperty("line.separator"); String testPage = "!define BONUSRatingTbl {| RATING_NBR | DESCR2 |\n" + "| 1 | Met 100% of goals |\n" + "| 2 | Met < 50% of goals |\n" + "}\n" + "| script |\n" + "| show | echo | ${BONUSRatingTbl}|\n"; st = makeScriptTable(testPage, false); assertions.addAll(st.getAssertions()); assertEquals(assertions.toString(), 2, assertions.size()); assertEquals("Instruction{id='NOOP'}", assertions.get(0).getInstruction().toString()); assertEquals("{id='scriptTable_id_0', instruction='call', instanceName='scriptTableActor', methodName='echo', args=[<table>" + newLine + "\t<tr>" + newLine +
private void finish() { long bitLength = (byteCount << 3); update((byte)0x01); while (bOff != 0) { update((byte)0); } processLength(bitLength); processBlock(); }
public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; if (!super.equals(o)) return false; MakeInstruction that = (MakeInstruction) o;
public void fromString() { assertEquals(SUITE, PageType.fromString("Suite")); assertEquals(TEST, PageType.fromString(TEST.toString())); assertEquals(NORMAL, PageType.fromString("Normal")); try { PageType.fromString("unknown");
protected String extractPrefix(Class<?> type) { if (type.isAnnotationPresent(Path.class)) { String[] uris = type.getAnnotation(Path.class).value();
public void testParse() throws Exception { TestSummary testSummary = new TestSummary(1, 2, 3, 4); PageResult result = new PageResult("PageTitle", testSummary, "content"); PageResult parsedResult = PageResult.parse(result.toString()); assertEquals("PageTitle", parsedResult.title()); assertEquals(testSummary, parsedResult.testSummary()); assertEquals("content", parsedResult.content()); }
List<WikiPage> getChildren(); String getName(); PageData getData(); ReadOnlyPageData readOnlyData(); Collection<VersionInfo> getVersions(); PageData getDataVersion(String versionName); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); WikiPage getHeaderPage(); WikiPage getFooterPage(); boolean isOpenInNewWindow(); }
public String toHtml(Translator translator, Symbol symbol) { return new HtmlText(symbol.getContent()).html(); }
public void outjectsToResponseIfAjax() throws InterceptionException, IOException, NoSuchMethodException { outjecter.include("author", "Guilherme"); StringWriter content = new StringWriter(); final PrintWriter writer = new PrintWriter(content); final ResourceMethod method = mockery.methodFor(MyComponent.class, "ajaxed"); mockery.checking(new Expectations() { { one(info).isAjax(); will(returnValue(true)); one(response).setContentType("application/json"); one(response).setCharacterEncoding("UTF-8"); one(response).getWriter(); will(returnValue(writer)); } }); interceptor.intercept(stack, method, null); assertThat(content.getBuffer().toString(), is(equalTo("{\"author\":\"Guilherme\"}"))); mockery.assertIsSatisfied(); }
private String ReadProtectedString(XmlPullParser xpp) throws XmlPullParserException, IOException { byte[] buf = ProcessNode(xpp); if ( buf != null) { try { return new String(buf, "UTF-8"); } catch (UnsupportedEncodingException e) { e.printStackTrace(); throw new IOException(e.getLocalizedMessage()); } } return ReadString(xpp); }
public void testRenameSubPage() throws Exception { WikiPage topPage = addPage(root, "TopPage"); WikiPage pageToRename = addPage(topPage, "OldPageName"); @SuppressWarnings("unused") WikiPage lastPage = addPage(pageToRename, "LastPage"); WikiWordWidget widget = new WikiWordWidget(new WidgetRoot(topPage), "^OldPageName.LastPage"); widget.renamePageIfReferenced(pageToRename, "NewPageName"); assertEquals(">NewPageName.LastPage", widget.text); }
public boolean isValid(String id) { String[] parts = id.split(":"); return parts.length == 2; }
public void convertArrayOfDoublesThrowsExceptionIfNotInteger() throws Exception { Object result = caller.call("testSlim", "setDoubleArray", "[1 ,2, 3,4, hello]"); String resultString = (String) result; assertTrue(resultString, resultString.contains("message:<<CANT_CONVERT_TO_DOUBLE_LIST>>")); }
protected abstract boolean pageMatches(WikiPage page); @Override public void search(WikiPage page) { page.getPageCrawler().traverse(traverser); } }
public void handleEncryptedResult(String value, String ivSpec) { prefsNoBackup.edit() .putString(getPreferenceKeyValue(), value) .putString(getPreferenceKeyIvSpec(), ivSpec) .commit();
public static List<String> split(String value, String separator) { String[] splits = value.split(separator); List<String> results = new ArrayList<String>(); for (int i = 0; i < splits.length; i++) { splits[i] = splits[i].trim(); if (splits[i].length() > 0) { results.add(splits[i]); } } return Collections.unmodifiableList(results); }
public void reset() throws Exception {
protected void performExecution() throws Exception { SuiteFilter filter = new SuiteFilter(getSuiteTagFilter(), getNotSuiteFilter(), getSuiteFirstTest()); SuiteContentsFinder suiteTestFinder = new SuiteContentsFinder(page, root, filter); MultipleTestsRunner runner = new MultipleTestsRunner(suiteTestFinder.getAllPagesToRunForThisSuite(), context, page, formatters); runner.setDebug(isRemoteDebug()); runner.executeTestPages(); }
protected void removeOtherwiseMatchedResults(Iterable<MatchedResult> potentialMatchesByScore, MatchedResult bestResult) { Iterator<MatchedResult> iterator = potentialMatchesByScore.iterator(); while (iterator.hasNext()) { MatchedResult otherResult = iterator.next();
public static String makeResultFileName() { SimpleDateFormat format = new SimpleDateFormat("yyyy_MM/dd_HH_mm_ss"); return format.format(new Date(getTime())) + ".xml"; }
public void testAddWatchBit() { int watcherCacheSize = 1; BitHashSet ws = new BitHashSet(watcherCacheSize); assertTrue(ws.add(1)); assertEquals(1, ws.size()); assertEquals(1, ws.cachedSize()); List<Integer> actualBits = new ArrayList<Integer>(); for (int bit : ws) { actualBits.add(bit); } assertArrayEquals(new Integer[]{1}, actualBits.toArray(new Integer[actualBits.size()]));
public TarEntry map( final TarEntry pEntry ) { TarEntry entry = pEntry; for (int i = 0; i < mappers.length; i++) { entry = mappers[i].map(entry); } return entry; }
public void canCreateInstance() throws Exception { caller.create("x", getTestClassName(), new Object[0]); Object x = caller.getInstance("x"); assertInstanceOfTestSlim(x); }
public void testRemoveMessageFromCache() { CacheKey key = new CacheKey(topic, 1); cacheBasedPersistenceManager.addMessageToCache(key, messages.get(0), System.currentTimeMillis()); cacheBasedPersistenceManager.removeMessageFromCache(key, new Exception(), true, true); assertTrue(cacheBasedPersistenceManager.cache.isEmpty()); assertTrue(cacheBasedPersistenceManager.orderedIndexOnSeqId.isEmpty()); assertTrue(cacheBasedPersistenceManager.timeIndexOfAddition.isEmpty()); }
public synchronized void removeSession(long sessionId) { LOG.debug("Removing session 0x{}", Long.toHexString(sessionId)); SessionImpl s = sessionsById.remove(sessionId); sessionsWithTimeout.remove(sessionId); if (LOG.isTraceEnabled()) { ZooTrace.logTraceMessage( LOG, ZooTrace.SESSION_TRACE_MASK, "SessionTrackerImpl --- Removing session 0x" + Long.toHexString(sessionId)); } if (s != null) { sessionExpiryQueue.remove(s);
public void testSeamlessIsNotCollapsable() throws Exception { IncludeWidget widget = createIncludeWidget(page1, "-seamless PageTwo"); final String result = widget.render(); assertNotSubString("class=\"collapsable\"", result); }
protected <T> T executeInsideRequest(final WhatToDo<T> execution) { Callable<T> task = new Callable<T>(){ public T call() throws Exception { T result = null; HttpSessionMock session = new HttpSessionMock(context, "session" + ++counter); HttpServletRequestMock httpRequest = new HttpServletRequestMock(session); MutableResponse response = mockery.mock(MutableResponse.class, "response" + counter); RequestInfo request = new RequestInfo(context, null, httpRequest, response); VRaptorRequestHolder.setRequestForCurrentThread(request); RequestContextListener contextListener = new RequestContextListener(); contextListener.requestInitialized(new ServletRequestEvent(context, httpRequest)); result = execution.execute(request, counter); contextListener.requestDestroyed(new ServletRequestEvent(context, httpRequest)); VRaptorRequestHolder.resetRequestForCurrentThread(); return result; } }; Future<T> future = Executors.newSingleThreadExecutor().submit(task); try { return future.get(60, TimeUnit.SECONDS);
private Collection<PluginFeatureFactory> findPluginFeatureFactories() throws PluginException { List<PluginFeatureFactory> factories = new ArrayList<PluginFeatureFactory>(); factories.addAll(PropertyBasedPluginFeatureFactory.loadFromProperties(componentFactory)); for (PluginFeatureFactory factory : ServiceLoader.load(PluginFeatureFactory.class)) { factories.add(factory); } return factories; }
public void tearDown() throws Exception { final File file = new File(ComponentFactory.PROPERTIES_FILE); FileOutputStream out = new FileOutputStream(file); out.write("".getBytes()); out.close(); file.delete(); }
public static void Launch(Activity act) { Intent i = new Intent(act, IconPickerActivity.class); act.startActivityForResult(i, 0); }
private <T> T getWithTimeout(Future<T> submit) throws SlimException { try { return submit.get(timeout, SECONDS);
public void setup() { this.mockery = new VRaptorMockery(); this.proxifier = new DefaultProxifier(); this.result = mockery.mock(Result.class); this.logicResult = mockery.mock(LogicResult.class); this.instance = new MyComponent(); this.validator = new DefaultValidator(result, new DefaultValidationViewsFactory(result, proxifier)); this.pageResult = mockery.mock(PageResult.class); }
public abstract Object addPath(String path); public abstract Object getInstance(String instanceName); public abstract Object create(String instanceName, String className, Object[] args); public abstract Object call(String instanceName, String methodName, Object... args); public abstract boolean stopHasBeenRequested(); public abstract void reset(); public abstract Object callAndAssign(String variable, String instanceName, String methodName, Object[] args); }
public void singlePassingResultsShouldBeGreen() throws Exception { addPageDirectory("TestPage"); File pageDirectory = addPageDirectory("TestPage"); addTestResult(pageDirectory, "20090503110451_6_0_3_0"); makeResponse(); assertHasRegexp("<td .* class=\"pass\">03 May, 09 11:04</td>", response.getContent()); }
private String stripContextRoot(String url) { if (contextRoot.equals(url + "/")) { return ""; } if (url.startsWith(contextRoot)) { return url.substring(contextRoot.length()); } return url; }
public void pageImportError(WikiPage localPage, Exception e) throws Exception { e.printStackTrace(); }
public void run() { ConcurrencyUtils.put(msgIdCallbackQueue, Either.of((MessageSeqId) null, exception)); }
public void localizedRejectFails() throws Exception { assertScriptResults("|localized reject|func|3|\n", asList(
public int countOfTagWithIdAndWithClassBelowTagWithIdPrefix(String childTag, String childId, String tagClass, String parentTag, String parentIdPrefix) throws Exception { NodeList parents = getMatchingTags( new AndFilter( new TagNameFilter(parentTag), new HasAttributePrefixFilter("id", parentIdPrefix)) ); NodeFilter predicates[] = { new TagNameFilter(childTag), new HasAttributeFilter("class", tagClass), new HasAttributeFilter("id", childId) }; NodeFilter filter = new AndFilter(predicates); NodeList matches = parents.extractAllNodesThatMatch(filter, true); return matches.size(); }
public static int writeCString(String str, OutputStream os) throws IOException { byte[] initial = str.getBytes("UTF-8"); int length = initial.length+1; os.write(writeInt(length)); os.write(initial); os.write(0x00); return length; }
public void addJvmArgs(String... args) {
protected <T> T executeInsideRequest(WhatToDo<T> execution) { final HttpSessionMock session = new HttpSessionMock(context, "session" + ++counter); final MutableRequest request = mockery.mock(MutableRequest.class, "request" + ++counter); mockery.checking(new Expectations() { { allowing(request).getRequestURI(); will(returnValue("what.ever.request.uri")); allowing(request).getSession(); will(returnValue(session)); allowing(request).getParameterMap(); will(returnValue(new HashMap<Object, Object>())); allowing(request).getParameter("view"); will(returnValue(null)); } }); HttpServletResponse response = mockery.mock(HttpServletResponse.class, "response" + counter); RequestInfo webRequest = new RequestInfo(context, request, response); return execution.execute(webRequest, counter); }
public void setExecutionLogAndTrackingId(String stopResponderId, CompositeExecutionLog log) throws Exception { } @Override public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) throws Exception { } @Override public void newTestStarted(TestPage test, TimeMeasurement timeMeasurement) throws Exception { } @Override public void testOutputChunk(String output) throws Exception { } @Override public void testComplete(TestPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws Exception { } @Override public void writeHead(String pageType) throws Exception { } }
public void testBasic() throws IOException, KeeperException, InterruptedException { String name = "/foo"; zk.create(name, name.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); Stat stat; stat = newStat(); zk.getData(name, false, stat); assertEquals(stat.getCzxid(), stat.getMzxid()); assertEquals(stat.getCtime(), stat.getMtime()); assertEquals(0, stat.getCversion()); assertEquals(0, stat.getVersion()); assertEquals(0, stat.getAversion()); assertEquals(0, stat.getEphemeralOwner()); assertEquals(name.length(), stat.getDataLength()); assertEquals(0, stat.getNumChildren()); }
public void testReferencesOnPageOne_9() throws Exception { checkChangesOnPageOne("Stuff .SubWiki.PageTwo.NoPage Stuff\n", "Stuff .SubWiki.PageThree.NoPage Stuff\n"); }
public void testHtmlWithMethodWithDefinedScope() throws Exception { WikiPage somePage = context.getRootPage().getChildPage("SomePage"); WikiPageUtil.addPage(context.getRootPage(), PathParser.parse("Test1"), "|Some method|"); WikiPage suite11 = WikiPageUtil.addPage(somePage, PathParser.parse("Suite11"), "some content"); WikiPageUtil.addPage(suite11, PathParser.parse("Suite11Test1"), "|Some method|"); String content = getResponseContentUsingMethodName("|Some method|", "Suite11"); assertHasRegexp("SomePage.Suite11.Suite11Test1", content);
public void convertArrayOfIntegersThrowsExceptionIfNotInteger() throws Exception { Object result = caller.call("testSlim", "setIntegerArray", "[1 ,2, 3,4, hello]"); String resultString = (String) result; assertTrue(resultString, resultString.contains("message:<<CANT_CONVERT_TO_INTEGER_LIST>>")); }
public void receivedStatus(OperationStatus status) { rv.set(val, status); }
boolean isCancelled();  boolean hasErrored();  OperationException getException();  OperationCallback getCallback();  void cancel();  OperationState getState();  ByteBuffer getBuffer();  void writing();  void writeComplete();  void initialize();  void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data);  MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to);  void timeOut();  boolean isTimedOut();  boolean isTimedOut(long ttlMillis);  boolean isTimedOutUnsent();  long getWriteCompleteTimestamp();  byte[] getErrorMsg();  void addClone(Operation op);  int getCloneCount();  void setCloneCount(int count); }
public KeeperException.Code handleAuthentication(ServerCnxn cnxn, byte[] authData) { LOG.info("Authentication failed"); return KeeperException.Code.AUTHFAILED; }
public void testNettyUsesDaemonThreads() throws Exception { assertTrue(serverFactory instanceof NettyServerCnxnFactory, "Didn't instantiate ServerCnxnFactory with NettyServerCnxnFactory!");
protected FixtureWithNamedSystemUnderTestBase createNamedFixture() { createFixtureInstance(namedFixtureName()); return (FixtureWithNamedSystemUnderTestBase) getVerifiedInstance(); }
private void doRolls() { for (int roll = 0; roll < 21; roll++) doRoll(roll);
public void shouldRememberThePageNameAndDateAndRunTime() throws Exception { formatter = newNonWritingCachingSuiteXmlFormatter(); formatter.announceNumberTestsToRun(1);
public String toString() { StringBuilder buf = new StringBuilder(); if (isDefault) { buf.append("DEFAULT"); } else { buf.append("RULE:["); buf.append(numOfComponents); buf.append(':'); buf.append(format); buf.append(']'); if (match != null) { buf.append('('); buf.append(match); buf.append(')'); } if (fromPattern != null) { buf.append("s/"); buf.append(fromPattern); buf.append('/'); buf.append(toPattern); buf.append('/'); if (repeat) { buf.append('g'); } } } return buf.toString(); }
private HtmlTag makeRow(String cellType, HtmlElement input, String name, String author, String age) { HtmlTag row = new HtmlTag("tr"); row.add(new HtmlTag(cellType, input)); row.add(new HtmlTag(cellType, name)); row.add(new HtmlTag(cellType, author)); row.add(new HtmlTag(cellType, age)); return row; }
public FileDownload mp3() { return new FileDownload(new File("/Users/filipesabella/Desktop/slides_img/1-13 13 Ghosts II.mp3"), "audio/mpeg", "ghosts_13.mp3", true); }
public void run(){ try { QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[0], peerTmpdir[0], peerClientPort[0], 3, 0, 1000, 2, 2);
public void testSingleReplacementHtml() throws Exception { String content = getResponseContentUsingSearchReplaceString("something", "replacedthing"); assertThat(content, containsString("replacedthing")); assertThat(content, containsString("SomePage")); }
public TestExecutionReport.TestResult getTestResult(SuiteExecutionReport.PageHistoryReference reference) throws IOException, SAXException { PageHistory pageHistory = testHistory.getPageHistory(reference.getPageName()); Date date = new Date(reference.getTime()); TestResultRecord record = pageHistory.get(date); return makeTestExecutionReport(record.getFile()).getResults().get(0); }
public XmlSerializer include(String fieldName) {
public void setup() { this.mockery = new Mockery(); this.registry = new DefaultResourceRegistry(null); }
public Long fromString(String arg) { try { return !StringUtils.isBlank(arg) ? Long.valueOf(arg) : null;
protected void wasCancelled() { getLogger().debug("was cancelled."); }
public void testSetUpAndTearDown() throws Exception { WikiPage setUp = crawler.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = crawler.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); SuiteContentsFinder finder = new SuiteContentsFinder(suite, null, root); List<WikiPage> testPages = finder.getAllPagesToRunForThisSuite(); surrounder.surroundGroupsOfTestPagesWithRespectiveSetUpAndTearDowns(testPages); assertEquals(3, testPages.size()); assertSame(setUp, testPages.get(0)); assertSame(tearDown, testPages.get(2)); }
String getCellResult(int col,int row); void appendChildTable(int row, Table table); void setTestStatusOnRow(int row, ExecutionResult testStatus); void setName(String tableName); void setCell(int col, int row, Response response); void appendToCell(int col, int row, Response response); }
private String createInstance(StatementExecutor caller) { String instanceName = getWord(1); String className = getWord(2); caller.create(instanceName, className); return null; }
public void deleteDirectory(File dir) { Repository repository = getRepository(dir); persistence.deleteDirectory(dir); Git git = new Git(repository); try { git.rm()
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root"); instructions = new ArrayList<Instruction>(); testContext = new MockSlimTestContext(); }
public void testResponseWithNoMatchesWillReturnEmptyPageList() throws Exception { MockRequest request = setupRequest(); request.addInput(PAGE_TYPE_ATTRIBUTE, "Suite,Static"); String content = invokeResponder(request); assertSubString("No pages", content); }
public void setup() { String testDataPath = System.getProperty("test.data.dir", "build/test/data"); System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY, "org.apache.zookeeper.server.NettyServerCnxnFactory"); System.setProperty(ZooKeeper.ZOOKEEPER_CLIENT_CNXN_SOCKET, "org.apache.zookeeper.ClientCnxnSocketNetty"); System.setProperty(ZooKeeper.SECURE_CLIENT, "true"); System.setProperty(X509Util.SSL_KEYSTORE_LOCATION, testDataPath + "/ssl/testKeyStore.jks"); System.setProperty(X509Util.SSL_KEYSTORE_PASSWD, "testpass"); System.setProperty(X509Util.SSL_TRUSTSTORE_LOCATION, testDataPath + "/ssl/testTrustStore.jks"); System.setProperty(X509Util.SSL_TRUSTSTORE_PASSWD, "testpass"); System.setProperty("zookeeper.authProvider.x509", "org.apache.zookeeper.server.auth.X509AuthenticationProvider"); }
private boolean isExcluded( String name, String[] excludes ) { for (String exclude : excludes) { if (SelectorUtils.matchPath(exclude, name)) { return true; } } return false; }
public String toString(C collection) { if (collection == null) return NULL_VALUE; int size = collection.size(); List<String> ret = new ArrayList<>(size); for (T item : collection) { ret.add(getElementString(item)); } return ListConverterHelper.toString(ret); }
private double calcPercentOfTotalTests(int value) { int totalTests = testsPassed + testsUnrun + testsFailed; return ((double)(Math.round(((1000.0 * value)/totalTests))))/10; }
public void initialize() { ByteBuffer bb = ByteBuffer.allocate(data.length + KeyUtil.getKeyBytes(key).length + OVERHEAD); setArguments(bb, type, key, flags, exp, data.length); assert bb.remaining() >= data.length + 2 : "Not enough room in buffer," + " need another " + (2 + data.length - bb.remaining()); bb.put(data); bb.put(CRLF); bb.flip(); setBuffer(bb); }
protected MultipleTestsRunner newMultipleTestsRunner(List<WikiPage> pages) { final PagesByTestSystem pagesByTestSystem = new PagesByTestSystem(pages, context.root); MultipleTestsRunner runner = new MultipleTestsRunner(pagesByTestSystem, context.runningTestingTracker, context.testSystemFactory, context.variableSource); runner.setRunInProcess(debug); runner.setEnableRemoteDebug(remoteDebug); runner.addExecutionLogListener(log); addFormatters(runner); return runner; }
private String[] findSourceFiles() { if (sourceFiles_ == null) { if(includes.isEmpty()) { includes.add("**/*.scala"); } sourceFiles_ = MainHelper.findFiles(sourceDir, includes.toArray(new String[includes.size()]), excludes.toArray(new String[excludes.size()])); } return sourceFiles_; }
public void testSuiteWithTagWithIntersect() throws Exception { SuiteFilter filter = new SuiteFilter(null, null, "good, better", null); WikiPage goodSuite = pageBuilder.addPage(root, PathParser.parse("MySuite"), "the suite"); PageData data = goodSuite.getData(); data.setAttribute("Suite"); data.setAttribute(PageData.PropertySUITES, "good, better"); goodSuite.commit(data); WikiPage goodSuiteTest = addTestPage(goodSuite, "GoodTest", "Good Test"); assertTrue(filter.getFilterForTestsInSuite(goodSuite).isMatchingTest(goodSuiteTest)); assertFalse(filter.getFilterForTestsInSuite(root).isMatchingTest(goodSuiteTest)); }
protected void startRequestThrottler() { requestThrottler = createRequestThrottler(); requestThrottler.start(); }
public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) { Instruction instruction = assertion.getInstruction(); Expectation expectation = assertion.getExpectation(); TestExecutionReport.InstructionResult instructionResult = new TestExecutionReport.InstructionResult(); instructionResults.add(instructionResult); String id = instruction.getId(); instructionResult.instruction = instruction.toString(); try { TestExecutionReport.Expectation expectationResult = new TestExecutionReport.Expectation();
void writeSameEntryBatch(byte[] data, int times) throws InterruptedException, SQLException{ start = System.currentTimeMillis(); int count = times; String content = new String(data); System.out.println("Data: " + content + ", " + data.length); while(count-- > 0){ stmt.addBatch("insert into data(content) values(\"" + content + "\");"); } LOG.info("Finished writing batch SQL command in ms: " + (System.currentTimeMillis() - start)); start = System.currentTimeMillis(); stmt.executeBatch(); System.out.println("Finished " + times + " writes in ms: " + (System.currentTimeMillis() - start)); LOG.info("Ended computation"); }
private void appendProperlyCapitalized(char c) { disgracedName.append(capitalizeNextWord ? toUpperCase(c) : c); capitalizeNextWord = false; }
public static void writeDynamicConfig(final String dynamicConfigFilename, final QuorumVerifier qv, final boolean needKeepVersion) throws IOException { new AtomicFileWritingIdiom(new File(dynamicConfigFilename), new WriterStatement() { @Override
private HtmlPage makeHtml() { PageCrawler pageCrawler = page.getPageCrawler(); WikiPagePath fullPath = pageCrawler.getFullPath(page); String fullPathName = PathParser.render(fullPath); HtmlPage htmlPage = context.pageFactory.newPage(); htmlPage.setTitle(getTitle() + ": " + fullPathName); htmlPage.setPageTitle(new PageTitle(getTitle(), fullPath, data.getAttribute(PageData.PropertySUITES))); htmlPage.setNavTemplate("testNav.vm"); htmlPage.put("actions", new WikiPageActions(page).withPageHistory()); htmlPage.setMainTemplate(mainTemplate()); htmlPage.put("testExecutor", new TestExecutor()); htmlPage.setFooterTemplate("wikiFooter.vm"); htmlPage.put("footerContent", new WikiPageFooterRenderer()); WikiImportProperty.handleImportProperties(htmlPage, page, page.getData()); return htmlPage; }
public void setUp() throws Exception { sampleInputStream = new ByteArrayInputStream(sampleXml.getBytes()); properties = new WikiPageProperties(sampleInputStream); }
public void addSource(String f) throws IOException { LogSource s = null; if (TxnLogSource.isTransactionFile(f)) { s = new TxnLogSource(f); } else { s = new Log4JSource(f); } size += s.size(); endtime = s.getEndTime() > endtime ? s.getEndTime() : endtime; starttime = s.getStartTime() < starttime || starttime == 0 ? s.getStartTime() : starttime; sources.add(s); }
static void printUsage() { System.out.print("Usage:\tjava -cp <classpath> org.apache.zookeeper." + "version.util.VerGen maj.min.micro[-qualifier] rev buildDate outputDirectory"); System.exit(ExitCode.UNEXPECTED_ERROR.getValue()); }
protected Object callMethod(Object instance, Method method, Object[] convertedArgs) throws Throwable { FixtureInteraction interaction = context.getInteraction(); try { Object result;
public void tableWithStopTestMessageException() throws Exception { getResultsForPageContents("!|DT:fitnesse.slim.test.TestSlim|\n" + "|throwStopTestExceptionWithMessage?|\n" + "| once |\n" + "| twice |\n"); assertTestResultsContain("<td>once <span class=\"fail\">Stop Test</span></td>"); assertTestResultsContain("<td>twice <span class=\"ignore\">Test not run</span>"); }
@Test public void translatesHeaders() { for (int i = 1; i < 7; i++) ParserTestHelper.assertTranslatesTo("!" + i + " some text", "<h" + i + " " + "id=\"0\">some text</h" + i + ">" + HtmlElement.endl); ParserTestHelper.assertTranslatesTo("atstart\n!1 text\n", "atstart<br/><h1 " + "id=\"0\">text</h1>" + HtmlElement.endl); ParserTestHelper.assertTranslatesTo("|!1 text|\n", ParserTestHelper.tableWithCell("<h1 " + "id=\"0\">text</h1>")); ParserTestHelper.assertTranslatesTo("| !1 text|\n", ParserTestHelper.tableWithCell("<h1" + " id=\"0\">text</h1>")); ParserTestHelper.assertTranslatesTo("|a|!1 text|\n", ParserTestHelper.tableWithCells(new String[] {"a", "<h1 id=\"0\">text</h1>"}));
public void canExecuteConstructorWithDateArgTypePriorityOverString() throws Throwable {
public void shouldRemoveOldMatchesIfBetterOnesAreFound() throws Exception { comparer.tableMatches.add(new HistoryComparer.MatchedPair(1, 1, 1.0)); comparer.tableMatches.add(new HistoryComparer.MatchedPair(3, 2, 1.0)); comparer.setMatchIfItIsTheTablesBestMatch(1,2,1.1); assertEquals(1.1, comparer.tableMatches.get(0).matchScore, .001); assertEquals(1, comparer.tableMatches.size()); }
StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  KeyedOperation touch(String key, int expiration, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(StoreType t, String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  SASLMechsOperation saslMechs(OperationCallback cb);  SASLAuthOperation saslAuth(String[] mech, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  SASLStepOperation saslStep(String[] mech, byte[] challenge, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  Collection<Operation> clone(KeyedOperation op);  TapOperation tapBackfill(String id, long date, OperationCallback cb);  TapOperation tapCustom(String id, RequestMessage message, OperationCallback cb);  TapOperation tapAck(TapOpcode opcode, int opaque, OperationCallback cb); }
public void next(ResourceMethod method, Object resourceInstance) throws InterceptionException { if (nextInterceptor == interceptors.size()) { logger.debug("All registered interceptors have being called. End of VRaptor Request Execution."); return; } InterceptorHandler handler = interceptors.get(nextInterceptor++); handler.execute(this, method, resourceInstance); }
public abstract void addOption(String key, boolean value);
private static boolean supportedOnThisDevice() {
public void verifySetAndGet() { int iterations = 20; for (int i = 0; i < iterations; i++) { mc.set("test" + i, 0, "test" + i); } for (int i = 0; i < iterations; i++) { Object res = mc.get("test" + i);
private String renderHierarchicalRegracedTOCWidgetByVar() throws Exception { ParentWidget root = new WidgetRoot(parent2); root.addVariable(TOCWidget.REGRACE_TOC, "true"); return new TOCWidget(root, "!contents -R\n").render(); }
@Test public void translatesIncludedSibling() throws Exception { TestRoot root = new TestRoot(); WikiPage currentPage = root.makePage("PageOne", "!include PageTwo"); root.makePage("PageTwo", "page ''two''"); String result = ParserTest.translateTo(currentPage); assertContains(result, "class=\"collapsable\""); assertContains(result, "Included page: <a href=\"PageTwo\">PageTwo</a> <a href=\"PageTwo?edit&amp;redirectToReferer=true&amp;redirectAction=\">(edit)</a>"); assertContains(result, "page <i>two</i>"); }
boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(final CallbackHandler cbh) throws OperationException; }
public void testBigPosts() throws Exception { StringBuffer buffer = new StringBuffer(); for(int i = 0; i < 10; i++) { for(int j = 0; j < 1000; j++) buffer.append(i); } startParsing(); writeToPipe("POST /HelloThere HTTP/1.1\r\n"); writeToPipe("Content-length: 10021\r\n"); writeToPipe("\r\n"); writeToPipe("saveId=12345&content="); writeToPipe(buffer.toString()); finishParsing(); assertEquals(buffer.toString(), request.getInput("content")); }
public <T> T forwardTo(T controller) { return (T) forwardTo(controller.getClass()); }
public void logLine() { LogRecord logRecord = new LogRecord(Level.INFO, "message"); logRecord.setLoggerName("MyLogger"); assertEquals("message" + System.getProperty("line.separator"), new LogFormatter().format(logRecord)); }
public void shouldUseTheProvidedConverterDuringFirstRequest() { Converter found = converters.to(CachedConvertersTest.class, container); MatcherAssert.assertThat(found, Matchers.is(Matchers.equalTo(this.converter))); mockery.assertIsSatisfied(); }
public State checkout(String... filePaths) throws RevisionControlException { return VERSIONED; }
public void singleFailingResultsShouldBeRed() throws Exception { addPageDirectory("TestPage"); File pageDirectory = addPageDirectory("TestPage"); addTestResult(pageDirectory, "20090503110451_6_1_3_0"); makeResponse(); assertHasRegexp("<td class=\"date_field fail\">.*03 May, 09 11:04.*</td>", response.getContent()); }
public void testMalformedRequestLine() throws Exception { startParsing(); writeToPipe("/resource HTTP/1.1\r\n"); writeToPipe("\r\n"); finishParsing(); assertNotNull("no exception was thrown", exception); assertEquals("The request string is malformed and can not be parsed", exception.getMessage()); }
private String html(FitNesseContext context) { HtmlPage page = context.pageFactory.newPage(); page.addTitles("Stopping tests"); page.put("testId", testId); page.put("runningTestingTracker", context.runningTestingTracker); page.setMainTemplate("stopTestPage.vm"); return page.html(); }
private String makeDirectoryListingPage() throws Exception { HtmlPage page = context.htmlPageFactory.newPage(); page.setTitle("Files: " + resource); page.header.use(HtmlUtil.makeBreadCrumbsWithPageType(resource, "/", "Files Section")); page.actions.use(makeFrontPageLink()); page.main.use(makeRightColumn()); return page.html(); }
public void buildTestSystemNameWhenTestSystemIsUnknownDefaultsToFit() throws Exception { WikiPage testPage = WikiPageUtil.addPage(root, PathParser.parse("TestPage"), "!define TEST_SYSTEM {X}\n"); WikiPageDescriptor descriptor = new WikiPageDescriptor(testPage, false, false, ""); MockClientBuilder clientBuilder = new MockClientBuilder(descriptor); String testSystemName = clientBuilder.getTestSystemName(); assertEquals("X:" + MOCK_TEST_RUNNER, testSystemName); }
public synchronized Long convertAcls(List<ACL> acls) { if (acls == null) return -1L;
StereotypedClass getResource();  String urlFor(Class<?> type, Method m, Object params);  boolean canHandle(Class<?> type, Method method); }
public boolean isProxy(Class<?> clazz) { return hibernateJarExists() && hibernateProxyClass.isAssignableFrom(clazz); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root"); crawler = root.getPageCrawler(); WikiPageUtil.addPage(root, PathParser.parse("TestPage"), ""); childName = "ChildPage"; String childContent = "child content"; String pagetype = ""; request = new MockRequest(); request.setResource("TestPage"); request.addInput("pageName", childName); request.addInput("pageContent", childContent); request.addInput("pageType", pagetype); context = FitNesseUtil.makeTestContext(root); responder = new AddChildPageResponder(); path = PathParser.parse("TestPage.ChildPage"); }
public void shouldThrowInterceptionExceptionIfIOExceptionOccurs() throws Exception { doThrow(new IOException()).when(chain).doFilter(webRequest, webResponse); notFoundHandler.couldntFind(request); }
public void testCreateEphemeral(boolean localSessionEnabled) throws Exception { if (localSessionEnabled) { qu.enableLocalSession(true); } qu.startAll(); QuorumPeer leader = qu.getLeaderQuorumPeer(); ZooKeeper zk = new ZooKeeper(qu.getConnectString(leader), CONNECTION_TIMEOUT, this); CreateRequest createRequest = new CreateRequest("/impossible", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL.toFlag()); ByteArrayOutputStream baos = new ByteArrayOutputStream(); BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos); createRequest.serialize(boa, "request"); ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());
public Response makeResponse(FitNesseContext context, Request request) throws Exception { InputStreamResponse response = new InputStreamResponse(); determineLastModifiedInfo(); if (isNotModified(request)) return createNotModifiedResponse(); else { response.setBody(requestedFile); setContentType(requestedFile, response); response.setLastModifiedHeader(lastModifiedDateString); } return response; }
public static FitNesseContext makeTestContext(WikiPage root, int port) { return makeTestContext(root, ".", FitNesseUtil.base, port, new PromiscuousAuthenticator()); }
void appendToCell(int col, int row, String message); int getRowCount(); int getColumnCountInRow(int row); @Deprecated void setCell(int col, int row, String contents); int addRow(List<String> list); void appendContent(int row, String contents); String getCellResult(int col,int row); void appendChildTable(int row, Table table); @Deprecated void setTestStatusOnRow(int row, ExecutionResult testStatus);
private Node bitXorExpr(boolean inForInit) throws IOException, ParserException { Node pn = bitAndExpr(inForInit); while (matchToken(Token.BITXOR)) { decompiler.addToken(Token.BITXOR); pn = nf.createBinary(Token.BITXOR, pn, bitAndExpr(inForInit)); } return pn; }
void addReason(String reason) { if (!reasons.contains(reason)) reasons.add(reason);
public boolean isPartOfEnsemble() { return peer.getView().containsKey(peer.getMyId()); }
@Test public void translatesCollapsed() throws Exception { TestRoot root = new TestRoot(); WikiPage includingPage = root.makePage("PageOne", "!include -c PageTwo"); root.makePage("PageTwo", "two"); String result = ParserTestHelper.translateTo(includingPage); assertContains(result, "class=\"hidden\""); }
public Symbol parseWithParent(String input, Parser parent) { return new Parser(parent, currentPage, new Scanner(new TextMaker(currentPage, currentPage.getNamedPage()), input), new ParseSpecification().provider(specification)).parse(); }
public void serialize() { } } @Test(expected=ValidationException.class) public void onSerializerResultsShouldBeAbleToCreateValidationInstancesEvenIfChildClassesUsesCovariantType() throws Exception { JSONSerialization serialization = mock(JSONSerialization.class); serializerBuilder = new RandomSerializer(); when(result.use(JSONSerialization.class)).thenReturn(serialization); when(serialization.from(any())).thenReturn(serializerBuilder); try { factory.instanceFor(JSONSerialization.class, errors).from(new Object()); factory.instanceFor(JSONSerialization.class, errors).from(new Object()).include("abc"); factory.instanceFor(JSONSerialization.class, errors).from(new Object()).exclude("abc"); } catch (ValidationException e) { Assert.fail("Should not throw exception yet"); } factory.instanceFor(JSONSerialization.class, errors).from(new Object()).serialize(); } }
int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
String variableValueToHtml(ParsingPage page, String variableValue); void findWhereUsed(SourcePage page, Consumer<String> takeWhereUsed); String changeReferences(SourcePage page, Function<String, Optional<String>> changeReference); static MarkUpSystem make() { return new MarkUpSystemV2(); }
public static void main(String[] args) throws InterruptedException { if (args.length == 1) { try {
public void aZipFileIsCreatedAfterUpdatingPageContent() throws Exception { File dir = page.getFileSystemPath(); String[] filenames = dir.getParentFile().list(); List<String> list = Arrays.asList(filenames); assertTrue(list.contains(firstVersion + ".zip")); }
private FitNesseContext loadContext(Arguments arguments, Properties properties) throws Exception { final Properties allProperties = wrapPropertiesBySystemProperties(properties);
public void testPageVariableTakesPrecedenceOverSystemProperty() { String pageText = "!define TEST_PROPERTY {foo}\n"; System.setProperty("TEST_PROPERTY", "bar"); WikiPage page = makeTestPage(pageText); Descriptor descriptor = new WikiPageDescriptor(page.readOnlyData(), false, getClassPath(page)); assertEquals("foo", descriptor.getVariable("TEST_PROPERTY")); }
public List<Object> query() throws Exception { return buildQueryResponse(getPagesRunInSuite());
public void testQuorumInternal(String addr) throws Exception { ClientBase.setupTestEnv(); final int CLIENT_PORT_QP1 = PortAssignment.unique(); final int CLIENT_PORT_QP2 = PortAssignment.unique(); String server1 = String.format("server.1=%1$s:%2$s:%3$s;%4$s", addr, PortAssignment.unique(), PortAssignment.unique(), CLIENT_PORT_QP1); String server2 = String.format("server.2=%1$s:%2$s:%3$s;%4$s", addr, PortAssignment.unique(), PortAssignment.unique(), CLIENT_PORT_QP2); String quorumCfgSection = server1 + "\n" + server2; MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection); MainThread q2 = new MainThread(2, CLIENT_PORT_QP2, quorumCfgSection); q1.start(); q2.start(); assertTrue(ClientBase.waitForServerUp(addr + ":" + CLIENT_PORT_QP1, CONNECTION_TIMEOUT), "waiting for server 1 being up"); assertTrue(ClientBase.waitForServerUp(addr + ":" + CLIENT_PORT_QP2, CONNECTION_TIMEOUT), "waiting for server 2 being up"); QuorumPeer quorumPeer = q1.main.quorumPeer; int tickTime = quorumPeer.getTickTime(); assertEquals(tickTime * 2, quorumPeer.getMinSessionTimeout(), "Default value of minimumSessionTimeOut is not considered"); assertEquals(tickTime * 20, quorumPeer.getMaxSessionTimeout(), "Default value of maximumSessionTimeOut is not considered"); ZooKeeper zk = new ZooKeeper(addr + ":" + CLIENT_PORT_QP1, ClientBase.CONNECTION_TIMEOUT, this); waitForOne(zk, States.CONNECTED); zk.create("/foo_q1", "foobar1".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); assertEquals(new String(zk.getData("/foo_q1", null, null)), "foobar1"); zk.close(); zk = new ZooKeeper(addr + ":" + CLIENT_PORT_QP2, ClientBase.CONNECTION_TIMEOUT, this); waitForOne(zk, States.CONNECTED); zk.create("/foo_q2", "foobar2".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); assertEquals(new String(zk.getData("/foo_q2", null, null)), "foobar2"); zk.close(); q1.shutdown(); q2.shutdown(); assertTrue(ClientBase.waitForServerDown(addr + ":" + CLIENT_PORT_QP1, ClientBase.CONNECTION_TIMEOUT), "waiting for server 1 down"); assertTrue(ClientBase.waitForServerDown(addr + ":" + CLIENT_PORT_QP2, ClientBase.CONNECTION_TIMEOUT), "waiting for server 2 down");
public void toString_should_use_converters_for_element_values() { List<Object> value = Arrays.asList(1, Collections.singletonMap("a", "b"), 3, null); Converter c = new GenericCollectionConverter<>(ArrayList.class, new DefaultConverter()); String current = c.toString(value); assertEquals("[1, <table class=\"hash_table\"> <tr class=\"hash_row\"> <td class=\"hash_key\">a</td> <td class=\"hash_value\">b</td> </tr> </table>, 3, null]", current.replaceAll("\\s+", " "));
public void ReInit(SimpleCharStream stream, int lexState) { ReInit(stream); SwitchTo(lexState); }
protected Assertion constructFixture(String fixtureName) { return constructInstance(getTableName(), fixtureName, 0, 0); }
public void readyToSend(ResponseSender sender) throws Exception { byte[] bytes = getBytes(); sender.send(bytes); sender.close(); }
public Optional<String> findProperty(String key) { return hasProperty(key) ? Optional.of(properties.get(key)) : Optional.empty(); }
public void shouldInstantiateArrayListForCollectionInterface() throws Exception { mockery.checking(new Expectations() { { one(removal).add(new ArrayList<Object>()); } }); GenericNullHandler handler = new GenericNullHandler(); Collection<?> collection = handler.instantiate(Collection.class, container); assertThat(collection, is(notNullValue())); assertThat(collection, is(instanceOf(ArrayList.class))); }
public void testRenderBefore() throws Exception { AnchorMarkerWidget widget = new AnchorMarkerWidget(null, "stuffbefore.#anchorName and some other stuff"); assertEquals("<a href=\"#anchorName\">.#anchorName</a>", widget.render().trim()); }
@Test public void parsesLinks() throws Exception { ParserTest.assertParses("http://mysite.org", "SymbolList[Link[SymbolList[Text]]]"); }
private void computeNext() { if(++next >= nodes.length) { next=0; } if(next == start) { next=-1;
public void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner) { } @Override public void testOutputChunk(String output) { } @Override public void testComplete(TestSummary testSummary) { } @Override public void exceptionOccurred(Throwable e) { } @Override public void testSystemStopped(TestSystem testSystem, ExecutionLog executionLog, Throwable throwable) { } @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) { } @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) { } }
private String createEvaluationMessage(String value, String expectedValue, String originalContent) { String resultString; if (value.equals(expectedValue)) { resultString = String.format("!style_pass(%s)", originalContent); } else { resultString = String.format("!style_fail(<%s> expected <%s>)", literalize(value), originalContent); } return resultString; }
public void testStandardError() throws Exception { client = new CommandRunningFitClient(this, "java blah", port, new SocketDealer()); client.start(); Thread.sleep(100); client.join(); assertTrue(exceptionOccurred); assertSubString("Error", client.commandRunner.getError()); }
public void staticGlobalClockShouldAutomaticallyBeRestoredAfterConstructorParamsAreExhausted() throws Exception { clock = new TimeAlteringClock(0L); clock.currentClockTimeInMillis(); assertThat(Clock.currentTimeInMillis(), is(not(0L))); }
SyntaxTree parse(ParsingPage page, String content); String variableValueToHtml(ParsingPage page, String variableValue); void findWhereUsed(SourcePage page, Consumer<String> takeWhereUsed); String changeReferences(SourcePage page, Function<String, Optional<String>> changeReference); static MarkUpSystem make() { return new MarkUpSystemV2(); } static MarkUpSystem make(String content) { return MarkUpSystems.STORE.make(content); } static List<String> listVariables(WikiPage page) { ParsingPage parsingPage = new ParsingPage(new WikiSourcePage(page)); MarkUpSystem.make().parse(parsingPage, page.getData().getContent()); return parsingPage.listVariables(); } }
public void shouldAllowGroupsToBeUsedWhenDefiningTheTypeByString() { UriBasedRoute route = new UriBasedRoute("/(*)/(*)"); route.is(V,""); assertThat(route.urlFor(client(null)), is(equalTo("/clients/"))); }
public void LoadData(Context ctx, String filename, String password, String keyfile, UpdateStatus status, boolean debug) throws InvalidCipherTextException, IOException, InvalidKeyFileException, FileNotFoundException { FileInputStream fis; fis = new FileInputStream(filename); LoadData(ctx, fis, password, keyfile, status, debug); mFilename = filename; }
private boolean fileIsValid(String filename, File dir) { if (WikiWordWidget.isWikiWord(filename)) { File f = new File(dir, filename); if (f.isDirectory()) return true; } return false; }
void incrementCounter(String name);  void incrementCounter(String name, int amount);  void decrementCounter(String name);  void decrementCounter(String name, int amount);  void addMeter(String name);  void removeMeter(String name);  void markMeter(String name);  void addHistogram(String name);  void removeHistogram(String name);  void updateHistogram(String name, int amount); }
public void functionCallWithSequentialArgumentProcessingEmbedded() throws Exception { buildInstructionsFor("|set name|Marisa|department and title;|QA|Tester|\n", false); List<CallInstruction> expectedInstructions = list( new CallInstruction("scriptTable_id_0", "scriptTableActor", "setNameDepartmentAndTitle", new Object[]{"Marisa", "QA", "Tester"}) ); assertEquals(expectedInstructions, instructions()); }
public void shouldNotThrowNullPointersOnLogicResult() throws Exception { result.use(logic()).forwardTo(AController.class).aMethod(); result.use(logic()).redirectTo(AController.class).aMethod(); }
public <T> Future<Boolean> touch(final String key, final int exp) { return touch(key, exp, transcoder); }
protected InputArchive createInputArchive(File logFile) throws IOException { if(inputStream==null){ inputStream= new PositionInputStream(new BufferedInputStream(new FileInputStream(logFile))); LOG.debug("Created new input stream " + logFile); ia = BinaryInputArchive.getArchive(inputStream); inStreamCreated(ia,inputStream); LOG.debug("created new input archive " + logFile); } return ia; }
public boolean equals(Object obj) { if (!(obj instanceof DefaultResourceClass)) { return false; } DefaultResourceClass resource = (DefaultResourceClass) obj; return this.type.equals(resource.type); }
public void processResult(int rc, String p, Object ctx, String name) { try { zk.setACL(p, acl, version);
private void verify(String cmd, String expected) throws IOException, SSLContextException { String resp = sendRequest(cmd); LOG.info("cmd " + cmd + " expected " + expected + " got " + resp); Assert.assertTrue("Unexpected response", resp.contains(expected)); }
private void sendPage(WikiPage testPage, FitClient client, boolean includeSuiteSetup) throws IOException, InterruptedException { String pageName = crawler.getRelativeName(page, testPage); TestPage test = new TestPage(testPage); SetupTeardownAndLibraryIncluder.includeInto(test, includeSuiteSetup); String testableHtml = test.getDecoratedData().getHtml(); String sendableHtml = pageName + "\n" + testableHtml; client.send(sendableHtml); }
public void onAuthenticationSucceeded(final FingerprintManagerCompat.AuthenticationResult result) { if (mode == Cipher.ENCRYPT_MODE) {
public Locale findLocale(VRaptorRequest request) { Object obj = find(request, "javax.servlet.jsp.jstl.fmt.locale"); if(obj instanceof String) { return stringToLocale((String) obj);
public String getLastQueuedZxid();  public int getPendingRevalidationCount(); }
public void parse(String input) throws IOException, ParseException { parse(new ByteArrayInputStream(input.getBytes("UTF-8"))); }
public void processResults(InputStream input) throws Exception { StreamReader reader = new StreamReader(input); boolean readingResults = true; while(readingResults) { int bytesToRead = FitProtocol.readSize(reader); if(bytesToRead != 0) { String resultString = reader.read(bytesToRead); PageResult result = PageResult.parse(resultString); formatter.acceptResult(result); } else readingResults = false; } formatter.acceptFinalCount(FitProtocol.readCounts(reader)); }
public void flush() { if (msg != null) { if (count > 1) { LOG.warn("[" + count + " times] " + msg); } else if (count == 1) { LOG.warn(msg); } } msg = null; count = 0; }
void setMaxConcurrentDiffSyncs(int maxConcurrentDiffSyncs); }
private String renderHierarchicalRegracedTOCWidgetByVar() throws Exception { WidgetRoot root = new WidgetRoot(parent2); root.addVariable(TOCWidget.REGRACE_TOC, "true"); return new TOCWidget(root, "!contents -R\n").render(); }
public Object call(String instanceName, String methodName, Object... args) { try { MethodExecutionResult result = null;
public void removeLicensesFromAllFiles() throws Exception { FileUtil.makeDir(dir+"/x"); FileUtil.makeDir(dir+"/x/y"); String[] files = {"f1.java", "x/f2.java", "x/y/f3.java", "x/y/f4.java"}; for (String fileName : files) FileUtil.createFile(dir+"/"+fileName, licenseText+"yyy\n"); LicenseManager.main(new String[] {"-r", dir}); for (String fileName : files) assertEquals("yyy\n", FileUtil.getFileContent(dir+"/"+fileName));
public Response makeResponse(FitNesseContext context, Request request) throws Exception { this.context = context; crawler = context.root.getPageCrawler(); crawler.setDeadEndStrategy(new VirtualEnabledPageCrawler()); resource = request.getResource(); shouldIncludePaths = request.hasInput("includePaths"); suiteFilter = (String) request.getInput("suiteFilter"); return new PuppetResponse(this); }
public void testBasics() throws Exception { CommandRunner runner = new CommandRunner(new String[] { "java", "-cp", "build/classes/main", "fitnesse.testutil.Echo" }, "echo this!", null, executionLogListener); runner.asynchronousStart(); runner.join(); assertHasRegexp(Echo.ECHO_THIS, executionLogListener.stdOut.toString()); assertEquals("", executionLogListener.stdErr.toString()); assertEquals(true, executionLogListener.exceptions.isEmpty()); assertEquals(0, executionLogListener.exitCode); }
private String getHref(WikiPage wikiPage) throws Exception {
private Response makePageHistoryResponse(Request request) throws UnsupportedEncodingException { page.setTitle("Page History"); page.put("pageHistory", pageHistory); page.setNavTemplate("viewNav"); page.put("viewLocation", request.getResource()); page.setMainTemplate("pageHistory"); return makeResponse(request); }
private boolean contains(List<SymbolType> ignoreList, SymbolType candidate) { for (SymbolType ignore: ignoreList) { if (ignore == candidate) return true; } return false; }
private boolean matches(Set<String> words, String value) { return words.contains(value); }
public void setUp() throws Exception { CommandRunningFitClient.TIMEOUT = 5000; client = new CommandRunningFitClient(new CommandRunningFitClient.OutOfProcessCommandRunner( new String[] { "java", "-cp", "build/classes/main", "fit.FitServer", "-v" }, null, new ConsoleExecutionLogListener())); client.addFitClientListener(this); }
public void setUp() throws Exception { } public void tearDown() throws Exception { } public void testGetValueFor() throws Exception { assertEquals(0, Base64.getValueFor((byte) 'A')); assertEquals(26, Base64.getValueFor((byte) 'a')); assertEquals(52, Base64.getValueFor((byte) '0')); } public void testDecodeNothing() throws Exception { assertEquals("", Base64.decode("")); } public void testDecodeOneChar() throws Exception { assertEquals("a", Base64.decode("YQ==")); } public void testDecodeTwoChars() throws Exception { assertEquals("a:", Base64.decode("YTo=")); } public void testDecodeLongSample() throws Exception { assertEquals("Aladdin:open sesame", Base64.decode("QWxhZGRpbjpvcGVuIHNlc2FtZQ==")); } public void testEncodeNothing() throws Exception { assertEquals("", Base64.encode("")); } public void testEncodeOneChar() throws Exception { assertEquals("YQ==", Base64.encode("a")); } public void testEncodeTwoChars() throws Exception { assertEquals("YTo=", Base64.encode("a:")); } public void testEncodeThreeChars() throws Exception { assertEquals("YWJj", Base64.encode("abc")); } public void testEncodeLongSample() throws Exception { assertEquals("QWxhZGRpbjpvcGVuIHNlc2FtZQ==", Base64.encode("Aladdin:open sesame")); } public void testEncodeNuls() throws Exception { assertEquals("AAAA", Base64.encode("\0\0\0")); assertEquals("AAA=", Base64.encode("\0\0")); assertEquals("AA==", Base64.encode("\0")); } public void testEncodeBinary() throws Exception { assertEquals("////", new String(Base64.encode(new byte [] { -1,-1,-1 }))); assertEquals("WqVapVql", new String(Base64.encode(new byte [] { 90,-91,90,-91,90,-91 }))); } public void testDecodeNuls() throws Exception { assertEquals(Base64.decode("AAAA"), "\0\0\0"); assertEquals(Base64.decode("AAA="), "\0\0"); assertEquals(Base64.decode("AA=="), "\0"); } public void testDecodeBinary() throws Exception { assertEquals(Base64.decode("////"), new String(new byte [] { -1,-1,-1 })); assertEquals(Base64.decode("WqVapVql"), new String(new byte [] { 90,-91,90,-91,90,-91 })); } }
WikiPage getPage(WikiPagePath path, PageCrawlerDeadEndStrategy deadEndStrategy); boolean pageExists(WikiPagePath path); WikiPagePath getFullPathOfChild(WikiPagePath childPath); WikiPagePath getFullPath(); String getRelativeName(WikiPage page); WikiPage getRoot(); void traverse(TraversalListener<? super WikiPage> callback); void traversePageAndAncestors(TraversalListener<? super WikiPage> callback); void traverseUncles(String uncleName, TraversalListener<? super WikiPage> callback); WikiPage getSiblingPage(WikiPagePath pathRelativeToSibling); WikiPage findAncestorWithName(String name); WikiPage getClosestInheritedPage(WikiPage context, String pageName); }
@Test public void translatesSetup() throws Exception { TestRoot root = new TestRoot(); WikiPage parent = root.makePage("PageOne"); WikiPage child = root.makePage(parent, "PageTwo", "!include -setup >SetUp"); root.makePage(child, "SetUp", "page ''setup''"); String result = ParserTest.translateTo(child); assertContains(result, "class=\"hidden\""); assertContains(result, "<a href=\"PageOne.PageTwo.SetUp\">"); }
public Optional<String> findVariable(String key) { String value; if (key.equals("PAGE_NAME")) value = namedPage.getName(); else if (key.equals("PAGE_PATH")) value = namedPage.getPath(); else return Optional.empty(); return Optional.ofNullable(value); }
public void tearDown() throws Exception { if (file != null) { file.delete();
public String toString() { final StringBuffer sb = new StringBuffer(); sb.append("Instruction"); sb.append("{id='").append(id).append('\''); sb.append('}'); return sb.toString(); }
public void testShouldDisplayAddToRevisionControlButtonForPages() throws Exception { String pageName = "NotUnderVersionControlPage"; expect(revisionController.isExternalReversionControlEnabled()).andReturn(true); expect(revisionController.execute(STATE, contentAndPropertiesFilePath(ROOT + "/ExternalRoot/" + pageName))).andReturn(UNKNOWN); replay(revisionController); String html = getActionsHtml(pageName); verifyDefaultLinks(html, pageName); assertRevisionControlHeaderPresent(html); assertAddToRevisionControlButtonIsVisible(pageName, html); }
private String processTablesAndGetHtml(List<SlimTable> tables, SlimTable startWithTable, SlimTable nextTable) throws Exception { expectations.clear(); testTables = tables; instructions = createInstructions(tables); if (!exceptions.stopTestCalled()) { instructionResults = slimClient.invokeAndGetResponse(instructions); } String html = createHtmlResults(startWithTable, nextTable); acceptOutputFirst(html);
public void setup() { this.mockery = new Mockery(); this.router = mockery.mock(Router.class); this.response = mockery.mock(HttpServletResponse.class); this.request = mockery.mock(HttpServletRequest.class); this.context = mockery.mock(ServletContext.class); this.logicResult = new DefaultLogicResult(response, context, request,router); }
protected void prepareForExecution() throws Exception { addToResponse(HtmlUtil.getHtmlOfInheritedPage("PageHeader", page)); SetupTeardownIncluder.includeInto(data, true); testableHtml = data.getHtml(); if (testableHtml.length() == 0) testableHtml = handleBlankHtml(); classPath = new ClassPathBuilder().getClasspath(page); }
public void acceptFinalCount(TestSummary testSummary) { output.println(); output.println("Test Pages: " + pageCounts); output.println("Assertions: " + testSummary); }
void registerWikiPageFactories(WikiPageFactoryRegistry wikiPageFactoryRegistry) throws PluginException; void registerFormatters(FormatterRegistry registrar) throws PluginException; void registerTestSystemFactories(TestSystemFactoryRegistry testSystemFactoryRegistry) throws PluginException; void registerSlimTables(SlimTableFactory slimTableFactory) throws PluginException; void registerCustomComparators(CustomComparatorRegistry customComparatorRegistry) throws PluginException; }
protected void setUp() throws Exception { super.setUp(); responder = new RevertResponder(); }
public void testParseWithEmptyQuotes() throws Exception { final ZooKeeper zk = createClient(); ZooKeeperMain zkMain = new ZooKeeperMain(zk); String cmdstring = "create /node ''"; zkMain.cl.parseCommand(cmdstring); Assert.assertEquals("empty quotes should produce arguments", zkMain.cl.getNumArguments(), 3); Assert.assertEquals("create is not taken as first argument", zkMain.cl.getCmdArgument(0), "create"); Assert.assertEquals("/node is not taken as second argument", zkMain.cl.getCmdArgument(1), "/node"); Assert.assertEquals("empty string is not taken as third argument", zkMain.cl.getCmdArgument(2), ""); }
public void setup() { this.mockery = new Mockery(); this.delegate = mockery.mock(ResourceRegistry.class); this.resource = mockery.mock(ResourceMethod.class); this.registry = new CacheBasedResourceRegistry(delegate); this.webRequest = new VRaptorRequest(mockery.mock(HttpServletRequest.class)); mockery.checking(new Expectations() { {
private void hasNamedPageAtIndex(List results, String name, int index) throws Exception { WikiPage p = (WikiPage) results.get(index); assertEquals(name, p.getName()); }
public void shutdown() { } public void unblockQueue() throws RequestProcessorException { if (blocking) { for (Request request : incomingRequests) { next.processRequest(request); } blocking = false; } } public static DelayRequestProcessor injectDelayRequestProcessor(FollowerZooKeeperServer zooKeeperServer) { RequestProcessor finalRequestProcessor = zooKeeperServer.commitProcessor.nextProcessor; DelayRequestProcessor delayRequestProcessor = new DelayRequestProcessor(finalRequestProcessor); zooKeeperServer.commitProcessor.nextProcessor = delayRequestProcessor; return delayRequestProcessor; } }
public static String makePageHtml(ReadOnlyPageData pageData) { StringBuffer buffer = new StringBuffer(); buffer.append(getHeaderPageHtml(pageData.getWikiPage())); buffer.append(pageData.getHtml()); return buffer.toString(); }
private List<Object> toList(List<Instruction> instructions) { final List<Object> statementsAsList = new ArrayList<Object>(instructions.size()); for (final Instruction instruction: instructions) { ToListExecutor executor = new ToListExecutor() { @Override public void addPath(String path) throws SlimException { statementsAsList.add(list(instruction.getId(), ImportInstruction.INSTRUCTION, path)); } @Override public Object callAndAssign(String symbolName, String instanceName, String methodsName, Object... arguments) throws SlimException { List<Object> list = ListUtility.list((Object) instruction.getId(), CallAndAssignInstruction.INSTRUCTION, symbolName, instanceName, methodsName); addArguments(list, arguments); statementsAsList.add(list); return null; } @Override public Object call(String instanceName, String methodName, Object... arguments) throws SlimException { List<Object> list = ListUtility.list((Object) instruction.getId(), CallInstruction.INSTRUCTION, instanceName, methodName); addArguments(list, arguments); statementsAsList.add(list); return null; } @Override public void create(String instanceName, String className, Object... constructorArgs) throws SlimException { List<Object> list = ListUtility.list((Object) instruction.getId(), MakeInstruction.INSTRUCTION, instanceName, className); addArguments(list, constructorArgs); statementsAsList.add(list); } }; instruction.execute(executor); } return statementsAsList; }
public void gettingPrecompiledScenarioWidgetsForChildLibraryPage() throws Exception { WikiPage suitePage = crawler.addPage(root, PathParser.parse("MySuite"), "my suite content"); crawler.addPage(suitePage, PathParser.parse("ScenarioLibrary"), "child library"); HtmlSlimTestSystem sys = new HtmlSlimTestSystem(suitePage, dummyListener); ParsedPage scenarios = sys.getPreparsedScenarioLibrary(); Symbol includeParent = getCollapsibleSymbol(scenarios.getSyntaxTree()); assertNotNull(includeParent); assertEquals("Precompiled Libraries", ParserTestHelper.serializeContent(includeParent.childAt(0))); Symbol childLibraryInclude = getIncludeSymbol(includeParent.childAt(1)); assertTrue(ParserTestHelper.serializeContent(childLibraryInclude).contains("child library")); }
public void testGetVersions() throws Exception { Map<SocketAddress, String> vs=client.getVersions(); assertEquals(1, vs.size()); Map.Entry<SocketAddress, String> me=vs.entrySet().iterator().next(); assertEquals("/127.0.0.1:11212", me.getKey().toString()); assertNotNull(me.getValue()); }
private void updateSocketAddresses() { Socket socket = ((SocketChannel) sockKey.channel()).socket(); localSocketAddress = socket.getLocalSocketAddress(); remoteSocketAddress = socket.getRemoteSocketAddress(); }
public void normalSuiteRunProducesSuiteResultFile() throws Exception { TestSummary counts = new TestSummary(2,0,0,0); XmlFormatter.setTestTime("12/5/2008 01:19:00"); String resultsFileName = String.format("%s/SuitePage/20081205011900_%d_%d_%d_%d.xml", context.getTestHistoryDirectory(), counts.getRight(), counts.getWrong(), counts.getIgnores(), counts.getExceptions()); File xmlResultsFile = new File(resultsFileName); if (xmlResultsFile.exists()) xmlResultsFile.delete(); addTestToSuite("SlimTest", simpleSlimDecisionTable); runSuite(); FileInputStream xmlResultsStream = new FileInputStream(xmlResultsFile); XmlUtil.newDocument(xmlResultsStream); xmlResultsStream.close(); xmlResultsFile.delete(); }
public void portStartsAtSlimPortVariable() throws Exception { WikiPage pageWithSlimPortDefined = WikiPageUtil.addPage(root, PathParser.parse("PageWithSlimPortDefined"), "!define SLIM_PORT {9000}\n"); for (int i = 1; i < 15; i++) { SlimTestSystem.SlimDescriptor descriptor = new SlimTestSystem.SlimDescriptor(TestSystem.getDescriptor(pageWithSlimPortDefined, null, false));
public String toString() { StringBuilder str = new StringBuilder(); str.append(major) .append('.') .append(minor) .append('.') .append(bugfix) ; if ((modifier != null) && (modifier.length() > 0)){ str.append(modifier); } return str.toString(); }
private static Compilers makeCompilers( ScalaInstance scalaInstance, File javaHome, File compilerBridgeJar) { ScalaCompiler scalaCompiler = new AnalyzingCompiler( scalaInstance,
public void shouldDeferToContainerIfStaticFile() throws IOException, ServletException { VRaptor raptor = new VRaptor(); final HttpServletRequest request = mockery.mock(HttpServletRequest.class); final HttpServletResponse response = mockery.mock(HttpServletResponse.class); final StaticContentHandler handler = mockery.mock(StaticContentHandler.class); final FilterChain chain = mockery.mock(FilterChain.class); mockery.checking(new Expectations() { { one(handler).requestingStaticFile(request); will(returnValue(true)); one(handler).deferProcessingToContainer(chain, request, response); } }); raptor.init(new DoNothingProvider(), handler); raptor.doFilter(request, response, chain); mockery.assertIsSatisfied(); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root"); crawler = root.getPageCrawler(); context = new FitNesseContext(root); request = new MockRequest(); responder = getSlimResponder(); responder.setFastTest(true); testPage = crawler.addPage(root, PathParser.parse("TestPage"), "!path classes"); SlimTestSystem.clearSlimPortOffset(); }
public static HtmlTag makeBreadCrumbsWithCurrentPageNotLinked( String trail ) throws Exception { return makeBreadCrumbsWithCurrentPageNotLinked(trail, "."); }
private String makeHtml(FitNesseContext context) { HtmlPage page = context.htmlPageFactory.newPage(); HtmlUtil.addTitles(page, "Not Found:" + resource); page.setMainContent(makeRightColumn(resource)); return page.html(); }
public void testThatExampleAtEndOfNameSetsTestProperty() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("PageExample")); PageData data = new PageData(page); assertTrue(data.hasAttribute("Test")); }
public void stop() throws Exception { if (theService != null) { theService.close();
protected void addToParent() { if (this.parent != null) this.parent.addChild(this);
protected void addTestInProgressFormatter() throws Exception { formatters.add(new PageInProgressFormatter(page)); }
synchronized boolean finish() { if (LOG.isDebugEnabled()) { LOG.debug("Calling finish for " + sid); } if(!running){  return running; } running = false; closeSocket(sock);
public static void cleanUpEnvironment() throws InterruptedException, IOException { System.clearProperty("zookeeper.admin.enableServer"); System.clearProperty("zookeeper.4lw.commands.whitelist"); System.clearProperty("java.security.auth.login.config"); Configuration.getConfiguration().refresh(); }
@Test public void scansCenters() { ParserTest.assertScans("!c some text\n", "CenterLine=!c,Whitespace= ,Text=some,Whitespace= ,Text=text,Newline=\n"); ParserTest.assertScans("!C more text\n", "CenterLine=!C,Whitespace= ,Text=more,Whitespace= ,Text=text,Newline=\n"); ParserTest.assertScans("!ctext\n", "CenterLine=!c,Text=text,Newline=\n"); ParserTest.assertScans("!c text\n", "CenterLine=!c,Whitespace= ,Text=text,Newline=\n"); ParserTest.assertScans(" !c text\n", "Whitespace= ,Text=!c,Whitespace= ,Text=text,Newline=\n"); ParserTest.assertScans("!c text", "CenterLine=!c,Whitespace= ,Text=text"); }
public void sendSync(LearnerSyncRequest r){ QuorumPacket qp = new QuorumPacket(Leader.SYNC, 0, null, null); r.fh.queuePacket(qp); }
void setDeadEndStrategy(PageCrawlerDeadEndStrategy strategy); boolean pageExists(WikiPage context, WikiPagePath path) throws Exception; WikiPagePath getFullPathOfChild(WikiPage parent, WikiPagePath childPath) throws Exception; WikiPagePath getFullPath(WikiPage page) throws Exception; WikiPage addPage(WikiPage context, WikiPagePath path, String content) throws Exception; WikiPage addPage(WikiPage context, WikiPagePath path) throws Exception; String getRelativeName(WikiPage base, WikiPage page) throws Exception; boolean isRoot(WikiPage page) throws Exception; WikiPage getRoot(WikiPage page) throws Exception; void traverse(WikiPage root, FitNesseTraversalListener pageCrawlerTest) throws Exception; }
public Set<Long> globalSessions() { return sessionsById.keySet(); }
public static String joinPaths(String... elements) { StringBuilder builder = new StringBuilder(); boolean first = true; for (String element : elements) {
String getPath(); String getContent(); boolean targetExists(String wikiWordPath); String makeFullPathOfTarget(String wikiWordPath); String findParentPath(String targetName); Maybe<SourcePage> findIncludedPage(String pageName); Collection<SourcePage> getAncestors(); Collection<SourcePage> getChildren(); boolean hasProperty(String propertyKey); String getProperty(String propertyKey); String makeUrl(String wikiWordPath); }
public void setup() { MockitoAnnotations.initMocks(this); result = new DefaultResult(request, container, null, extractor); }
public void testSystemStarted(TestSystem testSystem) { resultsListener.testSystemStarted(testSystem); }
public void shouldBeAbleToConvertNull() { assertThat((Float) converter.convert(null, float.class, bundle), is(equalTo(0f))); }
private KeyPair createKeyPair() throws NoSuchProviderException, NoSuchAlgorithmException { KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA", BouncyCastleProvider.PROVIDER_NAME); keyPairGenerator.initialize(4096); KeyPair keyPair = keyPairGenerator.genKeyPair(); return keyPair; }
private HtmlTag makeDirectoryForm() throws Exception { HtmlTag dirForm = HtmlUtil.makeFormTag("get", "/" + resource); dirForm.addAttribute("class", "right"); dirForm.add(HtmlUtil.makeInputTag("hidden", "responder", "createDir")); dirForm.add("<!--create directory form-->"); dirForm.add(HtmlUtil.makeSpanTag("caps", "Create a directory:")); dirForm.add(HtmlUtil.BR); dirForm.add(HtmlUtil.makeInputTag("text", "dirname", "")); dirForm.add(HtmlUtil.BR); dirForm.add(HtmlUtil.makeInputTag("submit", "", "Create")); return dirForm; }
public void testGetBulkVararg() throws Exception { assertEquals(0, client.getBulk("test1", "test2", "test3").size()); client.set("test1", 5, "val1"); client.set("test2", 5, "val2"); Map<String, Object> vals=client.getBulk("test1", "test2", "test3"); assertEquals(2, vals.size()); assertEquals("val1", vals.get("test1")); assertEquals("val2", vals.get("test2")); }
protected void processTable(SlimTable table) throws IOException { List<SlimAssertion> assertions = createAssertions(table); Map<String, Object> instructionResults; if (!stopTestCalled) { instructionResults = slimClient.invokeAndGetResponse(SlimAssertion.getInstructions(assertions)); } else { instructionResults = Collections.emptyMap(); } evaluateTables(assertions, instructionResults); }
public Response makeResponse(FitNesseContext context, Request request) throws FileNotFoundException { if (!requestedFile.exists()) return new NotFoundResponder().makeResponse(context, request); InputStreamResponse response = new InputStreamResponse(); determineLastModifiedInfo(); if (isNotModified(request)) return createNotModifiedResponse(); else { response.setBody(requestedFile); setContentType(requestedFile, response); response.setLastModifiedHeader(lastModifiedDateString); } return response; }
protected MapperWrapper wrapMapper(MapperWrapper next) { return new VRaptorClassMapper(next, extractor); }
public void testAuthenticated() throws Exception { authenticator.authenticated = true; makeResponder(); assertEquals(DummySecureResponder.class, responderType); }
protected List<SlimTable> createSlimTables(TestPage pageToTest) { tableScanner = scanTheTables(pageToTest.getDecoratedData()); return createSlimTables(tableScanner); }
private void formsSimpleOneElementList(String itemText) throws Exception { ListWidget list = new ListWidget(widgetRoot, " *" + itemText); assertTrue("should not be ordered", !list.isOrdered()); assertEquals(0, list.getLevel()); assertEquals(1, list.numberOfChildren()); WikiWidget child = list.nextChild(); assertEquals(ListItemWidget.class, child.getClass()); ListItemWidget item = (ListItemWidget) child; assertEquals(1, item.numberOfChildren()); child = item.nextChild(); assertEquals(TextWidget.class, child.getClass()); assertEquals(itemText, ((TextWidget) child).getText()); }
public SignatureVisitor visitTypeArgument(final char wildcard) { if (argumentStack % 2 == 0) { ++argumentStack; buf.append('<'); } if (wildcard != '=') { buf.append(wildcard); } return this; }
public void shouldUseContainerForNewView() { DefaultResult result = new DefaultResult(request, container); final MyView expectedView = new MyView(); mockery.checking(new Expectations() { { one(container).instanceFor(MyView.class); will(returnValue(expectedView)); } }); MyView view = result.use(MyView.class); MatcherAssert.assertThat(view, Matchers.is(Matchers.equalTo(expectedView))); mockery.assertIsSatisfied(); }
public void create() throws Exception { for (int i = 0; i < numberOfRecords; i++) { zkClient.create(getPath(i), "0123456789".getBytes(),
public static String disgraceMethodName(String name) { return new Disgracer(name).disgraceMethodNameIfNecessary(); }
private void injectRequest(HttpServletRequest request, ContainerRequest container) { container.getProperties().put(DefaultJersey.REQUEST, request); }
public void set(final String field, final String value) { super.set(field, value); }
public static ObserveResponse valueOf(byte b) { switch (b) { case (byte) 0x00:
public String getName();  public int getQuorumSize();  public boolean isSslQuorum();  public boolean isPortUnification(); }
public void run() { while (!response.isReadyToSend()) { try { synchronized (response) { response.notifyAll(); response.wait(); } } catch (InterruptedException e) {
void start(); void stop();  Request prepareFor(HttpServletRequest request, HttpServletResponse response); }
private void includeSetupsTeardownsAndLibrariesBelowTheSuite(WikiPage suitePage) { String pageName = testPage.getName(); includeScenarioLibraryBelow(suitePage);
public CertificateList[] toCertificateListArray() { CertificateList[] result = new CertificateList[content.size()]; for (int i = 0; i != result.length; i++) { result[i] = CertificateList.getInstance(content.getObjectAt(i)); } return result; }
public void clearChildren() { children = new ArrayList(); }
VersionNumber versionCompat(); Set<Artifact> findLibraryAndDependencies() throws Exception; Set<Artifact> findCompilerAndDependencies() throws Exception; String compilerMainClassName(String override, boolean useFsc) throws Exception; String consoleMainClassName(String override) throws Exception; String apidocMainClassName(String override) throws Exception; }
static boolean isIPv6HexCompressedAddress(final String input) { return IPV6_HEX_COMPRESSED_PATTERN.matcher(input).matches(); }
String toString(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String literalize(String s); String error(String s); String pass(String s); String fail(String s); String ignore(String s); }
protected void assertOrderedNodeNames(String[] names, String[] expected) { int size = names.length; Assert.assertEquals("The two arrays should be the same size!", names.length, expected.length); SortedSet<ZNodeName> nodeNames = new TreeSet<ZNodeName>(); for (String name : names) { nodeNames.add(new ZNodeName(name)); } int index = 0; for (ZNodeName nodeName : nodeNames) { String name = nodeName.getName();
public boolean contains(Object o) { throw new UnsupportedOperationException(); }
long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void run() { try (SocketChannel sChannel = SocketChannel.open()) { /*
public void testMultiThreadPerf() throws InterruptedException { RequestPathMetricsCollector requestPathMetricsCollector = new RequestPathMetricsCollector(); Random rand = new Random(System.currentTimeMillis()); Long startTime = System.currentTimeMillis(); ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newCachedThreadPool();
public void closeChunks() throws Exception { sender.send( ("0" + CRLF).getBytes() ); }
public void cancel() { if (this.completed) { return; } this.completed = true; synchronized (this) { notifyAll();
private boolean omitBackup() { SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(mCtx); return prefs.getBoolean(mCtx.getString(R.string.omitbackup_key), mCtx.getResources().getBoolean(R.bool.omitbackup_default));
private void checkPubSubDataToTimeOut(PubSubData pubSubData, ResponseHandler responseHandler, long curTime, long timeoutInterval) { if (curTime > pubSubData.requestWriteTime + timeoutInterval) {
public Short convert(String value, Class<? extends Short> type, ResourceBundle bundle) { if (isNullOrEmpty(value)) { return (short) 0; } try { return Short.parseShort(value);
public void testReadTwofish() throws Exception { Context ctx = InstrumentationRegistry.getInstrumentation().getTargetContext(); AssetManager am = ctx.getAssets(); InputStream is = am.open("twofish.kdb", AssetManager.ACCESS_STREAMING); ImporterV3 importer = new ImporterV3(); PwDatabaseV3 db = importer.openDatabase(is, "12345", null); assertTrue(db.algorithm == PwEncryptionAlgorithm.Twofish); is.close();
private String symbolExpression(String symbolName) { return "$" + symbolName; }
public void testSystemStarted(TestSystem testSystem) { } @Override public void newTestStarted(WikiTestPage test, TimeMeasurement timeMeasurement) { } @Override public void testOutputChunk(String output) { } @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) { } @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) { } @Override public void testComplete(WikiTestPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) { } }
public void testGetVersionOfPageData() throws Exception { WikiPage page = pageBuilder.addPage(root, PathParser.parse("PageOne"), "some content"); VersionInfo commitRecord = page.commit(page.getData()); request.addInput("type", "meat"); request.addInput("version", commitRecord.getName()); request.setResource("PageOne"); Object obj = getObject(root, request); assertEquals(PageData.class, obj.getClass()); PageData data = (PageData) obj; assertEquals("some content", data.getContent()); }
public void shouldConvertToZeroWhenEmpty() { assertThat((Double) converter.convert("", double.class, errors, bundle), is(equalTo(0D))); }
public void testStarted(TestPage testPage) { throw new UnsupportedOperationException(); }
public void testIsRunning() throws Exception { context = FitNesseUtil.makeTestContext(null, null, null, FitNesseUtil.PORT); FitNesse fitnesse = new FitNesse(context).dontMakeDirs(); assertFalse(fitnesse.isRunning()); fitnesse.start(); assertTrue(fitnesse.isRunning()); fitnesse.stop(); assertFalse(fitnesse.isRunning()); }
public void tearDown() {
public void printString(String s) { System.out.println(s); }
void close() { state = States.CLOSED; clientCnxnSocket.wakeupCnxn(); }
public void testInvalidCreateModeFlag() throws Exception { List<Integer> expectedResultCodes = new ArrayList<Integer>(); expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue()); expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue()); expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue()); int createModeFlag = 6789; List<Op> opList = Arrays.asList( Op.create("/multi0", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT), Op.create("/multi1", new byte[0], Ids.OPEN_ACL_UNSAFE, createModeFlag), Op.create("/multi2", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT)); String expectedErr = KeeperException.Code.BADARGUMENTS.name(); multiHavingErrors(zk, opList, expectedResultCodes, expectedErr); }
protected void makeFormatter() throws Exception { suiteFormatter = new SuiteHtmlFormatter(html); formatter = suiteFormatter; }
private String createSearchResultsFooter() throws Exception { VelocityContext velocityContext = new VelocityContext(); StringWriter writer = new StringWriter(); Template template = VelocityFactory.getVelocityEngine().getTemplate( "searchResultsFooter.vm"); velocityContext.put("hits", hits); template.merge(velocityContext, writer); return writer.toString(); }
public Object nextElement() { hasNext = false; return getId(); }
public void redirect(String url) { delegate.redirect(url); throwException(); }
public void reset() { throw new UnsupportedOperationException("reset"); }
public void testIsNotUnderRevisionControl() throws Exception { assertTrue("Files in Unknown State should not be under revision control", SVNState.UNKNOWN.isNotUnderRevisionControl()); assertFalse("Files in Checked In State should be under revision control", SVNState.VERSIONED.isNotUnderRevisionControl()); assertTrue("Files in Added State should not be under revision control", SVNState.ADDED.isNotUnderRevisionControl()); assertFalse("Files in Deleted State should be under revision control", SVNState.DELETED.isNotUnderRevisionControl()); }
public void shouldRegisterComponentAlsoUsingImplementedInterfaces() { mockery.checking(new Expectations() {{ one(scanner).getTypesWithMetaAnnotation(Stereotype.class); will(returnValue(Arrays.asList(RunnableComponent.class))); one(registry).register(Runnable.class, RunnableComponent.class); one(registry).register(RunnableComponent.class, RunnableComponent.class); }}); registrar.registerFrom(scanner); mockery.assertIsSatisfied(); }
protected void exception(Exception e) { print("Exception occurred!" + "\n"); print("\t" + e.getMessage() + "\n"); Parse tables = new Parse("span", "Exception occurred: ", null, null); fixture.exception(tables, e); counts.exceptions += 1; fixture.listener.tableFinished(tables); fixture.listener.tablesFinished(counts);
int getQuorumSize();  int getInitLimit();  int getSyncLimit();  void setInitLimit(int initLimit);  void setSyncLimit(int syncLimit);  boolean isSslQuorum();  boolean isPortUnification();  long getObserverElectionDelayMS();  void setObserverElectionDelayMS(long delayMS); boolean getDigestEnabled(); void disableDigest(); }
public ParsingPage copyForNamedPage(WikiPage namedPage) { return new ParsingPage(this.page, namedPage, this.cache); }
public void testRemoteUrlNotFound() throws Exception { String remoteUrl = baseUrl + "PageDoesntExist"; Response response = makeSampleResponse(remoteUrl); MockResponseSender sender = new MockResponseSender(); sender.doSending(response); String content = sender.sentData(); assertSubString("The remote resource, " + remoteUrl + ", was not found.", content); }
public Response makeResponse(FitNesseContext context, Request request) throws Exception { SimpleResponse response = new SimpleResponse(statusCode); HtmlPage html = context.pageFactory.newPage(); html.addTitles("Error Occurred"); html.setMainTemplate("error"); html.put("exception", exception); if (exception != null) html.put("exception", exception); if (message != null) html.put("message", message); response.setContent(html.html()); return response; }
static void printUsage(){ System.out.println("PurgeTxnLog dataLogDir [snapDir] -n count"); System.out.println("\tdataLogDir -- path to the txn log directory"); System.out.println("\tsnapDir -- path to the snapshot directory"); System.out.println("\tcount -- the number of old snaps/logs you want to keep"); System.exit(1); }
BlockingQueue<Operation> createOperationQueue();  BlockingQueue<Operation> createReadOperationQueue();  BlockingQueue<Operation> createWriteOperationQueue();  long getOpQueueMaxBlockTime();  ExecutorService getListenerExecutorService();  boolean isDefaultExecutorService();  NodeLocator createLocator(List<MemcachedNode> nodes);  OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon();  boolean useNagleAlgorithm();  boolean getKeepAlive();  Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode();  Transcoder<Object> getDefaultTranscoder();  boolean shouldOptimize();  int getReadBufSize();  HashAlgorithm getHashAlg();  long getMaxReconnectDelay();  AuthDescriptor getAuthDescriptor();  int getTimeoutExceptionThreshold();  MetricType enableMetrics();  MetricCollector getMetricCollector();  long getAuthWaitTime(); }
String getPath(); String getFullPath(); String getContent(); boolean targetExists(String wikiWordPath); String makeFullPathOfTarget(String wikiWordPath); String findParentPath(String targetName); Maybe<SourcePage> findIncludedPage(String pageName); Collection<SourcePage> getAncestors(); Collection<SourcePage> getChildren(); boolean hasProperty(String propertyKey); String getProperty(String propertyKey); String makeUrl(String wikiWordPath); }
protected Object retryOperation(ZooKeeperOperation operation) throws KeeperException, InterruptedException { KeeperException exception = null; for (int i = 0; i < retryCount; i++) { try { return operation.execute(); } catch (KeeperException.SessionExpiredException e) { LOG.warn("Session expired for: " + zookeeper + " so reconnecting due to: " + e, e); throw e; } catch (KeeperException.ConnectionLossException e) { if (exception == null) { exception = e; } LOG.debug("Attempt " + i + " failed with connection loss so " + "attempting to reconnect: " + e, e); retryDelay(i); } } throw exception; }
private void testOperations(TestableZooKeeper zk) throws Exception { Stat stat = new Stat(); zk.getData("/", false, stat); assertThrows(KeeperException.UnimplementedException.class, () -> checkVersion(zk, "/", -1)); }
public String generateHtml(String titleText, String bodyText, String bodyClass) { long id = nextId++; HtmlTag outerBlock = new HtmlTag("div"); outerBlock.addAttribute("class", "collapse_rim"); HtmlTag floatRight = new HtmlTag("div"); floatRight.addAttribute("style", "float: right;"); floatRight.addAttribute("class", "meta"); HtmlTag expand = new HtmlTag("a", "Expand All"); expand.addAttribute("href", "javascript:expandAll();"); floatRight.add(expand); floatRight.add(" | "); HtmlTag collapse = new HtmlTag("a", "Collapse All"); collapse.addAttribute("href", "javascript:collapseAll();"); floatRight.add(collapse); outerBlock.add(floatRight); HtmlTag toggle = new HtmlTag("a"); toggle.addAttribute("href", "javascript:toggleCollapsable('" + Long.toString(id) + "');"); HtmlTag image = new HtmlTag("img"); image.addAttribute("src", "/files/images/collapsableOpen.gif"); image.addAttribute("class", "left"); image.addAttribute("id", "img" + Long.toString(id)); toggle.add(image); outerBlock.add(toggle); outerBlock.add("&nbsp;"); HtmlTag title = HtmlUtil.makeSpanTag("meta", titleText); outerBlock.add(title); HtmlTag body = new HtmlTag("div", bodyText); body.addAttribute("class", bodyClass); body.addAttribute("id", Long.toString(id)); outerBlock.add(body); return outerBlock.html(); }
void appendChildTable(int row, Table table); void updateContent(int row, TestResult testResult); void updateContent(int col, int row, SlimTestResult testResult); void updateContent(int col, int row, ExceptionResult exceptionResult); Table asTemplate(CellContentSubstitution substitution) throws SyntaxError;
public void read(InputStream input) throws IOException { } public boolean finished() { return false; } } private final State READLINE_STATE = new State() { public void read(InputStream input) throws IOException { int b = input.read(); if (b == -1) { changeState(FINAL_STATE); eof = true; } else { bytesConsumed++; if (b == '\n') changeState(FINAL_STATE); else if (b != '\r') output.write((byte) b); } } }; private final State READCOUNT_STATE = new State() { public void read(InputStream input) throws IOException { byte[] bytes = new byte[readGoal - readStatus]; int bytesRead = input.read(bytes); if (bytesRead < 0) { changeState(FINAL_STATE); eof = true; } else { bytesConsumed += bytesRead; readStatus += bytesRead; output.write(bytes, 0, bytesRead); } } public boolean finished() { return readStatus >= readGoal; } }; private final State READUPTO_STATE = new State() { public void read(InputStream input) throws IOException { int b = input.read(); if (b == -1) { changeState(FINAL_STATE); eof = true; } else { bytesConsumed++; if (b == boundary[matchingBoundaryIndex]) { matchedBoundaryBytes[matchingBoundaryIndex++] = (byte) b; if (matchingBoundaryIndex >= boundaryLength) changeState(FINAL_STATE); } else if (matchingBoundaryIndex == 0) output.write((byte) b); else { output.write(matchedBoundaryBytes, 0, matchingBoundaryIndex); matchingBoundaryIndex = 0; if (b == boundary[matchingBoundaryIndex]) matchedBoundaryBytes[matchingBoundaryIndex++] = (byte) b; else output.write((byte) b); } } } }; private final State FINAL_STATE = new State() { public boolean finished() { return true; } }; }
public void doesNotIncludeParent() throws Exception { TestRoot root = new TestRoot(); WikiPage parent = root.makePage("ParentPage", "stuff"); WikiPage currentPage = root.makePage(parent, "PageOne", "!include <ParentPage"); ParserTestHelper.assertTranslatesTo(currentPage, String.format(HTML_ERR,
private void registerOn(BeanDefinitionRegistry registry, Class<?> type) { registerOn(registry, type, false); }
public void testDuplicatedTxn() throws Exception { long peerZxid; db.txnLog.add(createProposal(getZxid(0, 1))); db.txnLog.add(createProposal(getZxid(1, 1))); db.txnLog.add(createProposal(getZxid(1, 2))); db.txnLog.add(createProposal(getZxid(1, 1))); db.txnLog.add(createProposal(getZxid(1, 2)));
public void variablesAreReplacedInMatch() throws Exception { makeQueryTableAndBuildInstructions(queryTableHeader + "|2|$V|\n"); qt.setSymbol("V", "4"); Map<String, Object> pseudoResults = SlimClient.resultToMap( fitnesse.util.ListUtility.list( fitnesse.util.ListUtility.list("queryTable_id_0", "OK"), fitnesse.util.ListUtility.list("queryTable_id_2", fitnesse.util.ListUtility.list( fitnesse.util.ListUtility.list(fitnesse.util.ListUtility.list("n", "2"), fitnesse.util.ListUtility.list("2n", "4")) ) ) ) ); testContext.evaluateExpectations(pseudoResults); qt.evaluateReturnValues(pseudoResults); org.junit.Assert.assertEquals( "[" +
private HtmlTag renamePageForm() throws Exception { TagGroup group = new TagGroup(); group.add(HtmlUtil.BR); group.add(makeHeaderTag("Rename:")); group.add(makeRenamePageForm()); return group; }
public void testQuorumPeerExitTime() throws Exception { long maxwait = 3000; final int CLIENT_PORT_QP1 = PortAssignment.unique(); String quorumCfgSection = "server.1=127.0.0.1:" + PortAssignment.unique() + ":" + PortAssignment.unique() + ";" + CLIENT_PORT_QP1 + "\nserver.2=127.0.0.1:" + PortAssignment.unique() + ":" + PortAssignment.unique() + ";" + PortAssignment.unique(); MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection); q1.start();
private Symbol parseCell(Parser parser, String content) { if (content.indexOf("!") >= 0) { return parser.parseToWithSymbols(SymbolType.EndCell, SymbolProvider.literalTableTypes);
public void testCreatingWatchedEventFromWrapper() {
public void testValues() { addDataPoints(); Map<String, Object> values = testCounterSet.values(); Assert.assertEquals("There should be 18 values in the set", 18, values.size()); Assert.assertEquals("avg_key1_test should =499.5", 999D/2, values.get("avg_key1_test")); Assert.assertEquals("min_key1_test should =0", 0L, values.get("min_key1_test")); Assert.assertEquals("max_key1_test should =999", 999L, values.get("max_key1_test")); Assert.assertEquals("cnt_key1_test should =1000", 1000L, values.get("cnt_key1_test")); Assert.assertEquals("sum_key1_test should =999*500", 999*500L, values.get("sum_key1_test")); Assert.assertEquals("p50_key1_test should have p50=500", 500L, values.get("p50_key1_test")); Assert.assertEquals("p95_key1_test should have p95=950", 950L, values.get("p95_key1_test")); Assert.assertEquals("p99_key1_test should have p99=990", 990L, values.get("p99_key1_test")); Assert.assertEquals("p999_key1_test should have p999=999", 999L, values.get("p999_key1_test")); Assert.assertEquals("avg_key2_test should =3.5", 1000+999D/2, values.get("avg_key2_test")); Assert.assertEquals("min_key2_test should =2", 1000L, values.get("min_key2_test")); Assert.assertEquals("max_key2_test should =5", 1999L, values.get("max_key2_test")); Assert.assertEquals("cnt_key2_test should =4", 1000L, values.get("cnt_key2_test")); Assert.assertEquals("sum_key2_test should =14", 2999*500L, values.get("sum_key2_test")); Assert.assertEquals("p50_key2_test should have p50=1500", 1500L, values.get("p50_key2_test")); Assert.assertEquals("p95_key2_test should have p95=1950", 1950L, values.get("p95_key2_test")); Assert.assertEquals("p99_key2_test should have p99=1990", 1990L, values.get("p99_key2_test")); Assert.assertEquals("p999_key2_test should have p999=1999", 1999L, values.get("p999_key2_test")); }
public void testIsConnected() { serverSideSocket.isConnected(); Assert.assertFalse(serverSideSocket.isModeKnown()); }
public void findable() { } } @Test public void ignoresNonPublicMethod() { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.ignorableStatic.logic", "ignorableStatic"), is(nullValue())); mockery.assertIsSatisfied(); } @Test public void ignoresStaticMethod() { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.ignorableProtected.logic", "ignorableProtected"), is(nullValue())); mockery.assertIsSatisfied(); } @Test public void returnsNullIfNothingFound() { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.unfindable.logic", "unfindable"), is(nullValue())); mockery.assertIsSatisfied(); } @Test public void returnsTheCorrectDefaultResourceMethodIfFound() throws SecurityException, NoSuchMethodException { final Resource resource = mockery.resource(MyResource.class); VRaptor2MethodLookup lookup = new VRaptor2MethodLookup(resource); assertThat(lookup.methodFor("/MyResource.findable.logic", "findable"), is(VRaptorMatchers.resourceMethod(MyResource.class.getMethod("findable")))); mockery.assertIsSatisfied(); } }
public Float convert(String value, Class<? extends Float> type, ResourceBundle bundle) {
public String toString() { return "PKIFailureInfo: 0x" + Integer.toHexString(this.intValue()); }
public void testAbortExistingFileAfterFlush() throws IOException { FileOutputStream fos1 = new FileOutputStream(dstFile); fos1.write(TEST_STRING.getBytes()); fos1.close(); AtomicFileOutputStream fos2 = new AtomicFileOutputStream(dstFile); fos2.write(TEST_STRING_2.getBytes()); fos2.flush(); fos2.abort();
public static boolean isEnabled() { boolean enabled = Boolean.parseBoolean(System.getProperty(DIGEST_AUTH_ENABLED, "true")); LOG.info("{} = {}", DIGEST_AUTH_ENABLED, enabled); return enabled; }
public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) throws IOException { assertEquals(0, l.self.getAcceptedEpoch()); assertEquals(0, l.self.getCurrentEpoch());  LearnerInfo li = new LearnerInfo(1, 0x10000, 0); byte[] liBytes = new byte[20]; ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes)); QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0, liBytes, null); oa.writeRecord(qp, null); readPacketSkippingPing(ia, qp); assertEquals(Leader.LEADERINFO, qp.getType()); assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid()); assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000); assertEquals(1, l.self.getAcceptedEpoch()); assertEquals(0, l.self.getCurrentEpoch()); qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null); oa.writeRecord(qp, null); readPacketSkippingPing(ia, qp); assertEquals(Leader.DIFF, qp.getType()); readPacketSkippingPing(ia, qp); assertEquals(Leader.NEWLEADER, qp.getType()); assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid()); assertEquals(1, l.self.getAcceptedEpoch()); assertEquals(1, l.self.getCurrentEpoch()); qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null); oa.writeRecord(qp, null); readPacketSkippingPing(ia, qp); assertEquals(Leader.UPTODATE, qp.getType()); }
public void testAddFailWhenPageAlreadyHasChild() throws Exception { pageOne.addChildPage("SymLink"); request.addInput("linkName", "SymLink"); request.addInput("linkPath", "PageTwo"); Response response = responder.makeResponse(new FitNesseContext(root), request); assertEquals(412, response.getStatus()); String content = ((SimpleResponse)response).getContent(); assertSubString("already has a child named SymLink", content); assertSubString("Error Occured", content); }
public void shouldBeAbleToConvert() { when(request.getAttribute(LOCALE_KEY + ".request")).thenReturn("pt_br"); assertThat(converter.convert("10/06/2008", Calendar.class, bundle), is(equalTo((Calendar) new GregorianCalendar(2008, 5, 10))));
public void shouldDecapitalizeSomeCharsUntilItFindsOneUppercasedForListsAndArrays() throws NoSuchMethodException, SecurityException, NoSuchFieldException { Assert.assertEquals("stringList",interceptor.nameFor(getField("strings"))); Assert.assertEquals("bigDecimalList",interceptor.nameFor(getField("bigs"))); Assert.assertEquals("hashSet",interceptor.nameFor(getField("bigsOld"))); Assert.assertEquals("class",interceptor.nameFor(getField("clazz"))); Assert.assertEquals("aClassList",interceptor.nameFor(AClass[].class)); Assert.assertEquals("urlClassLoaderList",interceptor.nameFor(getField("urls"))); }
private String buildRequestLine() throws Exception { StringBuffer text = new StringBuffer(); text.append(method).append(" ").append(resource); if (isGet()) { String inputString = inputString(); if (inputString.length() > 0) text.append("?").append(inputString); } text.append(" HTTP/1.1"); return text.toString(); }
<T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) throws OperationTimeoutException; CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key, int hold); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
public static void main(String[] args) { TestRunner.main(new String[]{"RecentChangesTest"}); }
public void addChildTable(SlimTable table, int row) throws Exception { table.id = id + "." + children.size(); table.tableName = makeInstructionTag(instructionNumber)+"/"+table.tableName; instructionNumber++; table.parent = this; children.add(table); Table t = getTable(); t.appendCellToRow(row, table.getTable()); }
StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, StoreOperation.Callback cb);  TouchOperation touch(String key, int expiration, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(StoreType t, String key, long casId, int flags, int exp, byte[] data, StoreOperation.Callback cb);  VersionOperation version(OperationCallback cb);  SASLMechsOperation saslMechs(OperationCallback cb);  SASLAuthOperation saslAuth(String[] mech, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  SASLStepOperation saslStep(String[] mech, byte[] challenge, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  Collection<Operation> clone(KeyedOperation op);  TapOperation tapBackfill(String id, long date, OperationCallback cb);  TapOperation tapCustom(String id, RequestMessage message, OperationCallback cb);  TapOperation tapAck(TapOpcode opcode, int opaque, OperationCallback cb);  TapOperation tapDump(String id, OperationCallback cb); }
public boolean stopHasBeenRequested() { return stopRequested; }
public void add(long value) {}; public void add(int key, long value) {}; public void add(String key, long value) {}; public void reset() {}; public abstract Map<String, Object > values(); }
@Test public void translatesNewlines() { ParserTest.assertTranslates("hi\nmom", "hi<br/>" + HtmlElement.endl + "mom"); }
protected Fixture newFixture() { fixture = getFixture(); fixture.listener = fixtureListener; return fixture; }
private String endTag(String name) { return "</" + name + ">"; }
public void testLoadKeyStoreWithNullFilePath() throws Exception { new PKCS12FileLoader.Builder() .setKeyStorePassword(x509TestContext.getKeyStorePassword())
public void shouldFailOnOddNumberOfArguments() { ConfigurationParameter.makeProperties(ConfigurationParameter.PORT, 8001, ConfigurationParameter.ROOT_PATH);
public void testLargeNodeData() throws Exception { ZooKeeper zk = null; String queue_handle = "/large"; try { zk = createClient();
protected void setUp() throws Exception { ZooLog.logError("Client test setup"); tmpDir = File.createTempFile("test", ".junit", baseTest); tmpDir = new File(tmpDir + ".dir"); tmpDir.mkdirs(); ServerStats.registerAsConcrete(); ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000); hostPort = "127.0.0.1:33221"; f = new NIOServerCnxn.Factory(33221); f.startup(zks); Thread.sleep(5000); ZooLog.logError("Client test setup finished"); }
public void testPagesForTestSystemAreSurroundedBySuiteSetupAndTeardown() throws Exception { WikiPage testPage = addTestPage(suite, "TestOne", "My test"); WikiPage slimPage = addTestPage(suite, "AaSlimTest", "!define TEST_SYSTEM {slim}\n" + "|!-DT:fitnesse.slim.test.TestSlim-!|\n" + "|string|get string arg?|\n" + "|wow|wow|\n"); WikiPage setUp = WikiPageUtil.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = WikiPageUtil.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); LinkedList<WikiPage> testPages = new LinkedList<WikiPage>(); testPages.add(setUp); testPages.add(slimPage); testPages.add(testPage); testPages.add(tearDown); PagesByTestSystem pagesByTestSystem = new PagesByTestSystem(testPages, context.getRootPage(), null); Collection<WikiPageIdentity> descriptors = pagesByTestSystem.identities(); WikiPageIdentity fitDescriptor = new WikiPageIdentity(testPage); WikiPageIdentity slimDescriptor = new WikiPageIdentity(slimPage); assertTrue(descriptors.contains(fitDescriptor)); assertTrue(descriptors.contains(slimDescriptor)); List<TestPage> fitList = pagesByTestSystem.testPagesForIdentity(fitDescriptor); List<TestPage> slimList = pagesByTestSystem.testPagesForIdentity(slimDescriptor); assertEquals(3, fitList.size()); assertEquals(3, slimList.size()); assertEquals(setUp, ((WikiTestPage) fitList.get(0)).getSourcePage()); assertEquals(testPage, ((WikiTestPage) fitList.get(1)).getSourcePage()); assertEquals(tearDown, ((WikiTestPage) fitList.get(2)).getSourcePage()); assertEquals(setUp, ((WikiTestPage) slimList.get(0)).getSourcePage()); assertEquals(slimPage, ((WikiTestPage) slimList.get(1)).getSourcePage()); assertEquals(tearDown, ((WikiTestPage) slimList.get(2)).getSourcePage()); }
public void replacesVariablesFromPropertiesFile() throws IOException, PluginException { Properties properties = new Properties(); properties.setProperty("replaceMe", "replacedValue"); SystemVariableSource variableSource = new SystemVariableSource(properties); assertThat(new VariableTool(variableSource).replace("a ${replaceMe}"), is("a replacedValue")); }
private void sendNotifications() { for (QuorumServer server : self.quorumPeers) { InetSocketAddress saddr = new InetSocketAddress(server.addr
private String replaceLiteralsAndVariables(TextWidget textWidget, String cellText) { cellText = removeUnprocessedLiterals(cellText); cellText = replaceVariables(textWidget, cellText); return cellText; }
public static void copyStat(Stat from, Stat to) { to.setAversion(from.getAversion()); to.setCtime(from.getCtime()); to.setCversion(from.getCversion()); to.setCzxid(from.getCzxid()); to.setMtime(from.getMtime()); to.setMzxid(from.getMzxid()); to.setPzxid(from.getPzxid()); to.setVersion(from.getVersion()); to.setEphemeralOwner(from.getEphemeralOwner()); to.setDataLength(from.getDataLength()); to.setNumChildren(from.getNumChildren()); }
protected Servers LaunchServers(int numServers, Map<String, String> otherConfigs) throws IOException, InterruptedException { return LaunchServers(numServers, 0, null, otherConfigs); }
public void shouldSerializeParentFields() {
public static void main(String[] args) { long startTime = Time.currentElapsedTime(); ZooKeeper zk = null; try { zk = ClientBase.createZKClient(args[0], 10000); } catch (Exception e1) { e1.printStackTrace(); throw new RuntimeException(e1); } for (int i = 0; i < REPS; i++) { try { String name = zk.create("/testFile-", new byte[16], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL); zk.delete(name, -1, new TestHammer(), null); } catch (Exception e) { i--; e.printStackTrace(); } } System.out.println("creates/sec=" + (REPS * 1000 / (Time.currentElapsedTime() - startTime))); }
public void testTestability() throws Exception { TestableZooKeeper zk = createClient(); try { LOG.info("{}",zk.testableLocalSocketAddress());
public void setUp() throws Exception { testData = new WikiImporterTest(); testData.createRemoteRoot(); testData.createLocalRoot(); FitNesseContext context = FitNesseUtil.makeTestContext(testData.remoteRoot, new OneUserAuthenticator("joe", "blow")); FitNesseUtil.startFitnesseWithContext(context); baseUrl = FitNesseUtil.URL; createResponder(); }
public void testAttribute() { tag.addAttribute("key", "value"); assertEquals("<aTag key=\"value\"/>" + endl, tag.html()); }
private void makeSecure(WikiPage securePage) throws Exception { PageData data = securePage.getData(); data.setAttribute(WikiPage.SECURE_READ); securePage.commit(data); }
public void testResultsHtml() throws Exception { formatter.testSystemStarted(null, "Fit", "laughing.fit"); formatter.announceNumberTestsToRun(2); formatter.announceStartNewTest("RelativeName", "FullName"); formatter.testOutputChunk("starting"); formatter.testOutputChunk(" output"); formatter.processTestResults("RelativeName", new TestSummary(1, 0, 0, 0)); formatter.testSystemStarted(null, "Slim", "very.slim"); formatter.announceStartNewTest("NewRelativeName", "NewFullName"); formatter.testOutputChunk("second"); formatter.testOutputChunk(" test"); formatter.processTestResults("NewRelativeName", new TestSummary(0, 1, 0, 0)); formatter.writeHead("Suite"); formatter.finishWritingOutput(); String results = pageBuffer.toString(); assertSubString("<h2>Test Output</h2>", results); assertSubString("<h2>Test System: Slim:very.slim</h2>", results); assertSubString("<div class=\"test_output_name\">", results); assertSubString("<a href=\"FullName\" id=\"RelativeName1\" class=\"test_name\">RelativeName</a>", results); assertSubString("<div class=\"alternating_block\">starting output</div>", results); assertSubString("<a href=\"NewFullName\" id=\"NewRelativeName2\" class=\"test_name\">NewRelativeName</a>", results); assertSubString("<div class=\"alternating_block\">second test</div>", results); }
void shutdown();  String getAnonymousAuthBucket(); }
public void testFindLocaleInApplication() { JstlWrapper jstlWrapper = new JstlWrapper(); webRequest.getServletContext().setAttribute(JSTL_LOCALE_KEY + ".application", Locale.GERMANY); Locale locale = jstlWrapper.findLocale(webRequest); assertEquals(Locale.GERMANY, locale); }
public void add(Relation relation) { delegate.add(relation); }
public void testIndividualTestTimingsShouldAppearInSummary() throws Exception { TimeMeasurement totalTimeMeasurement = newConstantElapsedTimeMeasurement(900).start(); TimeMeasurement firstTimeMeasurement = newConstantElapsedTimeMeasurement(670); TimeMeasurement secondTimeMeasurement = newConstantElapsedTimeMeasurement(890); formatter.page = new WikiPageDummy(); formatter.announceNumberTestsToRun(2); TestPage firstPage = new TestPage(new WikiPageDummy("page1", "content")); TestPage secondPage = new TestPage(new WikiPageDummy("page2", "content")); formatter.newTestStarted(firstPage, firstTimeMeasurement.start()); formatter.testComplete(firstPage, new TestSummary(1, 2, 3, 4), firstTimeMeasurement.stop()); formatter.newTestStarted(secondPage, secondTimeMeasurement.start()); formatter.testComplete(secondPage, new TestSummary(5, 6, 7, 8), secondTimeMeasurement.stop()); formatter.allTestingComplete(totalTimeMeasurement.stop()); assertHasRegexp("<li.*\\(page1\\).*<span.*>\\(0\\.670 seconds\\)</span>.*</li>", pageBuffer.toString()); assertHasRegexp("<li.*\\(page2\\).*<span.*>\\(0\\.890 seconds\\)</span>.*</li>", pageBuffer.toString()); }
public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max); public boolean getResponseCachingEnabled(); public void setResponseCachingEnabled(boolean isEnabled);  public int getConnectionMaxTokens(); public void setConnectionMaxTokens(int val); public int getConnectionTokenFillTime(); public void setConnectionTokenFillTime(int val); public int getConnectionTokenFillCount(); public void setConnectionTokenFillCount(int val); public int getConnectionFreezeTime(); public void setConnectionFreezeTime(int val); public double getConnectionDropIncrease(); public void setConnectionDropIncrease(double val); public double getConnectionDropDecrease(); public void setConnectionDropDecrease(double val); public double getConnectionDecreaseRatio(); public void setConnectionDecreaseRatio(double val); public int getCommitProcMaxReadBatchSize(); public void setCommitProcMaxReadBatchSize(int size); public int getCommitProcMaxCommitBatchSize(); public void setCommitProcMaxCommitBatchSize(int size); public int getRequestThrottleLimit(); public void setRequestThrottleLimit(int requests); public int getRequestThrottleStallTime(); public void setRequestThrottleStallTime(int time); public boolean getRequestThrottleDropStale(); public void setRequestThrottleDropStale(boolean drop); public boolean getRequestStaleLatencyCheck(); public void setRequestStaleLatencyCheck(boolean check); public boolean getRequestStaleConnectionCheck(); public void setRequestStaleConnectionCheck(boolean check);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); public long getFlushDelay(); public void setFlushDelay(long delay); public long getMaxWriteQueuePollTime(); public void setMaxWriteQueuePollTime(long delay); public int getMaxBatchSize(); public void setMaxBatchSize(int size); }
private VersionInfo makeVersionInfo(PageData current) { String name = String.valueOf(versions.sechoize()); return makeVersionInfo(current, name); }
public void setup() { this.mockery = new Mockery(); this.stack = mockery.mock(InterceptorStack.class); this.outjecter = new JsonOutjecter(); this.info = mockery.mock(ComponentInfoProvider.class); this.response = mockery.mock(HttpServletResponse.class); this.interceptor = new AjaxInterceptor(outjecter, response, info); }
public void exit() throws Exception { print("exiting" + "\n"); print("\tend results: " + overallCounts.toString() + "\n"); }
int getMaster(int vbucketIndex); int getReplica(int vbucketIndex, int replicaIndex); int foundIncorrectMaster(int vbucket, int wrongServer); ConfigDifference compareTo(Config config); List<String> getServers(); List<URL> getCouchServers(); List<VBucket> getVbuckets(); ConfigType getConfigType(); }
WikiPage getParent();  boolean isRoot();  WikiPage addChildPage(String name); boolean hasChildPage(String name); WikiPage getChildPage(String name);  @Deprecated void removeChildPage(String name);  void remove();  List<WikiPage> getChildren(); String getName(); PageData getData();  Collection<VersionInfo> getVersions(); WikiPage getVersion(String versionName); String getHtml();  VersionInfo commit(PageData data); PageCrawler getPageCrawler(); String getVariable(String name); }
OperationCallback getCallback();  void cancel();  OperationState getState();  ByteBuffer getBuffer();  void writeComplete();  void initialize();  void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data);  MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to);  public void timeOut();  public boolean isTimedOut();  public boolean isTimedOut(long ttlMillis);  public boolean isTimedOutUnsent(); }
public void moveNext() { moveNextIgnoreFirst(new ParseSpecification()); }
public void intercept(InterceptorStack invocation, ResourceMethod method, Object resourceInstance) throws InterceptionException { try { Method reflectionMethod = method.getMethod();
public void supportOverrideTypeHttpMethodAnnotation() throws SecurityException, NoSuchMethodException { List<Route> routes = parser.rulesFor(new DefaultResourceClass(AnnotatedController.class)); Route route = getRouteMatching(routes, "/annotated/overridden"); assertThat(route.allowedMethods(), is(EnumSet.of(HttpMethod.GET))); }
public static String makePageHistoryFileName(FitNesseContext context, WikiPage page, TestSummary counts, long time) throws Exception { return String.format("%s/%s/%s", context.getTestHistoryDirectory(),
static public CreateMode fromFlag(int flag) throws KeeperException { switch(flag) { case 0: return CreateMode.PERSISTENT;
private String evaluationMessage(String value, String originalContent) { String evaluationMessage; if (isExceptionMessage(value)) evaluationMessage = originalContent + " " + error(extractExeptionMessage(value)); else evaluationMessage = createEvaluationMessage(value, originalContent); return evaluationMessage; }
public void testBitSet() { BitHashSet bset = new BitHashSet(0); WatcherOrBitSet bitSet = new WatcherOrBitSet(bset); Assert.assertEquals(0, bitSet.size()); Integer bit = new Integer(1); Assert.assertFalse(bitSet.contains(1)); Assert.assertFalse(bitSet.contains(bit)); bset.add(bit); Assert.assertTrue(bitSet.contains(1)); Assert.assertTrue(bitSet.contains(bit)); Assert.assertEquals(1, bitSet.size()); }
public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress(); }
public boolean cas(String key, long casId, Object value) { try { return asyncCAS(key, casId, value).get();
private static String[] concatArrays(String[] left, String[] right) { String[] result = new String[left.length + right.length]; System.arraycopy(left, 0, result, 0, left.length); System.arraycopy(right, 0, result, left.length, right.length); return result; }
long getSessionId(); int getTimeout(); boolean isClosing(); } interface SessionExpirer { void expire(Session session); long getServerId(); } long createSession(int sessionTimeout);  boolean trackSession(long id, int to);  boolean commitSession(long id, int to);  boolean touchSession(long sessionId, int sessionTimeout);  void setSessionClosing(long sessionId);  void shutdown();  void removeSession(long sessionId);  boolean isTrackingSession(long sessionId);  void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap();  long getLocalSessionCount(); }
public void shouldBeAbleToDealWithGenericCollection() throws SecurityException, NoSuchMethodException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchFieldException, ClassNotFoundException { Class<?> type = creator.typeFor(mockery.method(DogAlike.class.getDeclaredMethod("eat",List.class))); CocoNuts2.parse(type.getDeclaredField("List_")); Method getter = type.getDeclaredMethod("getList"); Method setter = type.getDeclaredMethod("setList", List.class); Assert.fail("should check if the method declares the List<String> as its return and parameter type"); mockery.assertIsSatisfied(); }
public abstract int getSessionTimeout(); public abstract void close(); public abstract void sendResponse(ReplyHeader h, Record r, String tag) throws IOException; public void finishSessionInit(boolean valid); public abstract void process(WatcherEvent event); public abstract long getSessionId(); public abstract void setSessionId(long sessionId); public abstract ArrayList<Id> getAuthInfo(); public InetSocketAddress getRemoteAddress(); public void setStats(long latency, long avgLatency); }
public Maybe<Symbol> parse(Scanner scanner) { SymbolType type = scanner.getCurrentType(); SymbolType terminator = scanner.makeLiteral(SymbolType.closeType(type)); if (terminator == SymbolType.Empty) return Symbol.Nothing; String literal = scanner.getCurrentContent(); scanner.moveNext(); return new Maybe<Symbol>(new Symbol(type, literal)); }
public void cascadeConstraint(@Valid Customer customer) { } } @Target(value = { PARAMETER }) @Retention(value = RUNTIME) @Documented public @interface Foo { } }
private static String getNormalCommandPattern(PageData pageData) throws Exception { String testRunner = pageData.getVariable(PageData.COMMAND_PATTERN); if (testRunner == null) testRunner = DEFAULT_COMMAND_PATTERN; return testRunner; }
public boolean exists(File file) { return getPayload(file) != null; }
ResourceMethod matches(String uri, HttpMethod method, MutableRequest request);  boolean canHandle(String uri, HttpMethod method);  String urlFor(Class<?> type, Method m, Object params);  boolean canHandle(Class<?> type, Method method);  int getPriority(); }
public Map<String, T> get(long to, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException { Collection<Operation> timedoutOps = new HashSet<Operation>(); Map<String, T> ret = internalGet(to, unit, timedoutOps); if (timedoutOps.size() > 0) { this.timeout = true; throw new CheckedOperationTimeoutException("Operation timed out.", timedoutOps); } return ret; }
public int processByte( byte in, byte[] out, int outOff) throws DataLengthException, IllegalStateException { int resultLen = 0; if (bufOff == buf.length) { resultLen = cipher.processBlock(buf, 0, out, outOff); System.arraycopy(buf, blockSize, buf, 0, blockSize); bufOff = blockSize; } buf[bufOff++] = in; return resultLen; }
public static boolean isTestPage(WikiPage page) { return isTestPage(page.getData()); }
public List<Test> getSuite(String name) throws IOException { try { List<Test> tests = new ArrayList<Test>();
void updateContent(int col, int row, ExceptionResult exceptionResult); public Table asTemplate(CellContentSubstitution substitution) throws SyntaxError;
public void testIsLeader() { long peerId = 7; QuorumPeer.QuorumServer quorumServerMock = mock(QuorumPeer.QuorumServer.class); when(quorumServerMock.getId()).thenReturn(peerId); QuorumPeer peerMock = mock(QuorumPeer.class); RemotePeerBean remotePeerBean = new RemotePeerBean(peerMock, quorumServerMock); when(peerMock.isLeader(eq(peerId))).thenReturn(true); assertTrue(remotePeerBean.isLeader()); when(peerMock.isLeader(eq(peerId))).thenReturn(false); assertFalse(remotePeerBean.isLeader()); }
public PwGroupV3 search(Database db, String qStr) { Cursor cursor; cursor = mDb.query(true, SEARCH_TABLE, new String[] {KEY_UUID}, SEARCH_TABLE + " match ?", new String[] {qStr}, null, null, null, null); PwGroupV3 group = new PwGroupV3(); group.name = "Search results"; group.childEntries = new Vector<PwEntryV3>(); group.childGroups = new Vector<PwGroupV3>(); cursor.moveToFirst(); while ( ! cursor.isAfterLast() ) { String sUUID = cursor.getString(0); UUID uuid = UUID.fromString(sUUID); Log.d("TAG", uuid.toString()); PwEntryV3 entry = db.entries.get(uuid).get(); group.childEntries.add(entry); cursor.moveToNext(); } cursor.close(); return group; }
public Map<String, Class<? extends Responder>> getResponders() throws PluginException { return createMap(); }
public List<String> getClasspaths() throws Exception { Symbol tree = getSyntaxTree(); return new Paths(new HtmlTranslator(new WikiSourcePage(wikiPage), parsingPage)).getPaths(tree);
long getLastLoggedZxid() throws IOException;  boolean truncate(long zxid) throws IOException;  long getDbId() throws IOException;  void commit() throws IOException;  long getTxnLogSyncElapsedTime();  void close() throws IOException;  public interface TxnIterator {  TxnHeader getHeader();  Record getTxn();  boolean next() throws IOException;  void close() throws IOException;  long getStorageSize() throws IOException; } }
private void closeZookeeper(ZooKeeper zk) { Executors.newSingleThreadExecutor().submit(() -> { try {
public void testStarted(WikiTestPage test) { testHistoryFormatter = new XmlFormatter(context, test.getSourcePage(), writerFactory); testHistoryFormatter.testStarted(test); super.testStarted(test); }
public void testCallThrowsWhenTimeoutExceptionThrown() throws Exception { givenTimeoutExceptionThrownOnFutureGet(); Exception actual = callExpectingException(); assertNotNull(actual); assertEquals("4000", actual.getMessage()); }
protected void createSessionTracker() { sessionTracker = new SessionTrackerImpl(this, zkDb.getSessionWithTimeOuts(), tickTime, createSessionTrackerServerId, getZooKeeperServerListener()); }
public void fromString_should_return_null_object_when_value_is_not_defined() { } @Test public void fromString_should_return_false_object_when_value_is_not_defined() { String value = ""; Boolean current = converter.fromString(value); assertNotNull(current); assertEquals(PrimitiveBooleanConverter.DEFAULT_VALUE, current); } }
private boolean isNullOrBlank(Parse fixture) { return fixture == null || fixture.text().equals(""); }
public <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) { try { return asyncCAS(key, casId, value, tc).get();
public HtmlTag toHtml(Translator translator, Symbol symbol) { HtmlTag result = new HtmlTag("span", "variable defined: " + translator.translate(symbol.childAt(0)) + "=" + translator.translate(symbol.childAt(2))); result.addAttribute("class", "meta"); return result; }
private void traceAdminServer(String urlStr) throws IOException { HttpURLConnection conn = (HttpURLConnection) new URL(urlStr).openConnection(); conn.setRequestMethod("TRACE"); conn.connect(); assertEquals(HttpURLConnection.HTTP_FORBIDDEN, conn.getResponseCode()); }
public void tearDown() throws Exception { } public void testNoTextWidgetAreCreated() throws Exception { String text = "Here is some text with '''bold''' and ''italics''."; WikiPageDummy page = new WikiPageDummy("SomePage", text); ParentWidget root = new TextIgnoringWidgetRoot(text, page, WidgetBuilder.htmlWidgetBuilder); List widgets = root.getChildren(); assertEquals(2, widgets.size()); assertTrue(widgets.get(0) instanceof BoldWidget); assertTrue(widgets.get(1) instanceof ItalicWidget); } }
HashAlgorithm getHashAlg();  long getMaxReconnectDelay();  AuthDescriptor getAuthDescriptor();  int getTimeoutExceptionThreshold();  MetricType enableMetrics();  MetricCollector getMetricCollector(); }
public boolean sameAs(Token other) { return other instanceof EndSectionToken; }
public void testReproducible() throws Exception { TimeZone.setDefault(TimeZone.getTimeZone("America/Chicago")); final String input = "release distribution=production, date=14:00 13.01.2007, version=12324, urgency=low\n" + " * change1\n" + " * change2\n"; BinaryPackageControlFile packageControlFile = new BinaryPackageControlFile(); packageControlFile.set("Package", "package"); packageControlFile.set("Version", "version"); packageControlFile.set("Date", "Mon, 20 Aug 2007 15:25:57 +0200"); final TextfileChangesProvider provider = new TextfileChangesProvider(new ByteArrayInputStream(input.getBytes(UTF_8)), packageControlFile, 1175385600000L); final ChangeSet[] changeSets = provider.getChangesSets(); assertNotNull(changeSets); assertEquals(1, changeSets.length); assertEquals(1168696800000L, changeSets[0].getDate().getTime()); ChangesFile changesFile = new ChangesFile(); changesFile.setChanges(provider.getChangesSets()); changesFile.initialize(packageControlFile); assertNotNull(changesFile); assertEquals(null, changesFile.get("Changed-By")); }
public void testComplete(TestPage testPage, TestSummary testSummary) { formatters.testComplete(testPage, testSummary); testsInProgressCount--; }
public void replaceBuckets(Map<String, Bucket> replacingMap) {
private void build(PwGroupV4 rootGroup) { EntryHandler eh = new AddBinaries(); rootGroup.preOrderTraverseTree(null, eh); }
private void doSimpleRunWithTags(String fixtureTable, String tags) throws Exception { String simpleRunPageName = "TestPage"; testPage = crawler.addPage(root, PathParser.parse(simpleRunPageName), classpathWidgets() + fixtureTable); if (tags != null) { PageData pageData = testPage.getData(); pageData.setAttribute(PageData.PropertySUITES, tags); testPage.commit(pageData); } request.setResource(testPage.getName()); response = responder.makeResponse(context, request); sender = new MockResponseSender(); sender.doSending(response); results = sender.sentData(); }
public void assign(PwEntry source) { System.arraycopy(source.uuid, 0, uuid, 0, source.uuid.length); groupId = source.groupId; imageId = source.imageId; title = source.title; url = source.url; username = source.username; int passLen = source.binaryData.length; password = new byte[passLen]; System.arraycopy(source.password, 0, password, 0, passLen); additional = source.additional; tCreation = new Date(source.tCreation.getTime()); tLastMod = new Date(source.tLastMod.getTime()); tLastAccess = new Date(source.tLastAccess.getTime()); tExpire = new Date(source.tExpire.getTime()); binaryDesc = source.binaryDesc; int descLen = source.binaryData.length; binaryData = new byte[descLen]; System.arraycopy(source.binaryData, 0, binaryData, 0, descLen);
@Test public void scansHashTables() { ParserTest.assertScansTokenType("!{a:b,c:d}", TokenType.HashTable, true); ParserTest.assertScansTokenType("!{a:b,c:d}", TokenType.Colon, true); ParserTest.assertScansTokenType("!{a:b,c:d}", TokenType.Comma, true); }
public void testGetChildren() throws Exception { List<?> children = page1.getChildren(); assertEquals(1, children.size()); assertEquals("SomeOtherPage", ((WikiPage) children.get(0)).getName()); VirtualCouplingExtension extension = (VirtualCouplingExtension) page1.getExtension(VirtualCouplingExtension.NAME); children = extension.getVirtualCoupling().getChildren(); assertEquals(1, children.size()); assertTrue(children.get(0) instanceof ProxyPage); assertEquals("PageTwoChild", ((WikiPage) children.get(0)).getName()); }
public void shouldConvertToZeroWhenEmpty() { assertThat(((Character) converter.convert("", char.class)).charValue(), is(equalTo('\u0000'))); }
private void acceptMany() throws IOException { while (true) { final SlimSocket socket = serverSocket.accept();
private boolean hasHtmlChild(String path) { if (path.endsWith(".html")) return true; for (String child : fileSystem.list(path)) { if (hasHtmlChild(path + "/" + child)) return true; } return false; }
<T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by); long decr(String key, int by); long incr(String key, int by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
protected void setupRequestProcessors() { RequestProcessor finalProcessor = new FinalRequestProcessor(this); commitProcessor = new CommitProcessor(finalProcessor, Long.toString(getServerId()), true, getZooKeeperServerListener()); commitProcessor.start(); firstProcessor = new FollowerRequestProcessor(this, commitProcessor); ((FollowerRequestProcessor) firstProcessor).start(); syncProcessor = new SyncRequestProcessor(this, new SendAckRequestProcessor(getFollower())); syncProcessor.start(); }
public void onlyReplacedPagesAreListed() throws Exception { WikiPageUtil.addPage(somePage, PathParser.parse("ChildPage"), "this page has nothing to replace."); String content = getResponseContentUsingSearchReplaceString("something", "replacedthing"); assertThat(content, containsString("SomePage")); assertThat(content, not(containsString("ChildPage"))); }
public static String makeSnapshotName(long zxid) { return FileSnap.SNAPSHOT_FILE_PREFIX + "." + Long.toHexString(zxid)
public void shouldOptionallyIncludeListChildFields() {
public void assertTestPasses(String testName) throws Exception { assertPasses(testName, TestHelper.PAGE_TYPE_TEST, null); }
private void assertThatTableTypeCreateSlimTableType(String tableType, Class<? extends SlimTable> expectedClass) { when(table.getCellContents(0, 0)).thenReturn(tableType); SlimTable slimTable = slimTableFactory.makeSlimTable(table, "0", new SlimTestContextImpl(new WikiTestPage(new WikiPageDummy()))); String message = "should have created a " + expectedClass + " for tabletype: " + tableType + " but was " + slimTable.getClass(); assertThat(message, slimTable, instanceOf(expectedClass)); }
private boolean nameSameAsLastName(String currentName) { return !branches.isEmpty() && branches.get(branches.size() - 1).name.equals(currentName); }
public final void end(final String name) { Map vals = (HashMap) pop(); int min = Integer.parseInt((String) vals.get("min")); int max = Integer.parseInt((String) vals.get("max")); Label dflt = getLabel(vals.get("dflt")); List lbls = (List) vals.get("labels"); Label[] labels = (Label[]) lbls.toArray(new Label[lbls.size()]); getCodeVisitor().visitTableSwitchInsn(min, max, dflt, labels); }
public void testMakeCollapsableSecion() throws Exception { CollapsableWidget widget = new CollapsableWidget(new MockWidgetRoot()); HtmlTag outerTag = widget.makeCollapsableSection(new RawHtml("title"), new RawHtml("content")); assertEquals("div", outerTag.tagName()); assertEquals("collapse_rim", outerTag.getAttribute("class")); List childTags = removeNewlineTags(outerTag); HtmlTag anchor = (HtmlTag) childTags.get(0); assertEquals("a", anchor.tagName()); HtmlElement title = (HtmlElement) childTags.get(1); assertEquals("title", title.html()); HtmlTag contentDiv = (HtmlTag) childTags.get(2); assertEquals("div", contentDiv.tagName()); assertEquals("collapsable", contentDiv.getAttribute("class")); HtmlElement content = (HtmlElement) removeNewlineTags(contentDiv).get(0); assertEquals("content", content.html()); }
public abstract PwGroup getParent(); public abstract PwGroupId getId(); public abstract String getName(); }
private String makeHtml(FitNesseContext context) { HtmlPage page = context.pageFactory.newPage(); page.addTitles("Not Found:" + resource); page.put("name", resource); page.put("shouldCreate", WikiWordPath.isWikiWord(resource)); page.setMainTemplate("notFoundPage.vm"); return page.html(); }
public void testSingleDeserialize() throws KeeperException, InterruptedException, IOException { deserializeTree(1, 0, 20); }
public void regexp() throws Exception { String r = StyleWidget.REGEXP; assertTrue(Pattern.matches(r, "!style_x(my text)")); assertTrue(Pattern.matches(r, "!style_style(my text)")); assertFalse(Pattern.matches(r, "!style(Hi)")); assertFalse(Pattern.matches(r, "!style_(Hi)")); assertFalse(Pattern.matches(r, "!style_myStyle(hi))")); }
public void testIsOutputShutdown(boolean useSecureClient) throws Exception { init(useSecureClient); serverSideSocket.isOutputShutdown(); assertFalse(serverSideSocket.isModeKnown()); serverSideSocket.shutdownOutput(); assertTrue(serverSideSocket.isOutputShutdown()); }
public WikiPage makePage(String pageName, String content) throws Exception { return makePage(root, pageName, content); }
public void close() throws IOException { super.close(); setTotalRunTimeOnReport(totalTimeMeasurement); writeResults(); }
public void evaluationMessageForBlankInput() throws Exception { String expected = ""; Expectation expectation = makeDummyExpectation(expected); assertEquals("!style_pass(BLANK)", expectation.createEvaluationMessage("", "", "")); }
public void config(Router router) { new Rules(router) { public void routes() {
public static boolean deleteRecursive(ZooKeeper zk, final String pathRoot, final int batchSize) throws InterruptedException, KeeperException { PathUtils.validatePath(pathRoot); List<String> tree = listSubTreeBFS(zk, pathRoot); LOG.debug("Deleting {}",tree); LOG.debug("Deleting {} subnodes ",tree.size()); return deleteInBatch(zk, tree, batchSize); }
private String unifiedPathPattern(String s) { return StringUtils.replace(s, "/", File.separator); }
public void run() { try { storageListener.storeResult(key, f.get());
public static Op create(String path, byte[] data, List<ACL> acl, int flags) { return new Create(path, data, acl, flags); }
private void incrementFrame() { if (currentFrame < 10) { currentFrame++;
public void testSlimTablesWithColonCreation() throws PluginException { testProperties.setProperty(ConfigurationParameter.SLIM_TABLES.getKey(), "test::" + TestSlimTable.class.getName()); SlimTableFactory slimTableFactory = new SlimTableFactory(); loader.loadSlimTables(slimTableFactory); HtmlTable table = makeMockTable("test:"); SlimTable slimTable = slimTableFactory.makeSlimTable(table, "foo", new SlimTestContextImpl()); assertSame(TestSlimTable.class, slimTable.getClass()); }
public void testBasics() throws Exception { ByteString topic1 = ByteString.copyFromUtf8("topic1"); ByteString sub1 = ByteString.copyFromUtf8("sub1");
public Maybe<Symbol> parse(Symbol current, Parser parser) { Symbol targetList = parser.parseToEnds(-1, SymbolProvider.linkTargetProvider, new SymbolType[]{SymbolType.Newline, SymbolType.Whitespace}); return new Maybe<>(current.add(targetList)); }
public void execute() throws InterceptionException { interceptorStack.add(ResourceLookupInterceptor.class); interceptorStack.add(URLParameterExtractorInterceptor.class); interceptorStack.add(InterceptorListPriorToExecutionExtractor.class); interceptorStack.add(instantiator); interceptorStack.add(ParametersInstantiatorInterceptor.class); interceptorStack.add(ExecuteMethodInterceptor.class);
public void testPieces() throws Exception { String text = "!virtualwiki http://localhost:" + FitNesseUtil.port + "/SomePage.ChildPage"; VirtualWikiWidget widget = new VirtualWikiWidget(new MockWidgetRoot(), text); assertEquals("http://localhost:" + FitNesseUtil.port + "/SomePage.ChildPage", widget.getRemoteUrl()); }
public void malformedStatement() throws Exception { statements.add(list("id", "call", "notEnoughArguments")); assertExceptionReturned("XX", "id"); }
public void testIndexing() throws Exception { Parse p = new Parse("leader<table><tr><td>one</td><td>two</td><td>three</td></tr><tr><td>four</td></tr></table>trailer"); assertEquals("one", p.at(0, 0, 0).body); assertEquals("two", p.at(0, 0, 1).body); assertEquals("three", p.at(0, 0, 2).body); assertEquals("three", p.at(0, 0, 3).body); assertEquals("three", p.at(0, 0, 4).body); assertEquals("four", p.at(0, 1, 0).body); assertEquals("four", p.at(0, 1, 1).body); assertEquals("four", p.at(0, 2, 0).body); assertEquals(1, p.size()); assertEquals(2, p.parts.size()); assertEquals(3, p.parts.parts.size()); assertEquals("one", p.leaf().body); assertEquals("four", p.parts.last().leaf().body); }
public void shouldNormalURIAsNotAjax() { final HttpServletRequest request = mockery.mock(HttpServletRequest.class); mockery.checking(new Expectations() { { one(request).getRequestURI(); will(returnValue("somethig.non-ajax.logic")); one(request).getParameter("view"); will(returnValue("xml")); } }); assertThat(Info.isAjax(request), is(equalTo(false))); mockery.assertIsSatisfied(); }
public void inc(long delta) { } @Override public long get() { return 0; } } private static final class NullSummary implements Summary { private static final NullSummary INSTANCE = new NullSummary(); @Override public void registerValue(long value) { } } }
public void shouldDoNothingWhenThereIsNoFlashParameters() throws Exception { when(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(null); interceptor.intercept(stack, null, null); verifyZeroInteractions(result); }
public void testLexer() { String buffer = "This ''is'': a WikiWord"; assertEquals(asList("Text:This", "Whitespace: ", "Italic:''is''", "Colon::", "Whitespace: ", "Text:a", "Whitespace: ", "WikiWord:WikiWord"), lex(buffer));
private void generateSuiteResultFile(SuiteExecutionReport report, File resultFile) throws Exception { VelocityContext velocityContext = new VelocityContext(); velocityContext.put("suiteExecutionReport", report); Template template = context.pageFactory.getVelocityEngine().getTemplate("suiteHistoryXML.vm"); FileWriter fileWriter = new FileWriter(resultFile); template.merge(velocityContext, fileWriter); fileWriter.close(); }
public static FitNesseContext makeTestContext(WikiPage root, int port) { return makeTestContext(root, createTemporaryFolder(), FitNesseUtil.base, port, new PromiscuousAuthenticator()); }
public void gotData(String k, int flags, byte[] data) { m.put(k, new CachedData(flags, data, tc.getMaxSize())); }
public void methodReturnsInt() throws Exception { String retval = caller.call("testSlim", "returnInt"); assertEquals("7", retval); }
public TestResult evaluateExpectation(Object returnValue) { return null; }
private void writeObject(String key, ProtectedBinary value, boolean allowRef) throws IllegalArgumentException, IllegalStateException, IOException { assert(key != null && value != null); xml.startTag(null, ElemBinary); xml.startTag(null, ElemKey); xml.text(safeXmlString(key)); xml.endTag(null, ElemKey); xml.startTag(null, ElemValue); String strRef = null; if (allowRef) { int ref = mPM.binPool.poolFind(value); strRef = Integer.toString(ref); } if (strRef != null) { xml.attribute(null, AttrRef, strRef); } else { subWriteValue(value); } xml.endTag(null, ElemValue); xml.endTag(null, ElemBinary); }
public void setUp() throws Exception { setupTestEnv(); JMXEnv.setUp(); setUpAll(); port1 = PortAssignment.unique(); port2 = PortAssignment.unique(); port3 = PortAssignment.unique(); port4 = PortAssignment.unique(); port5 = PortAssignment.unique(); leport1 = PortAssignment.unique(); leport2 = PortAssignment.unique(); leport3 = PortAssignment.unique(); leport4 = PortAssignment.unique(); leport5 = PortAssignment.unique(); clientport1 = PortAssignment.unique(); clientport2 = PortAssignment.unique(); clientport3 = PortAssignment.unique(); clientport4 = PortAssignment.unique(); clientport5 = PortAssignment.unique(); hostPort = "127.0.0.1:" + clientport1 + ",127.0.0.1:" + clientport2 + ",127.0.0.1:" + clientport3 + ",127.0.0.1:" + clientport4 + ",127.0.0.1:" + clientport5; LOG.info("Ports are: " + hostPort); s1dir = ClientBase.createTmpDir(); s2dir = ClientBase.createTmpDir(); s3dir = ClientBase.createTmpDir(); s4dir = ClientBase.createTmpDir(); s5dir = ClientBase.createTmpDir(); String config = "group.1=1:2:3\n" + "group.2=4:5\n" + "weight.1=1\n" + "weight.2=1\n" + "weight.3=1\n" + "weight.4=0\n" + "weight.5=0\n" + "server.1=127.0.0.1:" + port1 + ":" + leport1 + ";" + clientport1 + "\n" + "server.2=127.0.0.1:" + port2 + ":" + leport2 + ";" + clientport2 + "\n" + "server.3=127.0.0.1:" + port3 + ":" + leport3 + ";" + clientport3 + "\n" + "server.4=127.0.0.1:" + port4 + ":" + leport4 + ";" + clientport4 + "\n" + "server.5=127.0.0.1:" + port5 + ":" + leport5 + ";" + clientport5 + "\n"; ByteArrayInputStream is = new ByteArrayInputStream(config.getBytes()); this.qp = new Properties(); qp.load(is); startServers(); cht.hostPort = hostPort; cht.setUpAll(); LOG.info("Setup finished"); }
public Maybe<Symbol> parse(Parser parser) { Scanner scanner = parser.getScanner(); Symbol tag = Parser.makeIgnoreFirst(getPage(), scanner,SymbolType.CloseBracket).parse(); if (scanner.isEnd()) return Symbol.Nothing; scanner.moveNext(); if (!scanner.isType(SymbolType.OpenBracket)) return Symbol.Nothing; Symbol link = Parser.makeIgnoreFirst(getPage(), scanner, SymbolType.CloseBracket).parse(); List<Token> tokens = scanner.nextTokens(new SymbolType[] {SymbolType.CloseBracket}); if (tokens.size() == 0) return Symbol.Nothing; return new Maybe<Symbol>(new Symbol(SymbolType.Alias) .add(tag)
private String matchTextForPageOne() { return "PageOne content"; }
public void testWildcard() { InetSocketAddress socketAddress = new InetSocketAddress(port); Assert.assertEquals("InetSocketAddress with no host. " + "Expecting 0.0.0.0.",
public synchronized int size() { return serverAddresses.size(); }
private NodeList makeNodeList(ReadOnlyPageData pageData) { String html; ParsedPage parsedPage = pageData.getParsedPage(); html = parsedPage.toHtml(); Parser parser = new Parser(new Lexer(new Page(html))); try { return parser.parse(null);
public Maybe<Symbol> parse(Symbol current, Parser parser) { Symbol body = parser.parseTo(SymbolType.CloseEvaluator); if (parser.atEnd()) return Symbol.nothing; return new Maybe<>(current.add(body)); }
protected TestResult newTestResult() { return testResult; }
public boolean isPartOfEnsemble();  public boolean isLeader(); }
public void testCreate() throws Exception { List<OpResult> results = new ArrayList<OpResult>(); results = zk.multi(Arrays.asList( Op.create("/multi0", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT), Op.create("/multi1", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT), Op.create("/multi2", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT) )); zk.getData("/multi0", false, null); zk.getData("/multi1", false, null); zk.getData("/multi2", false, null); }
public void tearDown() throws Exception { LOG.info("tearDown starting"); stopped = true; zks.shutdown(); for (TestClientThread client : testClients) { client.interrupt(); client.join(); } if (tmpDir != null) { assertTrue(ClientBase.recursiveDelete(tmpDir), "delete " + tmpDir.toString()); } processedReadRequests.set(0); processedWriteRequests.set(0); testClients.clear(); commitProcessor.join(); }
public void canHandleUrlIfRootContext() { when(request.getRequestURI()).thenReturn("/url"); when(request.getContextPath()).thenReturn(""); when(request.getMethod()).thenReturn("GET"); when(router.parse("/url", HttpMethod.GET, webRequest)).thenReturn(method); ResourceMethod resource = translator.translate(info); assertThat(resource, is(equalTo(method)));
public String message() { String message = null; String parmString = "<b>" + parameter.toString() + "</b>"; if(expression.indexOf("_") == -1) message = parmString + expression; else message = expression.replaceFirst("_", parmString); return message; }
public void doConnect(PubSubData pubSubData, InetSocketAddress serverHost) { if (logger.isDebugEnabled()) logger.debug("Connecting to host: " + serverHost + " with pubSubData: " + pubSubData);
private void acceptConnections() throws IOException { Socket socket = null; boolean error = false; try { socket = serverSocket.accept();
public void testPagesForTestSystemAreSurroundedBySuiteSetupAndTeardown() throws Exception { WikiPage slimPage = addTestPage(suite, "AaSlimTest", simpleSlimDecisionTable); WikiPage setUp = WikiPageUtil.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = WikiPageUtil.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); testPages = new LinkedList<WikiPage>(); testPages.add(setUp); testPages.add(slimPage); testPages.add(testPage); testPages.add(tearDown); MultipleTestsRunner runner = new MultipleTestsRunner(testPages, context, new MultipleTestSystemFactory()); Map<WikiPageDescriptor, LinkedList<WikiTestPage>> map = runner.makeMapOfPagesByTestSystem(); Descriptor fitDescriptor = new WikiPageDescriptor(testPage.readOnlyData(), false, false, new ClassPathBuilder().getClasspath(testPage)); Descriptor slimDescriptor = new WikiPageDescriptor(slimPage.readOnlyData(), false, false, new ClassPathBuilder().getClasspath(slimPage)); List<WikiTestPage> fitList = map.get(fitDescriptor); List<WikiTestPage> slimList = map.get(slimDescriptor); assertEquals(3, fitList.size()); assertEquals(3, slimList.size()); assertEquals(setUp, fitList.get(0).getSourcePage()); assertEquals(testPage, fitList.get(1).getSourcePage()); assertEquals(tearDown, fitList.get(2).getSourcePage()); assertEquals(setUp, slimList.get(0).getSourcePage()); assertEquals(slimPage, slimList.get(1).getSourcePage()); assertEquals(tearDown, slimList.get(2).getSourcePage()); }
public void testComplete(TestSummary testSummary) throws IOException { assert currentTestPage != null; testSystemListener.testComplete(currentTestPage, testSummary); currentTestPage = null; }
private void parsePageContent() throws Exception { if (contentSyntaxTree == null) { parsingPage = new ParsingPage(new WikiSourcePage(wikiPage));
protected void runPages(List<WikiPage>pages, final RunNotifier notifier) { MultipleTestsRunner testRunner = createTestRunner(pages); addTestSystemListeners(notifier, testRunner, suiteClass); addExecutionLogListener(notifier, testRunner, suiteClass); System.setProperty(SystemExitSecurityManager.PREVENT_SYSTEM_EXIT, String.valueOf(preventSystemExit)); try { executeTests(testRunner);
<T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndLock(final String key, int exp); <T> Future<CASValue<T>> asyncGetAndLock(final String key, int exp, final Transcoder<T> tc); CASValue<Object> getAndLock(String key, int exp); <T> CASValue<T> getAndLock(String key, int exp, Transcoder<T> tc); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public XmlSerializer exclude(String... names) { for (String name : names) { xstream.omitField(toSerialize.getClass(), name); } return this; }
public void testFindReferencingPagesNotReferenced() throws Exception { WhereUsedPageFinder whereUsed = new WhereUsedPageFinder(pageThree, hits); whereUsed.search(root); hits.assertPagesFound(); }
public void execute() { if (control == null || !control.isDirectory()) { throw new BuildException("you need to point the 'control' attribute to the control directory"); } if (dataFiles.size() == 0) { throw new BuildException("you need to provide at least one pointer to a tgz or directory with the data"); } if (deb == null) { throw new BuildException("you need to point the 'destfile' attribute to where the deb is supposed to be created"); } File tempData = null; File tempControl = null; try { tempData = File.createTempFile("deb", "data");
ByteBuffer getBuffer();  void writeComplete();  void initialize();  void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data);  MemcachedNode getHandlingNode();  void setHandlingNode(MemcachedNode to);  public void timeOut();  public boolean isTimedOut();  public boolean isTimedOut(long ttlMillis); }
public String translateIgnoreFirst(Scanner scanner, SymbolType terminator) { return translateIgnoreFirst(scanner, new SymbolType[] {terminator}); }
public void testGetRootPagePath() { FitNesseContext context = FitNesseUtil.makeTestContext(); assertEquals(context.rootPath + File.separator + FitNesseUtil.base, context.getRootPagePath()); }
public long testableLastZxid() { return cnxn.getLastZxid(); }
public void acceptOutput(String output) throws Exception { } public void acceptResults(Counts counts) throws Exception { } public void exceptionOccurred(Exception e) { } }
public void variablesAreReplacedInMatch() throws Exception { makeQueryTableAndBuildInstructions(queryTableHeader + "|2|$V|\n"); qt.setSymbol("V", "4"); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("queryTable_id_0", "OK"), list("queryTable_id_1", VoidConverter.VOID_TAG), list("queryTable_id_2", list( list(list("n", "2"), list("2n", "4")) ) ) ) ); testContext.evaluateExpectations(pseudoResults); org.junit.Assert.assertEquals( "[" +
public void shouldUseVRaptor3AlgorithmIfNotAVRaptor2Component() throws SecurityException, NoSuchMethodException { final Resource resource = mockery.resource(VRaptor3Component.class); this.router.register(resource); assertThat(router.parse("/VRaptor3Component/name", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(VRaptor3Component.class.getMethod("name")))); mockery.assertIsSatisfied(); }
public void testDifferentWatchModes() { Watcher watcher = new DummyWatcher(); watchManager.addWatch("/a", watcher, WatcherMode.PERSISTENT); assertEquals(0, watchManager.getRecursiveWatchQty()); watchManager.addWatch("/a", watcher, WatcherMode.PERSISTENT_RECURSIVE); assertEquals(1, watchManager.getRecursiveWatchQty()); watchManager.addWatch("/a", watcher, WatcherMode.STANDARD); assertEquals(1, watchManager.getRecursiveWatchQty()); assertTrue(watchManager.removeWatcher("/a", watcher)); assertEquals(0, watchManager.getRecursiveWatchQty()); }
private static int findBranchPoint(List<String> list1, List<String> list2) { int i; for(i = 0; i < list1.size(); i++) { if(!list1.get(i).equals(list2.get(i))) break; } return Math.max(0, i - 1); }
private String invalidWikiPageContent(String resource) { return "The page " + resource + " doesn't support '" + operation.getName() + "' operation."; }
public void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException { this.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), proxifier, creator); router.register(mockery.resource(MyResource.class)); final Method method = mockery.methodFor(MyResource.class, "customizedPath").getMethod(); allowParametersCreation(method); String url = router.urlFor(MyResource.class, method, new Object[] {}); assertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method))); mockery.assertIsSatisfied(); }
private void configureSSLAuth() throws ConfigException { try (ClientX509Util clientX509Util = new ClientX509Util()) { String sslAuthProp = "zookeeper.authProvider." + System.getProperty(clientX509Util.getSslAuthProviderProperty(), "x509");
public InetSocketAddress next(long spinDelay) { boolean needToSleep = false; InetSocketAddress addr; synchronized(this) { if (reconfigMode) { addr = nextHostInReconfigMode(); if (addr != null) return addr;
public TokenMatch makeMatch(ScanString input) { if (input.startsWith(delimiter)) { int wordLength = input.wordLength(delimiter.length()); if (wordLength > 0) { return new TokenMatch( new AnchorReferenceToken(input.substring(delimiter.length(), delimiter.length() + wordLength)), delimiter.length() + wordLength); } } return TokenMatch.noMatch; }
public boolean equals( Object o) { if (!(o instanceof DSAPrivateKey)) { return false; } DSAPrivateKey other = (DSAPrivateKey)o; return this.getX().equals(other.getX()) && this.getParams().getG().equals(other.getParams().getG())
public void setUp() throws Exception { source = InMemoryPage.makeRoot("RooT"); source.getPageCrawler().addPage(source, PathParser.parse("SimplePage"), "this is SimplePage"); request = new MockRequest(); request.setResource("SimplePage"); request.addInput(EditResponder.TIME_STAMP, ""); request.addInput(EditResponder.CONTENT_INPUT_NAME, "some new content"); }
public static FitNesseContext makeTestContext(WikiPage root, String rootPath, String rootDirectoryName, int port, Authenticator authenticator) { Builder builder = new Builder(); builder.root = root; builder.rootPath = rootPath; builder.rootDirectoryName = rootDirectoryName; builder.port = port; builder.authenticator = authenticator; builder.versionsController = new ZipFileVersionsController(); builder.recentChanges = new RecentChangesWikiPage(); builder.properties = new Properties(); FitNesseContext context = builder.createFitNesseContext();
public File takeSnapshot(boolean syncSnap) throws IOException { return takeSnapshot(syncSnap, true); }
private HtmlTag makeSuitesSelectionHtml() { HtmlTag div = new HtmlTag("div"); div.addAttribute("style", "float: left;"); div.add(PropertiesResponder.SUITES + ":"); div.add(HtmlUtil.BR); div.add(HtmlUtil.makeInputTag("checkbox", PropertiesResponder.SUITES + SELECTED)); div.add(HtmlUtil.makeInputTag("text", PropertiesResponder.SUITES, "")); return div; }
public void shouldNotComplainAboutNullAndEmpty() { assertThat(converter.convert(null, Character.class, errors, bundle), is(nullValue())); assertThat(converter.convert("", Character.class, errors, bundle), is(nullValue())); }
public void testGetInetAddress() { serverSideSocket.getInetAddress(); Assert.assertFalse(serverSideSocket.isModeKnown()); }
private String executionStatusHtml(String linkHref) throws Exception { ExecutionStatus executionStatus; if (exceptionCount() > 0) executionStatus = ExecutionStatus.ERROR; else if (hasCapturedOutput()) executionStatus = ExecutionStatus.OUTPUT; else executionStatus = ExecutionStatus.OK; return makeExecutionStatusLink(linkHref, executionStatus); }
public void testGetBuilderForPKCS12FileType() { FileKeyStoreLoader.Builder<?> builder = FileKeyStoreLoaderBuilderProvider.getBuilderForKeyStoreFileType( KeyStoreFileType.PKCS12); Assert.assertTrue(builder instanceof PKCS12FileLoader.Builder); }
@Test public void translatesBold() { ParserTest.assertTranslates("'''bold text'''", "<b>bold text</b>" + HtmlElement.endl); }
public PageData getCachedData() throws Exception { if (cachedData != null) return (PageData) cachedData.get();
public final void visitLabel(final Label label) { AttributesImpl attrs = new AttributesImpl(); attrs.addAttribute("", "name", "name", "", getLabel(label)); addElement("Label", attrs); }
private long roundToNextInterval(long time) { return (time / expirationInterval + 1) * expirationInterval; }
private void signalTables(Parse tables) { while (tables != null) { listener.tableFinished(tables);
protected void setupDecorator(String[] arguments) throws InvalidInputException { if (arguments.length != 3) { throw new InvalidInputException("Column name, Data type and Delta Value must be specified"); } columnName = arguments[0]; delta = new Delta(arguments[1], arguments[2]); summary.put(COLUMN_NAME, columnName); summary.put(DELTA, delta); }
void removeWatcher(Watcher watcher, String path) { adjustRecursiveQty(watcherModes.remove(new Key(watcher, path)), WatcherMode.DEFAULT_WATCHER_MODE); }
public void testIncorrectTypeInCAS() throws Throwable {
public CachedData encode(Object o) { throw new RuntimeException("Not implemented."); }};
public void shouldDeleteHistoryFromRequest() throws Exception { request.addInput("purgeHistory",""); request.addInput("days", "30"); File pageDirectory = addPageDirectory("SomePage"); addTestResult(pageDirectory, "20090402000000_1_0_0_0"); addTestResult(pageDirectory, "20090602000000_1_0_0_0"); history.readHistoryDirectory(resultsDirectory); PageHistory pageHistory = history.getPageHistory("SomePage"); assertEquals(2, pageHistory.size()); responder.makeResponse(context,request); history.readHistoryDirectory(resultsDirectory); pageHistory = history.getPageHistory("SomePage"); assertEquals(1, pageHistory.size()); }
public String toString(Object o) { if (o == null) return "null"; Boolean[] booleans = (Boolean[]) o; return Arrays.asList(booleans).toString(); }
int getTimeout(); boolean isClosing(); } public static interface SessionExpirer { void expire(Session session); long getServerId(); } long createSession(int sessionTimeout);  boolean trackSession(long id, int to);  boolean commitSession(long id, int to);  boolean touchSession(long sessionId, int sessionTimeout);  void setSessionClosing(long sessionId);  void shutdown();  void removeSession(long sessionId);  boolean isTrackingSession(long sessionId);  public void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  public void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap(); }
public void shouldIgnoreIsWithNotEnoughChars() throws SecurityException, NoSuchMethodException, InterceptionException, IOException { final ResourceMethod method = mockery.methodForResource(WeirdIsComponent.class); final WeirdIsComponent component = new WeirdIsComponent(); mockery.checking(new Expectations() { { one(stack).next(method, component); } }); interceptor.intercept(stack, method, component); mockery.assertIsSatisfied(); }
public void testChRootRemoveWatcher() throws Exception {
public void produce( final DataConsumer pReceiver ) throws IOException { if (!src.exists()) { throw new FileNotFoundException("Data source not found : " + src); } org.vafer.jdeb.mapping.Mapper[] mappers = new org.vafer.jdeb.mapping.Mapper[mapperWrapper.size()]; final Iterator it = mapperWrapper.iterator(); for (int i = 0; i < mappers.length; i++) { mappers[i] = ((Mapper)it.next()).createMapper(); } if (src.isFile()) { new DataProducerArchive(
Map<Long, QuorumServer> getVotingMembers(); Map<Long, QuorumServer> getObservingMembers(); boolean equals(Object o); byte[] toByteArray(); }
private File createFileFromPath(String linkPath) {
public static ServerCnxnFactory createFactory(int clientPort, int maxClientCnxns) throws IOException { return createFactory(new InetSocketAddress(clientPort), maxClientCnxns, -1); }
public void assertSuitePasses_appliesSuiteFilterIfDefined() throws Exception { String suiteName = "FitNesse.SuiteAcceptanceTests.SuiteSlimTests"; helper.assertSuitePasses(suiteName, "testSuite"); assertEquals(new HashSet<String>(Arrays.asList(expectedTestsWithSuiteFilter)), new HashSet<String>(visitedPages));
MutatorOperation mutate(Mutator m, String key, int by, long def, int exp, OperationCallback cb);  StatsOperation stats(String arg, StatsOperation.Callback cb);  StoreOperation store(StoreType storeType, String key, int flags, int exp, byte[] data, OperationCallback cb);  KeyedOperation touch(String key, int expiration, OperationCallback cb);  ConcatenationOperation cat(ConcatenationType catType, long casId, String key, byte[] data, OperationCallback cb);  CASOperation cas(StoreType t, String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  SASLMechsOperation saslMechs(OperationCallback cb);  SASLAuthOperation saslAuth(String[] mech, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  SASLStepOperation saslStep(String[] mech, byte[] challenge, String serverName, Map<String, ?> props, CallbackHandler cbh, OperationCallback cb);  Collection<Operation> clone(KeyedOperation op); }
public void justSmallEnough() throws Exception { assertTrue(approximatelyEqual("-3.00", "-2.995")); }
<T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public void processTestOutput(String output) throws Exception { if (response.isXmlFormat()) { appendHtmlToBuffer(output);
private void includeScenarioLibraryBelow(WikiPage suitePage) { includeScenarioLibrariesIfAppropriate(new BelowSuiteLibraryFilter(suitePage)); }
public void testLoadChildrenWhenPageIsDeletedManualy() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("TestPage")); page.getChildren(); FileUtil.deleteFileSystemDirectory(((FileSystemPage)page).getFileSystemPath()); try {
protected void createFormatterAndWriteHead() throws Exception { if (response.isXmlFormat()) addXmlFormatter(); else addHtmlFormatter(); addTestHistoryFormatter(); formatters.writeHead(getTitle()); }
public void canAccessGenericTypeAndMethodRoute() throws NoSuchMethodException { this.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesCreator(proxifier), provider, proxifier, creator); new Rules(router) { public void routes() { routeFor("--(*)--(*)").is(type("br.com.caelum.vraptor.http.route.DefaultRouterTest{1}"), method("{2}")); } }; ResourceMethod resourceMethod = router.parse("--MyResource--notAnnotated", HttpMethod.GET, request); assertThat(resourceMethod.getMethod(), is(equalTo(MyResource.class.getDeclaredMethod("notAnnotated")))); String url = router.urlFor(MyResource.class, resourceMethod.getMethod(), new Object[]{}); assertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(resourceMethod.getMethod()))); mockery.assertIsSatisfied(); }
public void receivedStatus(OperationStatus status) { if (!status.isSuccess()) { getLogger().warn("Unsuccessful stat fetch: %s", status);
public void config() { this.mockery = new Mockery(); this.method = mockery.mock(ResourceMethod.class); this.resource = mockery.mock(Resource.class); }
public static long ttlToEphemeralOwner(long ttl) { if ((ttl > MAX_TTL) || (ttl <= 0)) { throw new IllegalArgumentException("ttl must be positive and cannot be larger than: " + MAX_TTL); } return TTL_MASK | ttl; }
private void includeScenarioLibraries() { includeScenarioLibrariesIfAppropriate(AllLibrariesFilter.instance);
public void shouldNotComplainAboutEmpty() { assertThat(converter.convert("", BigInteger.class, bundle), is(nullValue())); }
protected String command() { return "java -cp classes fit.FitServer"; }
public void testFnv1_64() { HashMap<String, Long> exp = new HashMap<String, Long>(); exp.put("", 0x84222325L); exp.put(" ", 0x8601b7ffL); exp.put("hello world!", 0xb97b86bcL); exp.put("Lorem ipsum dolor sit amet, consectetuer adipiscing elit.", 0xe87c054aL); exp.put("wd:com.google", 0x071b08f8L); exp.put("wd:com.google ", 0x12f03d48L); for (Map.Entry<String, Long> me : exp.entrySet()) { assertHash(HashAlgorithm.FNV1_64_HASH, me.getKey(),
public void actionPerformed(ActionEvent e) { int result = fileChooser .showOpenDialog(ZooInspectorConnectionPropertiesDialog.this); if (result == JFileChooser.APPROVE_OPTION) { File propsFilePath = fileChooser.getSelectedFile();
public void testNativeAndroid() throws IOException {
public static void main(final String[] args) throws IOException { int n = args.length - 1; for (int i = 0; i < n - 1; ++i) { MAPPING.load(new FileInputStream(args[i])); } final Set unused = new HashSet(MAPPING.keySet()); File f = new File(args[n - 1]); File d = new File(args[n]); optimize(f, d, new SimpleRemapper(MAPPING) { public String map(String key) { String s = super.map(key); if (s != null) { unused.remove(key); } return s; } }); Iterator i = unused.iterator(); while (i.hasNext()) { String s = (String) i.next();
public void setUp() throws Exception { l = new Logger(dirPath); ld = new LogData(); ld.host = "myHost"; ld.requestLine = "request"; ld.size = 666; ld.status = 42; TimeZone z = TimeZone.getTimeZone("GMT-1:00"); ld.time = new GregorianCalendar(2003, 2, 6, 13, 42, 5); ld.time.setTimeZone(z); }
void sendWriteRequest(int bookieIndex, int arrayIndex) { lh.bk.bookieClient.addEntry(lh.metadata.currentEnsemble.get(bookieIndex), lh.ledgerId, lh.ledgerKey, entryId, toSend, this, arrayIndex);
public void copyHeader(PwDbHeaderV3 header) {
private List<String> manyClientOps(final ZooKeeper zk, final CountDownLatch doPurge, int thCount, final String prefix) { Thread[] ths = new Thread[thCount]; final List<String> znodes = Collections.synchronizedList(new ArrayList<String>()); final CountDownLatch finished = new CountDownLatch(thCount); for (int indx = 0; indx < thCount; indx++) { final String myprefix = prefix + "-" + indx; Thread th = new Thread() { public void run() { for (int i = 0; i < 1000; i++) { try { String mynode = myprefix + "-" + i; znodes.add(mynode); zk.create(mynode, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); } catch (Exception e) { LOG.error("Unexpected exception", e); } if (i == 200) { doPurge.countDown(); } } finished.countDown(); } }; ths[indx] = th; } for (Thread thread : ths) { thread.start(); } try { assertTrue("ZkClient ops is not finished!", finished.await(OP_TIMEOUT_IN_MILLIS, TimeUnit.MILLISECONDS)); } catch (InterruptedException ie) { LOG.error("Unexpected exception", ie); fail("Unexpected exception occurred!"); } return znodes; }
public boolean isProxy(Class<?> clazz) { return HibernateProxy.class.isAssignableFrom(clazz); }
public void run() { response.waitForReadyToSend(); startSending();
public void visit(final String name, final Object value) { } public void visitEnum(final String name, final String desc, final String value) { } public AnnotationVisitor visitAnnotation(final String name, final String desc) { return this; } public AnnotationVisitor visitArray(final String name) { return this; } }
public Object invoke(Object proxy, Object[] args) { try { return proceed.invoke(proxy, args);
public LinkMethod get(Object key) { return new LinkMethod((Class<?>) key); }
private ASN1EncodableVector rLoadVector(InputStream in) { try {
public void scansLiteral() { ParserTestHelper.assertScansTokenType("!- stuff -!", "Literal", true); }
public void canFindMethodWithSameSimpleClassName() { String findMethod = "doTable"; TableTableIncFirstCol instance = new TableTableIncFirstCol(); fitnesse.slim.test.statementexecutorconsumer.TableTableIncFirstCol consInstance = new fitnesse.slim.test.statementexecutorconsumer.TableTableIncFirstCol(); Method method = interaction.findMatchingMethod(findMethod, instance, Collections.emptyList()); assertEquals(findMethod, method.getName()); assertEquals("Method returned is defined by the wrong class (i.e. not the class of the instance passed)", instance.getClass(), method.getDeclaringClass());
private String tableWithCellAndRow(String cellContent, String firstRow) { return nestedTableWithCellAndRow(cellContent, firstRow) + HtmlElement.endl; }
public void shoudWorkWithSubclassesOfComponenetFactoryImplementations() { Class<?> c = new ComponentFactoryIntrospector().targetTypeForComponentFactory((XX2.class)); Assert.assertEquals(String.class, c); }
public void testLoadKeyStoreWithWrongFileType( X509KeyType caKeyType, X509KeyType certKeyType, String keyPassword, Integer paramIndex) throws Exception { init(caKeyType, certKeyType, keyPassword, paramIndex); assertThrows(IOException.class, () -> {
public String getName() throws Exception; public PageData getData() throws Exception; public PageData getDataVersion(String versionName) throws Exception; public VersionInfo commit(PageData data) throws Exception; public PageCrawler getPageCrawler();
public void set(Future<T> d, OperationStatus s) { rv.set(d, s); }
void testSystemStarted(TestSystem testSystem, String testSystemName, String testRunner); void testOutputChunk(String output) throws IOException; void testComplete(TestSummary testSummary) throws IOException; void exceptionOccurred(Throwable e); void testAssertionVerified(Assertion assertion, TestResult testResult); void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); }
private void waitForDeletion(ZooKeeper zooKeeper, String path) throws Exception { long elapsedTime = 0; long waitInterval = 10; int timeout = 100; Stat exists = zooKeeper.exists(path, false); while (exists != null && elapsedTime < timeout) { try { Thread.sleep(waitInterval); } catch (InterruptedException e) { Assert.fail("CurrentEpoch update failed"); } elapsedTime = elapsedTime + waitInterval; exists = zooKeeper.exists(path, false); } Assert.assertNull("Node " + path + " not deleted in " + timeout + " ms", exists);
public FileSystemPage makePage(File path, String pageName, FileSystemPage parent) { if (parent != null) { return new FileSystemPage(pageName, parent);
public Object intercept(Object proxy, Method method, Object[] args, SuperMethod superMethod) { Assert.fail("should not call this Method interceptor"); return null; }
public void verify(String type) throws Exception { if (expectedStatus != ClientResponse.Status.NOT_FOUND) { zpath = zk.create(zpath, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL); } ClientResponse cr = znodesr.path(zpath).accept(type).type(type) .delete(ClientResponse.class); Assert.assertEquals(expectedStatus, cr.getClientResponseStatus());
private static void printUsage() { System.err.println("Usage: java -jar fitnesse.jar [-pdrleoa]"); System.err.println("\t-p <port number> {" + Arguments.DEFAULT_PORT + "}"); System.err.println("\t-d <working directory> {" + Arguments.DEFAULT_PATH + "}"); System.err.println("\t-r <page root directory> {" + Arguments.DEFAULT_ROOT + "}"); System.err.println("\t-l <log directory> {no logging}"); System.err.println("\t-e <days> {" + Arguments.DEFAULT_VERSION_DAYS + "} Number of days before page versions expire"); System.err.println("\t-o omit updates"); System.err.println("\t-a {user:pwd | user-file-name} enable authentication."); }
public void testCreateOK() throws Exception { ensureCheck(true); zkClient.create(PARENT_PATH, DATA, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); zkClientB.create(CHILD_PATH, DATA, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); Assert.assertEquals("OutstandingRequests not decremented", 0,
protected File defaultTestAnalysisCacheFile(MavenProject p) { return new File(defaultAnalysisDirectory(p), "test-compile"); }
public void allTestingComplete() throws Exception { if (isSuite) writeSummary(mainPageName); if (listener!=null) listener.allTestingComplete(); }
public void registerExtraParametersFromAcessedUrl() throws SecurityException, NoSuchMethodException { new Rules(router) { public void routes() { routeFor("/clients/{dog.id}").is(MyControl.class).show(null); } }; ResourceMethod method = router.parse("/clients/45", HttpMethod.POST, request); assertThat(request.getParameter("dog.id"), is(equalTo("45"))); assertThat(method, is(VRaptorMatchers.resourceMethod(method("show", Dog.class)))); mockery.assertIsSatisfied(); }
public ExtJSJson success(boolean success); public ExtJSJson selected(Object value); public ExtJSJson exclude(String... names); public ExtJSJson include(String... fields); public ExtJSJson serialize(); public ExtJSJson addTotal(Integer total); }
static void printUsage() { ContextConfigurator defaults = ContextConfigurator.systemDefaults(); System.err.println("Usage: java -jar fitnesse.jar [-vpdrlfeoaicb]"); System.err.println("\t-p <port number> {" + DEFAULT_PORT + "}"); System.err.println("\t-d <working directory> {" + defaults.get(ROOT_PATH) + "}"); System.err.println("\t-r <page root directory> {" + defaults.get(ROOT_DIRECTORY) + "}"); System.err.println("\t-l <log directory> {no logging}"); System.err.println("\t-f <config properties file> {" + defaults.get(CONFIG_FILE) + "}"); System.err.println("\t-e <days> {" + defaults.get(VERSIONS_CONTROLLER_DAYS) + "} Number of days before page versions expire"); System.err.println("\t-o omit updates"); System.err .println("\t-a {user:pwd | user-file-name} enable authentication."); System.err.println("\t-i Install only, then quit."); System.err.println("\t-c <command> execute single command."); System.err.println("\t-b <filename> redirect command output."); System.err.println("\t-v {off} Verbose logging"); }
public synchronized void serialize(DataTree dt, Map<Long, Integer> sessions, File snapShot, boolean fsync) throws IOException {
String genCppGetSet(String fname, int fIdx) { String getFunc = " virtual " + mCppName + " get" + fname + "() const {\n"; getFunc += " return m" + fname + ";\n"; getFunc += " }\n"; String setFunc = " virtual void set" + fname + "(" + mCppName + " m_) {\n"; setFunc += " m" + fname + "=m_; bs_.set(" + fIdx + ");\n"; setFunc += " }\n"; return getFunc + setFunc; }
DataNode remove(String path);  Set<Map.Entry<String, DataNode>> entrySet();  void clear();  int size();  void preChange(String path, DataNode node);  void postChange(String path, DataNode node);  long getDigest(); }
public ViewFuture query(View view, Query query); public HttpFuture<ViewResponseNoDocs> queryAndExcludeDocs(View view, Query query); public HttpFuture<ViewResponseReduced> queryAndReduce(View view, Query query); }
public void testTwoChildren() throws Exception { tag.add(new HtmlTag("tag1")); tag.add(new HtmlTag("tag2")); String expected = "<sillytag>" + endl + "\t<tag1/>" + endl + "\t<tag2/>" + endl + "</sillytag>" + endl; assertEquals(expected, tag.html()); }
public void canDumpTablesBackToWikiText() throws Exception { String contents = "junk\n|a|b|\njunk\n|c|d|\njunk\n"; TableScanner ts = scanTable(contents); assertEquals("junk\n|!<a>!|!<b>!|\njunk\n|!<c>!|!<d>!|\njunk\n", ts.toWikiText()); }
public void index() { result.include("variable", "VRaptor!"); }
void next(ResourceMethod method, Object resourceInstance) throws IOException, InterceptionException; void addAsNext(Interceptor interceptor); }
public void setUp() throws Exception { } public void tearDown() throws Exception { } public void testRegexp() throws Exception { assertTrue(Pattern.matches(BoldWidget.REGEXP, "'''bold'''")); assertTrue(Pattern.matches(BoldWidget.REGEXP, "''''bold''''")); assertFalse(Pattern.matches(BoldWidget.REGEXP, "'' 'not bold' ''")); } public void testBadConstruction() throws Exception { BoldWidget widget = new BoldWidget(new MockWidgetRoot(), "''''some text' '''"); assertEquals(1, widget.numberOfChildren()); WikiWidget child = widget.nextChild(); assertEquals(TextWidget.class, child.getClass()); assertEquals("'some text' ", ((TextWidget) child).getText()); } public void testHtml() throws Exception { BoldWidget widget = new BoldWidget(new MockWidgetRoot(), "'''bold text'''"); assertEquals("<b>bold text</b>", widget.render()); } }
public void testResultsHtml() throws Exception { TestSystem fitMock = mock(TestSystem.class); when(fitMock.getName()).thenReturn("Fit:laughing.fit"); TestSystem slimMock = mock(TestSystem.class); when(slimMock.getName()).thenReturn("Slim:very.slim"); formatter.testSystemStarted(fitMock); formatter.announceNumberTestsToRun(2); formatter.announceStartNewTest("RelativeName", "FullName"); formatter.testOutputChunk("starting"); formatter.testOutputChunk(" output"); formatter.processTestResults("RelativeName", new TestSummary(1, 0, 0, 0)); formatter.testSystemStarted(slimMock); formatter.announceStartNewTest("NewRelativeName", "NewFullName"); formatter.testOutputChunk("second"); formatter.testOutputChunk(" test"); formatter.processTestResults("NewRelativeName", new TestSummary(0, 1, 0, 0)); formatter.finishWritingOutput(); String results = pageBuffer.toString(); assertSubString("<h2>Test Output</h2>", results); assertSubString("<h2>Test System: Slim:very.slim</h2>", results); assertSubString("<div class=\"test_output_name\">", results); assertSubString("<a href=\"FullName\" id=\"RelativeName1\" class=\"test_name\">RelativeName</a>", results); assertSubString("<div class=\"alternating_block\">starting output</div>", results); assertSubString("<a href=\"NewFullName\" id=\"NewRelativeName2\" class=\"test_name\">NewRelativeName</a>", results); assertSubString("<div class=\"alternating_block\">second test</div>", results); }
public void testWithAutoCreateDataLogDir() throws Exception { ClientBase.setupTestEnv(); System.setProperty(FileTxnSnapLog.ZOOKEEPER_DATADIR_AUTOCREATE, "true"); final int CLIENT_PORT = 3181; MainThread main = new MainThread(CLIENT_PORT, false); String args[] = new String[1]; args[0] = main.confFile.toString(); main.start(); Assert.assertTrue("waiting for server being up", ClientBase.waitForServerUp("127.0.0.1:" + CLIENT_PORT, CONNECTION_TIMEOUT)); ZooKeeper zk = new ZooKeeper("127.0.0.1:" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT, this); zk.create("/foo", "foobar".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); Assert.assertEquals(new String(zk.getData("/foo", null, null)), "foobar"); zk.close(); main.shutdown(); main.join(); main.deleteDirs(); Assert.assertTrue("waiting for server down", ClientBase .waitForServerDown("127.0.0.1:" + CLIENT_PORT,
public void testContentOfPage() throws Exception { request.setResource("files"); request.addInput("filename", "MyFile.txt"); Responder responder = new DeleteConfirmationResponder(); SimpleResponse response = (SimpleResponse)responder.makeResponse(context, request); String content = response.getContent(); assertSubString("deleteFile", content); assertSubString("Delete File", content); assertSubString("MyFile.txt", content); }
int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size); }
public void testVariablesRenderedFirst() throws Exception { String text = "!define x {''italics''}\n${x}"; WikiPage root = InMemoryPage.makeRoot("RooT"); WikiPage page = WikiPageUtil.addPage(root, PathParser.parse("SomePage"), text); String html = page.getHtml(); assertHasRegexp("''italics''", html); assertHasRegexp("<i>italics</i>", html); }
public void shouldEscapeMultipleOccurencesOfTheSameCharacter() { assertEquals("ab&amp;cd&amp;ef&amp;", Utils.escapeHTML("ab&cd&ef&")); }
public void shouldBeAbleToDeserializeADogWhenMethodHasMoreThanOneArgumentAndHasNotRoot() throws Exception { InputStream stream = new ByteArrayInputStream("{'name':'Brutus','age':7}".getBytes()); when(provider.parameterNamesFor(jump.getMethod())).thenReturn(new String[] { "dog", "times" }); Object[] deserialized = deserializer.deserialize(stream, jump); assertThat(deserialized.length, is(2)); assertThat(deserialized[0], is(instanceOf(Dog.class))); Dog dog = (Dog) deserialized[0]; assertThat(dog.name, is("Brutus")); assertThat(dog.age, is(7)); }
public Maybe<Integer> match(ScanString input, SymbolStream symbols, int offset) { return input.matches(delimiter, offset) ? new Maybe<>(delimiter.length()) : Maybe.noInteger; }
public void testRunnerDefault() throws Exception { String pageText = "!define TEST_SYSTEM {slim}\n"; WikiPage page = makeTestPage(pageText); Descriptor descriptor = new WikiPageDescriptor(page.readOnlyData(), false, false, getClassPath(page)); assertEquals("fitnesse.slim.SlimService", descriptor.getTestRunner()); Descriptor debugDescriptor = new WikiPageDescriptor(page.readOnlyData(), false, true, getClassPath(page)); assertEquals("fitnesse.slim.SlimService", debugDescriptor.getTestRunner()); }
protected Result createEvaluationMessage(String actual, String expected) { Result evaluationMessage; String replacedExpected = replaceSymbols(expected); if (actual == null) evaluationMessage = fail("null");
Parse secondLastRow(Parse lastRow) { Parse nextRow = table.parts; Parse currentRow = null; while (nextRow != lastRow) { currentRow = nextRow; nextRow = nextRow.more; } currentRow.more = null; return currentRow; }
public void testReadNumberOfBytesAsString() throws Exception { startReading(new ReadCount(100)); StringBuffer buffer = new StringBuffer(); for (int i = 0; i < 100; i++) { buffer.append("*"); writeToPipe("*"); } finishReading(); assertEquals(buffer.toString(), readResult); }
public static void main(String[] args) throws IOException { if (args.length != 3) { System.out.println("Usage: FourLetterWordMain <host> <port> <cmd>");
public void shouldExecuteTestPagesGroupedByTestSystem() throws TestExecutionException { WikiPage testPage1 = addTestPage(suite, "TestPage1", "!define TEST_SYSTEM {A}"); WikiPage testPage2 = addTestPage(suite, "TestPage2", "!define TEST_SYSTEM {B}"); MultipleTestsRunner runner = new MultipleTestsRunner(asList(testPage1, testPage2), testSystemFactory); runner.executeTestPages(); verify(testSystemFactory).create(forTestSystem("B")); verify(testSystemFactory).create(forTestSystem("A")); }
public ResourceMethod matches(String uri, HttpMethod method, MutableRequest request) { if (methodMatches(method)) { return uriMatches(uri, request); } return null; }
public void serve(Socket s) { try { BufferedReader reader = StreamUtility.GetBufferedReader(s);
public String render() throws Exception { StringBuffer html = new StringBuffer("<img src=\""); html.append(picturePath).append("\""); if(alignment != null) { html.append(" class=\""); if("-l".equals(alignment)) html.append("left"); else html.append("right"); html.append("\""); } html.append("/>"); return html.toString(); }
public void testRawResults() throws Exception { sampleFormatter(); option = new FormattingOption("raw", "stdout", output, "localhost", port, "SomePage"); option.process(formatter.getResultStream(), formatter.getByteCount()); String content = output.toString(); assertSubString(result1.toString(), content); assertSubString(result2.toString(), content); }
public void shouldAcceptCaseInsensitiveGetRequestUsingThe_methodParameter() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(DefaultResourceTranslator.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getContextPath(); will(returnValue("")); one(request).getRequestURI(); will(returnValue("/url")); one(request).getParameter("_method"); will(returnValue("gEt")); one(request).getMethod(); will(returnValue("POST")); one(registry).parse("/url", HttpMethod.GET, webRequest); will(returnValue(expected)); }}); ResourceMethod resource = translator.translate(webRequest); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied(); }
public Context findScalaContext() throws Exception {
public ChannelFuture unbind() { throw new RuntimeException("Not intended"); }
<T> T transition(Class<T> type);  <T> T relation(Class<T> type); List<Relation> getRelations();  void clear(); }
int getTableCount(); T getTable(int i); @Override Iterator<T> iterator(); }
public void assertXmlReportOfSlimScenarioTableIsCorrect() throws Exception { assertHeaderOfXmlDocumentsInResponseIsCorrect(); Element result = getElementByTagName(testResultsElement, "result"); Element counts = getElementByTagName(result, "counts"); assertCounts(counts, "3", "0", "0", "0"); assertTablesInSlimScenarioAreCorrect(result); assertInstructionsOfSlimScenarioTableAreCorrect(result); }
public void evaluateExpectations(Map<String, Object> returnValues) { String tableType = table.getCellContents(0, 0); String errorMessage = String.format("!style_fail(\"%s\" is not a valid table type.)", tableType); table.setCell(0,0, errorMessage); }
public void testInvalidPath(boolean useAsync) throws Exception { List<Integer> expectedResultCodes = new ArrayList<Integer>(); expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue()); expectedResultCodes.add(KeeperException.Code.BADARGUMENTS.intValue()); expectedResultCodes.add(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue());
public void simpleInputAndOutputFailing() throws Exception { makeTables( "!|scenario|echo|input|giving|output|\n" + "|check|echo|@input|@output|\n" + "\n" + "!|DT:EchoGiving|\n" + "|input|output|\n" + "|7|8|\n" ); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("scriptTable_did.0_0", "7") ) ); dt.evaluateExpectations(pseudoResults); String scriptTable = dt.getChild(0).getTable().toString(); String expectedScript = "[[scenario, echo, input, giving, output], [check, echo, 7, [7] fail(expected [8])]]"; assertEquals(expectedScript, scriptTable); String dtHtml = dt.getTable().toString(); assertSubString("<span id=\"test_status\" class=fail>Scenario</span>", dtHtml); assertEquals(0, dt.getTestSummary().right); assertEquals(1, dt.getTestSummary().wrong); assertEquals(0, dt.getTestSummary().ignores); assertEquals(0, dt.getTestSummary().exceptions); }
public boolean canUse(WikiPage libraryPage) { return libraryPage.getPageCrawler().getFullPath(libraryPage).toString().length() > minimumPathLength; }
public SlimTableFactory copy() { return new SlimTableFactory(new HashMap<String, Class<? extends SlimTable>>(tableTypes), new HashMap<String, String>(tableTypeArrays),
public void testMutatorOperationIncrCloning() { int exp = 823862; long def = 28775; int by = 7735; MutatatorOperation op = ofact.mutate(Mutator.incr, TEST_KEY, by, def, exp, genericCallback); MutatatorOperation op2 = cloneOne(MutatatorOperation.class, op); assertKey(op2); assertEquals(exp, op2.getExpiration()); assertEquals(def, op2.getDefault()); assertEquals(by, op2.getBy()); assertSame(Mutator.incr, op2.getType()); assertCallback(op2); }
private void verboseOutput() throws Exception { if (verbose) { int pageCounts = 0;
public static void setTestAllocator(ByteBufAllocator allocator) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException { Method m1 = NettyServerCnxnFactory.class.getDeclaredMethod("setTestAllocator", ByteBufAllocator.class); m1.setAccessible(true); m1.invoke(null, allocator); Method m2 = ClientCnxnSocketNetty.class.getDeclaredMethod("setTestAllocator", ByteBufAllocator.class); m2.setAccessible(true); m2.invoke(null, allocator); }
private void startServers(List<Integer> sids) throws InterruptedException { for (int sid : sids) { servers.mt[sid].start();
public void persistMessage(PersistRequest request);  public MessageSeqId getCurrentSeqIdForTopic(ByteString topic) throws ServerNotResponsibleForTopicException;  public void scanSingleMessage(ScanRequest request);  public long getSeqIdAfterSkipping(ByteString topic, long seqId, int skipAmount);  public void deliveredUntil(ByteString topic, Long seqId);  public void consumedUntil(ByteString topic, Long seqId); }
public void shouldBeAbleToConvertIntegerNumbers(){ assertThat((BigInteger) converter.convert("3", BigInteger.class, errors, bundle), is(equalTo(new BigInteger("3")))); }
void setTickTime(int tickTime);  int getMaxClientCnxnsPerHost();  void setMaxClientCnxnsPerHost(int max);  int getMinSessionTimeout();  void setMinSessionTimeout(int min);  int getMaxSessionTimeout();  void setMaxSessionTimeout(int max); boolean getResponseCachingEnabled(); void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
protected List<String> getClasspathElements() throws Exception { return project.getTestClasspathElements(); }
void appendToCell(int col, int row, String message); int getRowCount(); int getColumnCountInRow(int rowIndex); String toString(); String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String getUnescapedCellContents(int col, int row); String getCellResult(int col,int row); void appendChildTable(int row, Table table); void setTestStatusOnRow(int row, ExecutionResult testStatus); void setName(String tableName); void setCell(int col, int row, Result response); void appendToCell(int col, int row, Result response); }
public void login(String login, String password) {
public void addsAPrefixToMethodsWhenTheGetControllerEndsWithSlashAndTheMethodAreAnnotatedWithAbsolutePath() throws Exception { List<Route> routes = parser.rulesFor(new DefaultResourceClass(EndSlashAnnotatedGetController.class)); Route route = getRouteMatching(routes, "/endSlash/absolutePath"); assertThat(route, canHandle(EndSlashAnnotatedGetController.class, "withAbsolutePath")); }
public void testStarted(WikiTestPage test) throws IOException {} @Override public void testOutputChunk(String output) throws IOException {} @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) {} @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) {} @Override public void testComplete(WikiTestPage test, TestSummary testSummary) throws IOException {} @Override public void testSystemStopped(TestSystem testSystem, ExecutionLog executionLog, Throwable cause) {} }
public void testNotificationMessageWithInvalidConfig() throws Exception {  startMockServer(1); ByteBuffer requestBuffer = FastLeaderElection.buildMsg(ServerState.LOOKING.ordinal(), 1, 0, 0, 0, CONFIG_BYTES); mockCnxManager.toSend(0L, requestBuffer);  sendValidNotifications(1, 0); leaderElectionThread.join(5000); if (leaderElectionThread.isAlive()) { Assert.fail("Leader election thread didn't join, something went wrong.");
public void oneRowThatPassesWithManyColons() throws Exception { assertTableResults("|2|4|\n", asList(
void visitTypeArgument();  SignatureVisitor visitTypeArgument(char wildcard);  void visitEnd(); }
private JSONObject makeJson() throws Exception { response.setContentType("text/json"); JSONObject jsonObject = new JSONObject(); String attributes[] = new String[]{ "Test", "Search", "Edit", "Properties", "Versions", "Refactor", "WhereUsed", "RecentChanges", "Suite", "Prune", WikiPage.SECURE_READ, WikiPage.SECURE_WRITE, WikiPage.SECURE_TEST }; for (String attribute : attributes) addJsonAttribute(jsonObject, attribute); return jsonObject; }
public void nullStringReturned() throws Exception { getResultsForPageContents("!|fitnesse.slim.test.TestSlim|\n" + "|nullString?|\n" + "|null|\n"); assertTestResultsContain("<td><span class=\"pass\">null</span></td>"); }
public void testGetSoTimeout() throws IOException { serverSideSocket.getSoTimeout(); assertFalse(serverSideSocket.isModeKnown()); }
protected Result createEvaluationMessage(String actual, String expected) { Result evaluationMessage; String replacedExpected = replaceSymbols(expected); if (actual == null) evaluationMessage = fail("null");
public Integer launchFitNesse(Properties properties) throws Exception { configureLogging("verbose".equalsIgnoreCase(properties.getProperty(ConfigurationParameter.LOG_LEVEL))); loadPlugins(); FitNesseContext context = loadContext(properties); logStartupInfo(context); update(context); return launch(context); }
public synchronized boolean containsWatcher(String path, Watcher watcher) { Set<String> paths = watch2Paths.get(watcher); if (paths == null || !paths.contains(path)) { return false; } return true; }
private void readConfigFile(String filename) throws ConfigException{ File configFile = new File(filename); LOG.info("Reading configuration from: " + configFile); try { if (!configFile.exists()) {
public int processByte( byte in, byte[] out, int outOff) throws DataLengthException, IllegalStateException { int resultLen = 0; if (bufOff == buf.length) { resultLen = cipher.processBlock(buf, 0, out, outOff); bufOff = 0; } buf[bufOff++] = in; return resultLen; }
public void create(String instanceName, String className, Object... constructorArgs) throws SlimException { Object[] list = new Object[]{instruction.getId(), MakeInstruction.INSTRUCTION, instanceName, className}; statementsAsList.add(mergeAsList(list, constructorArgs)); }
public void testSimple() throws Exception { WikiPageUtil.addPage(root, PathParser.parse("SomePage"), "some string"); String output = getSocketOutput("GET /SomePage HTTP/1.1\r\n\r\n", root); String statusLine = "HTTP/1.1 200 OK\r\n"; assertTrue("Should have statusLine", Pattern.compile(statusLine, Pattern.MULTILINE).matcher(output).find()); assertTrue("Should have canned Content", hasSubString("some string", output)); }
private boolean isSendQueueEmpty(ArrayBlockingQueue<ByteBuffer> queue) { return queue.isEmpty(); }
public void canFindMethod() { String findMethod = "canFindMethod"; Method method = interaction.findMatchingMethod(findMethod, getClass(), 0); assertEquals(findMethod, method.getName()); assertEquals(getClass(), method.getDeclaringClass());
public void bracesArountArgumentInTable() throws Exception { makeTables( "!|scenario|echo|user|giving|user_old|\n" + "|check|echo|@{user}|@{user_old}|\n" + "\n" + "!|DT:EchoGiving|\n" + "|user|user_old|\n" + "|7|7|\n" ); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("decisionTable_did_0/scriptTable_s_id_0", "7") ) ); evaluateExpectations(pseudoResults); String scriptTable = dt.getChildren().get(0).getTable().toString(); String expectedScript = "[[scenario, echo, user, giving, user_old], [check, echo, 7, pass(7)]]"; assertEquals(expectedScript, scriptTable); String dtHtml = dt.getTable().toString(); assertEquals(1, dt.getTestSummary().getRight()); assertEquals(0, dt.getTestSummary().getWrong()); assertEquals(0, dt.getTestSummary().getIgnores()); assertEquals(0, dt.getTestSummary().getExceptions()); }
public void startStatement() throws Exception { buildInstructionsFor("|start|Bob|\n", false); List<MakeInstruction> expectedInstructions = list( new MakeInstruction("scriptTable_id_0", "scriptTableActor", "Bob") ); assertEquals(expectedInstructions, instructions()); }
String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
private QuorumVerifier createQuorumVerifier(Properties dynamicConfigProp, boolean isHierarchical) throws ConfigException{ if(isHierarchical){ return new QuorumHierarchical(dynamicConfigProp);
public void doCell(Parse cell, int columnNumber) { ignore(cell); }
private void assertLong(long l) { byte[] encoded=TranscoderUtils.encodeLong(l); long decoded=TranscoderUtils.decodeLong(encoded); assertEquals(l, decoded); }
private synchronized void cacheCommittedPacket(final QuorumPacket pkt) { committedPkts.add(pkt); pktsSize += LearnerHandler.packetSize(pkt);
public Value merge(final Value v, final Value w) { SourceValue dv = (SourceValue) v; SourceValue dw = (SourceValue) w; if ((dv.insns instanceof SmallSet) && (dw.insns instanceof SmallSet)) { Set s = ((SmallSet) dv.insns).union((SmallSet) dw.insns); if ((s == dv.insns) && (dv.size == dw.size)) { return v; } else { return new SourceValue(Math.min(dv.size, dw.size), s); } } if ((dv.size != dw.size) || !dv.insns.containsAll(dw.insns)) { Set s = new HashSet(); s.addAll(dv.insns); s.addAll(dw.insns); return new SourceValue(Math.min(dv.size, dw.size), s); } return v; }
public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException { } } }
public RequestBuilder buildRequest() throws Exception { RequestBuilder request = new RequestBuilder("/?responder=shutdown"); if (username != null) request.addCredentials(username, password); return request; }
public void testPagesForTestSystemAreSurroundedBySuiteSetupAndTeardown() throws Exception { WikiPage slimPage = addTestPage(suite, "AaSlimTest", simpleSlimDecisionTable); WikiPage setUp = WikiPageUtil.addPage(root, PathParser.parse("SuiteSetUp"), "suite set up"); WikiPage tearDown = WikiPageUtil.addPage(root, PathParser.parse("SuiteTearDown"), "suite tear down"); testPages = new LinkedList<WikiPage>(); testPages.add(setUp); testPages.add(slimPage); testPages.add(testPage); testPages.add(tearDown); MultipleTestsRunner runner = new MultipleTestsRunner(testPages, context, suite, null); Map<WikiPageDescriptor, LinkedList<TestPage>> map = runner.makeMapOfPagesByTestSystem(); Descriptor fitDescriptor = new WikiPageDescriptor(testPage.readOnlyData(), false, new ClassPathBuilder().getClasspath(testPage)); Descriptor slimDescriptor = new WikiPageDescriptor(slimPage.readOnlyData(), false, new ClassPathBuilder().getClasspath(slimPage)); List<TestPage> fitList = map.get(fitDescriptor); List<TestPage> slimList = map.get(slimDescriptor); assertEquals(3, fitList.size()); assertEquals(3, slimList.size()); assertEquals(setUp, fitList.get(0).getSourcePage()); assertEquals(testPage, fitList.get(1).getSourcePage()); assertEquals(tearDown, fitList.get(2).getSourcePage()); assertEquals(setUp, slimList.get(0).getSourcePage()); assertEquals(slimPage, slimList.get(1).getSourcePage()); assertEquals(tearDown, slimList.get(2).getSourcePage()); }
public Extension getExtension(String extensionName); public String getHelpText() throws Exception; public List<WikiPageAction> getActions() throws Exception; }
void setResponseCachingEnabled(boolean isEnabled);  int getConnectionMaxTokens(); void setConnectionMaxTokens(int val); int getConnectionTokenFillTime(); void setConnectionTokenFillTime(int val); int getConnectionTokenFillCount(); void setConnectionTokenFillCount(int val); int getConnectionFreezeTime(); void setConnectionFreezeTime(int val); double getConnectionDropIncrease(); void setConnectionDropIncrease(double val); double getConnectionDropDecrease(); void setConnectionDropDecrease(double val); double getConnectionDecreaseRatio(); void setConnectionDecreaseRatio(double val); int getCommitProcMaxReadBatchSize(); void setCommitProcMaxReadBatchSize(int size); int getCommitProcMaxCommitBatchSize(); void setCommitProcMaxCommitBatchSize(int size); int getRequestThrottleLimit(); void setRequestThrottleLimit(int requests); int getRequestThrottleStallTime(); void setRequestThrottleStallTime(int time); boolean getRequestThrottleDropStale(); void setRequestThrottleDropStale(boolean drop); int getThrottledOpWaitTime(); void setThrottledOpWaitTime(int val); boolean getRequestStaleLatencyCheck(); void setRequestStaleLatencyCheck(boolean check); boolean getRequestStaleConnectionCheck(); void setRequestStaleConnectionCheck(boolean check); int getLargeRequestMaxBytes(); void setLargeRequestMaxBytes(int bytes); int getLargeRequestThreshold(); void setLargeRequestThreshold(int threshold);  void resetStatistics();  void resetLatency();  void resetMaxLatency();  void resetFsyncThresholdExceedCount();  long getNumAliveConnections();  long getDataDirSize();  long getLogDirSize();  String getSecureClientPort();  String getSecureClientAddress();  long getTxnLogElapsedSyncTime();  int getJuteMaxBufferSize();  int getLastClientResponseSize();  int getMinClientResponseSize();  int getMaxClientResponseSize(); long getFlushDelay(); void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size);  int getMaxCnxns(); }
public Maybe<Symbol> parse(Symbol current, Parser parser) { String content = current.getContent(); char beginner = content.charAt(content.length() - 1); Symbol body = parser.parseToIgnoreFirst(closeType(beginner)); if (parser.atEnd()) return Symbol.nothing; return new Maybe<Symbol>(new Symbol(SymbolType.Style, content.substring(7, content.length() - 1)).add(body)); }
public static Socket createClientSocket(String hostName, int port, boolean useSSL, String sslParameterClassName) throws IOException { if (!useSSL) { LOG.log(Level.FINER, "Creating plain client: " + hostName + ":" + port);
public void testCommandPatternCSharp() throws Exception { String specifiedPageText = "!define COMMAND_PATTERN {%m -r fitSharp.Slim.Service.Runner,fitsharp.dll %p}\n"; WikiPage specifiedPage = makeTestPage(specifiedPageText); WikiPageDescriptor descriptor = new WikiPageDescriptor(specifiedPage.readOnlyData(), false, false, getClassPath(specifiedPage)); MockClientBuilder clientBuilder = new MockClientBuilder(descriptor); assertEquals("%m -r fitSharp.Slim.Service.Runner,fitsharp.dll %p", join(clientBuilder.getCommandPattern()));
private void setData() throws Exception { data.setContent(savedContent); data.setAttribute(EditResponder.TICKET_ID, ticketId + ""); SaveRecorder.pageSaved(data); if (user != null) data.setAttribute(WikiPage.LAST_MODIFYING_USER, user);
public void tearDown() throws Exception { } public void testHtml() throws Exception { Responder responder = new MergeResponder(request); SimpleResponse response = (SimpleResponse)responder.makeResponse(new FitNesseContext(source), new MockRequest()); assertHasRegexp("name=\\\"" + EditResponder.CONTENT_INPUT_NAME + "\\\"", response.getContent()); assertHasRegexp("this is SimplePage", response.getContent()); assertHasRegexp("name=\\\"oldContent\\\"", response.getContent()); assertHasRegexp("some new content", response.getContent()); } public void testAttributeValues() throws Exception { request.addInput("Edit", "On"); request.addInput("Test", "On"); request.addInput("Search", "On"); Responder responder = new MergeResponder(request); SimpleResponse response = (SimpleResponse)responder.makeResponse(new FitNesseContext(source), new MockRequest()); assertHasRegexp("type=\"hidden\"", response.getContent()); assertHasRegexp("name=\"Edit\"", response.getContent()); assertHasRegexp("name=\"Test\"", response.getContent()); assertHasRegexp("name=\"Search\"", response.getContent()); } }
public String render() throws Exception { StringBuffer html = new StringBuffer("<span class=\"note\">"); html.append(childHtml()).append("</span>"); return html.toString(); }
public org.vafer.jdeb.mapping.Mapper createMapper() { if ("perm".equalsIgnoreCase(type)) { return new PermMapper(uid, gid, user, group, mode, strip, prefix); } else if ("prefix".equalsIgnoreCase(type)) { return new PrefixMapper(strip, prefix); } else if ("ls".equalsIgnoreCase(type)) { try { return new LsMapper(new FileInputStream(src)); } catch (Exception e) { e.printStackTrace(); } } return new NullMapper(); }
public List<SlimAssertion> getAssertions() throws SyntaxError { if (table.getRowCount() < 2) throw new SyntaxError("Query tables must have at least two rows."); assignColumns(); SlimAssertion make = constructFixture(getFixtureName()); SlimAssertion ti = makeAssertion(callFunction(getTableName(), "table", tableAsList()), new SilentReturnExpectation(0, 0)); SlimAssertion qi = makeAssertion(callFunction(getTableName(), "query"), new QueryTableExpectation()); tableInstruction = ti.getInstruction().getId(); queryId = qi.getInstruction().getId(); return list(make, ti, qi); }
public void canEvaluateReturnValuesAndColorizeTable() throws Exception { DecisionTable dt = makeDecisionTableAndBuildInstructions(simpleDecisionTable); int n=0; Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list(id(n++), "OK"), list(id(n++), VoidConverter.VOID_TAG), list(id(n++), VoidConverter.VOID_TAG),
public void testFindsTheCorrectAnnotatedMethod() throws SecurityException, NoSuchMethodException { ResourceMethod method = lookuper.methodFor("/clients", "POST"); assertThat(method.getMethod(), is(equalTo(Clients.class.getMethod("add")))); mockery.assertIsSatisfied(); }
public TestServer startZookeeperServer(int port) throws IOException, TestException { String dir = createTempDirectory("-zookeeper-" + port); ZookeeperServer server = new ZookeeperServer(port, dir); return server; }
public void testTryWithResourceNoThrottle() throws Exception { LearnerSnapshotThrottler throttler = new LearnerSnapshotThrottler(1); for (int i = 0; i < 3; i++) { LearnerSnapshot snapshot = throttler.beginSnapshot(false);
public void setUp() throws Exception { versionsController = new ZipFileVersionsController(); root = new FileSystemPage("TestDir", "RooT", new FileSystemPageFactory(), new DiskFileSystem(), versionsController); crawler = root.getPageCrawler(); page = (FileSystemPage) crawler.addPage(root, PathParser.parse("PageOne"), "original content"); PageData data = page.getData(); firstVersion = VersionInfo.makeVersionInfo(data); secondVersion = page.commit(data); }
public void testChecksum() throws NoSuchAlgorithmException, IOException { FileOutputStream fos = new FileOutputStream("/dev/null"); MessageDigest md = MessageDigest.getInstance("SHA-256"); DigestOutputStream dos = new DigestOutputStream(fos, md); PwManagerOutput pos = new PwManagerOutput(mPM, dos, PwManagerOutput.DEBUG); pos.outputPlanGroupAndEntries(dos); assertArrayEquals("Hash of groups and entries failed.", md.digest(), mPM.dbHeader.contentsHash); }
public Maybe<Symbol> parse(Symbol current, Parser parser) { List<Symbol> tokens = parser.moveNext(new SymbolType[] {SymbolType.Whitespace, SymbolType.Text, SymbolType.Whitespace}); if (tokens.size() == 0) return Symbol.nothing; String name = tokens.get(1).getContent(); if (!ScanString.isVariableName(name)) return Symbol.nothing; Symbol next = parser.moveNext(1); SymbolType open = next.getType(); SymbolType close = open.closeType(); if (close == SymbolType.Empty) return Symbol.nothing; String valueString = parser.parseToIgnoreFirstAsString(close); if (parser.atEnd()) return Symbol.nothing; parser.getPage().putVariable(name, valueString); return new Maybe<Symbol>(new Symbol(SymbolType.Define) .add(name)
public void functionCallWithSequentialArgumentProcessingEmbedded() throws Exception { buildInstructionsFor("|set name|Marisa|department and title;|QA|Tester|\n"); List<CallInstruction> expectedInstructions = asList( new CallInstruction("htmlScriptTable_id_0", "htmlScriptTableActor", "setNameDepartmentAndTitle", new Object[]{"Marisa", "QA", "Tester"}) ); assertEquals(expectedInstructions, instructions()); }
public String report() { StringBuilder builder = new StringBuilder(); builder.append("create="); builder.append(create); builder.append(" ms\n"); builder.append("setData="); builder.append(setData); builder.append(" ms\n"); builder.append("delete="); builder.append(delete); builder.append(" ms\n"); return builder.toString(); }
public Socket getSocket() throws Exception;
String getActual(); boolean hasExpected(); String getExpected(); boolean hasMessage(); String getMessage(); ExecutionResult getExecutionResult(); }
public void shouldDelegateToVraptor3IfItsNotAVRaptor2Component() throws NoSuchMethodException { mockery.checking(new Expectations() { { exactly(2).of(method).getResource(); will(returnValue(resource)); one(method).getMethod(); will(returnValue(DogController.class.getDeclaredMethod("bark"))); exactly(2).of(resource).getType(); will(returnValue(DogController.class)); } }); String result = resolver.pathFor(method); assertThat(result, is(equalTo("/DogController/bark.jsp"))); mockery.assertIsSatisfied(); }
public void testNotFoundFile() throws Exception { request.setResource("files/something/that/aint/there"); Responder notFoundResponder = FileResponder.makeResponder(request, context.getRootPagePath()); SimpleResponse response = (SimpleResponse) notFoundResponder.makeResponse(context, request); assertEquals(404, response.getStatus()); assertHasRegexp("files/something/that/aint/there", response.getContent()); }
public void registeringAValidDvd() throws Exception { loginAs("vraptorguy") .fillRegisterDvdForm() .withTitle("A Song") .withDescription("You should listen to this") .andSend(); assertContainsMessage("A Song dvd added"); }
public static void visitSubTreeDFS(ZooKeeper zk, final String path, boolean watch, StringCallback cb) throws KeeperException, InterruptedException { PathUtils.validatePath(path); zk.getData(path, watch, null); cb.processResult(Code.OK.intValue(), path, null, path); visitSubTreeDFSHelper(zk, path, watch, cb); }
public void setup() { this.mockery = new Mockery(); this.picoContainer = new PicoBuilder().withCaching().build(); this.container = new PicoBasedContainer(picoContainer, new DefaultRouter(new NoRoutesConfiguration(), new NoRoutesParser(), null, new DefaultProxifier(), null)); }
public void testComplete(WikiTestPage test, TestSummary testSummary, TimeMeasurement timeMeasurementx) { timeMeasurement.stop(); referenceToCurrentTest.setTestSummary(testSummary); referenceToCurrentTest.setRunTimeInMillis(timeMeasurement.elapsed()); suiteExecutionReport.addPageHistoryReference(referenceToCurrentTest); suiteExecutionReport.tallyPageCounts(ExecutionResult.getExecutionResult(test.getName(), testSummary)); failCount+=testSummary.wrong; failCount+=testSummary.exceptions; }
public void kill() { client.kill(); testSystemStopped(client.getExecutionLog(), null); }
public void shouldOptionallyExcludeFieldsFromIncludedListChildFields() {
<T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
@Test public void translatesNestedStyle() { ParserTest.assertTranslatesTo("!style_myStyle(!style_otherStyle(stuff))", "<span class=\"myStyle\"><span class=\"otherStyle\">stuff</span></span>");
public void simpleNameWithUnnamedArgument() throws Exception { makeTables( "!|scenario|f|a||b|\n" + "|function|@a||@b|\n" + "\n" + "!|script|\n" + "|f|1||2|\n" ); List<CallInstruction> expectedInstructions = asList(new CallInstruction("scriptTable_id_0/scriptTable_s_id_0", "scriptTableActor", "function", new Object[]{"1", "2"})); assertEquals(expectedInstructions, instructions()); }
public String toString() { return String.format("%s[%s]", creator, getScopeName()); }
public boolean matches(final Object o) { if (!(o instanceof TarArchiveEntry)) { return false; } final TarArchiveEntry e = (TarArchiveEntry) o; return e.getSize() == f.length() && e.getLongGroupId() == 0
private Response errorResponse(FitNesseContext context, Request request) { return new ErrorResponder("Invalid Child Name").makeResponse(context, request); }
public void processTestResults(WikiPage test, TestSummary testSummary) throws Exception { } public void writeHead(String pageType) throws Exception { } }
public void testOutput() throws Exception { StrikeWidget widget = new StrikeWidget(new MockWidgetRoot(), "--some text--"); assertEquals(1, widget.numberOfChildren()); WikiWidget child = widget.nextChild(); assertEquals(TextWidget.class, child.getClass()); assertEquals("some text", ((TextWidget) child).getText()); assertEquals("<span class=\"strike\">some text</span>", widget.render()); }
public void testComplete(WikiTestPage testPage, TestSummary testSummary) throws IOException { latestTestTime.stop(); super.testComplete(testPage, testSummary); getAssertionCounts().add(testSummary); }
Config create(String data); Config create(JSONObject jsonObject); }
public Float convert(String value, Class<? extends Float> type, ResourceBundle bundle) {
public void convertArrayOfIntegersThrowsExceptionIfNotInteger() throws Exception { super.convertArrayOfIntegersThrowsExceptionIfNotInteger(); validateNoMethodIntercepted(); }
private void writeList(String name, List<PwEntryV4> value, boolean isHistory) throws IllegalArgumentException, IllegalStateException, IOException { assert(name != null && value != null); xml.startTag(null, name); for (PwEntryV4 entry : value) { writeEntry(entry, isHistory); } xml.endTag(null, name);
public void testValidCredentialsWithMultiAddresses() throws Exception { Map<String, String> authConfigs = new HashMap<>(); authConfigs.put(QuorumAuth.QUORUM_SASL_AUTH_ENABLED, "true"); authConfigs.put(QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED, "true"); authConfigs.put(QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED, "true"); String connectStr = startMultiAddressQuorum(3, authConfigs, 3); CountdownWatcher watcher = new CountdownWatcher(); ZooKeeper zk = new ZooKeeper(connectStr, ClientBase.CONNECTION_TIMEOUT, watcher); watcher.waitForConnected(ClientBase.CONNECTION_TIMEOUT); for (int i = 0; i < 10; i++) { zk.create("/" + i, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); } zk.close(); }
public void testShouldAskRevisionControllerToDeletePage() throws Exception { this.revisionController.delete(contentAndPropertiesFilePathFor(FS_GRAND_CHILD_PAGE)); replay(this.revisionController); createPage(FS_GRAND_CHILD_PAGE); this.request.setResource(FS_PARENT_PAGE + "." + FS_CHILD_PAGE + "." + FS_GRAND_CHILD_PAGE); invokeResponderAndCheckSuccessStatus(); assertPageDoesNotExists(FS_GRAND_CHILD_PAGE); }
public Socket createSocket(final String hostName, final int port) throws IOException { LOG.log(Level.FINER, "Creating SSL client: " + hostName + ":" + port); SSLSocketFactory ssf = SslParameters.setSslParameters(sslParameterClassName).createSSLSocketFactory(); SSLSocket socket = (SSLSocket) ssf.createSocket(hostName, port); LOG.log(Level.FINER, "Starting SSL Handshake.");
private void deleteFileIfItIsTooOld(Date purgeOlder, File file) { String name = file.getName(); Date date = getDateFromPageHistoryFileName(name); if (date.getTime() < purgeOlder.getTime()) FileUtil.deleteFile(file);
public void start(CommandRunningFitClient fitClient, int port, int ticketNumber) throws IOException { String[] arguments = new String[] { "-x", getLocalhostName(), Integer.toString(port), Integer.toString(ticketNumber) }; this.fastFitServer = createTestRunnerThread(testRunner, arguments); this.fastFitServer.start(); this.commandRunner = new MockCommandRunner(); commandRunner.asynchronousStart(); }
public void dataChanged() { if (backupManager != null && dataChanged != null) { try {
public static Calendar toCalendar(final String iso8601String) throws ParseException { Pattern pattern = Pattern.compile(REGEX_ISO8601); Matcher matcher = pattern.matcher(iso8601String); if (matcher.matches()) { int year = matcher.group(1) != null ? Integer.valueOf(matcher.group(1)) : 0;
@Test public void testAvailable() throws Exception { for (int i = DATA_BYTES.length; i > 0; i--) { assertEquals(i, in.available()); in.read(); } assertEquals(0, in.available()); }
<T> String urlFor(Class<T> type, Method method, Object... params);  List<Route> allRoutes(); RouteBuilder builderFor(String uri); EnumSet<HttpMethod> allowedMethodsFor(String uri); }
public boolean addWatch(String path, Watcher watcher);  public boolean containsWatcher(String path, Watcher watcher);  public boolean removeWatcher(String path, Watcher watcher);  public void removeWatcher(Watcher watcher);  public WatcherOrBitSet triggerWatch(String path, EventType type);  public WatcherOrBitSet triggerWatch( String path, EventType type, WatcherOrBitSet suppress);  public int size();  public void shutdown();  public WatchesSummary getWatchesSummary();  public WatchesReport getWatches();  public WatchesPathReport getWatchesByPath();  public void dumpWatches(PrintWriter pwriter, boolean byPath); }
void killSession(long session) { HashSet<String> list = ephemerals.remove(session); if (list != null) { for (String path : list) {
public void and(List<String> errors) { this.errors.addAll(errors); }
public void shouldHandleInstanceMethods() throws Exception { testProperties.setProperty(ConfigurationParameter.PLUGINS.getKey(), InstantiableDummyPlugin.class.getName()); testProperties.setProperty("responderName", "instanceTest"); loader.loadPlugins(responderFactory, testProvider, testWikiPageFactoryRegistry, testTestSystemFactory, testSlimTableFactory, testCustomComparatorsRegistry); assertEquals(WikiPageResponder.class, responderFactory.getResponderClass("instanceTest")); }
public void throwsInstanceNotCreatedErrorIfNoPublicDefaultConstructor() throws Exception { String result = (String) caller.create("x", getTestClassPath() + ".ClassWithNoPublicDefaultConstructor", new Object[0]); assertException("message:<<COULD_NOT_INVOKE_CONSTRUCTOR " + getTestClassPath() + ".ClassWithNoPublicDefaultConstructor[0]>>", result); }
public void testMultiGetChildrenAuthentication() throws KeeperException, InterruptedException { List<ACL> writeOnly = Collections.singletonList(new ACL(ZooDefs.Perms.WRITE, new Id("world", "anyone"))); zk.create("/foo_auth", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); zk.create("/foo_auth/bar", null, Ids.READ_ACL_UNSAFE, CreateMode.PERSISTENT); zk.create("/foo_no_auth", null, writeOnly, CreateMode.PERSISTENT);
private static boolean shouldBePartOfSuite(WikiPage context, Set<String> suiteQuery) throws Exception { PageData data = context.getData(); boolean pruned = data.hasAttribute(PageData.PropertyPRUNE); boolean test = data.hasAttribute("Test"); return !pruned && test && (belongsToSuite(context, suiteQuery)); }
public void shouldBeAbleToConvertEmpty() { assertThat(converter.convert("", BigDecimal.class, bundle), is(nullValue())); }
public void stop() { if(stopSession) { SESSION.stopAll(); } APPLICATION.stop(); }
VersionNumber version(); VersionNumber versionCompat(); Set<Artifact> findLibraryAndDependencies() throws Exception; Set<Artifact> findCompilerAndDependencies() throws Exception; String compilerMainClassName(String override, boolean useFsc) throws Exception; String consoleMainClassName(String override) throws Exception; String apidocMainClassName(String override) throws Exception; }
public boolean isTypeAt(int position, SymbolType type) { return scanner.isTypeAt(position, type); }
public void testOrganizeFilesMixOfFilesAndDirs() { File dir = FileUtil.createDir("temp"); File dir3 = createSubDir(dir, "dDir"); File file3 = createFileInDir(dir, "dFile.txt"); File file0 = createFileInDir(dir, "aFile.txt"); File dir1 = createSubDir(dir, "bDir"); File file4 = createFileInDir(dir, "eFile.txt"); File dir4 = createSubDir(dir, "eDir"); File dir0 = createSubDir(dir, "aDir"); File file1 = createFileInDir(dir, "bFile.txt"); File dir2 = createSubDir(dir, "cDir"); File file2 = createFileInDir(dir, "cFile.txt"); assertEquals(10, FileUtil.getDirectoryListing(dir).length); assertEquals(dir0, FileUtil.getDirectoryListing(dir)[0]); assertEquals(dir1, FileUtil.getDirectoryListing(dir)[1]); assertEquals(dir2, FileUtil.getDirectoryListing(dir)[2]); assertEquals(dir3, FileUtil.getDirectoryListing(dir)[3]); assertEquals(dir4, FileUtil.getDirectoryListing(dir)[4]); assertEquals(file0, FileUtil.getDirectoryListing(dir)[5]); assertEquals(file1, FileUtil.getDirectoryListing(dir)[6]); assertEquals(file2, FileUtil.getDirectoryListing(dir)[7]); assertEquals(file3, FileUtil.getDirectoryListing(dir)[8]); assertEquals(file4, FileUtil.getDirectoryListing(dir)[9]); FileUtil.deleteFileSystemDirectory(dir); }
public void testLoadKeyStoreWithNullFilePath() throws Exception { new JKSFileLoader.Builder().setKeyStorePassword(x509TestContext.getKeyStorePassword()).build().loadKeyStore(); }
public void push(final Value value) throws IndexOutOfBoundsException { if (top + locals >= values.length) { throw new IndexOutOfBoundsException("Insufficient maximum stack size."); } values[top++ + locals] = value; }
protected static void addStandardConverters() { addConverter(void.class, new VoidConverter()); addConverter(String.class, new StringConverter()); addConverter(int.class, new IntConverter()); addConverter(double.class, new DoubleConverter()); addConverter(Integer.class, new IntConverter()); addConverter(Double.class, new DoubleConverter()); addConverter(char.class, new CharConverter()); addConverter(boolean.class, new BooleanConverter()); addConverter(Boolean.class, new BooleanConverter()); addConverter(Date.class, new DateConverter()); addConverter(List.class, new ListConverter()); addConverter(Integer[].class, new IntegerArrayConverter()); addConverter(int[].class, new IntegerArrayConverter()); addConverter(String[].class, new StringArrayConverter()); addConverter(boolean[].class, new BooleanArrayConverter()); addConverter(Boolean[].class, new BooleanArrayConverter()); addConverter(double[].class, new DoubleArrayConverter()); addConverter(Double[].class, new DoubleArrayConverter()); }
private HtmlSlimTestSystem createHtmlSlimTestSystem(Descriptor descriptor) throws IOException { SlimCommandRunningClient slimClient = new SlimClientBuilder(descriptor) .withFastTest(fastTest) .withManualStart(manualStart) .withRemoteDebug(remoteDebug) .build(); HtmlSlimTestSystem testSystem = new HtmlSlimTestSystem(descriptor.getTestSystem(), slimClient, testSystemListener, new ExecutionLog(page, slimClient.getCommandRunner())); return testSystem; }
public void testDirCheckWithLogFilesInSnapDir() throws IOException { assertThrows(FileTxnSnapLog.SnapDirContentCheckException.class, () -> { twoDirSetupWithCorrectFiles();
public void testCnxManagerTimeout() throws Exception { int address = ThreadLocalRandom.current().nextInt(1, 255); int deadPort = PortAssignment.unique(); String deadAddress = "10.1.1." + address; LOG.info("This is the dead address I'm trying: {}", deadAddress); peers.put(2L, new QuorumServer(2, new InetSocketAddress(deadAddress, deadPort), new InetSocketAddress(deadAddress, PortAssignment.unique()), new InetSocketAddress(deadAddress, PortAssignment.unique()))); peerTmpdir[2] = ClientBase.createTmpDir(); QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1], peerClientPort[1], 3, 1, 1000, 2, 2, 2); QuorumCnxManager cnxManager = peer.createCnxnManager(); QuorumCnxManager.Listener listener = cnxManager.listener; if (listener != null) { listener.start(); } else { LOG.error("Null listener when initializing cnx manager"); } long begin = Time.currentElapsedTime(); cnxManager.toSend(2L, createMsg(ServerState.LOOKING.ordinal(), 1, -1, 1)); long end = Time.currentElapsedTime(); if ((end - begin) > 10_000) { fail("Waited more than necessary"); } cnxManager.halt(); assertFalse(cnxManager.listener.isAlive()); }
public void testQuerySetStartkeyDocID() throws Exception { Query query = new Query(); query.setReduce(false); View view = client.getView(DESIGN_DOC_W_REDUCE, VIEW_NAME_W_REDUCE); HttpFuture<ViewResponse> future = client.asyncQuery(view, query.setStartkeyDocID("key0")); ViewResponse response = future.get(); assert response != null : future.getStatus(); }
private String getContent(File file) throws IOException { return getContent(file, "ASCII"); }
public void updateWikiFileWithSymLinks() throws IOException { File wikiPageFile = new File("root", "testPage.wiki"); fileSystem.makeFile(wikiPageFile, "page content"); final WikiPage testPage = root.getChildPage("testPage"); PageData data = testPage.getData(); final WikiPageProperty symlinks = data.getProperties().set(SymbolicPage.PROPERTY_NAME); symlinks.set("PageOne", "RemotePage"); symlinks.set("PageTwo", "AnotherRemotePage"); testPage.commit(data); final String content = fileSystem.getContent(wikiPageFile); assertThat(content, is( "---\n" +
public void injectSessionExpiration() { LOG.info("injectSessionExpiration() called"); clientCnxn.eventThread.queueEvent(new WatchedEvent( Watcher.Event.EventType.None, Watcher.Event.KeeperState.Expired, null)); clientCnxn.eventThread.queueEventOfDeath(); clientCnxn.sendThread.getClientCnxnSocket().wakeupCnxn(); clientCnxn.state = ZooKeeper.States.CLOSED; }
public boolean isLoadPoolCalled() { return loadPoolCalled; }
public void setup() { MockitoAnnotations.initMocks(this); proxifier = new JavassistProxifier(new ObjenesisInstanceCreator()); methodInfo = new DefaultMethodInfo(); this.logicResult = new DefaultLogicResult(proxifier, router, request, response, container, resolver, extractor, flash, methodInfo); when(request.getOriginalRequest()).thenReturn(request); when(response.getOriginalResponse()).thenReturn(response); }
public void oneRowThatExplicitlyFailsNoChange() throws Exception { assertTableResults("|2|4|\n", asList(
public void testJMXBeanAfterRemoveAddOne() throws Exception { qu = new QuorumUtil(1);
public AbstractInsnNode clone(final Map labels) { return new LdcInsnNode(cst); }
public void canEvaluateReturnValuesAndColorizeTable() throws Exception { DecisionTable dt = makeDecisionTableAndBuildInstructions(simpleDecisionTable); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("decisionTable_id_0", "OK"), list("decisionTable_id_1", VoidConverter.VOID_TAG), list("decisionTable_id_3", "5"), list("decisionTable_id_4", VoidConverter.VOID_TAG), list("decisionTable_id_6", "5") ) ); dt.evaluateExpectations(pseudoResults); String colorizedTable = dt.getTable().toString(); String expectedColorizedTable = "|!style_pass(!<DT:fixture>!)|!<argument>!|\n" + "|!<var>!|!<func?>!|\n" + "|!<3>!|!style_pass(!<5>!)|\n" + "|!<7>!|[!<5>!] !style_fail(expected [!<9>!])|\n"; assertEquals(expectedColorizedTable, colorizedTable); }
public void testPing() throws Exception { ZooKeeper zkIdle = null; ZooKeeper zkWatchCreator = null; try { CountdownWatcher watcher = new CountdownWatcher();
public void onClick(View v) { Button button = (Button) v; EditText editText = (EditText) findViewById(R.id.length); editText.setText(button.getText()); }
protected void createMapReceptorInstance() throws Exception { Object created = statementExecutor.create(MY_INSTANCE, mapReceptorClassName(), new Object[] {}); assertEquals("OK", created); }
public void testGetDirectoryListingEmpty() throws Exception { File dir = FileUtil.createDir("temp2"); assertEquals(0, FileUtil.getDirectoryListing(dir).length); FileUtil.deleteFileSystemDirectory(dir); }
void testHttpAndHttpsResponce() throws Exception { Properties configuration = new Properties(); configuration.setProperty("httpsPort", String.valueOf(httpsPort)); configuration.setProperty("httpPort", String.valueOf(httpPort)); initializeProviderWithCustomConfig(configuration); simulateMetricIncrement(); validateMetricResponse(callHttpServlet("http://" + httpHost + ":" + httpPort + "/metrics")); validateMetricResponse(callHttpsServlet("https://" + httpHost + ":" + httpsPort + "/metrics")); }
public void worksWithBasicRegexEvaluation() throws SecurityException, NoSuchMethodException { rules.add(new Rules() {{ when("/clients*").with(HttpMethod.POST).invoke(MyControl.class).unknownMethod();; }}); assertThat(rules.parse("/clientsWhatever", HttpMethod.POST), is(VRaptorMatchers.resourceMethod(method("unknownMethod")))); }
public void run() { realGetOwner(topic, shouldClaim, cb, ctx); }
public void testCompressedObject() throws Exception { tc.setCompressionThreshold(8); Calendar c=Calendar.getInstance(); CachedData cd=tc.encode(c); assertEquals(SerializingTranscoder.SERIALIZED |SerializingTranscoder.COMPRESSED, cd.getFlags()); assertEquals(c, tc.decode(cd)); }
public void shouldDetectTheDefaultLogicNameIfAnnotationWithName() throws SecurityException, NoSuchMethodException { assertThat(Info.getLogicName(DefaultComponents.class.getMethod("full")), is(equalTo("value"))); mockery.assertIsSatisfied(); }
public void visitLineNumber(final int line, final Label start) { buf.setLength(0); buf.append("mv.visitLineNumber(").append(line).append(", "); appendLabel(start); buf.append(");\n"); text.add(buf.toString()); }
String getCellContents(int col, int row); int getRowCount(); int getColumnCountInRow(int row); void substitute(int col, int row, String content); int addRow(List<String> list); void addColumnToRow(int row, String content); void appendChildTable(int row, Table table); void updateContent(int row, TestResult testResult); void updateContent(int col, int row, SlimTestResult testResult); void updateContent(int col, int row, SlimExceptionResult exceptionResult); Table asTemplate(CellContentSubstitution substitution) throws SyntaxError;
protected final PatternBasedType method(String pattern) { return new PatternBasedType(pattern); }
MemcachedConnection createConnection(List<InetSocketAddress> addrs) throws IOException;  MemcachedNode createMemcachedNode(SocketAddress sa, SocketChannel c, int bufSize);  BlockingQueue<Operation> createOperationQueue();  NodeLocator createLocator(List<MemcachedNode> nodes);  OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon(); }
public String toString() { StringBuilder result = new StringBuilder(); result.append(serviceName); if (hostName != null) { result.append('/'); result.append(hostName); } if (realm != null) { result.append('@'); result.append(realm); } return result.toString(); }
public void doWork() throws Exception { long startTime = Time.currentElapsedTime(); listener.processDeadWatchers(snapshot); long latency = Time.currentElapsedTime() - startTime; LOG.info("Takes {} to process {} watches", latency, total); totalDeadWatchers.addAndGet(-total); synchronized(processingCompletedEvent) { processingCompletedEvent.notifyAll();
protected void scanRowsForMatches(List<Object> queryResultList) { queryResults = new QueryResults(queryResultList); int rows = table.getRowCount(); for (int tableRow = 2; tableRow < rows; tableRow++) scanRowForMatch(tableRow); markSurplusRows(); }
protected boolean pageMatches(WikiPage page) { String pageContent = page.getData().getContent(); Matcher matcher = regularExpression.matcher(pageContent); return matcher.find(); }
void rename(FileVersion fileVersion, File originalFile) throws IOException;  void delete(File... files) throws IOException; }
public void failed(Throwable e, FrameworkMethod method) { LOG.info("FAILED " + testName, e); }
public void visitFrame(final int type, final int nLocal, final Object[] local, final int nStack, final Object[] stack) { super.visitFrame(type, nLocal, remapEntries(nLocal, local), nStack, remapEntries(nStack, stack)); }
public String getHelpText() throws Exception; public List<WikiPageAction> getActions() throws Exception; public boolean isOpenInNewWindow(); }
public void pageImported(WikiPage localPage) { traversalListener.process(localPage); }
Map<String, String> createClasspathEnvironment(String classPath); String getClassPath();
public void shouldBeGreedyWhenIPutAnAsteriskOnExpression() throws Exception { DefaultParametersControl control = new DefaultParametersControl("/clients/{pathToFile*}", converters, evaluator); assertThat(control.matches("/clients/my/path/to/file/"), is(true)); }
public String[] get(String key); public void set(String key, String[] values); }
public void converseWithLeader(InputArchive ia, OutputArchive oa, Leader l) throws IOException {  LearnerInfo li = new LearnerInfo(1, 0x10000); byte liBytes[] = new byte[12]; ByteBufferOutputStream.record2ByteBuffer(li, ByteBuffer.wrap(liBytes)); QuorumPacket qp = new QuorumPacket(Leader.FOLLOWERINFO, 0, liBytes, null); oa.writeRecord(qp, null); readPacketSkippingPing(ia, qp); Assert.assertEquals(Leader.LEADERINFO, qp.getType()); Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid()); Assert.assertEquals(ByteBuffer.wrap(qp.getData()).getInt(), 0x10000); qp = new QuorumPacket(Leader.ACKEPOCH, 0, new byte[4], null); oa.writeRecord(qp, null); readPacketSkippingPing(ia, qp); Assert.assertEquals(Leader.DIFF, qp.getType()); readPacketSkippingPing(ia, qp); Assert.assertEquals(Leader.NEWLEADER, qp.getType()); Assert.assertEquals(ZxidUtils.makeZxid(1, 0), qp.getZxid()); qp = new QuorumPacket(Leader.ACK, qp.getZxid(), null, null); oa.writeRecord(qp, null); readPacketSkippingPing(ia, qp); Assert.assertEquals(Leader.UPTODATE, qp.getType()); }
public void processDeadWatchers(Set<Integer> deadWatchers) {
public void shouldOverrideTheHttpMethodByUsingThe_methodParameter() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(DefaultResourceTranslator.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getRequestURI(); will(returnValue("/url")); one(request).getParameter("_method"); will(returnValue("DELETE")); one(registry).parse("/url", HttpMethod.DELETE,webRequest); will(returnValue(expected)); }}); ResourceMethod resource = translator.translate(webRequest); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied();
public void testVerboseOption() throws Exception { runner.args(new String[] {"-v", "blah", "80", "blah"} ); assertEquals(1, runner.handler.subHandlers.size()); Object o = runner.handler.subHandlers.get(0); assertTrue(o instanceof StandardResultHandler); assertTrue(runner.verbose); }
public void testMakeMultiUserAuthenticator() throws Exception { final String passwordFilename = "testpasswd"; File passwd = new File(passwordFilename); passwd.createNewFile(); Authenticator a = FitNesse.makeAuthenticator(passwordFilename, new ComponentFactory("blah")); assertTrue(a instanceof MultiUserAuthenticator); passwd.delete(); }
public List<String> buildAsStringList() { List<String> result = new ArrayList<>(numberOfServers); for (int serverId = 0; serverId < numberOfServers; serverId++) { String s = serverAddresses.get(serverId).stream() .map(ServerAddress::toString) .collect(Collectors.joining("|")); result.add(String.format("server.%d=%s;%d", serverId, s, clientIds.get(serverId))); } return result; }
private MethodReplacingSearchObserver simpleMethodReplacer() { return new MethodReplacingSearchObserver(".*", "|method with no param|"); }
private void saveNewProperties(String path, Properties oldProps) throws Exception { File newPropsFile = new File(path + FileSystemPage.propertiesFilename); WikiPageProperties newProps = new WikiPageProperties(oldProps); FileOutputStream os = new FileOutputStream(newPropsFile); newProps.save(os); os.close(); }
public void visit(AliasLinkWidget widget) throws Exception { } public void searchForReferencingPages(WikiPage subjectPage, SearchObserver observer) throws Exception { this.observer = observer; this.subjectPage = subjectPage; root.getPageCrawler().traverse(root, this); } public List<WikiPage> findReferencingPages(WikiPage subjectPage) throws Exception { hits.clear(); searchForReferencingPages(subjectPage, this); return hits; } @SuppressWarnings("unchecked") public void processPage(WikiPage currentPage) throws Exception { this.currentPage = currentPage; String content = currentPage.getData().getContent(); WidgetBuilder referenceWidgetBuilder = new WidgetBuilder(new Class[]{PreProcessorLiteralWidget.class, WikiWordWidget.class, PreformattedWidget.class}); ParentWidget widgetRoot = new WidgetRoot(content, currentPage, referenceWidgetBuilder); widgetRoot.acceptVisitor(this); } public String getSearchPattern() throws Exception { return subjectPage.getName(); } }
public void testQuerySetLimit() throws Exception { Query query = new Query(); View view = client.getView(DESIGN_DOC_W_REDUCE, VIEW_NAME_W_REDUCE); ViewFuture future = client.query(view, query.setLimit(10)); ViewResponseWithDocs response = future.get(); assert response != null : future.getStatus(); }
public int read(byte[] b) throws IOException { return read(b, 0, b.length); }
private void runInADifferentClassLoader(final Callable<?> c) throws Exception { ClassLoader classLoader = new URLClassLoader(new URL[] {}); Thread t = new Thread(new Runnable() { public void run() { try { c.call(); } catch (Exception e) { throw new RuntimeException(e); } } }); t.setContextClassLoader(classLoader); t.start(); t.join(); }
public void tableWithException() throws Exception { request.setResource("TestPage"); PageData data = testPage.getData(); data.setContent(data.getContent() + "\n" + "|NoSuchClass|\n" + "|returnInt?|\n" + "|7|\n" ); testPage.commit(data); responder.makeResponse(context, request); PageData afterTest = responder.getTestResults(); String testResults = afterTest.getContent(); assertTrue(testResults.indexOf("!anchor") != -1); assertTrue(testResults.indexOf(".#") != -1); assertTrue(testResults.indexOf("SlimError") != -1); }
public void verifyDelete() { new StringCB(zk).verifyCreate(); zk.delete(path, version, this, toString()); verify(); }
public void replacesMultiLinedContent() throws Exception { wikiPage = createPageWithContent("|update no param|" + PageData.PAGE_LINE_SEPARATOR + "|$value=|update no param|"); observer = new MethodReplacingSearchObserver("|updateNoParam|", "|Updated no param|"); observer.process(wikiPage); assertTrue(wikiPage.getData().getContent().contains("|Updated no param|" + PageData.PAGE_LINE_SEPARATOR + "|$value=|Updated no param|")); }
public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max); public boolean getResponseCachingEnabled(); public void setResponseCachingEnabled(boolean isEnabled);  public int getConnectionMaxTokens(); public void setConnectionMaxTokens(int val); public int getConnectionTokenFillTime(); public void setConnectionTokenFillTime(int val); public int getConnectionTokenFillCount(); public void setConnectionTokenFillCount(int val); public int getConnectionFreezeTime(); public void setConnectionFreezeTime(int val); public double getConnectionDropIncrease(); public void setConnectionDropIncrease(double val); public double getConnectionDropDecrease(); public void setConnectionDropDecrease(double val); public double getConnectionDecreaseRatio(); public void setConnectionDecreaseRatio(double val);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); }
public SlimCommandRunningClient build() throws IOException { CommandRunner commandRunner = new MockCommandRunner(getExecutionLogListener()); final String[] slimArguments = buildArguments(); createSlimService(slimArguments); return new SlimCommandRunningClient(commandRunner, determineSlimHost(), getSlimPort(), determineTimeout(), getSlimVersion(), determineSSL(), determineHostSSLParameterClass()); }
public void home() { factory.getUserDao().refresh(userInfo.getUser()); result.use(Results.page()).forward(); }
public static ProxyPage retrievePage(String urlString) throws Exception { retrievalCount++; URL url = new URL(urlString + "?responder=proxy&type=bones"); ProxyPage page = (ProxyPage) getObjectFromUrl(url); page.setTransientValues(url.getHost(), Clock.currentTimeInMillis()); int port = url.getPort(); page.setHostPort((port == -1) ? 80 : port); page.lastLoadChildrenTime = Clock.currentTimeInMillis(); return page; }
public boolean contains(Object key) { return parent.containsKey(key); }
public void testQuerySetInclusiveEnd() throws Exception { Query query = new Query(); View view = client.getView(DESIGN_DOC_W_REDUCE, VIEW_NAME_W_REDUCE); HttpFuture<ViewResponse> future = client.asyncQuery(view, query.setInclusiveEnd(true)); ViewResponse response = future.get(); assert response != null : future.getStatus(); }
public static byte[] makeFinalKey(byte[] masterSeed, byte[] masterSeed2, byte[] masterKey, int numRounds) { byte[] transformedMasterKey = transformMasterKey(masterSeed2, masterKey, numRounds );
private String composeFileName(Request request, String fileName) { if (fileName==null || fileName.length()==0) return context.getRootPagePath() + File.separator + request.getResource() + File.separator + "contents.txt"; return context.getRootPagePath() + File.separator + request.getResource() + File.separator + fileName + ".zip#contents.txt";
public void testRoundTrip() throws IOException { MultiResponse response = new MultiResponse(); response.add(new OpResult.CheckResult()); response.add(new OpResult.CreateResult("foo-bar")); response.add(new OpResult.DeleteResult()); Stat s = new Stat(); s.setCzxid(546); response.add(new OpResult.SetDataResult(s)); MultiResponse decodedResponse = codeDecode(response); assertEquals(response, decodedResponse); assertEquals(response.hashCode(), decodedResponse.hashCode()); }
public void testObservable() throws Exception { BucketMonitor bucketMonitor = new BucketMonitor(new URI(streamingUri), bucketname, username, password, configParser); BucketObserverMock observer = new BucketObserverMock(); bucketMonitor.addObserver(observer); bucketMonitor.addObserver(observer); bucketMonitor.startMonitor(); assertTrue("Update for observer was not called.", observer.isUpdateCalled()); bucketMonitor.shutdown(); }
private static void matchCN(final String host, final String cn) throws SSLException { final String normalizedHost = host.toLowerCase(Locale.ROOT); final String normalizedCn = cn.toLowerCase(Locale.ROOT); if (!matchIdentityStrict(normalizedHost, normalizedCn)) { throw new SSLPeerUnverifiedException("Certificate for <" + host + "> doesn't match "
public Descriptor create(WikiPage page) { return new WikiPageDescriptor(page.readOnlyData(), debug, remoteDebug, classPath); }
public State checkState(final String... filePaths) throws RevisionControlException { return VERSIONED; }
private static boolean tableIsTooSmall(Table table) { return table.getRowCount() < 3; }
private void addBlahAndBlahFixture(String qualifiedBy, List<String> candidateClassNames) { candidateClassNames.add(qualifiedBy + nameAsString); candidateClassNames.add(qualifiedBy + nameAsString + "Fixture"); }
public void openComplete(int rc, LedgerHandle ledgerHandle, Object ctx) { try{ safeOpenComplete(rc, ledgerHandle, ctx);
void traversePageAndAncestors(TraversalListener<? super WikiPage> callback); void traverseUncles(String uncleName, TraversalListener<? super WikiPage> callback); WikiPage getSiblingPage(WikiPagePath pathRelativeToSibling); WikiPage findAncestorWithName(String name); WikiPage getClosestInheritedPage(String pageName); }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); request = new MockRequest(); }
public void setRequestThrottleStallTime(int time); public boolean getRequestThrottleDropStale(); public void setRequestThrottleDropStale(boolean drop); public boolean getRequestStaleLatencyCheck(); public void setRequestStaleLatencyCheck(boolean check); public boolean getRequestStaleConnectionCheck(); public void setRequestStaleConnectionCheck(boolean check);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); public long getFlushDelay(); public void setFlushDelay(long delay); public long getMaxWriteQueuePollTime(); public void setMaxWriteQueuePollTime(long delay); public int getMaxBatchSize(); public void setMaxBatchSize(int size); }
String getHtml(); String getVariable(String name); Symbol getSyntaxTree(); ParsingPage getParsingPage(); String translateToHtml(Symbol syntaxTree); List<String> getClasspaths(); List<String> getXrefPages(); }
public void moveNext() { offset++; } public boolean isEnd() { return isEnd(0); }
public static String makeExceptionString(Throwable e) { StringBuilder buffer = new StringBuilder(); buffer.append(e.toString()).append("\n"); StackTraceElement[] stackTreace = e.getStackTrace(); for (int i = 0; i < stackTreace.length; i++) buffer.append("\t" + stackTreace[i]).append("\n"); return buffer.toString(); }
public void dropInstance_drops_test_results(){ JavaFormatter first=JavaFormatter.getInstance("TestName"); JavaFormatter.dropInstance("TestName"); JavaFormatter second=JavaFormatter.getInstance("TestName"); assertNotSame(first, second); }
public void shouldHandle404() throws IOException, InterceptionException { mockery.checking(new Expectations() { { one(translator).translate(info); will(throwException(new ResourceNotFoundException())); one(notFoundHandler).couldntFind(info); } }); lookup.intercept(null, null, null); mockery.assertIsSatisfied(); }
private void initializeSVNStatusTypeToStateMap() { states.put(SVNStatusType.STATUS_UNVERSIONED, SVNState.UNKNOWN); states.put(SVNStatusType.STATUS_NONE, SVNState.UNKNOWN); states.put(null, SVNState.UNKNOWN); states.put(SVNStatusType.STATUS_ADDED, SVNState.ADDED); states.put(SVNStatusType.STATUS_DELETED, SVNState.DELETED); states.put(SVNStatusType.STATUS_NORMAL, SVNState.VERSIONED); states.put(SVNStatusType.STATUS_MODIFIED, SVNState.VERSIONED); states.put(SVNStatusType.STATUS_REPLACED, SVNState.VERSIONED); states.put(SVNStatusType.MERGED, SVNState.VERSIONED); }
protected void tearDown() throws Exception { LOG.info("TearDown started"); ct.tearDownAll(); LOG.info("Shutting down server 1"); shutdown(s1); LOG.info("Shutting down server 2"); shutdown(s2); LOG.info("Shutting down server 3"); shutdown(s3); LOG.info("Shutting down server 4"); shutdown(s4); LOG.info("Shutting down server 5"); shutdown(s5); for (String hp : hostPort.split(",")) { assertTrue("waiting for server down", ClientBase.waitForServerDown(hp, ClientBase.CONNECTION_TIMEOUT)); LOG.info(hp + " is no longer accepting client connections"); } JMXEnv.tearDown(); LOG.info("FINISHED " + getName()); }
public void testRegularExpressionToMatch() throws Exception { assertTrue("Match 1", Pattern.matches(AnchorDeclarationWidget.REGEXP, "!anchor name")); assertTrue("Match 2", Pattern.matches(AnchorDeclarationWidget.REGEXP, "!anchor 1234")); assertFalse("Match 3", Pattern.matches(AnchorDeclarationWidget.REGEXP, "!anchor @#$@#%")); assertFalse("Match 4", Pattern.matches(AnchorDeclarationWidget.REGEXP, "! anchor name")); assertFalse("Match 5", Pattern.matches(AnchorDeclarationWidget.REGEXP, "!anchor name other stuff")); assertFalse("Match 6", Pattern.matches(AnchorDeclarationWidget.REGEXP, "!anchor name ")); }
public void testAddMultipleUrlsToClasspath() throws Exception { String separator = System.getProperty("path.separator"); String paths = "/blah/blah" + separator + "C" + otherSeperator(separator) + "\\foo\\bar"; TestRunner.addItemsToClasspath(paths); URLClassLoader classLoader = (URLClassLoader)ClassLoader.getSystemClassLoader(); String classpath = classpathAsString(classLoader); assertSubString("/blah/blah", classpath); assertSubString("C" + otherSeperator(separator) + "\\foo\\bar", classpath); }
void updateContent(int row, TestResult testResult); void updateContent(int col, int row, TestResult testResult);
public void setup() throws Exception { MockitoAnnotations.initMocks(this); Locale.setDefault(Locale.ENGLISH); provider = new ParanamerNameProvider(); doReturn(false).when(container).canProvide(any(Class.class)); doReturn(new ObjenesisInstanceCreator()).when(container).instanceFor(InstanceCreator.class); DIConstraintValidatorFactory constraintValidatorFactory = new DIConstraintValidatorFactory(container); MethodValidatorFactoryCreator methodValidatorCreator = new MethodValidatorFactoryCreator(provider, constraintValidatorFactory); methodValidatorCreator.buildFactory(); factory = methodValidatorCreator.getInstance(); MessageInterpolatorFactory interpolatorFactory = new MessageInterpolatorFactory(); interpolatorFactory.createInterpolator(); interpolator = interpolatorFactory.getInstance(); ValidatorFactoryCreator creator = new ValidatorFactoryCreator(interpolator); creator.buildFactory(); validator = new MockValidator(); withConstraint = DefaultResourceMethod.instanceFor(MyController.class, MyController.class.getMethod("withConstraint", String.class)); withTwoConstraints = DefaultResourceMethod.instanceFor(MyController.class, MyController.class.getMethod("withTwoConstraints", String.class, Customer.class)); withoutConstraint = DefaultResourceMethod.instanceFor(MyController.class, MyController.class.getMethod("withoutConstraint", String.class)); cascadeConstraint = DefaultResourceMethod.instanceFor(MyController.class, MyController.class.getMethod("cascadeConstraint", Customer.class)); }
public synchronized int size(){ return watchTable.size(); }
public boolean revalidateVoteset(SyncedLearnerTracker voteSet, boolean timeout) { return voteSet != null && voteSet.hasAllQuorums() && timeout; }
private void assertTestResultsContain(String fragment) { String unescapedResults = unescape(testResults); assertTrue(unescapedResults, unescapedResults.indexOf(fragment) != -1); }
public void testPrepend() throws Exception { final String key="prepend.key"; assertTrue(client.set(key, 5, "test").get()); OperationFuture<Boolean> op = client.prepend(0, key, "es"); assertTrue(op.get()); assert op.getStatus().isSuccess(); assertEquals("estest", client.get(key)); }
public void existsForWillReturnTrueIfDelegateAlsoReturnsTrue() throws Exception { mockery.checking(new Expectations(){{ atLeast(1).of(delegate).existsFor(CachedConvertersTest.class, container); will(returnValue(true)); }}); assertTrue(converters.existsFor(CachedConvertersTest.class, container)); }
Map<String, Object> included();  void forwardTo(String uri);  <T> T forwardTo(Class<T> controller);  <T> T redirectTo(Class<T> controller);  <T> T of(Class<T> controller);  <T> T redirectTo(T controller);  <T> T forwardTo(T controller);  <T> T of(T controller); }
public void testMinMaxSessionTimeout() throws Exception {
public void shouldBeAbleToDeserializeACatWhenMethodHasMoreThanOneArgument() throws Exception { InputStream stream = new ByteArrayInputStream("{\"cat\":{\"name\": \"Zulu\", \"age\": 1}}".getBytes()); when(provider.parameterNamesFor(jump.getMethod())).thenReturn(new String[] {"cat", "times"}); Object[] deserialized = deserializer.deserialize(stream, jump); assertThat(deserialized.length, is(2)); assertThat(deserialized[0], is(instanceOf(Cat.class))); Cat cat = (Cat) deserialized[0]; assertThat(cat.name, is("Zulu")); assertThat(cat.age, is(1)); }
public void testAfterDeletingTopMostPageShouldProvideLinkToWikiRootPage() throws Exception { expect(revisionController.execute(DELETE, contentAndPropertiesFilePathFor(FS_PARENT_PAGE))).andReturn(DELETED); replay(revisionController); createPage(FS_PARENT_PAGE); request.setResource(FS_PARENT_PAGE); invokeResponderAndCheckSuccessStatus(); assertSubString("Click <a href=\"\">here</a>", response.getContent()); }
public void themeInPropertiesBeatsOneInPlugin() throws IOException, PluginException { String theme = ContextConfigurator .empty() .withParameter(ConfigurationParameter.THEME, "othertheme") .withClassLoader(PluginsLoaderTest.createClassLoaderWithTestPlugin()) .makeFitNesseContext() .theme; assertThat(theme, is("othertheme")); }
private void reportMetrics(final Runnable task) { if (executorOptional.isPresent()) { try {
public void testSimpleWikiWord() throws Exception { ParentWidget page = new WidgetRoot("WikiWord", mockSource); WikiWidget widget = page.nextChild(); testWidgetClassAndText(widget, WikiWordWidget.class, "WikiWord"); }
public void shouldBeAbleToDeleteSomeTestHistory() throws Exception { new DateAlteringClock(makeDate("20090616000000")).freeze(); File pageDirectory = addPageDirectory("SomePage"); addTestResult(pageDirectory, "20090614000000_1_0_0_0"); addTestResult(pageDirectory, "20090615000000_1_0_0_0"); TestHistory history = new TestHistory(); history.readHistoryDirectory(resultsDirectory); PageHistory pageHistory = history.getPageHistory("SomePage"); assertEquals(2, pageHistory.size()); historyPurger.deleteTestHistoryOlderThanDays(1); history.readHistoryDirectory(resultsDirectory); pageHistory = history.getPageHistory("SomePage"); assertEquals(1, pageHistory.size()); assertNotNull(pageHistory.get(makeDate("20090615000000"))); assertNull(pageHistory.get(makeDate("20090614000000"))); }
private void requestParameterIs(ResourceMethod method, String paramName, String... values) { String methodName = paramName.replaceAll("\\..*", ""); when(parameters.getParameterValues(paramName)).thenReturn(values); String[] values1 = { paramName }; when(parameters.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(values1))); when(nameProvider.parameterNamesFor(method.getMethod())).thenReturn(new String[]{methodName});
WikiPage getParent(); boolean isRoot(); WikiPage addChildPage(String name); boolean hasChildPage(String name); WikiPage getChildPage(String name); void removeChildPage(String name); List<WikiPage> getChildren(); String getName(); PageData getData(); Collection<VersionInfo> getVersions(); WikiPage getVersion(String versionName); String getHtml(); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); String getVariable(String name); }
public int compareTo(ZNodeName that) { int answer = this.prefix.compareTo(that.prefix); if (answer == 0) { int s1 = this.sequence; int s2 = that.sequence; if (s1 == -1 && s2 == -1) { return this.name.compareTo(that.name); } answer = s1 == -1 ? 1 : s2 == -1 ? -1 : s1 - s2; } return answer; }
private void addFileRows(File[] files, HtmlTableListingBuilder table) throws Exception { for(int i = 0; i < files.length; i++) {
public void addItem(RecentChangesPageEntry line) throws Exception { Map<String, String> itemProperties = line.getItemProperties(); Element itemElement = document.createElement("item"); makeNodes(document, itemElement, itemProperties); linkPrefixBuilder.buildLink(document, itemElement, itemProperties.get("path")); String description = makeDescription(itemProperties); XmlUtil.addTextNode(document, itemElement, "description", description); channelElement.appendChild(itemElement); }
public static String makeRelativeFilename(String name) { Matcher match = filenamePattern.matcher(name); if(match.find()) return match.group(2);
private File createDataDirLogFile(File version_2, int Zxid) throws IOException { File logFile = new File(version_2 + "/log." + Long.toHexString(Zxid)); assertTrue(logFile.createNewFile(), "Failed to create log File:" + logFile.toString()); return logFile; }
private String contentFilePath() throws Exception { return absolutePath(contentFilename); }
public void testBlockAligned() throws IOException { testSize(1024, 1024); }
public void testComplete(TestPage testPage, TestSummary testSummary) { formatters.testComplete(testPage, testSummary); testsInProgressCount.getAndDecrement(); }
WikiPage getSiblingPage(WikiPagePath pathRelativeToSibling); WikiPage findAncestorWithName(String name); WikiPage getClosestInheritedPage(WikiPage context, String pageName);
private Optional<ExecutorService> createExecutor() { if (numWorkerThreads < 1) { LOG.info("Executor service was not created as numWorkerThreads {} is less than 1", numWorkerThreads); return Optional.empty(); } final BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>(maxQueueSize); final ThreadPoolExecutor executor = new ThreadPoolExecutor(numWorkerThreads, numWorkerThreads, 0L, TimeUnit.MILLISECONDS, queue, new PrometheusWorkerThreadFactory()); LOG.info("Executor service was created with numWorkerThreads {} and maxQueueSize {}", numWorkerThreads, maxQueueSize); return Optional.of(executor); }
public void keysOnly() { message.setFlags(TapRequestFlag.KEYS_ONLY); }
void findWhereUsed(Consumer<String> takeWhereUsed); void findReferences(Function<String, Optional<String>> changeReference); }
public WikiPage getParent() throws Exception; public WikiPage getParentForVariables() throws Exception; public void setParentForVariables(WikiPage parent); public WikiPage addChildPage(String name) throws Exception; public boolean hasChildPage(String name) throws Exception; public WikiPage getChildPage(String name) throws Exception; public void removeChildPage(String name) throws Exception; public List<WikiPage> getChildren() throws Exception; public String getName(); public PageData getData() throws Exception; public PageData getDataVersion(String versionName) throws Exception; public VersionInfo commit(PageData data) throws Exception; public PageCrawler getPageCrawler(); public WikiPage getHeaderPage() throws Exception; public WikiPage getFooterPage() throws Exception;
public UnifiedServerSocket.UnifiedSocket call() throws Exception { try { return (UnifiedServerSocket.UnifiedSocket) listeningSocket.accept();
<T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(final CallbackHandler cbh) throws OperationException; }
protected Instruction constructFixture(String fixtureName) { return constructInstance(getTableName(), fixtureName, 0, 0); }
public static byte[] digest(String idPassword) throws NoSuchAlgorithmException { return MessageDigest.getInstance(DIGEST_ALGORITHM).digest(idPassword.getBytes(UTF_8)); }
public void shouldProxifyConcreteClassesWithComplexConstructorsAndPassNullForAllParameters() { TheClassWithComplexConstructor proxy = (TheClassWithComplexConstructor) proxifier.proxify(TheClassWithComplexConstructor.class, new MethodInvocation() { public Object intercept(Object proxy, Method method, Object[] args, SuperMethod superMethod) { return superMethod.invoke(proxy, args); } }); assertThat(proxy.getFirstDependency(), is(nullValue())); assertThat(proxy.getSecondDependency(), is(nullValue())); }
boolean append(TxnHeader hdr, Record r) throws IOException;  TxnIterator read(long zxid) throws IOException;  long getLastLoggedZxid() throws IOException;  boolean truncate(long zxid) throws IOException;  long getDbId() throws IOException;  void commit() throws IOException;  long getTxnLogSyncElapsedTime();  void close() throws IOException;  public interface TxnIterator {  TxnHeader getHeader();  Record getTxn();  boolean next() throws IOException;  void close() throws IOException;  long getStorageSize() throws IOException; } }
public WikiPage makePage(final File path, final String pageName, final WikiPage parent, final VariableSource variableSource) { Optional<String> rootPath = variableSource.findVariable("FITNESSE_ROOTPATH"); return new FileSystemPage(path, pageName, parent, null, versionsController, new FileSystemSubWikiPageFactory(new File(rootPath.orElse("*nothing*")), fileSystem, variableSource, FileSystemPageFactory.this),
protected SlimTestResult createEvaluationMessage(String actual, String expected) { String replacement = replaceSymbolsWithFullExpansion(expected); if (!replacement.equals(expected)) table.substitute(getCol(), getRow(), replacement); return SlimTestResult.plain(); }
protected ScriptTable createChild(ScenarioTestContext testContext, Table newTable) { ScriptTable scriptTable = new ScriptTable(newTable, id, testContext); scriptTable.setCustomComparatorRegistry(customComparatorRegistry); return scriptTable; }
public static Test suite() { return TestSuiteMaker.makeSuite("files", new Class[] { FileResponderTest.class,
public void pageImported(WikiPage localPage) { addRowToResponse(""); }
public void testLoadFixturesWithFixtureImplied() throws Throwable { fixtureLoader.disgraceThenLoad("fit.TheThirdFixture"); Fixture fixture = fixtureLoader.disgraceThenLoad("the third"); assertEquals("fit.TheThirdFixture", fixture.getClass().getName()); }
private void compileResultFileIntoHistory(File file) throws ParseException { String fileName = file.getName(); PageTestSummary summary = summaryFromFilename(fileName); summaryMap.put(summary.getDate(), summary); countResult(summary); setMinMaxDate(summary.getDate()); setMaxAssertions(summary); }
public void testTestSummaryInformationAppears() throws Exception { doSimpleRun(passFixtureTable()); assertHasRegexp("<script>.*?document\\.getElementById\\(\"test-summary\"\\)\\.innerHTML = \".*?Assertions:.*?\";.*?</script>", results); assertHasRegexp("<script>.*?document\\.getElementById\\(\"test-summary\"\\)\\.className = \".*?\";.*?</script>", results); }
void connectionPrimed() { sockKey.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE); }
public void shouldComplainAboutInvalidNumber() { converter.convert("---", long.class); }
public static void main(String[] args) throws IOException, SSLContextException { if (args.length == 3) { System.out.println(send4LetterWord(args[0], Integer.parseInt(args[1]), args[2]));
private void registerOn(Class<?> type, boolean customComponent) { AnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type); if (!customComponent) { definition.setLazyInit(true); } definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_NO); definition.setPrimary(customComponent); definition.setRole(customComponent ? BeanDefinition.ROLE_APPLICATION : BeanDefinition.ROLE_INFRASTRUCTURE); String name = beanNameGenerator.generateBeanName(definition, (BeanDefinitionRegistry) beanFactory); BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(definition, name); ScopeMetadata scopeMetadata = scopeResolver.resolveScopeMetadata(definition); definitionHolder = applyScopeOn(definitionHolder, scopeMetadata); BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, (BeanDefinitionRegistry) beanFactory); }
static long decodeUnsignedInt(byte[] data, int i) { return ((long)(data[i] & 0xff) << 24) | ((data[i+1] & 0xff) << 16)
public String genJavaReadMethod(String fname, String tag) { return genJavaReadWrapper(fname, tag, false); }
public static Test suite() { return TestSuiteMaker.makeSuite("updates", new Class[]{ UpdaterTest.class,
public String makeHtml(FitNesseContext context) throws Exception { HtmlPage html = context.htmlPageFactory.newPage(); html.title.use("Version Selection: " + resource); html.header.use(HtmlUtil.makeBreadCrumbsWithPageType(resource, "Version Selection")); html.main.use(makeRightColumn()); return html.html(); }
public ListTree directorySameAs(String diryName1, String diryName2) throws IOException { return folderSameAs(diryName1, diryName2); }
public <T> OperationFuture<Boolean> replace(String key, int exp, T o, Transcoder<T> tc) { return asyncStore(StoreType.replace, key, exp, o, tc); }
private static int cmdMap(StoreType t) { int rv=-1; switch(t) { case set: rv=StoreOperationImpl.SETQ; break; case add: rv=StoreOperationImpl.ADDQ; break; case replace: rv=StoreOperationImpl.REPLACEQ; break; }
WikiPagePath getFullPathOfChild(WikiPagePath childPath); WikiPagePath getFullPath(); String getRelativeName(WikiPage page); WikiPage getRoot(); void traverse(TraversalListener<? super WikiPage> callback); WikiPage getSiblingPage(WikiPagePath pathRelativeToSibling); WikiPage findAncestorWithName(String name); WikiPage getClosestInheritedPage(WikiPage context, String pageName);
public void shouldBeAbleToExtractStatus() throws Exception { examiner.type = "status"; examiner.extractValueFromResponse(); assertEquals("42", examiner.getValue()); }
public void tearDown() throws Exception { } public void ignore_testGetVersionsList() throws Exception {
public void keyFound() { String value = localization.getMessage("my.key"); assertThat(value, equalTo("abc")); System.out.println(localization.getBundle().getKeys()); }
public void startHandshake() throws IOException { throw new IOException(); }
public String translateToHtml(String input) { Symbol list = new Parser(currentPage).parse(input); return translateToHtml(list); }
private boolean hasNoCredentials() { return (commandParts().length == 1); }
public void visitMaxs(final int maxStack, final int maxLocals) { if (ClassReader.FRAMES && (compute == FRAMES)) {
public void testResponse() throws Exception { Responder responder = new ErrorResponder(new Exception("some error message")); SimpleResponse response = (SimpleResponse) responder.makeResponse(context, new MockRequest()); assertEquals(400, response.getStatus()); String body = response.getContent(); assertHasRegexp("<html>", body); assertHasRegexp("<body", body); assertHasRegexp("java.lang.Exception: some error message", body); }
public Response createGoodResponse(Request request) throws Exception { Response response; if (StringUtil.isBlank(request.getResource()) && StringUtil.isBlank(request.getQueryString())) request.setResource("FrontPage"); Responder responder = context.responderFactory.makeResponder(request); responder = context.authenticator.authenticate(context, request, responder); response = responder.makeResponse(context, request); response.addHeader("Server", "FitNesse-" + FitNesse.VERSION); response.addHeader("Connection", "close"); return response; }
public RelationBuilder relation(String name) { return transition(name); }
public void setUp() throws Exception { ClientBase.setupTestEnv(); System.setProperty("zookeeper.DigestAuthenticationProvider.superDigest", "super:D/InIHSb7yEEbrWz8b9l71RjZJU="); QuorumPeerConfig.setReconfigEnabled(true);
public void shutdownQuorum() throws Exception { ct.tearDownAll(); qb.tearDown(); }
public static KeeperException create(int code, String path) { KeeperException r = create(Code.get(code)); r.path = path; return r; }
public V put(String key, V value) { V rv = get(key); client.set(getKey(key), exp, value); return rv; }
public String decode(CachedData d) { assert d.getFlags() == flags : "expected " + flags + " got " + d.getFlags(); ByteBuffer bb = ByteBuffer.wrap(d.getData()); int keyLength = bb.getInt(); byte[] keyBytes = new byte[keyLength]; bb.get(keyBytes); String k = new String(keyBytes); assertEquals(key, k); int valueLength = bb.getInt(); byte[] valueBytes = new byte[valueLength]; bb.get(valueBytes); return new String(valueBytes); }
public void testAcceptResults() throws Exception { PageResult result = new PageResult("SomePage"); result.setTestSummary(new TestSummary(5, 0, 0, 0)); }
public boolean hasChildPage(String pageName) { return getNormalChildPage(pageName) != null; }
public void write(int oneByte) throws IOException { byte[] buf = new byte[1]; write(buf, 0, 1); }
public void testWatcherMetrics(String className) throws IOException { IWatchManager manager = getWatchManager(className); ServerMetrics.getMetrics().resetAll(); DumbWatcher watcher1 = new DumbWatcher(1); DumbWatcher watcher2 = new DumbWatcher(2); final String path1 = "/path1"; final String path2 = "/path2"; final String path3 = "/path3";
public void canFindClass() { Class<? extends CachedInteractionTest> myClass = this.getClass(); Class<?> clazz = interaction.getClass(myClass.getName()); assertEquals(myClass, clazz); verify(interaction, times(1)).handleClassCacheMiss(myClass.getName());
public void testInstallOnly() throws Exception { Arguments args = new Arguments(); args.setInstallOnly(true); FitNesse fitnesse = mock(FitNesse.class); FitNesseMain.update(args, fitnesse); FitNesseMain.launch(args, context, fitnesse); verify(fitnesse, never()).start(); verify(fitnesse, times(1)).applyUpdates(); }
void update(byte[] data, int offset, int length) { mac.update(data, offset, length); }
Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs); CountDownLatch broadcastOp(final BroadcastOpFactory of); CountDownLatch broadcastOp(final BroadcastOpFactory of, Collection<MemcachedNode> nodes);  Set<String> listSaslMechanisms(); }
@Test public void translatesEvaluators() { ParserTestHelper.assertTranslatesTo("${= 8 =}", "8"); ParserTestHelper.assertTranslatesTo("${=42.24=}", "42.24"); ParserTestHelper.assertTranslatesTo("${=1.2E+3=}", "1200"); ParserTestHelper.assertTranslatesTo("${=-123=}", "-123"); ParserTestHelper.assertTranslatesTo("${=%d:3.2=}", "3"); ParserTestHelper.assertTranslatesTo("${==}", ""); ParserTestHelper.assertTranslatesTo("${= =}", ""); ParserTestHelper.assertTranslatesTo("${=3+4=}", "7"); ParserTestHelper.assertTranslatesTo("${=abort=}", " <span class=\"fail\">invalid expression: abort</span> "); }
public void testCantFindFixture() throws Exception { String pageString = "<table><tr><td>NoSuchFixture</td></tr></table>"; Parse page = new Parse(pageString); Fixture fixture = new Fixture(); fixture.doTables(page); String fixtureName = page.at(0,0,0).body; assertTrue(fixtureName.indexOf("Could not find fixture: NoSuchFixture.") != -1); }
private void assertQueryResults(String queryRows, List<Object> queryResults, String table) throws Exception { makeQueryTableAndBuildInstructions(queryTableHeader + queryRows); Map<String, Object> pseudoResults = SlimClient.resultToMap(list( list("queryTable_id_0", "OK"), list("queryTable_id_1", queryResults) ) ); qt.evaluateExpectations(pseudoResults); assertEquals(table, qt.getTable().toString()); }
public Symbol peek() { return scanner.peek(provider, new ArrayList<SymbolType>()); }
@Test public void translatesMetas() { ParserTest.assertTranslatesTo("!meta stuff", "<span class=\"meta\">stuff</span>"); }
protected void doStaticTable(int rows) { game = new BowlingGame(); doRolls(); doScore(); }
public boolean pageExists(WikiPage context, WikiPagePath path) { assert context == this.context; return getPage(context, path) != null; }
public void addScenario(String scenarioName, ScenarioTable scenarioTable) { if (usage != null) { usage.addDefinition(scenarioName); } scenarios.put(scenarioName, scenarioTable); }
public void produce( final DataConsumer receiver ) { try { receiver.onEachFile(new FileInputStream(file), new File(new File(defaultPath), file.getName()).getAbsolutePath(), "", "root", 0, "root", 0, TarEntry.DEFAULT_FILE_MODE, file.length());
public void importWiki(WikiPage page) throws Exception { PageCrawler pageCrawler = page.getPageCrawler(); for(Iterator<?> iterator = page.getChildren().iterator(); iterator.hasNext();) pageCrawler.traverse((WikiPage) iterator.next(), this);
public void sortMatchesByScore() { Collections.sort(tableMatches, new Comparator<MatchedPair>() {
public void registerCustomComponents(ComponentRegistry components, Scanner scanner) { super.registerCustomComponents(components, scanner); new VRaptor2ComponentRegistrar(components).registerFrom(scanner); }
public void setUp() throws Exception { WikiPage root = InMemoryPage.makeRoot("root"); crawler = root.getPageCrawler(); WikiPageUtil.addPage(root, PathParser.parse("TestPage")); childName = "ChildPage"; String childContent = "child content"; String pagetype = ""; request = new MockRequest(); request.setResource("TestPage"); request.addInput("pageName", childName); request.addInput("pageContent", childContent); request.addInput("pageType", pagetype); context = FitNesseUtil.makeTestContext(root); responder = new AddChildPageResponder(); path = PathParser.parse("TestPage.ChildPage"); }
public void incrementErroredTestsCount() { testSummary.exceptions++; }
public void testWithPrunedPage () throws Exception { WikiPage pageTwo = addTestToSuite("TestTwo", "|!-fitnesse.testutil.FailFixture-!|\n\n|!-fitnesse.testutil.FailFixture-!|\n"); PageData data = pageTwo.getData(); data.setAttribute("Prune"); pageTwo.commit(data); String results = runSuite(); assertSubString("href=\"#TestOne\"", results); assertNotSubString("href=\"#TestTwo\"", results); assertSubString("1 right", results); assertSubString("0 wrong", results); assertSubString("id=\"TestOne\"", results); assertNotSubString("id=\"TestTwo\"", results); assertSubString("PassFixture", results); assertNotSubString("FailFixture", results); }
public void testGetValidAddressWithNotValid() throws NoRouteToHostException { MultipleAddresses multipleAddresses = new MultipleAddresses(new InetSocketAddress("10.0.0.1", 22)); multipleAddresses.getReachableAddress(); }
protected List<SlimAssertion> instructionsForRow(int row) throws TestExecutionException { String firstCell = table.getCellContents(0, row).trim(); List<SlimAssertion> assertions; String match; if (firstCell.equalsIgnoreCase(getStartKeyword())) assertions = startActor(row); else if (firstCell.equalsIgnoreCase(getCheckKeyword())) assertions = checkAction(row); else if (firstCell.equalsIgnoreCase(getCheckNotKeyword())) assertions = checkNotAction(row); else if (firstCell.equalsIgnoreCase(getRejectKeyword())) assertions = reject(row); else if (firstCell.equalsIgnoreCase(getEnsureKeyword())) assertions = ensure(row); else if (firstCell.equalsIgnoreCase(getShowKeyword())) assertions = show(row); else if (firstCell.equalsIgnoreCase(getNoteKeyword())) assertions = note(row); else if ((match = isSymbolAssignment(0, row)) != null) assertions = actionAndAssign(match, row); else if (firstCell.isEmpty()) assertions = note(row); else if (firstCell.trim().startsWith("#") || firstCell.trim().startsWith("*")) assertions = note(row); else {
public String toString() { return "ServletScopes.REQUEST"; }
public void testStandaloneQuorum() throws Exception { ClientBase.setupTestEnv(); final int CLIENT_PORT_QP1 = PortAssignment.unique(); String quorumCfgSection = "server.1=127.0.0.1:" + (PortAssignment.unique()) + ":" + (PortAssignment.unique()) + ";" + CLIENT_PORT_QP1 + "\n"; MainThread q1 = new MainThread(1, CLIENT_PORT_QP1, quorumCfgSection); q1.start(); try { Assert.assertTrue("waiting for server 1 being up",
protected void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); crawler = root.getPageCrawler(); responder = new NameWikiPageResponder(); request = new MockRequest(); pageOneName = "PageOne"; pageTwoName = "PageTwo"; frontPageName = "FrontPage"; pageOnePath = PathParser.parse(pageOneName); pageTwoPath = PathParser.parse(pageTwoName); frontPagePath = PathParser.parse(frontPageName); }
private void test304IfNotModified(String resource) throws IOException { Locale.setDefault(Locale.US); Calendar now = new GregorianCalendar(); now.add(Calendar.DATE, -1); String yesterday = SimpleResponse.makeStandardHttpDateFormat().format(now.getTime()); now.add(Calendar.DATE, 2); String tomorrow = SimpleResponse.makeStandardHttpDateFormat().format(now.getTime()); request.setResource(resource); request.addHeader("If-Modified-Since", yesterday); response = responder.makeResponse(context, request); assertEquals(200, response.getStatus()); request.setResource(resource); request.addHeader("If-Modified-Since", tomorrow); SimpleResponse notModifiedResponse = (SimpleResponse) responder.makeResponse(context, request); assertEquals(304, notModifiedResponse.getStatus()); assertEquals("", notModifiedResponse.getContent()); assertMatches(HTTP_DATE_REGEXP, notModifiedResponse.getHeader("Date")); assertNotNull(notModifiedResponse.getHeader("Cache-Control")); assertNull(notModifiedResponse.getHeader("Content-Type")); }
public Object fromString(String arg) { if (StringUtils.isBlank(arg)) return null; String[] strings = ListConverterHelper.fromStringToArrayOfStrings(arg); Object array = Array.newInstance(componentClass, strings.length); for (int i = 0; i < strings.length; i++) { Array.set(array, i, componentConverter.fromString(strings[i])); } return array; }
long getWriteCompleteTimestamp();  byte[] getErrorMsg();  void addClone(Operation op);  int getCloneCount();  void setCloneCount(int count); }
public void testRegularExpression() throws Exception { assertMatchEquals("!lastmodified", "!lastmodified"); }
public void intersectionIsFound() throws Exception { List<WikiPage> expected = setupWikiPageList(pageOne, pageTwo); when(delegate.search(any(WikiPage.class))).thenReturn( setupWikiPageList(pageOne, pageTwo, pageThree)); PageFinder delegate2 = mock(PageFinder.class); when(delegate2.search(any(WikiPage.class))).thenReturn(expected); sut.add(delegate); sut.add(delegate2); List<WikiPage> results = sut.search(page); assertFoundResultsEqualsExpectation(expected, results); }
public void testHammer() throws Exception { bang = true; Thread[] hammers = new Thread[100]; for (int i = 0; i < hammers.length; i++) { hammers[i] = new HammerThread("HammerThread-" + i); hammers[i].start(); } Thread.sleep(5000);
public void shouldReturnWantedUrlWithoutArgs() { when(router.urlFor(TestController.class, method2params, new Object[2])).thenReturn("/expectedURL");
public void testReturnsNullIfResourceNotFound() { mockery.checking(new Expectations() { { one(methodLookup).methodFor("unknown_id", "POST"); will(returnValue(null)); } }); ResourceMethod method = registry.gimmeThis("unknown_id", "POST", null); assertThat(method, is(Matchers.nullValue())); mockery.assertIsSatisfied(); }
public void testReadOnlyZookeeperServer() { ReadOnlyZooKeeperServer readOnlyZooKeeperServer = new ReadOnlyZooKeeperServer( mock(FileTxnSnapLog.class), mock(QuorumPeer.class), mock(ZKDatabase.class)); final ConnectRequest request = new ConnectRequest(); request.setProtocolVersion(1); request.setLastZxidSeen(99L); request.setTimeOut(500); request.setSessionId(123L); request.setPasswd(new byte[]{ 1 }); request.setReadOnly(false); ServerCnxn.CloseRequestException e = assertThrows( ServerCnxn.CloseRequestException.class, () -> readOnlyZooKeeperServer.processConnectRequest(new MockServerCnxn(), request)); assertEquals(e.getReason(), ServerCnxn.DisconnectReason.NOT_READ_ONLY_CLIENT); }
void registerGaugeSet(String name, GaugeSet gaugeSet);  void unregisterGaugeSet(String name); enum DetailLevel {  BASIC,  ADVANCED }  Summary getSummary(String name, DetailLevel detailLevel);  SummarySet getSummarySet(String name, DetailLevel detailLevel); }
public void setUp() throws Exception { context = FitNesseUtil.makeTestContext(); root = context.getRootPage(); responder = new NameWikiPageResponder(); request = new MockRequest(); frontPageName = "FrontPage"; pageOneName = "PageOne"; pageTwoName = "PageTwo"; pageThreeName = "PageThree"; pageFourName = "PageFour"; pageFiveName = "PageFive"; frontPagePath = PathParser.parse(frontPageName); pageOnePath = PathParser.parse(pageOneName); pageTwoPath = PathParser.parse(pageTwoName); pageThreePath = PathParser.parse(pageThreeName); pageFourPath = PathParser.parse(pageFourName); pageFivePath = PathParser.parse(pageFiveName); helloTag = "hello"; worldTag = "world"; fitnesseTag = "fitnesse"; }
public void doRows(Parse rows) { this.rows = rows; while (this.rows != null) { doRow(this.rows);
public void shouldNotUsePortWhenPortIs80() { when(request.getScheme()).thenReturn("http"); when(request.getServerName()).thenReturn("caelum.com.br"); when(request.getServerPort()).thenReturn(80); when(request.getContextPath()).thenReturn("/context/"); assertEquals("http://caelum.com.br/context/", configuration.getApplicationPath()); }
private static void printStat(Stat stat) { System.err.println("cZxid = " + stat.getCzxid()); System.err.println("ctime = " + new Date(stat.getCtime()).toString()); System.err.println("mZxid = " + stat.getMzxid()); System.err.println("mtime = " + new Date(stat.getMtime()).toString()); System.err.println("pZxid = " + stat.getPzxid()); System.err.println("cversion = " + stat.getCversion()); System.err.println("dataVersion = " + stat.getVersion()); System.err.println("aclVersion = " + stat.getAversion()); System.err.println("ephemeralOwner = " + stat.getEphemeralOwner()); System.err.println("dataLength = " + stat.getDataLength()); System.err.println("numChildren = " + stat.getNumChildren()); }
protected boolean removeWatches(Map<String, Set<Watcher>> pathVsWatcher, Watcher watcher, String path, boolean local, int rc, Set<Watcher> removedWatchers) throws KeeperException { if (!local && rc != Code.OK.intValue()) { throw KeeperException .create(KeeperException.Code.get(rc), path); } boolean success = false;
Map<String, Class<?>> getParameterTypes(Method method, String[] parameterPaths); }
private List<String> expandWildcards(List<String> paths) { List<String> allPaths = new ArrayList<String>(); for (String path : paths) allPaths.addAll(expandWildcard(path)); return allPaths; }
public void testValidSslConfig() throws MetricsProviderLifeCycleException { PrometheusMetricsProvider provider = new PrometheusMetricsProvider(); Properties configuration = new Properties(); String testDataPath = System.getProperty("test.data.dir", "src/test/resources/data"); configuration.setProperty("httpHost", "127.0.0.1"); configuration.setProperty("httpsPort", "50511"); configuration.setProperty("ssl.keyStore.location", testDataPath + "/ssl/server_keystore.jks"); configuration.setProperty("ssl.keyStore.password", "testpass"); configuration.setProperty("ssl.trustStore.location", testDataPath + "/ssl/server_truststore.jks"); configuration.setProperty("ssl.trustStore.password", "testpass"); provider.configure(configuration); provider.start(); }
public void incrementErroredTestsCount() { testContext.incrementErroredTestsCount(); testSummary.exceptions++; }
public void shutdown(){} }, "0", false, new ZooKeeperServerListener(){ @Override public void notifyStopping(String errMsg, int exitCode) { }}); } public void testStart() { this.stopped = false; this.workerPool = new WorkerService( "CommitProcWork", 1, true); } public void addToCommittedRequests(Request req) { this.committedRequests.add(req); } public void addToNextPending(Request req) { this.nextPending.set(req); } public void addToQueuedRequests(Request req) {
protected SecureRandom setIVs(PwDbHeader header) throws PwDbOutputException { SecureRandom random = super.setIVs(header); PwDbHeaderV4 h = (PwDbHeaderV4) header; random.nextBytes(h.protectedStreamKey); h.innerRandomStream = CrsAlgorithm.Salsa20; randomStream = PwStreamCipherFactory.getInstance(h.innerRandomStream, h.protectedStreamKey); random.nextBytes(h.streamStartBytes); return random; }
public void withoutViolations() { CustomerForValidation customer0 = new CustomerForValidation(10, "Vraptor"); Assert.assertTrue(beanValidator.validate(customer0).isEmpty()); }
public void testClientReconnect() throws IOException, InterruptedException { HostProvider hostProvider = mock(HostProvider.class); when(hostProvider.size()).thenReturn(1); InetSocketAddress inaddr = new InetSocketAddress("127.0.0.1", 1111); when(hostProvider.next(anyLong())).thenReturn(inaddr); ZooKeeper zk = mock(ZooKeeper.class); when(zk.getClientConfig()).thenReturn(new ZKClientConfig()); sc = SocketChannel.open(); ClientCnxnSocketNIO nioCnxn = new MockCnxn(); ClientCnxn clientCnxn = new ClientCnxn( hostProvider, 5000, zk.getClientConfig(), DummyWatcher.INSTANCE, nioCnxn, false); clientCnxn.start(); countDownLatch.await(5000, TimeUnit.MILLISECONDS); assertTrue(countDownLatch.getCount() == 0); clientCnxn.close(); }
public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) { DataTree dt = zkServer.getZKDatabase().getDataTree(); CommandResponse response = initializeResponse(); response.put("path_to_session_ids", dt.getWatchesByPath().toMap()); return response; }
public String rendered() throws Exception { ParentWidget root = new WidgetRoot(text, FitnesseFixtureContext.root); return root.render(); }
public void usingRegexesWithCurlyBraces() throws Exception { builder = new RouteBuilder(proxifier, typeFinder, converters, "/abc/{abc:[0-9A-Z]{5}}"); builder.is(MyResource.class, method.getMethod()); Route route = builder.build(); assertFalse("invalid uri", route.canHandle("/abc/notValid")); assertFalse("invalid uri", route.canHandle("/abc/ABC123")); assertTrue("valid uri", route.canHandle("/abc/10AB3"));
public <T> T movedPermanentlyTo(final Class<T> controller) { return proxifier.proxify(controller, new MethodInvocation<T>() { public Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {
public void visitTypeInsn(final int opcode, final String type) { mv.visitTypeInsn(opcode, type);
private String makeLinkToNonExistentWikiPage(String text, String qualifiedName) { HtmlText htmlText = new HtmlText(text); HtmlTag link = new HtmlTag("a", "[?]"); link.addAttribute("title", "create page"); link.addAttribute("href", qualifiedName + "?edit&nonExistent=true"); return htmlText.html() + link.html(); }
public void testComplete(TestPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) throws Exception { super.testComplete(test, testSummary, timeMeasurement); writeResults(); }
public boolean equals(Object o) { if (o == null || !(o instanceof TestSummary)) return false; TestSummary other = (TestSummary) o; return getRight() == other.getRight() && getWrong() == other.getWrong() && getIgnores() == other.getIgnores()
public void shutdown(long millis) throws InterruptedException { forceClose(serverSocket);
public boolean equals(Object obj) { return this.equals((MatchedPair) (obj)); }
void addOp(Operation op);  void insertOp(Operation o);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
protected List<FrameworkMethod> computeTestMethods() { return JUnit4ZKTestRunner.computeTestMethodsForClass(getTestClass().getJavaClass(), super.computeTestMethods()); }
int getTickTime();  int getMaxClientCnxnsPerHost();  int getMinSessionTimeout();  int getMaxSessionTimeout();  int getInitLimit();  int getSyncLimit();  void setInitLimit(int initLimit);  void setSyncLimit(int syncLimit);  int getTick();  String getState();  String getQuorumAddress();  int getElectionType();  String getElectionAddress();  String getClientAddress();  String getLearnerType();  long getConfigVersion();  String getQuorumSystemInfo();  boolean isPartOfEnsemble();  boolean isLeader(); }
public void addFile(String resource, String relativeFilePath) throws IOException { File dst = new File(outputPath, relativeFilePath); dst.getParentFile().mkdirs(); FileCopier.copy(resource, dst); }
public boolean isJavaFormat(){ return format == Format.JAVA; }
public void testSessionExpires() throws InterruptedException { ZSession session = createSession("1");
public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Instruction)) return false; Instruction that = (Instruction) o; return id.equals(that.id);
Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
private static int type(final ClassWriter cw, final String desc) { String t; int index = desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0; switch (desc.charAt(index)) { case 'V':
private static boolean processCmd(String[] args, ZooKeeper zooKeeper) throws KeeperException, IOException, InterruptedException { Stat stat = new Stat(); if (args.length < 2) { return false; } if (args.length < 3) { usage(); return false; } String cmd = args[1]; boolean watch = args.length > 3; String path = args[2]; List<ACL> acl = Ids.OPEN_ACL_UNSAFE; System.out.println("Processing " + cmd); try { if (cmd.equals("create") && args.length >= 4) {
public static Matcher<Resource> resource(final Class<?> type) { return new BaseMatcher<Resource>() {
public void clearTestSummary() { testSummary = new TestSummary(); }
public void evaluateExpectations(Map<String, Object> results) { for (SlimTable.Expectation e : expectations) e.evaluateExpectation(results);
public void testCreateBase() throws Exception { FileSystemPage levelA = (FileSystemPage) WikiPageUtil.addPage(root, PathParser.parse("PageA"), ""); assertEquals(new File("./teststorage/RooT/PageA"), levelA.getFileSystemPath()); assertTrue(new File(defaultPath + "/RooT/PageA").exists()); }
private void catalogLocalTree(WikiPage page) { contextPath = page.getFullPath(); pageCatalog = new HashSet<>(); page.getPageCrawler().traverse(this, new NoPruningStrategy()); WikiPagePath relativePathOfContext = contextPath.subtractFromFront(contextPath); pageCatalog.remove(relativePathOfContext); }
public void testShouldUseSpecifiedRevisionControllerWithHistoryDepth() throws Exception { Properties testProperties = new Properties(); testProperties.setProperty(ConfigurationParameter.VERSIONS_CONTROLLER_CLASS, NullVersionsController.class.getName()); testProperties.setProperty(ConfigurationParameter.VERSIONS_CONTROLLER_DAYS, "42"); fileSystemPageFactory = new FileSystemPageFactory(testProperties); VersionsController defaultRevisionController = fileSystemPageFactory.getVersionsController(); assertEquals(NullVersionsController.class, defaultRevisionController.getClass()); assertEquals(42, ((NullVersionsController) defaultRevisionController).getHistoryDepth()); }
public void shouldOutjectIndexedParameters() throws Exception { givenParameterIsPresent("indexed[0]", "value"); outjector.outjectRequestMap(); Map<?,?> indexed = castMap(request.getAttribute("indexed")); assertThat(indexed.get(0L), is("value")); }
public void testDate() throws Exception { Date d=new Date(); CachedData cd=tc.encode(d); assertEquals(d, tc.decode(cd)); }
private void createChildPage(Request request) throws Exception { WikiPage childPage = crawler.addPage(currentPage, childPath, childContent); setTestAndSuiteAttributes(childPage); }
private static String trim(String line) { char[] chars = line.toCharArray(); int len = chars.length; while (len > 0) { if (!Character.isWhitespace(chars[len - 1])) { break; } len--; } return line.substring(0, len); }
public void shouldAcceptResourcesAnnotatedWithResourceAnnotation() { mockery.checking(new Expectations() { { one(registry).register(new DefaultStereotypedClass(ResourceAnnotated.class)); } }); acceptor.analyze(ResourceAnnotated.class); mockery.assertIsSatisfied(); }
public Token makeToken(String text) { return new Token(isWikiWordPath(text) ? SymbolType.WikiWord : SymbolType.Text, text); }
public void testSerializedPageResponder() throws Exception { assertResponderTypeMatchesInput("proxy", SerializedPageResponder.class); }
private Request mockTxnRequest() throws IOException { TxnHeader header = mock(TxnHeader.class); doAnswer(new Answer() { @Override public Object answer(InvocationOnMock invocation) throws Throwable { Object[] args = invocation.getArguments(); OutputArchive oa = (OutputArchive) args[0]; oa.writeString("header", "test"); return null; } }).when(header).serialize(any(OutputArchive.class), anyString()); Request request = new Request(1, 2, 3, header, null, 4); return request; }
protected String createEvaluationMessage(String value, String literalizedValue, String originalValue) { if (value.equals(VoidConverter.VOID_TAG)) return originalValue;
private String doRename(WikiPage root, WikiPage pageToRename, WikiPage parent, String newName, WikiPagePath subjectPath) throws Exception { if(refactorReferences) renameReferences(root, pageToRename, newName); rename(parent, pageToRename.getName(), newName, root); subjectPath.pop(); subjectPath.addName(newName); return PathParser.render(subjectPath); }
void conflict(); void methodNotAllowed(EnumSet<HttpMethod> allowedMethods);  void movedPermanentlyTo(String url);  <T> T movedPermanentlyTo(Class<T> controller);  void unsupportedMediaType(String errorMessage);  void badRequest(String message); }
public Transaction create(final String path, byte[] data, List<ACL> acl, CreateMode createMode) { ops.add(Op.create(path, data, acl, createMode.toFlag())); return this; }
void start() throws IOException; void bye() throws IOException, InterruptedException; void kill() throws IOException; void runTests(TestPage pageToTest) throws IOException, InterruptedException; boolean isSuccessfullyStarted(); void addTestSystemListener(TestSystemListener listener); }
protected void doSending() throws Exception { fastTest |= request.hasInput("debug"); remoteDebug |= request.hasInput("remote_debug"); data = page.getData(); createFormatterAndWriteHead(); sendPreTestNotification(); performExecution(); int exitCode = formatter.allTestingComplete(); closeHtmlResponse(exitCode); }
public void onConnected() { } @Override public boolean updateServerList(Collection<InetSocketAddress> serverAddresses, InetSocketAddress currentHost) { counter.decrementAndGet(); return false; } } @Override public void process(WatchedEvent event) { } @Test public void testZooKeeperWithCustomHostProvider() throws IOException, InterruptedException { final int CLIENT_PORT = PortAssignment.unique(); final HostProvider specialHostProvider = new SpecialHostProvider(); int expectedCounter = 3; counter.set(expectedCounter); ZooKeeper zkDefaults = new ZooKeeper("127.0.0.1:" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT, this, false); ZooKeeper zkSpecial = new ZooKeeper( "127.0.0.1:" + CLIENT_PORT, ClientBase.CONNECTION_TIMEOUT, this, false, specialHostProvider); assertTrue(counter.get() == expectedCounter); zkDefaults.updateServerList("127.0.0.1:" + PortAssignment.unique()); assertTrue(counter.get() == expectedCounter); zkSpecial.updateServerList("127.0.0.1:" + PortAssignment.unique()); expectedCounter--; assertTrue(counter.get() == expectedCounter); } }
public void addNone(NoneSelector arg0) { task.addNone(arg0); }
protected void registerComponents(ComponentRegistry container) { singleInterfaceRegister(StupidTranslator.class, container); singleInterfaceRegister(DefaultResourceRegistry.class, container); singleInterfaceRegister(DefaultResourceNotFoundHandler.class, container); singleInterfaceRegister(DefaultDirScanner.class, container); singleInterfaceRegister(WebInfClassesScanner.class, container); singleInterfaceRegister(DefaultInterceptorRegistry.class, container); singleInterfaceRegister(DefaultMethodLookupBuilder.class, container); singleInterfaceRegister(DefaultPathResolver.class, container); singleInterfaceRegister(ParanamerNameProvider.class, container); singleInterfaceRegister(DefaultConverters.class, container); singleInterfaceRegister(DefaultMethodParameters.class, container); singleInterfaceRegister(DefaultRequestParameters.class, container); singleInterfaceRegister(DefaultInterceptorStack.class, container); singleInterfaceRegister(DefaultRequestExecution.class, container); singleInterfaceRegister(DefaultResult.class, container); singleInterfaceRegister(OgnlParametersProvider.class, container); singleInterfaceRegister(DefaultRequestInfo.class, container); singleInterfaceRegister(DefaultValidator.class, container); singleInterfaceRegister(JstlLocalization.class, container); container.register(ForwardToDefaultViewInterceptor.class, ForwardToDefaultViewInterceptor.class); container.register(LogicResult.class, DefaultLogicResult.class); container.register(RequestResult.class, RequestResult.class); container.register(PageResult.class, DefaultPageResult.class); container.register(TypeCreator.class, AsmBasedTypeCreator.class); container.register(EmptyElementsRemoval.class, EmptyElementsRemoval.class); container.register(ParametersInstantiatorInterceptor.class, ParametersInstantiatorInterceptor.class); container.register(InterceptorListPriorToExecutionExtractor.class, InterceptorListPriorToExecutionExtractor.class); container.register(URLParameterExtractorInterceptor.class, URLParameterExtractorInterceptor.class); container.register(ResourceLookupInterceptor.class, ResourceLookupInterceptor.class); container.register(InstantiateInterceptor.class, InstantiateInterceptor.class); container.register(ExecuteMethodInterceptor.class, ExecuteMethodInterceptor.class); }
public void oneInput() throws Exception { makeTables( "!|scenario|myScenario|input|\n" + "|function|@input|\n" + "\n" + "!|DT:myScenario|\n" + "|input|\n" + "|7|\n" ); List<Object> expectedInstructions = list( list("decisionTable_did_0/scriptTable_s_id_0", "call", "scriptTableActor", "function", "7") ); assertEquals(expectedInstructions, instructions); }
private int doFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) { int outputSize = engineGetOutputSize(inputLen); int updateAmt; if (input != null && inputLen > 0) { updateAmt = nUpdate(mCtxPtr, input, inputOffset, inputLen, output, outputOffset, outputSize); } else { updateAmt = 0; } int finalAmt = nFinal(mCtxPtr, mPadding, output, outputOffset + updateAmt, outputSize - updateAmt); int out = updateAmt + finalAmt; return out; }
private void createDB(String filename) {
public void shouldDelegateToPageResultOnPageOfWithInstance() throws Exception { PageResult pageResult = mockResult(PageResult.class); result.of(new RandomController()); verify(pageResult).of(RandomController.class);
public String encrypt(String value) { byte[] crypted = repeatEncryption(theMagicLock.getBytes(), value.getBytes()); byte[] squeezed = fillToSize(crypted,15); byte[] encoded = Base64.encode(squeezed); return new String(encoded); }
ClientCnxn createConnection( String chrootPath, HostProvider hostProvider, int sessionTimeout, ZKClientConfig clientConfig, Watcher defaultWatcher, ClientCnxnSocket clientCnxnSocket, boolean canBeReadOnly ) throws IOException { Assert.assertTrue(clientCnxnSocket instanceof FragileClientCnxnSocketNIO); socket = (FragileClientCnxnSocketNIO) clientCnxnSocket; ClientCnxnSocketFragilityTest.this.cnxn = new CustomClientCnxn( chrootPath, hostProvider, sessionTimeout, clientConfig, defaultWatcher, clientCnxnSocket, canBeReadOnly); return ClientCnxnSocketFragilityTest.this.cnxn; }
public void tearDown() throws Exception { } public void testNoTextWidgetAreCreated() throws Exception { String text = "Here is some text with '''bold''' and ''italics''."; MockWikiPage page = new MockWikiPage("SomePage", text); WidgetRoot root = new TextIgnoringWidgetRoot(text, page, WidgetBuilder.htmlWidgetBuilder); List widgets = root.getChildren(); assertEquals(2, widgets.size()); assertTrue(widgets.get(0) instanceof BoldWidget); assertTrue(widgets.get(1) instanceof ItalicWidget); } }
public static void parse(String a) { } } public static class PublicStaticParseMethod { public static ProtectedParseMethod parse(String a) { return new ProtectedParseMethod(); } } public static class PublicStaticParseMethodWithoutStringParam { public static PublicStaticParseMethodWithoutStringParam parse() { return null; } } @After public void tearDown() throws Exception { TypeAdapter.clearDelegatesForNextTest(); } }
public void testRemovePage() throws Exception { WikiPage levelOne = WikiPageUtil.addPage(root, PathParser.parse("LevelOne")); levelOne.commit(levelOne.getData()); WikiPageUtil.addPage(levelOne, PathParser.parse("LevelTwo")); levelOne.removeChildPage("LevelTwo"); File fileOne = new File(defaultPath + "/RooT/LevelOne"); File fileTwo = new File(defaultPath + "/RooT/LevelOne/LevelTwo"); assertTrue(fileOne.exists()); assertFalse(fileTwo.exists()); }
@Test public void translatesTables() { ParserTest.assertTranslatesTo("|a|\n", tableWithCell("a")); ParserTest.assertTranslatesTo("||\n", tableWithCell("")); ParserTest.assertTranslatesTo("| a |\n", tableWithCell("a")); ParserTest.assertTranslatesTo("|''a''|\n", tableWithCell("<i>a</i>")); ParserTest.assertTranslatesTo("!|''a''|\n", tableWithCell("''a''")); ParserTest.assertTranslatesTo("|a|b|c|\n|d|e|f|\n", "<table border=\"1\" cellspacing=\"0\">" + HtmlElement.endl +
private String makeRequestUrl() { String requestUrl = "/" + pageName + "?responder=suite"; if (suiteFilter != null) requestUrl += "&suiteFilter=" + suiteFilter; if (excludeSuiteFilter != null) requestUrl += "&excludeSuiteFilter=" + excludeSuiteFilter; requestUrl += "&format=xml"; return requestUrl; }
public void serverStarted() { LOG.info("ZK Server started"); boundClientPort = getClientPort(); boundSecureClientPort = getSecureClientPort(); started.complete(null); }
public void join() throws Exception { process.waitFor(); endTime = System.currentTimeMillis(); exitCode = process.exitValue(); }
public void compress(Writer out, int linebreak, boolean munge, boolean verbose, boolean preserveAllSemiColons, boolean preserveStringLiterals) throws IOException { this.munge = munge; this.verbose = verbose; this.tokens = processStringLiterals(this.srctokens, !preserveStringLiterals); buildSymbolTree(); mungeSymboltree(); StringBuffer sb = printSymbolTree(linebreak, preserveAllSemiColons); out.write(sb.toString()); }
private void runOverflowTest(byte[] b) throws Exception { Collection<Future<Boolean>> c = new ArrayList<Future<Boolean>>(); try { for (int i = 0; i < 1000; i++) { c.add(client.set("k" + i, 0, b)); } fail("Didn't catch an illegal state exception"); } catch (IllegalStateException e) {
public static void main(String[] args) throws Exception { System.out.println("DEPRECATED: use java -jar fitnesse.jar or java -cp fitnesse.jar fitnesseMain.FitNesseMain"); Class mainClass = Class.forName("fitnesseMain.FitNesseMain"); Method mainMethod = mainClass.getMethod("main", String[].class); mainMethod.invoke(null, new Object[]{args}); }
public String toString(Object o); Object fromString(String arg); }
public void setup() throws Exception { config = new DefaultMultipartConfig(); MockitoAnnotations.initMocks(this); }
public void testThrottledAclFollower() throws Exception { ZooKeeper zk = null; try { int clientPort = (getLeaderClientPort() == portClient1) ? portClient2 : portClient1;
private void addBranches(final Label dflt, final Label[] labels) { addBranch(dflt); for (int i = 0; i < labels.length; i++) { addBranch(labels[i]);
private void handleSpecialProperties(HtmlPage html, WikiPage page) { WikiImportingResponder.handleImportProperties(html, page); }
public File findMostRecentSnapshot() { List<File> files = findNValidSnapshots(1); if (files.size() == 0) { return null; } return files.get(0); }
public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize(); }
private Object doSetUpWith(WikiPage root, String proxyType) throws Exception { WikiPage page1 = WikiPageUtil.addPage(root, PathParser.parse("PageOne"), "this is page one"); PageData data = page1.getData(); data.setAttribute("Attr1", "true"); page1.commit(data); WikiPageUtil.addPage(page1, PathParser.parse("ChildOne"), "this is child one"); request.addInput("type", proxyType); request.setResource("PageOne"); return getObject(root, request); }
private void fillData() {
public Parse td(String body) { return new Parse("td", gray(body), null, null); }
public void shutdown() { synchronized(omap) { for (Map.Entry<Operation,TapConnectionProvider> me: omap.entrySet()) {
public Response createGoodResponse(Request request) throws Exception { Response response; if (StringUtil.isBlank(request.getResource()) && StringUtil.isBlank(request.getQueryString())) request.setResource("FrontPage"); Responder responder = context.responderFactory.makeResponder(request); responder = context.authenticator.authenticate(context, request, responder); return responder.makeResponse(context, request); }
protected int engineUpdate( byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws ShortBufferException { throw new RuntimeException("not supported for wrapping"); }
public String toString() { return "[DefaultResourceMethod: " + method.getDeclaringClass().getSimpleName() + "."
protected void tryTestSequence(Future<?> f) throws Exception { tryTimeout(f); tryCancellation(f); }
public String getQuorumSystemInfo();  public boolean isPartOfEnsemble(); }
public TestSummary run(String pageName, String pageType, String suiteFilter, String excludeSuiteFilter, int port) throws Exception{ JavaFormatter testFormatter=JavaFormatter.getInstance(pageName); testFormatter.setResultsRepository(new JavaFormatter.FolderResultsRepository(outputPath)); testFormatter.setListener(resultListener); Arguments arguments=new Arguments(); arguments.setDaysTillVersionsExpire("0"); arguments.setInstallOnly(false); arguments.setOmitUpdates(true); arguments.setPort(String.valueOf(port)); arguments.setRootPath(fitNesseRootPath); arguments.setCommand(getCommand(pageName, pageType, suiteFilter, excludeSuiteFilter)); new FitNesseMain().launchFitNesse(arguments); return testFormatter.getTotalSummary(); }
public void acceptOutputFirst(String output) throws Exception { } public void acceptResultsLast(TestSummary testSummary) throws Exception { } public void exceptionOccurred(Throwable e) { } } }
public void returnsTheCorrectDefaultResourceMethodIfFound() throws SecurityException, NoSuchMethodException { final StereotypedClass resource = mockery.resource(MyResource.class); this.router.register(resource); assertThat(router.parse("/MyResource.findable.logic", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(MyResource.class.getMethod("findable")))); mockery.assertIsSatisfied(); }
public boolean onContextItemSelected(MenuItem item) { AdapterContextMenuInfo acmi = (AdapterContextMenuInfo) item.getMenuInfo(); ClickView cv = (ClickView) acmi.targetView; return cv.onContextItemSelected(item); }
public void handlesInclude() { when(request.getAttribute(RequestInfo.INCLUDE_REQUEST_URI)).thenReturn("/url"); when(request.getMethod()).thenReturn("POST"); when(router.parse("/url", HttpMethod.POST, webRequest)).thenReturn(method); ResourceMethod resource = translator.translate(info); assertThat(resource, is(sameInstance(method))); }
public Maybe<Integer> match(ScanString input, SymbolStream symbols, int offset) { return new Maybe<Integer>(input.whitespaceLength(offset)); }
TestSystem startTestSystem(TestSystem.Descriptor descriptor, String classPath) throws Exception { TestSystem testSystem = null; if (!testSystems.containsKey(descriptor)) { testSystem = makeTestSystem(descriptor); testSystem.setFastTest(fastTest); testSystems.put(descriptor, testSystem); log.add(descriptor.testSystemName, testSystem.getExecutionLog(classPath, descriptor)); testSystem.start(); } return testSystem; }
public void processResult(int rc, String path, Object ctx, byte data[], Stat stat) {
public synchronized void exceptionOccurred(Throwable e) { try { resultsListener.errorOccured();
public void flush() throws IOException {
Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
public void badSlimPortVariableDefaults() throws Exception { WikiPage pageWithBadSlimPortDefined = WikiPageUtil.addPage(root, PathParser.parse("PageWithBadSlimPortDefined"), "!define SLIM_PORT {BOB}\n"); for (int i = 1; i < 15; i++) assertEquals(8085 + (i % 10), new SlimClientBuilder(pageWithBadSlimPortDefined, TestSystem.getDescriptor(pageWithBadSlimPortDefined, false)).getSlimPort());
public boolean clientTunneledAuthenticationInProgress() {
public void testImportedPageIndication() throws Exception { final WikiPage page = WikiPageUtil.addPage(root, PathParser.parse("SamplePage")); final PageData data = page.getData(); final WikiImportProperty importProperty = new WikiImportProperty("blah"); importProperty.addTo(data.getProperties()); page.commit(data); final String content = requestPage("SamplePage").getContent(); assertSubString("<body class=\"imported\">", content); }
@Before public void setUp() throws Exception { bb = ByteBuffer.wrap(DATA_BYTES); in = new ByteBufferInputStream(bb); bs = new byte[] { (byte) 1, (byte) 2, (byte) 3, (byte) 4 }; }
public void testParseWithEmptyQuotes() throws Exception { final ZooKeeper zk = createClient(); ZooKeeperMain zkMain = new ZooKeeperMain(zk); String cmdstring = "create /node ''"; zkMain.cl.parseCommand(cmdstring); assertEquals("empty quotes should produce arguments", zkMain.cl.getNumArguments(), 3); assertEquals("create is not taken as first argument", zkMain.cl.getCmdArgument(0), "create"); assertEquals("/node is not taken as second argument", zkMain.cl.getCmdArgument(1), "/node"); assertEquals("empty string is not taken as third argument", zkMain.cl.getCmdArgument(2), ""); }
public void testEmptyTestPage() throws Exception { PageData data = root.getData(); data.setContent(classpathWidgets()); root.commit(data); testPage = WikiPageUtil.addPage(root, PathParser.parse("EmptyTestPage"), ""); request.setResource(testPage.getName()); response = responder.makeResponse(context, request); sender = new MockResponseSender(); sender.doSending(response); sender.sentData(); WikiPagePath errorLogPath = PathParser.parse("ErrorLogs.EmptyTestPage"); WikiPage errorLogPage = root.getPageCrawler().getPage(errorLogPath); String errorLogContent = errorLogPage.getData().getContent(); assertNotSubString("Exception", errorLogContent); }
void validate(Object object, Class<?>... groups);  void validateProperties(Object object, String... properties); <T extends View> T onErrorUse(Class<T> view); void addAll(Collection<? extends Message> message); void add(Message message); List<Message> getErrors(); boolean hasErrors();  <T> T onErrorForwardTo(Class<T> controller);  <T> T onErrorForwardTo(T controller);  <T> T onErrorRedirectTo(Class<T> controller);  <T> T onErrorRedirectTo(T controller);  <T> T onErrorUsePageOf(Class<T> controller);  <T> T onErrorUsePageOf(T controller);  void onErrorSendBadRequest(); }
public void translatesAliases() { TestSourcePage page = new TestSourcePage().withTarget("PageOne"); ParserTestHelper.assertTranslatesTo(page, "[[tag][#anchor]]", link("tag", "#anchor")); ParserTestHelper.assertTranslatesTo(page, "[[tag][PageOne]]", link("tag", "PageOne")); ParserTestHelper.assertTranslatesTo(page, "[[''tag''][PageOne]]", link("<i>tag</i>", "PageOne")); ParserTestHelper.assertTranslatesTo(page, "[[you're it][PageOne]]", link("you're it", "PageOne")); ParserTestHelper.assertTranslatesTo(page, "[[PageOne][IgnoredPage]]", link("PageOne", "PageOne")); ParserTestHelper.assertTranslatesTo(page, "[[tag][PageOne?edit]]", link("tag", "PageOne?edit")); ParserTestHelper.assertTranslatesTo(page, "[[tag][http://files/myfile]]", link("tag", "files/myfile")); ParserTestHelper.assertTranslatesTo(page, "[[tag][http://example.com/myfile]]", link("tag", "http://example.com/myfile")); }
public void setInitLimit(int initLimit);  public void setSyncLimit(int syncLimit);  public boolean isSslQuorum();  public boolean isPortUnification();  public long getObserverElectionDelayMS();  public void setObserverElectionDelayMS(long delayMS); }
public int exitCode() { return fitServer == null ? -1 : fitServer.exitCode(); }
private void addInstructionResultss(Element instructionsElement) { for (Object instruction : instructions) { addInstructionResult(instructionsElement, instruction);
protected void handleBackwardCompatibility() { properties.put(JUTE_MAXBUFFER, System.getProperty(JUTE_MAXBUFFER)); properties.put(KINIT_COMMAND, System.getProperty(KINIT_COMMAND)); properties.put(JGSS_NATIVE, System.getProperty(JGSS_NATIVE)); ClientX509Util clientX509Util = new ClientX509Util(); putSSLProperties(clientX509Util); properties.put(clientX509Util.getSslAuthProviderProperty(), System.getProperty(clientX509Util.getSslAuthProviderProperty())); putSSLProperties(new QuorumX509Util()); }
protected void verify() { try { latch.await(defaultTimeoutMillis, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { Assert.fail("unexpected interrupt"); }
public void setUp() throws Exception { data = new Data(); missingFile = new File("this-file-does-not-exist"); file = File.createTempFile(getClass().getSimpleName(), "dat"); }
public void testFail() throws Exception { QuorumBase qb = new QuorumBase(); qb.setUp(); System.out.println("Comment: the servers are at " + qb.hostPort); ZooKeeper zk = qb.createClient(); zk.create("/test", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); zk.close(); QuorumBase.shutdown(qb.s1); QuorumBase.shutdown(qb.s2); QuorumBase.shutdown(qb.s3); QuorumBase.shutdown(qb.s4); QuorumBase.shutdown(qb.s5); String hp = qb.hostPort.split(",")[0]; ZooKeeperServer zks = new ZooKeeperServer(qb.s1.getTxnFactory().getSnapDir(), qb.s1.getTxnFactory().getDataLogDir(), 3000); final int PORT = Integer.parseInt(hp.split(":")[1]); ServerCnxnFactory factory = ServerCnxnFactory.createFactory(PORT, -1); factory.startup(zks); System.out.println("Comment: starting factory"); assertTrue( ClientBase.waitForServerUp("127.0.0.1:" + PORT, QuorumTest.CONNECTION_TIMEOUT), "waiting for server up"); factory.shutdown(); zks.shutdown(); assertTrue( ClientBase.waitForServerDown("127.0.0.1:" + PORT, QuorumTest.CONNECTION_TIMEOUT), "waiting for server down"); System.out.println("Comment: shutting down standalone"); }
public void clear();  public int size();  public void preChange(String path, DataNode node);  public void postChange(String path, DataNode node);  public long getDigest(); }
public ReadOnlyPageData readOnlyData() { return getDataVersion(currentVersionName); }
public void testSASLAuth() { (new SASLAuthOperationImpl(null, null, null, null, null)).toString(); }
public void testParseSpace() { assertEquals("a",ListTree.parse("<i>a </i>").text()); }
protected String isSymbolAssignment(int col, int row) { String expected = table.getCellContents(col, row); return isSymbolAssignment(expected); }
public void testFixtureClassNotEndingInFixtureHasNoDefaultConstructor() throws Throwable { assertCannotLoadFixtureAfterChoppingOffFixture( "Successfully loaded a fixture with no default constructor!",
protected List<List<String>> tableAsList() { return IntStream.range(1, table.getRowCount()) .mapToObj(this::tableRowAsList)
private WikiPagePath makePath(String pathName) { WikiPagePath path = PathParser.parse(pathName); return path; }
RouteBuilder ofType(Class<?> type); RouteBuilder matching(String regex); } <T> T is(final Class<T> type); void is(Class<?> type, Method method);  RouteBuilder with(HttpMethod method);  RouteBuilder with(Set<HttpMethod> methods);  RouteBuilder withPriority(int priority); Route build(); }
static CsvInputArchive getArchive(InputStream strm) throws UnsupportedEncodingException { return new CsvInputArchive(strm); }
public void shouldSerializeAllBasicFields() { String expectedResult = "<order>\n <price>15.0</price>\n <comments>pack it nicely, please</comments>\n</order>"; Order order = new Order(new Client("guilherme silveira"), 15.0, "pack it nicely, please"); serialization.from(order).serialize(); assertThat(result(), is(equalTo(expectedResult))); }
public void testLoadTrustStoreWithWrongPassword( X509KeyType caKeyType, X509KeyType certKeyType, String keyPassword, Integer paramIndex) throws Exception { init(caKeyType, certKeyType, keyPassword, paramIndex); assertThrows(Exception.class, () -> { String path = x509TestContext.getTrustStoreFile(KeyStoreFileType.BCFKS).getAbsolutePath();
public void statsComplete() { todo.decrementAndGet(); sync.set(todo); }}));
public void shouldScanWEBINFClasses() { when(classPathResolver.findBasePackages()).thenReturn(Arrays.asList("")); ClassLoader classLoader = Thread.currentThread().getContextClassLoader(); when(classPathResolver.getClassLoader()).thenReturn(classLoader); when(classPathResolver.findWebInfClassesLocation()).thenReturn(classLoader.getResource("br/com/caelum/vraptor/ioc/")); ScannotationComponentScanner scanner = new ScannotationComponentScanner(); assertThat(scanner.scan(classPathResolver), hasItem(ResourceInTheClasspath.class.getName())); }
public void testNodes20() throws Exception { int testIterations = 20; final CountDownLatch latch = new CountDownLatch(testIterations); final AtomicInteger failureCounter = new AtomicInteger(); for (int i = 0; i < testIterations; i++) { runElectionSupportThread(latch, failureCounter); } assertEquals(0, failureCounter.get()); if (!latch.await(10, TimeUnit.SECONDS)) { LOGGER.info("Waited for all threads to start, but timed out. We had {} failures.", failureCounter);
private Element createXmlFromPage(Document document, WikiPage page) throws Exception { Element pageElement = document.createElement("page"); XmlUtil.addTextNode(document, pageElement, "name", page.getName()); addLastModifiedTag(page, document, pageElement); addXmlFromChildren(page, document, pageElement); return pageElement; }
public void testMatches() throws Exception { assertMatches("[[tag][link]]"); assertMatches("[[this is fun][http://www.objectmentor.com]]"); assertMatches("[[tag for link with variable][http://${variable}/rest/of/the/link]]"); assertNoMatch("[[this\nshould][not match]]"); assertNoMatch("[[][]]"); assertNoMatch("[[x][]"); assertNoMatch("[[][x]"); assertNoMatch("[[x] [x]]"); assertNoMatch("[[x]]"); }
public boolean isDebugEnabled() { return (sunLogger.isLoggable(java.util.logging.Level.FINE)); }
public List makePageList() throws Exception { String suite = request != null ? (String) request.getInput("suiteFilter") : null; return makePageList(page, root, suite); }
public void closeSubscription(ByteString topic, ByteString subscriberId) throws ServiceDownException;  public void asyncCloseSubscription(ByteString topic, ByteString subscriberId, Callback<Void> callback, Object context); }
public void testShouldReportErrorMsgIfDeleteOperationFails() throws Exception { final String errorMsg = "Cannot delete files from Revision Control"; this.revisionController.delete(contentAndPropertiesFilePathFor(FS_PARENT_PAGE)); expectLastCall().andThrow(new RevisionControlException(errorMsg)); replay(this.revisionController); createPage(FS_PARENT_PAGE); this.request.setResource(FS_PARENT_PAGE); invokeResponderAndCheckSuccessStatus(); assertSubString(errorMsg, this.response.getContent()); }
void initialize();  void readFromBuffer(ByteBuffer data) throws IOException;  void handleRead(ByteBuffer data); }
public void operationFinished(Object ctx, Void resultOfOperation) { channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId())); }
protected Object retryOperation(ZooKeeperOperation operation) throws KeeperException, InterruptedException { KeeperException exception = null; for (int i = 0; i < RETRY_COUNT; i++) { try { return operation.execute(); } catch (KeeperException.SessionExpiredException e) { LOG.warn("Session expired {}. Reconnecting...", zookeeper, e); throw e; } catch (KeeperException.ConnectionLossException e) { if (exception == null) { exception = e; } LOG.debug("Attempt {} failed with connection loss. Reconnecting...", i); retryDelay(i); } } throw exception; }
public void testResponseWithNonWikiWordChildPage() throws Exception { WikiPage page = WikiPageUtil.addPage(root, PathParser.parse("page"), "content"); WikiPageUtil.addPage(page, PathParser.parse("child_page"), "child content"); final MockRequest request = new MockRequest(); request.setResource("page.child_page"); final Responder responder = new WikiPageResponder(); final SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); assertEquals(200, response.getStatus()); final String body = response.getContent(); assertSubString("child content", body); }
private SlimTestResult rangeMessage(boolean pass) { String[] fragments = expected.trim().replaceAll("( )+", " ").split("_"); String message = String.format("%s%s%s", fragments[0], actual, fragments[1]); message = replaceSymbolsWithFullExpansion(message); return pass ? SlimTestResult.pass(message) : SlimTestResult.fail(message); }
int getInitLimit();  int getSyncLimit();  void setInitLimit(int initLimit);  void setSyncLimit(int syncLimit);  boolean isSslQuorum();  boolean isPortUnification();  long getObserverElectionDelayMS();  void setObserverElectionDelayMS(long delayMS); boolean getDigestEnabled(); void disableDigest(); }
public void testQuerySetEndKeyDocID() throws Exception { Query query = new Query(); query.setReduce(false); View view = client.getView(DESIGN_DOC_W_REDUCE, VIEW_NAME_W_REDUCE); HttpFuture<ViewResponse> future = client.asyncQuery(view, query.setEndkeyDocID("an_id")); ViewResponse response = future.get(); assert response != null : future.getStatus(); }
public void removeChildPage(String name) throws Exception; public List getChildren() throws Exception; public String getName() throws Exception; public PageData getData() throws Exception; public PageData getDataVersion(String versionName) throws Exception; public VersionInfo commit(PageData data) throws Exception; public PageCrawler getPageCrawler();
protected Response createEvaluationMessage(String actual, String expected) { return (actual != null && actual.equals(BooleanConverter.TRUE)) ? pass(expected) : fail(expected);
private void registerScope(Map<Class, Class> requestScoped, Scope scope) { for (Entry<Class, Class> entry : requestScoped.entrySet()) { logger.debug("Binding {} to {}", entry.getKey(), entry.getValue());
public void makeClassThatDoesntExist() throws Exception { statements.add(list("m1", "make","me","NoSuchClass")); Map<String, Object> results = slimClient.invokeAndGetResponse(statements); assertContainsException("message:<<COULD_NOT_INVOKE_CONSTRUCTOR NoSuchClass[0]>>", "m1", results); }
public long getPacketsSent();  public long getFsyncThresholdExceedCount();  public long getOutstandingRequests();  public int getTickTime();  public void setTickTime(int tickTime);  public int getMaxClientCnxnsPerHost();  public void setMaxClientCnxnsPerHost(int max);  public int getMinSessionTimeout();  public void setMinSessionTimeout(int min);  public int getMaxSessionTimeout();  public void setMaxSessionTimeout(int max);  public void resetStatistics();  public void resetLatency();  public void resetMaxLatency();  public void resetFsyncThresholdExceedCount();  public long getNumAliveConnections();  public long getDataDirSize();  public long getLogDirSize();  public String getSecureClientPort();  public String getSecureClientAddress();  public long getTxnLogElapsedSyncTime();  public int getJuteMaxBufferSize();  public int getLastClientResponseSize();  public int getMinClientResponseSize();  public int getMaxClientResponseSize(); }
private void includeSetupTeardownAndLibraryPages() { includeScenarioLibraries(); includeSetupPages(); includePageContent(); includeTeardownPages(); updatePageContent(); }
public void execute() throws Exception {
NodeLocator getNodeLocator(); Future<Boolean> append(long cas, String key, Object val); <T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by); long decr(String key, int by); long incr(String key, int by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public boolean isExpired(String key, String value, long lastModified) { return !fileSystem.exists(key) || (lastModified - Clock.currentTimeInMillis() > CACHE_TIMEOUT);
public HtmlBuilder bodyContent() { builders.add(new TagBuilder() { public void build(Translator translator, Symbol symbol, HtmlTag tag) { tag.add(new HtmlText(symbol.getContent())); } }); return this; }
private void includeJavaScriptFile(String jsFile, TagGroup scripts) { HtmlTag scriptTag = HtmlUtil.makeJavascriptLink(jsFile); scripts.add(scriptTag); }
public void scansLinks() { ParserTest.assertScansTokenType("http://mysite.org", "Link", true); ParserTest.assertScansTokenType("https://mysite.org", "Link", true); ParserTest.assertScansTokenType("http:/mysite.org", "Link", false); ParserTest.assertScansTokenType("httpx://mysite.org", "Link", false); }
public void testACLDigestHashHiding_NoAuth_NoWorld() {
public static String makePageHtml(WikiTestPage page) { StringBuffer buffer = new StringBuffer(); buffer.append(getHeaderPageHtml(page.getSourcePage())); buffer.append(page.getHtml()); return buffer.toString(); }
public void shutdown() {  Request request = new Request(null, 0, 0, ZooDefs.OpCode.delete, ByteBuffer.wrap("/deadLockIssue".getBytes()), null); processRequest(request); super.shutdown(); }
public void oneRowThatPassesWithManyColons() throws Exception { assertTableResults("|2|4|\n", list(
public Object fromString(String possibleTable) { Map<String, String> map = new HashMap<String, String>(); if (tableIsValid(possibleTable)) extractRowsIntoMap(map, tables); return map; }
public static void addConverter(Class k, Converter converter) { converters.put(k, converter); }
long createSession(int sessionTimeout);  boolean trackSession(long id, int to);  boolean commitSession(long id, int to);  boolean touchSession(long sessionId, int sessionTimeout);  void setSessionClosing(long sessionId);  void shutdown();  void removeSession(long sessionId);  boolean isTrackingSession(long sessionId);  void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException;  void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException; void setOwner(long id, Object owner) throws SessionExpiredException;  void dumpSessions(PrintWriter pwriter);  Map<Long, Set<Long>> getSessionExpiryMap();  long getLocalSessionCount(); boolean isLocalSessionsEnabled();  Set<Long> globalSessions();  Set<Long> localSessions(); }
public void newTestStarted(WikiTestPage test) { } @Override public void testOutputChunk(String output) { } @Override public void testAssertionVerified(Assertion assertion, TestResult testResult) { } @Override public void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult) { } @Override public void testComplete(WikiTestPage test, TestSummary testSummary) { } }
void copyInputQueue();  Collection<Operation> destroyInputQueue();  void setupResend();  void fillWriteBuffer(boolean optimizeGets);  void transitionWriteItem();  Operation getCurrentReadOp();  Operation removeCurrentReadOp();  Operation getCurrentWriteOp();  Operation removeCurrentWriteOp();  boolean hasReadOp();  boolean hasWriteOp();  void addOp(Operation op);  void insertOp(Operation o);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth(); }
public void testFileContent() throws Exception { request.setResource("files/testFile1"); responder = (FileResponder) FileResponder.makeResponder(request, SampleFileUtility.base); response = responder.makeResponse(context, request); RegexTestCase.assertEquals(InputStreamResponse.class, response.getClass()); MockResponseSender sender = new MockResponseSender(); sender.doSending(response); assertSubString("file1 content", sender.sentData()); }
public void endMap(TreeMap<?, ?> v, String tag) throws IOException { stream.print("}"); isFirst = false; }
public static void main(String[] args) throws NumberFormatException, KeeperException, IOException { if (args.length != 3) { System.err .println("USAGE: SledgeHammer zookeeper_server reps reads_per_rep"); System.exit(3); } SledgeHammer h = new SledgeHammer(args[0], Integer.parseInt(args[1]), Integer.parseInt(args[2])); h.run(); System.exit(0); }
public void comment() throws Exception { HtmlComment comment = new HtmlComment("the comment"); assertEquals("<!--the comment-->" +endl, comment.html()); }
private boolean parentOwns(SymbolType current, ParseSpecification specification) { if (parent == null) return false; if (parent.specification.hasPriority(specification) && parent.specification.terminatesOn(current)) return true; return parent.parentOwns(current, specification); }
public void testComplete(TestPage test, TestSummary testSummary, TimeMeasurement timeMeasurement) { referenceToCurrentTest.setTestSummary(testSummary); referenceToCurrentTest.setRunTimeInMillis(timeMeasurement.elapsed()); suiteExecutionReport.addPageHistoryReference(referenceToCurrentTest); suiteExecutionReport.tallyPageCounts(testSummary); failCount+=testSummary.wrong; failCount+=testSummary.exceptions; }
public void setUp() throws Exception { mockery = new Mockery(); session = mockery.mock(HttpSession.class); result = mockery.mock(Result.class); stack = mockery.mock(InterceptorStack.class); mockResponse = mockery.mock(HttpServletResponse.class); response = new VRaptorResponse(mockResponse); interceptor = new FlashInterceptor(session, result, response); }
public void shouldAcceptCaseInsensitiveGetRequestUsingThe_methodParameter() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(DefaultResourceTranslator.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getContextPath(); will(returnValue("")); one(request).getRequestURI(); will(returnValue("/url")); one(request).getParameter("_method"); will(returnValue("gEt")); one(registry).parse("/url", HttpMethod.GET, webRequest); will(returnValue(expected)); }}); ResourceMethod resource = translator.translate(webRequest); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied(); }
public void shouldUseResourceTypeAndMethodNameToResolveJsp() throws NoSuchMethodException { mockery.checking(new Expectations() { { one(method).getResource(); will(returnValue(resource)); one(method).getMethod(); will(returnValue(DogController.class.getDeclaredMethod("bark"))); one(resource).getType(); will(returnValue(DogController.class)); } }); DefaultPathResolver resolver = new DefaultPathResolver(); String result = resolver.pathFor(method); MatcherAssert.assertThat(result, Matchers.is(Matchers.equalTo("/DogController/bark.jsp"))); mockery.assertIsSatisfied(); }
private void evaluateTable(SlimTable table) { try { testSummary.add(table.getTestSummary());
public void setUp() throws Exception { password = new Password("testDir/password.txt"); }
private String makeEditForm(String resource, boolean firstTimeForNewPage, String defaultNewPageContent) throws Exception { VelocityContext velocityContext = new VelocityContext(); velocityContext.put("action", resource); velocityContext.put(TIME_STAMP, String.valueOf(SaveRecorder.timeStamp())); velocityContext.put(TICKET_ID, String.valueOf(SaveRecorder.newTicket())); if (request.hasInput("redirectToReferer") && request.hasHeader("Referer")) { String redirectUrl = request.getHeader("Referer").toString(); int questionMarkIndex = redirectUrl.indexOf("?"); if (questionMarkIndex > 0) redirectUrl = redirectUrl.substring(0, questionMarkIndex); redirectUrl += "?" + request.getInput("redirectAction").toString(); velocityContext.put("redirect", redirectUrl); } velocityContext.put("pageContent", Utils.escapeHTML(firstTimeForNewPage ? defaultNewPageContent : content)); return VelocityFactory.translateTemplate(velocityContext, "editPage.vm"); }
int getColumnCountInRow(int rowIndex); String toString(); String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); String getCellResult(int col,int row); void appendChildTable(int row, Table table); void setTestStatusOnRow(int row, boolean testStatus); void setName(String tableName); }
public String toString(Map hash) {
public void testUndecodeableCompressed() throws Exception { CachedData cd=new CachedData( SerializingTranscoder.COMPRESSED, tu.encodeInt(Integer.MAX_VALUE), tc.getMaxSize()); System.out.println("got " + tc.decode(cd)); assertNull(tc.decode(cd)); }
public abstract boolean run(boolean displayCmd, boolean throwFailure) throws Exception;  public abstract void spawn(boolean displayCmd) throws Exception; }
public void shouldDeleteHistoryFromRequestAndRedirect() throws Exception { StubbedPurgeHistoryResponder responder = new StubbedPurgeHistoryResponder(); request.addInput("days", "30"); SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); assertEquals(30, responder.daysDeleted); assertEquals(303, response.getStatus()); assertEquals("?testHistory", response.getHeader("Location")); }
public List<WikiPage> testPageForIdentity(WikiPageIdentity identity) { return Collections.unmodifiableList(pagesByTestSystem.get(identity)); }
public static FitNesseContext makeTestContext(WikiPage root) { FitNesseContext context = new FitNesseContext(root); context.rootDirectoryName = "TestDir"; VelocityEngine engine = new VelocityEngine(); engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, "FitNesseRoot/files/templates"); context.setVelocityEngine(engine); return context; }
private String doRunAndGetErrorLog(String content) throws Exception { WikiPage testPage = crawler.addPage(root, PathParser.parse("TestPage"), content); request.setResource(testPage.getName()); Response response = responder.makeResponse(context, request); MockResponseSender sender = new MockResponseSender(response); String results = sender.sentData(); assertHasRegexp("ErrorLog", results); WikiPage errorLog = errorLogsParentPage.getChildPage(testPage.getName()); return errorLog.getData().getContent(); }
public void shouldReturnNoInterceptorIfThereIsNoneRegistered() { List<Interceptor> types = registry.interceptorsFor(method, container); assertThat(types, hasSize(0)); mockery.assertIsSatisfied(); }
public void newTestStarted_SwitchesResultRepositoryToCurrentTest() throws Exception{ WikiTestPage wp=buildNestedTestPage(); TimeMeasurement timeMeasurement = new TimeMeasurement(); jf.newTestStarted(wp); verify(mockResultsRepository).open(nestedPageName); }
protected Parse tr(Parse parts, Parse more) { return new Parse("tr", null, parts, more); }
private void loadDatabaseWithPermission() { String pass = storedPassword; storedPassword = null; Uri keyfile = storedKeyUri; storedKeyUri = null;
public ZooKeeperBuilder withHostProvider(Function<Collection<InetSocketAddress>, HostProvider> hostProvider) { this.hostProvider = hostProvider; return this; }
public User find(String login) { String hql = "from User u where u.login = :login"; Query query = session.createQuery(hql).setParameter("login", login); return (User) query.uniqueResult(); }
private void convertErrors(BasicValidationErrors newErrors) { for (org.vraptor.i18n.ValidationMessage msg : newErrors) { if (msg instanceof FixedMessage) {
public Set<Watcher> materialize( Watcher.Event.KeeperState state, Watcher.Event.EventType type, String clientPath) { Set<Watcher> result = new HashSet<Watcher>(); switch (type) { case None: result.add(defaultWatcher); boolean clear = disableAutoWatchReset && state != Watcher.Event.KeeperState.SyncConnected; synchronized (dataWatches) { for (Set<Watcher> ws : dataWatches.values()) { result.addAll(ws); } if (clear) { dataWatches.clear(); } } synchronized (existWatches) { for (Set<Watcher> ws : existWatches.values()) { result.addAll(ws); } if (clear) { existWatches.clear(); } } synchronized (childWatches) { for (Set<Watcher> ws : childWatches.values()) { result.addAll(ws); } if (clear) { childWatches.clear(); } } return result; case NodeDataChanged: case NodeCreated: synchronized (dataWatches) { addTo(dataWatches.remove(clientPath), result); } synchronized (existWatches) { addTo(existWatches.remove(clientPath), result); } break; case NodeChildrenChanged: synchronized (childWatches) { addTo(childWatches.remove(clientPath), result); } break; case NodeDeleted: synchronized (dataWatches) { addTo(dataWatches.remove(clientPath), result); }
public void testApplicationWadl() { WebResource r = client.resource(BASEURI); String serviceWadl = r.path("application.wadl"). accept(MediaTypes.WADL).get(String.class); assertTrue("Something wrong. Returned wadl length not > 0.", serviceWadl.length() > 0);
private void parse( InputStream pInputStream, VariableResolver pResolver ) throws IOException { BufferedReader br = null; try { br = new BufferedReader(new InputStreamReader(pInputStream));
public void shouldHandleArraysOfPrimitive() throws SecurityException, NoSuchMethodException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException { Class<?> type = creator.typeFor(mockery.method(DogAlike.class.getDeclaredMethod("dropDead",int[].class))); Method getter = type.getDeclaredMethod("getInt"); Method setter = type.getDeclaredMethod("setInt", int[].class); Object instance = type.newInstance(); int[] array = new int[]{0,1}; setter.invoke(instance, array); MatcherAssert.assertThat((int[])getter.invoke(instance), Matchers.is(Matchers.equalTo(array))); mockery.assertIsSatisfied(); }
public void testRegracingName() throws Exception { assertEquals("Company", GracefulNamer.regrace("Company")); assertEquals("Bad Company", GracefulNamer.regrace("BadCompany")); assertEquals("Bad Company Two", GracefulNamer.regrace("BadCompanyTwo")); assertEquals("Bad Company 123", GracefulNamer.regrace("BadCompany123")); assertEquals("Bad 123 Company", GracefulNamer.regrace("Bad123Company")); assertEquals("Bad 1a 2b 3 Company", GracefulNamer.regrace("Bad1a2b3Company")); assertEquals("B 12z 3 Company", GracefulNamer.regrace("B12z3Company")); assertEquals(".Bad Company Two", GracefulNamer.regrace(".BadCompanyTwo")); assertEquals(">Bad Company Two", GracefulNamer.regrace(">BadCompanyTwo")); assertEquals("<Bad Company Two", GracefulNamer.regrace("<BadCompanyTwo")); assertEquals(".Bad Company Two .Child Page", GracefulNamer.regrace(".BadCompanyTwo.ChildPage")); assertEquals(">Bad Company Two .Child Page", GracefulNamer.regrace(">BadCompanyTwo.ChildPage")); assertEquals("<Bad Company Two .Child Page", GracefulNamer.regrace("<BadCompanyTwo.ChildPage")); }
public void visit(TarArchiveEntry entry, byte[] content) throws IOException { found.set(true); }
public void emptyOrderedQueryTable() throws Exception { getResultsForPageContents("|ordered query:x|\n"); assertTestResultsContain("Query tables must have at least two rows."); }
private List<WikiPage> listOf(WikiPage page) { List<WikiPage> list = new ArrayList<WikiPage>(1); list.add(page); return list; }
private String buildConfirmationHtml(final WikiPage root, final String qualifiedPageName, final FitNesseContext context) { HtmlPage html = context.pageFactory.newPage(); html.setTitle("Delete Confirmation"); html.setPageTitle(new PageTitle("Confirm Deletion", qualifiedPageName, "/")); makeMainContent(html, root, qualifiedPageName); html.setMainTemplate("deletePage"); return html.html(); }
private StaticHostProvider getHostProviderUnresolved(byte size) throws UnknownHostException { return new StaticHostProvider(getUnresolvedServerAddresses(size), r.nextLong()); }
public void testParseException() { try { new Parse("leader<table><tr><th>one</th><th>two</th><th>three</th></tr><tr><td>four</td></tr></table>trailer"); } catch (FitParseException e) { assertEquals(17, e.getErrorOffset()); assertEquals("Can't find tag: td", e.getMessage()); return; } fail("exptected exception not thrown"); }
protected void setupButtons() { super.setupButtons(); addEntryEnabled = true; }
public static byte[] writeIntBuf(int val) { byte[] buf = new byte[4]; writeInt(val, buf, 0); return buf; }
public void testInstallOnly() throws Exception { Arguments args = new Arguments("-i"); FitNesse fitnesse = mockFitNesse(); new FitNesseMain().launch(args, context); verify(fitnesse, never()).start(); }
public void testUTF16BEBOM() throws Exception { InformationInputStream informationStream = new InformationInputStream(getStream("utf16be-lf-bom.txt")); Utils.copy(informationStream, new ByteArrayOutputStream());
public void removeExtraElements() {
public InputStream getInputStream(File file) throws IOException { return new ByteArrayInputStream(files.get(file.getPath()).payload.getBytes(FileUtil.CHARENCODING)); }
public void testFormatShouldIgnoreKeyIfValueIsNull() { AuditEvent auditEvent = new AuditEvent(Result.SUCCESS); auditEvent.addEntry(AuditEvent.FieldName.USER, null); auditEvent.addEntry(AuditEvent.FieldName.OPERATION, "Value2"); String actual = auditEvent.toString(); String expected = "operation=Value2\tresult=success"; assertEquals(expected, actual); }
public void testMulti() throws KeeperException, InterruptedException { CreateOptions options = CreateOptions .newBuilder(ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_WITH_TTL) .withTtl(100) .build(); CreateOptions sequentialOptions = CreateOptions .newBuilder(ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL_WITH_TTL) .withTtl(200) .build(); Op createTtl = Op.create("/a", new byte[0], options.getAcl(), options.getCreateMode(), options.getTtl()); Op createTtl2 = Op.create("/a2", new byte[0], options); Op createTtlSequential = Op.create("/b", new byte[0], sequentialOptions.getAcl(), sequentialOptions.getCreateMode(), sequentialOptions.getTtl()); Op createTtlSequential2 = Op.create("/b2", new byte[0], sequentialOptions); Op createNonTtl = Op.create("/c", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); List<OpResult> results = zk.multi(Arrays.asList(createTtl, createTtl2, createTtlSequential, createTtlSequential2, createNonTtl)); String sequentialPath = ((OpResult.CreateResult) results.get(2)).getPath(); String sequentialPath2 = ((OpResult.CreateResult) results.get(3)).getPath(); final AtomicLong fakeElapsed = new AtomicLong(0); ContainerManager containerManager = newContainerManager(fakeElapsed); containerManager.checkContainers(); assertNotNull(zk.exists("/a", false), "node should not have been deleted yet"); assertNotNull(zk.exists("/a2", false), "node should not have been deleted yet"); assertNotNull(zk.exists(sequentialPath, false), "node should not have been deleted yet"); assertNotNull(zk.exists(sequentialPath2, false), "node should not have been deleted yet"); assertNotNull(zk.exists("/c", false), "node should never be deleted"); fakeElapsed.set(110); containerManager.checkContainers(); assertNull(zk.exists("/a", false), "node should have been deleted"); assertNull(zk.exists("/a2", false), "node should have been deleted"); assertNotNull(zk.exists(sequentialPath, false), "node should not have been deleted yet"); assertNotNull(zk.exists(sequentialPath2, false), "node should not have been deleted yet"); assertNotNull(zk.exists("/c", false), "node should never be deleted"); fakeElapsed.set(210); containerManager.checkContainers(); assertNull(zk.exists("/a", false), "node should have been deleted"); assertNull(zk.exists("/a2", false), "node should have been deleted"); assertNull(zk.exists(sequentialPath, false), "node should have been deleted"); assertNull(zk.exists(sequentialPath2, false), "node should have been deleted"); assertNotNull(zk.exists("/c", false), "node should never be deleted"); }
public void testBinaryAnIntAnotherIntAndAHashAlgorithmCons() { new BinaryConnectionFactory(5, 5, HashAlgorithm.FNV_HASH); }
static void shutdownServerInstance(ServerCnxnFactory factory, String hostPort) { if (factory != null) { ZKDatabase zkDb = null;
public void testTestSummaryTestPass() throws Exception { TimeMeasurement timeMeasurement = new TimeMeasurement(); formatter.writeHead("test"); formatter.newTestStarted(page, timeMeasurement.start()); formatter.testComplete(page, new TestSummary(4, 0, 0, 0), timeMeasurement.stop()); formatter.allTestingComplete(); assertSubString("<script>document.getElementById(\"test-summary\").innerHTML =", pageBuffer.toString()); assertSubString("<strong>Assertions:</strong> 4 right, 0 wrong, 0 ignored, 0 exceptions", pageBuffer.toString()); assertSubString("document.getElementById(\"test-summary\").className = \"pass\"", pageBuffer.toString()); }
public void bracesArountArgumentInTable() throws Exception { makeTables( "!|scenario|echo|user|giving|user_old|\n" + "|check|echo|@{user}|@{user_old}|\n" + "\n" + "!|DT:EchoGiving|\n" + "|user|user_old|\n" + "|7|7|\n" ); Map<String, Object> pseudoResults = SlimClient.resultToMap( list( list("decisionTable_did_0/scriptTable_s_id_0", "7") ) ); evaluateExpectations(pseudoResults); String scriptTable = dt.getChild(0).getTable().toString(); String expectedScript = "[[scenario, echo, user, giving, user_old], [check, echo, 7, pass(7)]]"; assertEquals(expectedScript, scriptTable); String dtHtml = dt.getTable().toString(); assertEquals(1, dt.getTestSummary().getRight()); assertEquals(0, dt.getTestSummary().getWrong()); assertEquals(0, dt.getTestSummary().getIgnores()); assertEquals(0, dt.getTestSummary().getExceptions()); }
@Test public void scansTripleQuotes() { ParserTest.assertScansTokenType("'''bold'''", TokenType.Bold, true); ParserTest.assertScansTokenType("''''bold''''", TokenType.Bold, true); ParserTest.assertScansTokenType("'' 'not bold' ''", TokenType.Bold, false); ParserTest.assertScansTokenType("''''some text' '''", TokenType.Bold, true); }
long getLastLoggedZxid() throws IOException;  boolean truncate(long zxid) throws IOException;  long getDbId() throws IOException;  void commit() throws IOException;  long getTxnLogSyncElapsedTime();  public interface TxnIterator extends Closeable {  TxnHeader getHeader();  Record getTxn();  boolean next() throws IOException;  long getStorageSize() throws IOException; } }
@Test public void translatesLiteralNestedTable() { ParserTest.assertTranslatesTo("!|${x}|\n", new TestVariableSource("x", "|y|\n"), tableWithCell("|y|")); }
OperationImpl getCurrentReadOp();  OperationImpl removeCurrentReadOp();  OperationImpl getCurrentWriteOp();  OperationImpl removeCurrentWriteOp();  boolean hasReadOp();  boolean hasWriteOp();  void addOp(OperationImpl op);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps(); }
public void shouldMatch() throws Exception { assertTrue(matches("!today")); assertTrue(matches("!today -t")); assertTrue(matches("!today -xml")); assertTrue(matches("!today +3")); assertTrue(matches("!today -3")); assertTrue(matches("!today (MMM)")); assertTrue(matches("!today (MMM) +3")); }
void close() { state = States.CLOSED; clientCnxnSocket.onClosing(); }
protected void includeTearDowns(StringBuilder decoratedContent) { super.includeTearDowns(decoratedContent); includeTearDown(getSuiteTearDown(), decoratedContent); }
private void assign(PwEntryV4 source) { parent = source.parent; uuid = source.uuid; strings = source.strings; binaries = source.binaries; customIcon = source.customIcon; foregroundColor = source.foregroundColor; backgroupColor = source.backgroupColor; overrideURL = source.overrideURL; autoType = source.autoType; history = source.history; parentGroupLastMod = source.parentGroupLastMod; creation = source.creation; lastMod = source.lastMod; lastAccess = source.lastAccess; expireDate = source.expireDate; expires = source.expires; usageCount = source.usageCount; url = source.url; additional = source.additional;
public void setup() { OgnlRuntime.setNullHandler(Object.class, new ReflectionBasedNullHandler()); }
private void writeOutputFile() throws Exception { if (outputFileName != null) { String xmlDocument = XmlUtil.xmlAsString(testResultsDocument);
public void testDelete() throws Exception { File dir = new File(context.getRootPagePath(), "files"); dir.mkdirs(); File file = new File(dir, "testfile"); assertTrue(file.createNewFile()); DeleteFileResponder responder = new DeleteFileResponder(); request.addInput("filename", "testfile"); request.setResource("files/"); Response response = responder.makeResponse(context, request); assertFalse(file.exists()); assertEquals(303, response.getStatus()); assertEquals("/files/", response.getHeader("Location")); }
public static List<Path> listDirectoryContent(Path directory, Function<Path, Boolean> filter) throws IOException { List<Path> paths = new ArrayList<>(); Files.walkFileTree( directory, new SimpleFileVisitor<Path>() { @Override public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) { if (filter.apply(path)) { paths.add(path); } return FileVisitResult.CONTINUE; } @Override public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) { if (!dir.equals(directory) && filter.apply(dir)) { paths.add(dir); } return FileVisitResult.CONTINUE; } }); return paths; }
protected void registerBundledComponents(PicoContainersProvider container) { super.registerBundledComponents(container); container.register(RoutesParser.class, ComponentRoutesParser.class); container.register(PathResolver.class, VRaptor2PathResolver.class); container.register(Config.class, VRaptor2Config.class); container.register(ParameterNameProvider.class, LogicAnnotationWithParanamerParameterNameProvider.class); container.register(RequestExecution.class, VRaptor2RequestExecution.class); container.register(PageResult.class, ViewsPropertiesPageResult.class); container.register(HibernateValidatorPluginInterceptor.class,HibernateValidatorPluginInterceptor.class); container.register(Converters.class, VRaptor2Converters.class); container.register(ValidatorInterceptor.class,ValidatorInterceptor.class); container.register(ViewInterceptor.class,ViewInterceptor.class); container.register(ComponentInfoProvider.class, DefaultComponentInfoProvider.class); container.register(OutjectionInterceptor.class,OutjectionInterceptor.class); container.register(AjaxInterceptor.class, AjaxInterceptor.class); container.register(Validator.class, MessageCreatorValidator.class); container.register(ValidationErrors.class, BasicValidationErrors.class); }
void testOutputChunk(String output) throws IOException; void testStarted(TestPage testPage) throws IOException; void testComplete(TestPage testPage, TestSummary testSummary) throws IOException; void testSystemStopped(TestSystem testSystem, ExecutionLog executionLog, Throwable cause ); void testAssertionVerified(Assertion assertion, TestResult testResult); void testExceptionOccurred(Assertion assertion, ExceptionResult exceptionResult); }
public String toString() { return "(" + StringUtil.join(names, ".") + ")"; }
public void shouldReplaceFitNesseRootWithDirectoryRoot() throws Exception { String filePath = "FitNesseRoot/someFolder/someFile"; context.rootDirectoryName = "MyNewRoot"; String updatedPath = updater.getCorrectPathForTheDestination(filePath); assertEquals(portablePath("MyNewRoot/someFolder"), updatedPath); }
void appendCellToRow(int row, Table table); void setTestStatusOnRow(int row, boolean testStatus); }
void created(String location);  void noContent();  void badRequest(String message);  void forbidden(String message);  void notFound();  void conflict(); void header(String key, String value); void methodNotAllowed(EnumSet<HttpMethod> allowedMethods);  void movedPermanentlyTo(String url);  <T> T movedPermanentlyTo(Class<T> controller);  void unsupportedMediaType(String errorMessage);  void notAcceptable(); }
protected void setUp() throws Exception { super.setUp(); ex = new Exposer(); }
private void scoreStrike() { score += 10 + nextTwoBallsForStrike(firstBall); firstBall += 1; }
int getRowCount(); int getColumnCountInRow(int rowIndex); String toString(); String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String getUnescapedCellContents(int col, int row); String getCellResult(int col,int row); void appendChildTable(int row, Table table); void setTestStatusOnRow(int row, ExecutionResult testStatus); void setName(String tableName); void setCell(int col, int row, Response response); void appendToCell(int col, int row, Response response); }
protected void testSuccess(TestDescriptor testDescriptor, TestResult result) { try { testResultRecorder.recordTestResult(testDescriptor.getName(), 0, 0, 0, null, calculateExecutionTimeInSeconds(result));
public static void walkData(File deb, final ArchiveVisitor<TarArchiveEntry> visitor, final Compression compression) throws IOException { ArArchiveInputStream in = new ArArchiveInputStream(new FileInputStream(deb)); ArchiveWalker.walk(in, new ArchiveVisitor<ArArchiveEntry>() { public void visit(ArArchiveEntry entry, byte[] content) throws IOException {
public List<Route> rulesFor(StereotypedClass resource) { List<Route> routes = new ArrayList<Route>(); Class<?> baseType = resource.getType(); registerRulesFor(baseType, baseType, routes); return routes; }
private void setProperties (WikiPage page, String[] propList) throws Exception { PageData data = page.getData(); WikiPageProperties props = data.getProperties(); for (int i = 0; i < propList.length; i++) props.set(propList[i]); page.commit(data); }
private String resource(WikiPage page) { WikiPagePath fullPath = page.getFullPath(); String resource = PathParser.render(fullPath); return resource; }
public String genCppDecl(String fname) { return " "+mName+" "+fname+";\n"; }
void removeChildPage(String name); List<WikiPage> getChildren(); String getName(); PageData getData(); Collection<VersionInfo> getVersions(); WikiPage getVersion(String versionName); String getHtml(); VersionInfo commit(PageData data); PageCrawler getPageCrawler(); String getVariable(String name); }
final public ArrayList Module() throws ParseException { String mName; ArrayList rlist; jj_consume_token(MODULE_TKN); mName = ModuleName(); curModuleName = mName; jj_consume_token(LBRACE_TKN); rlist = RecordList(); jj_consume_token(RBRACE_TKN); {if (true) return rlist;} throw new Error("Missing return statement in function"); }
private static boolean hasProperties(String... properties) { return properties != null && properties.length > 0; }
synchronized boolean connectOne(long sid, InetSocketAddress electionAddr){ if (senderWorkerMap.get(sid) != null) { LOG.debug("There is a connection already for server " + sid); return true; } Socket sock = null; try { LOG.debug("Opening channel to server " + sid);
public void testAliasLinWithLiteralDoesntGetCorrupted() throws Exception { checkChangesOnPageOne("gunk [[!-gunk-!][PageTwo]] gunk", "gunk [[!-gunk-!][PageThree]] gunk"); }
public void testSetQuotaWhenSetQuotaLessThanExistCount() throws Exception { String path = "/c0"; zk.create(path, "1".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); zk.create(path + "/c1", "1".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); zk.create(path + "/c2", "1".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); int count = 2; StatsTrack st = new StatsTrack(); st.setCountHardLimit(count); SetQuotaCommand.createQuota(zk, path, st); try { zk.create(path + "/c3", "1".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
public void testDisplaysVirtualChildren() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("VirtualParent")); PageData data = page.getData(); data.setAttribute(WikiPageProperties.VIRTUAL_WIKI_ATTRIBUTE, "http://localhost:" + FitNesseUtil.port + "/ParenT"); page.commit(data); try {
private void runInternal(boolean displayCmd) throws Exception { String[] argArray = args.toArray(new String[]{}); if(displayCmd) { requester.getLog().info("cmd : " + mainClassName + "(" + StringUtils.join(argArray, ",")+")"); } MainHelper.runMain(mainClassName, args, _cl); }
public void testUseOfGracefulNamingForFields() throws Throwable { checkForFieldBinding("intField", true); checkForFieldBinding("int Field", true); checkForFieldBinding("int field", true); checkForFieldBinding("intfield", false); checkForFieldBinding("Intfield", false); checkForFieldBinding("IntField", false); }
public void testFitnesseLook() throws Exception { Responder responder = new RenameFileConfirmationResponder(); SimpleResponse response = (SimpleResponse) responder.makeResponse(context, request); String content = response.getContent(); assertSubString("<link rel=\"stylesheet\" type=\"text/css\" href=\"/files/css/fitnesse.css\"", content); }
static Socket[] getSocketPair() throws IOException { ServerSocket ss = new ServerSocket(0, 50, InetAddress.getByName("127.0.0.1")); InetSocketAddress endPoint = (InetSocketAddress) ss.getLocalSocketAddress(); Socket s = new Socket(endPoint.getAddress(), endPoint.getPort()); return new Socket[]{s, ss.accept()}; }
public Matcher listDigit() { firstIsDigit('1'); matches.add(new ScanMatch() { public Maybe<Integer> match(ScanString input, SymbolStream symbols, int offset) { return isDigitInput('1', input, offset) ? new Maybe<Integer>(1) : Maybe.noInteger; } }); return this; }
BlockingQueue<Operation> createOperationQueue();  BlockingQueue<Operation> createReadOperationQueue();  BlockingQueue<Operation> createWriteOperationQueue();  NodeLocator createLocator(List<MemcachedNode> nodes);  OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon();  boolean useNagleAlgorithm();  Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode();  Transcoder<Object> getDefaultTranscoder();  boolean shouldOptimize();  int getReadBufSize();  public HashAlgorithm getHashAlg(); }
public boolean addAll(Collection<Object> objects) { return words.addAll(objects); }
void onEachDir( String dirname, String linkname, String user, int uid, String group, int gid, int mode, long size ) throws IOException; void onEachFile( InputStream input, String filename, String linkname, String user, int uid, String group, int gid, int mode, long size ) throws IOException; void onEachLink( String path, String linkName, boolean symlink, String user, int uid, String group, int gid ) throws IOException; }
public void serve(Socket s) throws SocketServerShutdownException { serve(s, 10000); }
public void setUp() throws Exception { report1 = new SuiteExecutionReport(); report2 = new SuiteExecutionReport(); }
public void shouldReturnThatHasNoBasePackageWhenInitParamNull() throws ServletException { when(context.getInitParameter(BasicConfiguration.BASE_PACKAGES_PARAMETER_NAME)).thenReturn(null); assertThat(config.hasBasePackages(), is(false)); }
public void initEncryptData() { cryptoInitOk = false; if (!isFingerprintInitialized()) { if (fingerPrintCallback != null) { fingerPrintCallback.onException(); } return; } try { initEncryptKey(false);
public boolean equivalent( X509Extensions other) { if (extensions.size() != other.extensions.size()) { return false; } Enumeration e1 = extensions.keys(); while (e1.hasMoreElements()) { Object key = e1.nextElement(); if (!extensions.get(key).equals(other.extensions.get(key))) { return false; } } return true; }
private void printEndEnvelope(String tag) { if (!compoundStack.empty()) { String s = (String) compoundStack.peek();
public List<Transition> getFollowingTransitions(Restfulie control); }
public void providerAddedLastWins() { TestRun expectedRun = mock(TestRun.class); TestRun notExpectedRun = mock(TestRun.class); factory.addProvider(pages -> Optional.empty()); factory.addProvider(pages -> Optional.of(notExpectedRun)); factory.addProvider(pages -> Optional.of(expectedRun)); factory.addProvider(pages -> Optional.empty()); TestRun run = factory.createRun(Collections.emptyList()); assertSame(expectedRun, run); }
Watcher interceptWatcher(Watcher watcher); final class Root implements Chroot { @Override public String prepend(String clientPath) { return clientPath; } @Override public String strip(String serverPath) { return serverPath; } @Override public AsyncCallback.StringCallback interceptCallback(AsyncCallback.StringCallback callback) { return callback; } @Override public AsyncCallback.Create2Callback interceptCallback(AsyncCallback.Create2Callback callback) { return callback; } @Override public Watcher interceptWatcher(Watcher watcher) { return watcher; } } final class NotRoot implements Chroot { private final String chroot; public NotRoot(String chroot) { this.chroot = Objects.requireNonNull(chroot); } @Override public String prepend(String clientPath) {
public void sendingFinished() { if (!connected) { return; } lastLocalSeqIdDelivered = localSeqIdDeliveringNow; if (lastLocalSeqIdDelivered > lastSeqIdCommunicatedExternally + SEQ_ID_SLACK){
private String fillRefsUsingCache(String text, SprContextV4 ctx) { for (Entry<String, String> entry : ctx.refsCache.entrySet()) { text = StrUtil.replaceAllIgnoresCase(text, entry.getKey(), entry.getValue(), Locale.ENGLISH); } return text;
public void setUp() throws Exception { super.setUp(); zooKeeper = createClient(); zooKeeper.create(testRootNode + Thread.currentThread().getId(), new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
public HttpFuture<List<View>> asyncGetViews(final String designDocumentName) { String uri = "/" + bucketName + "/_design/" + designDocumentName; final CountDownLatch couchLatch = new CountDownLatch(1); final HttpFuture<List<View>> crv = new HttpFuture<List<View>>(couchLatch, operationTimeout); final HttpRequest request = new BasicHttpRequest("GET", uri, HttpVersion.HTTP_1_1); final HttpOperation op = new HttpOperation(request, new HttpCallback() { @Override public void complete(String response) { try { crv.set(DocParserUtils.parseDesignDocumentForViews(bucketName, designDocumentName, response)); } catch (ParseException e) { getLogger().error(e.getMessage()); } couchLatch.countDown(); } }); crv.setOperation(op); addOp(op); return crv; }
private static String computeTargetOption(String target) { if (target.equals("1.5") || target.equals("5")) { return "jvm-1.5"; } else if (target.equals("1.6") || target.equals("6")) { return "jvm-1.6"; } else if (target.equals("1.7") || target.equals("7")) { return "jvm-1.7"; } else if (target.equals("1.8") || target.equals("8")) { return "jvm-1.8"; } return null; }
public void readRecord(Record r, String tag) throws IOException { r.deserialize(this, tag); }
public static void movePage(WikiPage root, WikiPagePath pageToBeMovedPath, WikiPagePath newParentPath) throws Exception { PageCrawler crawler = root.getPageCrawler(); WikiPage movee = crawler.getPage(root, pageToBeMovedPath); WikiPagePath movedPagePath = newParentPath.withNameAdded(movee.getName()); WikiPage movedPage = crawler.addPage(root, movedPagePath, movee.getData().getContent()); PageData movedData = movedPage.getData(); PageData oldData = movee.getData(); movedData.setProperties(oldData.getProperties()); movedData.getProperties().setLastModificationTime(oldData.getProperties().getLastModificationTime()); List<?> children = movee.getChildren(); if (children.size() > 0) moveChildren(children, root, movedPagePath); movedPage.commit(movedData); WikiPagePath originalParentPath = pageToBeMovedPath.parentPath(); WikiPage parentOfMovedPage = crawler.getPage(root, originalParentPath); parentOfMovedPage.removeChildPage(movee.getName()); }
public void isCapableOfDealingWithEmptyParameterForInternalWrapperValue() throws OgnlException { mockery.checking(new Expectations() {{ one(converters).to(Integer.class, null); will(returnValue(new IntegerConverter())); }}); Ognl.setValue("firstLeg.id", context, myCat, ""); assertThat(myCat.firstLeg.id, is(equalTo(null))); mockery.assertIsSatisfied(); }
@Test public void translatesNotes() { ParserTestHelper.assertTranslatesTo("!note some note", "<span class=\"note\">some note</span>"); }
private void add(int c) { if (i < 10) { if (shell == Shell.NONE) { for (Shell shell : Shell.values()) { int position = positions2.containsKey(shell) ? positions2.get(shell) : 0; if (position < shell.header.length) { if (c == shell.header[position]) { positions2.put(shell, position + 1); } else { positions2.put(shell, 0); } } else { this.shell = shell; } } } if (bom == BOM.NONE) { for (BOM bom : BOM.values()) { int position = positions1.containsKey(bom) ? positions1.get(bom) : 0; if (position < bom.sequence.length) { if (c == bom.sequence[position] && position == i) { positions1.put(bom, position + 1); } else { positions1.put(bom, 0); } } else { this.bom = bom; } } } } i++; if (c == '\n') { lf++; return; } if (c == '\r') { cr++; return; } if (c >= ' ' && c <= '~') { ascii++; return; } if (c == 0) { zero++; return; } nonascii++; }
public void info( String s ) { } public void warn( String s ) { } }, null); Project project = new Project(); project.setCoreLoader(getClass().getClassLoader()); project.init(); FileSet fileset = new FileSet(); fileset.setDir(new File(getClass().getResource("deb/data").toURI())); fileset.setIncludes("**/*"); fileset.setProject(project); StringBuilder md5s = new StringBuilder(); processor.buildData(new DataProducer[] { new DataProducerFileSet(fileset) }, new File("target/data.tar"), md5s, "gz"); assertTrue("empty md5 file", md5s.length() > 0); assertFalse("windows path separator found", md5s.indexOf("\\") != -1); } }
private Responder makeErrorMessageResponder(String message) { return new ErrorResponder(getErrorMessageHeader() + "<br/>" + message); }
public void serializeNestedList() throws Exception { List<String> sublist = new ArrayList<String>(); sublist.add("element"); list.add(sublist); assertEquals("[000001:000024:[000001:000007:element:]:]", SlimSerializer.serialize(list)); }
public Optional<String> findVariable(String name) { return Optional.ofNullable(getProperty(name)); }
public Operation newOp(final MemcachedNode n, final CountDownLatch latch) { Operation op=opFact.flush(delay, new OperationCallback(){ public void receivedStatus(OperationStatus s) { flushResult.set(s.isSuccess()); } public void complete() { latch.countDown(); }}); ops.add(op); return op; }});
public static boolean isEmpty(String str) { return str == null || str.length() == 0; }
private void guaranteeThatAllTablesAreUnique(TableTag tagTable) { tagTable.setAttribute("_TABLENUMBER", ""+ Math.abs((new Random()).nextLong())); }
public void testLoadKeyStore() throws Exception { String path = x509TestContext.getKeyStoreFile(KeyStoreFileType.JKS).getAbsolutePath(); KeyStore ks = new JKSFileLoader.Builder().setKeyStorePath(path).setKeyStorePassword(x509TestContext.getKeyStorePassword()).build().loadKeyStore(); assertEquals(1, ks.size()); }
public void testHeader() throws PwDbOutputException, IOException { ByteArrayOutputStream bActual = new ByteArrayOutputStream(); PwDbV3Output pActual = new PwDbV3OutputDebug(mPM, bActual, true); PwDbHeaderV3 header = pActual.outputHeader(bActual); ByteArrayOutputStream bExpected = new ByteArrayOutputStream(); PwDbHeaderOutputV3 outExpected = new PwDbHeaderOutputV3(mPM.dbHeader, bExpected); outExpected.output(); assertHeadersEquals(mPM.dbHeader, header); assertTrue("No output", bActual.toByteArray().length > 0); assertArrayEquals("Header does not match.", bExpected.toByteArray(), bActual.toByteArray()); }
public Iterator<OpResult> iterator() { return results.iterator(); }
public int hashCode() { return parent.hashEntry(getKey(), getValue()); }
public List<WikiPage> makePageListForSingleTest() { testPageList = new LinkedList<WikiPage>(); testPageList.add(pageToRun); return testPageList; }
public Response makeResponse(FitNesseContext context, Request request) { SimpleResponse response = new SimpleResponse(); resource = request.getResource(); String filename = (String) request.getInput("filename"); response.setContent(makeDirectoryListingPage(resource, filename, context)); response.setLastModifiedHeader("Delete"); return response; }
String fillUri(Object params);  void fillIntoRequest(String uri, MutableRequest request);  String apply(String[] values); }
public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof WikiPage)) return false; try { PageCrawler crawler = getPageCrawler();
public void runTests(TestPage pageToTest) throws IOException { initializeTest(); testStarted(pageToTest); try { processAllTablesOnPage(pageToTest);
public void testParsing() throws Exception { final String input = " * change1\n" + " * change2\n" + "release date=14:00 13.01.2007, version=12324, urgency=low, by=tcurdt@joost.com\n" + " * change1\n" + " * change2\n" + "release date=12:00 10.01.2007, version=10324, urgency=low, by=tcurdt@joost.com\n" + " * change1\n" + " * change2\n"; final PackageDescriptor descriptor = new PackageDescriptor(); descriptor.set("Package", "package"); descriptor.set("Version", "version"); descriptor.set("Distribution", "distribution"); descriptor.set("Date", "Mon, 20 Aug 2007 15:25:57 +0200"); final TextfileChangesProvider provider = new TextfileChangesProvider(new ByteArrayInputStream(input.getBytes("UTF-8")), descriptor); final ChangeSet[] changeSets = provider.getChangesSets(); assertNotNull(changeSets); assertEquals(3, changeSets.length); }
public void testWithGreatGrandchildrenRegraced() throws Exception
public Maybe<String> findVariable(String name) { return Maybe.noString; }
public void run(){ try{ takeResult[0] = queueHandles[0].take();
public void shouldUseTheDefaulJvmtLocale() throws ParseException { when(request.getSession()).thenReturn(session); when(request.getAttribute("javax.servlet.jsp.jstl.fmt.locale.request")).thenReturn(null); when(session.getAttribute("javax.servlet.jsp.jstl.fmt.locale.session")). thenReturn(null); when(context.getAttribute("javax.servlet.jsp.jstl.fmt.locale.application")). thenReturn(null); when(context.getInitParameter("javax.servlet.jsp.jstl.fmt.locale")). thenReturn(null); when(request.getLocale()).thenReturn(null); assertThat(Locale.getDefault(), is(equalTo(converter.getLocale()))); }
public Object addPath(String path) throws SlimException { statementsAsList.add(list(instruction.getId(), ImportInstruction.INSTRUCTION, path)); return null; }
public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException { HttpServletRequest request = null; HttpServletResponse response = null; try { request = (HttpServletRequest) req; response = (HttpServletResponse) res; } catch (ClassCastException e) { throw new ServletException("VRaptor must be run inside a Servlet environment. Portlets and others aren't supported.", e); } UrlToResourceTranslator translator = container .withA(UrlToResourceTranslator.class); ResourceMethod method = translator.translate(request); if (method == null) { response.setStatus(404); response.getWriter().println("resource not found"); return; } container.prepareFor(method, request, response).execute(method);
void onClick() { GroupActivity.Launch(mAct, mPw.childGroups, mPw.childEntries);
public void setUp() throws Exception { } public void tearDown() throws Exception { } public void testBasics() throws Exception { CommandRunner runner = new CommandRunner("java -cp ./classes fitnesse.testutil.Echo", "echo this!", null); runner.run(); assertHasRegexp("echo this!", runner.getOutput()); assertEquals("", runner.getError()); assertEquals(false, runner.hasExceptions()); assertEquals(0, runner.getExitCode()); } public void testClassNotFound() throws Exception { CommandRunner runner = new CommandRunner("java BadClass", "", null); runner.run(); assertHasRegexp("Error", runner.getError()); assertEquals("", runner.getOutput()); assertTrue(0 != runner.getExitCode()); } }
void appendToCell(int col, int row, String message); int getRowCount(); int getColumnCountInRow(int rowIndex); String toString(); String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); void appendCellToRow(int row, Table table); void setTestStatusOnRow(int row, boolean testStatus); void setName(String tableName); }
public void shouldComplainAboutInvalidNumber() { converter.convert("---", long.class, bundle); assertThat(errors.get(0), is(VRaptorMatchers.error("", "--- is not a valid integer."))); }
public void listDeserializationTest() { List<Object> objects = new ArrayList<Object>(); for (int i = 0; i < 10000; i++) { objects.add(new String("This is string " + i)); } final String serializedList = ListSerializer.serialize(objects); long start = System.currentTimeMillis(); List<Object> result = ListDeserializer.deserialize(serializedList); System.out.println(System.currentTimeMillis() - start); assertEquals(objects, result); }
public void intercept(InterceptorStack invocation, ResourceMethod method, Object resourceInstance) throws IOException { Class<?> type = method.getResource().getType(); Object instance = container.instanceFor(type); invocation.next(method, instance); }
private String contentsWithPages(String name1, String name2, String nested) { return "<div class=\"toc1\">" + HtmlElement.endl + "\t<div class=\"contents\">" + HtmlElement.endl +
public <T> T instanceFor(Class<T> type) { return wrapWhenNeeded(type, applicationContext.getBean(type)); }
public void testGenerateSuiteMapWithMultipleTestSystems() throws Exception { WikiPage slimPage = addTestToSuite("SlimTest", simpleSlimDecisionTable); Map<TestSystem.Descriptor, LinkedList<WikiPage>> map = SuiteResponder.makeMapOfPagesByTestSystem(suite, root, null); TestSystem.Descriptor fitDescriptor = TestSystem.getDescriptor(testPage.getData()); TestSystem.Descriptor slimDescriptor = TestSystem.getDescriptor(slimPage.getData()); List<WikiPage> fitList = map.get(fitDescriptor); List<WikiPage> slimList = map.get(slimDescriptor); assertEquals(1, fitList.size()); assertEquals(1, slimList.size()); assertEquals(testPage, fitList.get(0)); assertEquals(slimPage, slimList.get(0)); }
public void testCompressedStringNotSmaller() throws Exception { String s1 = "This is a test simple string that will not be compressed.";
Collection<SocketAddress> getAvailableServers(); Collection<SocketAddress> getUnavailableServers(); Transcoder<Object> getTranscoder(); NodeLocator getNodeLocator(); Future<Boolean> append(long cas, String key, Object val); <T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) throws OperationTimeoutException; CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  void authenticate(final CallbackHandler cbh) throws OperationException; }
private HtmlTag makeBaseTag() { HtmlTag base = new HtmlTag("base"); StringBuffer href = new StringBuffer("http://"); href.append(host); href.append("/"); base.addAttribute("href", href.toString()); return base; }
protected void decodePayload(byte[] pl) { final int flags=decodeInt(pl, 0); final byte[] data=new byte[pl.length - EXTRA_HDR_LEN]; System.arraycopy(pl, EXTRA_HDR_LEN, data, 0, pl.length-EXTRA_HDR_LEN); GetlOperation.Callback gcb=(GetlOperation.Callback)getCallback(); gcb.gotData(key, flags, responseCas, data); getCallback().receivedStatus(STATUS_OK); }
public void whenListContainsOneElementExpectOneListItem() {
protected void addFormatters(MultipleTestsRunner runner) { runner.addTestSystemListener(mainFormatter); if (rerunFormatter != null) { runner.addTestSystemListener(rerunFormatter); } if (withSuiteHistoryFormatter()) { addHistoryFormatter(runner); } else { runner.addExecutionLogListener(new ConsoleExecutionLogListener()); } if (mainFormatter instanceof ExecutionLogListener) { runner.addExecutionLogListener((ExecutionLogListener) mainFormatter); } for (Formatter formatter : context.formatterFactory.createFormatters()) { runner.addTestSystemListener(formatter); } if (context.testSystemListener != null) { runner.addTestSystemListener(context.testSystemListener);
public void testOCSPEnabled( X509KeyType caKeyType, X509KeyType certKeyType, String keyPassword, Integer paramIndex) throws Exception { init(caKeyType, certKeyType, keyPassword, paramIndex); System.setProperty(x509Util.getSslOcspEnabledProperty(), "true"); x509Util.getDefaultSSLContext(); assertTrue(Boolean.valueOf(System.getProperty("com.sun.net.ssl.checkRevocation"))); assertTrue(Boolean.valueOf(System.getProperty("com.sun.security.enableCRLDP"))); assertTrue(Boolean.valueOf(Security.getProperty("ocsp.enable"))); }
public Response makeResponse(FitNesseContext context, Request request) { editTimeStamp = getEditTime(request); ticketId = getTicketId(request); String resource = request.getResource(); WikiPage page = getPage(resource, context); data = page.getData(); user = request.getAuthorizationUsername(); if (editsNeedMerge()) return new MergeResponder(request).makeResponse(context, request);
protected void addAdditionalDependencies(Set<String> back) throws Exception { if (additionalDependencies != null) { for (Dependency dependency : additionalDependencies) {
private String render(boolean isSuite) throws Exception { this.isSuite = isSuite; if (isTestPage()) includeSetupAndTeardownPages(); return pageData.getHtml(); }
public void onEachLink(TarArchiveEntry entry) throws IOException {
public void testAddStoppable() { StoppedRecorder stoppableA = new StoppedRecorder(); StoppedRecorder stoppableB = new StoppedRecorder(); RunningTestingTracker tracker = new RunningTestingTracker(); tracker.addStartedProcess("1", stoppableA); tracker.addStartedProcess("2", stoppableB); tracker.stopAllProcesses(); assertTrue(stoppableA.wasStopped()); assertTrue(stoppableB.wasStopped()); }
NodeLocator getNodeLocator(); Future<Boolean> append(long cas, String key, Object val); <T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) throws OperationTimeoutException; CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def, int exp) throws OperationTimeoutException; long decr(String key, int by, long def, int exp) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
public String extract(String paramName, String from) { Matcher matcher = pattern.matcher(from); matcher.matches(); return matcher.group(parameters.indexOf(paramName) + 1); }
public void shouldMakeUpdateListWithMultiLevelFolders() throws Exception { File masterFolder = createMultiLevelDirectory(); String content = runCreateFileAndGetContent(new String[]{"MasterFolder"}); assertSubString("MasterFolder/MasterFile\n", content); assertSubString("MasterFolder/TestFolder/TestFile\n", content); FileUtil.deleteFileSystemDirectory(masterFolder);
public void softHalt(){ for(SendWorker sw: senderWorkerMap.values()){ LOG.debug("Halting sender: " + sw);
Collection<SocketAddress> getUnavailableServers(); Transcoder<Object> getTranscoder(); NodeLocator getNodeLocator(); Future<Boolean> append(long cas, String key, Object val); Future<Boolean> append(String key, Object val); <T> Future<Boolean> append(long cas, String key, T val, Transcoder<T> tc); <T> Future<Boolean> append(String key, T val, Transcoder<T> tc); Future<Boolean> prepend(long cas, String key, Object val); Future<Boolean> prepend(String key, Object val); <T> Future<Boolean> prepend(long cas, String key, T val, Transcoder<T> tc); <T> Future<Boolean> prepend(String key, T val, Transcoder<T> tc); <T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, int exp, T value, Transcoder<T> tc); CASResponse cas(String key, long casId, Object value); <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); Future<CASValue<Object>> asyncGetAndTouch(final String key, final int exp); <T> Future<CASValue<T>> asyncGetAndTouch(final String key, final int exp, final Transcoder<T> tc); CASValue<Object> getAndTouch(String key, int exp); <T> CASValue<T> getAndTouch(String key, int exp, Transcoder<T> tc); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc); CASValue<Object> gets(String key); <T> T get(String key, Transcoder<T> tc); Object get(String key); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcs); <T> BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keys, Transcoder<T> tc); <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); BulkFuture<Map<String, Object>> asyncGetBulk(Iterator<String> keys); BulkFuture<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> BulkFuture<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); BulkFuture<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Iterator<String> keys, Transcoder<T> tc); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc); Map<String, Object> getBulk(Iterator<String> keys); Map<String, Object> getBulk(Collection<String> keys); <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys); Map<String, Object> getBulk(String... keys); <T> Future<Boolean> touch(final String key, final int exp, final Transcoder<T> tc); <T> Future<Boolean> touch(final String key, final int exp); Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); Map<SocketAddress, Map<String, String>> getStats(String prefix); long incr(String key, long by); long incr(String key, int by); long decr(String key, long by); long decr(String key, int by); long incr(String key, long by, long def, int exp); long incr(String key, int by, long def, int exp); long decr(String key, long by, long def, int exp); long decr(String key, int by, long def, int exp); Future<Long> asyncIncr(String key, long by); Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, long by); Future<Long> asyncDecr(String key, int by); long incr(String key, long by, long def); long incr(String key, int by, long def); long decr(String key, long by, long def); long decr(String key, int by, long def); Future<Boolean> delete(String key); Future<Boolean> delete(String key, long cas); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); boolean addObserver(ConnectionObserver obs); boolean removeObserver(ConnectionObserver obs);  Set<String> listSaslMechanisms(); }
private void addToZip(File file, ZipOutputStream zos) throws IOException { final ZipEntry entry = new ZipEntry(file.getName()); zos.putNextEntry(entry); final FileInputStream is = new FileInputStream(file); final int size = (int) file.length(); final byte[] bytes = new byte[size]; is.read(bytes); is.close(); zos.write(bytes, 0, size); }
public boolean equals(Object o) { if (this == o) { return true; } if (!(o instanceof MultiResponse)) { return false; } MultiResponse other = (MultiResponse) o; if (results != null) { Iterator<OpResult> i = other.results.iterator();
int getPendingRevalidationCount();  long getElectionTimeTaken();  int getObserverMasterPacketSizeLimit();  void setObserverMasterPacketSizeLimit(int sizeLimit);  int getMaxConcurrentSnapSyncs();  void setMaxConcurrentSnapSyncs(int maxConcurrentSnapSyncs);  int getMaxConcurrentDiffSyncs();  void setMaxConcurrentDiffSyncs(int maxConcurrentDiffSyncs); }
public void operationComplete(ChannelFuture future) throws Exception { if (!future.isSuccess()) { logger.error("Error writing a Consume request to host: " + HedwigClient.getHostFromChannel(channel)
public static SlimFactory createJavaSlimFactory(FixtureInteraction interaction, Integer timeout, boolean verbose) { return new JavaSlimFactory(interaction, timeout, verbose); }
protected String makeDescription(String author, String pubDate) { String description; String authoredBy = ""; if(exists(author)) authoredBy = author + ":"; description = authoredBy + pubDate; return description; }
public static String stripPath( final int p, final String s ) { if (p <= 0) { return s; } int x = 0; for (int i=0 ; i<p; i++) { x = s.indexOf('/', x+1); if (x < 0) { return s; } } return s.substring(x+1); }
private void respond (int httpCode, Response response, Configuration config, HttpExchange t) { try {
public void shouldReturnEmptyStringIfTheResultIsNull() { TypeCreated c = client(null); assertThat((String) evaluator.get(c, "client.id"), is(equalTo(""))); }
public void SetUp() throws Exception { fileSystem = new MemoryFileSystem(); fileSystemPageFactory = new FileSystemPageFactory(fileSystem, new ZipFileVersionsController(), new SystemVariableSource()); rootPage = fileSystemPageFactory.makeRootPage(".", "somepath") ; }
public Response makeResponse(FitNesseContext context, Request request) { SimpleResponse response = new SimpleResponse(); if (request.hasInput("id")) { testId = request.getInput("id").toString(); } response.setContent(html(context)); return response; }
public boolean isRequestedSessionIdValid() { return requestedSessionIdValid; }
public void testLiteralsGetRendered() throws Exception { verifyLiteralsGetRendered("", "LiteralPage"); }
private Method findMethod(Class<? extends Object> type, String name, Class<? extends Object> baseType, Class<?> ...params) { try { return type.getDeclaredMethod(name, params);
private HtmlTag buildContentsDiv(WikiPage wikiPage, int currentDepth) throws Exception { HtmlTag div = makeDivTag(currentDepth); div.add(buildList(wikiPage, currentDepth)); return div; }
public void translatesLinkToNonExistent() { ParserTestHelper.assertTranslatesTo(new TestSourcePage().withTarget("NonExistentPage"), "[[tag][NonExistentPage]]", "tag<a title=\"create page\" href=\"NonExistentPage?edit&amp;nonExistent=true\">[?]</a>");
public void returnsNullIfMethodNotFound() { ResourceMethod method = lookuper.methodFor("/projects", HttpMethod.POST); assertThat(method, is(nullValue())); mockery.assertIsSatisfied(); }
private void assertDefinesValue(String input, String name, String definedValue) { WikiPage pageOne = new TestRoot().makePage("PageOne", input); ParsingPage page = new ParsingPage(new WikiSourcePage(pageOne)); Parser.make(page, input).parse(); assertEquals(definedValue, page.findVariable(name).orElse("*nothing*")); }
public void processResult(int rc, String path, Object ctx, List<ACL> acl, Stat stat) { this.acl = acl; this.stat = stat; super.processResult(rc, path, ctx); }
public void passingMessage() throws Exception { assertExpectationMessage("expected", "expected", "pass(expected)"); }
WikiPage getRoot(WikiPage page) throws Exception; void traverse(WikiPage root, FitNesseTraversalListener pageCrawlerTest) throws Exception; }
public void operationFailed(Object ctx, PubSubException exception) { if (LOGGER.isDebugEnabled()) LOGGER.error("cross-region subscribe failed for topic " + topic.toStringUtf8(), exception); mcb.operationFailed(ctx, exception); }
private void handleSuitePage(Socket socket, WikiPage page, WikiPage root) throws Exception { FitClient client = startClient(socket); SuiteFilter filter = new SuiteFilter(suiteFilter, null, null); SuiteContentsFinder suiteTestFinder = new SuiteContentsFinder(page, filter, root); List<WikiPage> testPages = suiteTestFinder.makePageList(); if (shouldIncludePaths) { MultipleTestsRunner runner = new MultipleTestsRunner(testPages, context, page, null); String classpath = runner.buildClassPath(); client.send(classpath); } for (WikiPage testPage : testPages) { PageData testPageData = testPage.getData(); sendPage(testPageData, client, false); } closeClient(client); }
public boolean removeWatcher(String path, Watcher watcher);  public void removeWatcher(Watcher watcher);  public WatcherOrBitSet triggerWatch(String path, EventType type);  public WatcherOrBitSet triggerWatch( String path, EventType type, WatcherOrBitSet suppress);  public int size();  public void shutdown();  public WatchesSummary getWatchesSummary();  public WatchesReport getWatches();  public WatchesPathReport getWatchesByPath();  public void dumpWatches(PrintWriter pwriter, boolean byPath); }
public void testProtocolVersion(boolean fipsEnabled) throws Exception { System.setProperty(quorumX509Util.getFipsModeProperty(), Boolean.toString(fipsEnabled)); System.setProperty(quorumX509Util.getSslProtocolProperty(), "TLSv1.2"); q1 = new MainThread(1, clientPortQp1, quorumConfiguration, SSL_QUORUM_ENABLED); q2 = new MainThread(2, clientPortQp2, quorumConfiguration, SSL_QUORUM_ENABLED); q1.start(); q2.start(); assertTrue(ClientBase.waitForServerUp("127.0.0.1:" + clientPortQp1, CONNECTION_TIMEOUT)); assertTrue(ClientBase.waitForServerUp("127.0.0.1:" + clientPortQp2, CONNECTION_TIMEOUT)); System.setProperty(quorumX509Util.getSslProtocolProperty(), "TLSv1.1");
WikiPage getPage(WikiPagePath path); WikiPage getPage(WikiPagePath path, PageCrawlerDeadEndStrategy deadEndStrategy); boolean pageExists(WikiPagePath path); WikiPagePath getFullPathOfChild(WikiPagePath childPath); WikiPagePath getFullPath(); String getRelativeName(WikiPage page); WikiPage getRoot(); void traverse(TraversalListener<? super WikiPage> callback); void traversePageAndAncestors(TraversalListener<? super WikiPage> callback); void traverseUncles(String uncleName, TraversalListener<? super WikiPage> callback); WikiPage getSiblingPage(WikiPagePath pathRelativeToSibling); WikiPage findAncestorWithName(String name); WikiPage getClosestInheritedPage(WikiPage context, String pageName); }
private String buildConfirmationHtml(WikiPage root, String qualifiedPageName, FitNesseContext context) throws Exception { HtmlPage html = context.htmlPageFactory.newPage(); html.title.use("Delete Confirmation"); html.header.use(HtmlUtil.makeBreadCrumbsWithPageType(qualifiedPageName, "/", "Confirm Deletion")); html.main.use(makeMainContent(root, qualifiedPageName)); return html.html(); }
public void testFourLetterWords() throws Exception { verify("ruok", "imok"); verify("envi", "java.version"); verify("conf", "clientPort"); verify("stat", "Outstanding"); verify("srvr", "Outstanding"); verify("cons", "queued"); verify("dump", "Session"); verify("wchs", "watches"); verify("wchp", ""); verify("wchc", ""); verify("srst", "reset"); verify("crst", "reset"); verify("stat", "Outstanding"); verify("srvr", "Outstanding"); verify("cons", "queued"); TestableZooKeeper zk = createClient(); String sid = "0x" + Long.toHexString(zk.getSessionId()); verify("stat", "queued"); verify("srvr", "Outstanding"); verify("cons", sid); verify("dump", sid); zk.getData("/", true, null); verify("stat", "queued"); verify("srvr", "Outstanding"); verify("cons", sid); verify("dump", sid); verify("wchs", "watching 1"); verify("wchp", sid); verify("wchc", sid); zk.close(); verify("ruok", "imok"); verify("envi", "java.version"); verify("conf", "clientPort"); verify("stat", "Outstanding"); verify("srvr", "Outstanding"); verify("cons", "queued"); verify("dump", "Session"); verify("wchs", "watch"); verify("wchp", ""); verify("wchc", ""); verify("srst", "reset"); verify("crst", "reset"); verify("stat", "Outstanding"); verify("srvr", "Outstanding"); verify("cons", "queued"); verify("mntr", "zk_server_state\tstandalone"); verify("mntr", "num_alive_connections"); verify("stat", "Connections"); verify("srvr", "Connections"); }
@Test public void parsesCollapsible() throws Exception { ParserTest.assertParses("!* title\ncontent\n*!", "SymbolList[Collapsible[Text, SymbolList[Text], SymbolList[Text]]]"); ParserTest.assertParses("!**\n**!", "SymbolList[Text, CloseCollapsible]"); }
int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); MemcachedConnection getConnection(); void setConnection(MemcachedConnection connection); }
public void execute() throws Exception { request = new MockRequest(); details(); if(username != null) request.setCredentials(username, password); request.parseRequestUri("/" + uri); FitnesseFixtureContext.page = FitnesseFixtureContext.root.getPageCrawler().getPage(FitnesseFixtureContext.root, PathParser.parse(uri)); FitNesseExpediter expediter = new FitNesseExpediter(new MockSocket(""), FitnesseFixtureContext.context); FitnesseFixtureContext.response = expediter.createGoodResponse(request); FitnesseFixtureContext.sender = new MockResponseSender(FitnesseFixtureContext.response); }
public void testRenameSiblingOfRoot() throws Exception { WikiPage source = pageBuilder.addPage(root, PathParser.parse("SourcePage"), "gunk TargetPage gunk"); WikiPage target = pageBuilder.addPage(root, PathParser.parse("TargetPage")); renamer = new PageReferenceRenamer(root, target, "RenamedPage"); renamer.renameReferences(); String updatedSourceContent = source.getData().getContent(); assertEquals("gunk RenamedPage gunk", updatedSourceContent); }
public void initContainer() { mockery = new Mockery(); servletContext = mockery.mock(ServletContext.class); mockery.checking(new Expectations() { { allowing(servletContext).getAttribute("org.springframework.web.context.WebApplicationContext.ROOT"); will(returnValue(null)); allowing(servletContext).getInitParameter(BasicConfiguration.BASE_PACKAGES_PARAMETER_NAME); will(returnValue("br.com.caelum.vraptor.ioc.spring")); allowing(servletContext).getRealPath(with(any(String.class))); will(returnValue(SpringBasedContainer.class.getResource(".").getFile())); allowing(servletContext).getInitParameter(BasicConfiguration.SCANNING_PARAM); will(returnValue("enabled")); allowing(servletContext).getClassLoader(); will(returnValue(Thread.currentThread().getContextClassLoader())); allowing(servletContext); } }); session = new HttpSessionMock(servletContext, "session"); request = new HttpServletRequestMock(session, mockery.mock(MutableRequest.class), mockery); response = mockery.mock(MutableResponse.class); FilterChain chain = mockery.mock(FilterChain.class); VRaptorRequestHolder.setRequestForCurrentThread(new RequestInfo(servletContext, chain, request, response)); RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request)); BasicConfiguration config = new BasicConfiguration(servletContext); container = new SpringBasedContainer(new DefaultSpringLocator().getApplicationContext(servletContext)); new WebAppBootstrapFactory().create(config).configure(container); container.start(servletContext); }
private void removeResultsDirectory() { if (resultsDirectory.exists()) FileUtil.deleteFileSystemDirectory(resultsDirectory);
public boolean shouldBeApplied() throws IOException { if (super.shouldBeApplied()) return true;
private void consumeToken() { currentFlaggedToken = Token.EOF; }
public void errorOccurred(Throwable cause) { if (cause != null) { LOG.log(Level.INFO, "error registered in test system", cause);
public int getMaxSessionTimeout();  public int getInitLimit();  public int getSyncLimit();  public void setInitLimit(int initLimit);  public void setSyncLimit(int syncLimit);  public int getTick();  public String getState();  public String getQuorumAddress();  public int getElectionType();  public String getElectionAddress();  public String getClientAddress();  public String getLearnerType();  public long getConfigVersion();  public String getQuorumSystemInfo();  public boolean isPartOfEnsemble();  public boolean isLeader(); }
public void fromString_should_return_an_typed_list_when_value_is_an_valid_collection() { String value = "[1,2,3]"; GenericCollectionConverter<Integer, Collection<Integer>> collConverter = new GenericCollectionConverter<>(Collection.class, new IntConverter()); Collection<Integer> current = collConverter.fromString(value); assertEquals(Arrays.asList(new Integer[] { 1, 2, 3 }), current); }
public void testOutputChunk(String output) throws IOException { resultsRepository.write(output); }
protected boolean matchesSVNClientResponse(String messageFromSVNClient) { return contains(messageFromSVNClient, "Schedule: normal"); }
public void testQuerySetRangeEnd() throws Exception { Query query = new Query(); View view = client.getView(DESIGN_DOC_W_REDUCE, VIEW_NAME_W_REDUCE); HttpFuture<ViewResponseWithDocs> future = client.asyncQuery(view, query.setRangeEnd("end")); ViewResponseWithDocs response = future.get(); assert response != null : future.getStatus(); }
public void putVariable(String name, String value) { cache.put(name, value); }
protected void createSlimService() throws InterruptedException { while (!tryCreateSlimService()) Thread.sleep(10);
public void setExecutionLogAndTrackingId(String stopResponderId, CompositeExecutionLog log) throws Exception; public void announceNumberTestsToRun(int testsToRun); public void announceStartTestSystem(TestSystem testSystem, String testSystemName, String testRunner) throws Exception; public void announceStartNewTest(WikiPage test) throws Exception; public void processTestOutput(String output) throws Exception; public void processTestResults(WikiPage test, TestSummary testSummary) throws Exception; public void errorOccured(); }
public void testIPAuthenticationIsValidCIDR() throws Exception { IPAuthenticationProvider prov = new IPAuthenticationProvider(); assertTrue("testing no netmask", prov.isValid("127.0.0.1")); assertTrue("testing single ip netmask", prov.isValid("127.0.0.1/32")); assertTrue("testing lowest netmask possible", prov.isValid("127.0.0.1/0")); assertFalse("testing netmask too high", prov.isValid("127.0.0.1/33")); assertFalse("testing netmask too low", prov.isValid("10.0.0.1/-1")); }
public void testComplete(WikiPage test, TestSummary testSummary) throws Exception { System.out.println (test.getName() + " r " + testSummary.getRight() + " w "+ testSummary.getWrong() + " e " + testSummary.getExceptions()); String fullPath=getFullPath(test); visitedTestPages.add(fullPath); totalSummary.add(testSummary); testSummaries.put(fullPath, testSummary); resultsRepository.close(); }
private String includeUncleLibraries() throws Exception { String content = ""; List<WikiPage> uncles = PageCrawlerImpl.getAllUncles("ScenarioLibrary", page); for (WikiPage uncle : uncles) content += include(page.getPageCrawler().getFullPath(uncle)); return content; }
public void HtmlFileIsExternalSuitePageChild() throws Exception { fileSystem.makeFile("./somepath/ExternalSuite/myfile.html", "stuff"); ExternalSuitePage page = (ExternalSuitePage) fileSystemPageFactory.makeChildPage("ExternalSuite", rootPage); WikiPage child = fileSystemPageFactory.findChildren(page).get(0); assertEquals(ExternalTestPage.class, child.getClass()); assertEquals("MyfilE", child.getName()); }
public Future<Boolean> delete(String key, int hold) { return delete(key); }
public void testHeader() throws Exception { ByteArrayOutputStream bActual = new ByteArrayOutputStream(); PwManagerOutput pActual = new PwManagerOutput(mPM, bActual, PwManagerOutput.DEBUG); pActual.outputHeader(bActual); ByteArrayOutputStream bExpected = new ByteArrayOutputStream(); PwDbHeaderOutput outExpected = new PwDbHeaderOutput(mPM.dbHeader, bExpected); outExpected.output(); assertArrayEquals("Header does not match.", bExpected.toByteArray(), bActual.toByteArray()); }
CASOperation cas(String key, long casId, int flags, int exp, byte[] data, OperationCallback cb);  VersionOperation version(OperationCallback cb);  Collection<Operation> clone(KeyedOperation op); }
boolean hasWriteOp();  void addOp(Operation op);  void insertOp(Operation o);  int getSelectionOps();  ByteBuffer getRbuf();  ByteBuffer getWbuf();  SocketAddress getSocketAddress();  boolean isActive();  boolean isAuthenticated();  long lastReadDelta();  void completedRead();  void reconnecting();  void connected();  int getReconnectCount();  void registerChannel(SocketChannel ch, SelectionKey selectionKey);  void setChannel(SocketChannel to);  SocketChannel getChannel();  void setSk(SelectionKey to);  SelectionKey getSk();  int getBytesRemainingToWrite();  int writeSome() throws IOException;  void fixupOps();  void authComplete();  void setupForAuth();  void setContinuousTimeout(boolean timedOut); int getContinuousTimeout(); }
public void testDefaultAttributesForSuiteTearDownPageNames() throws Exception { WikiPage suiteTearDownPage = WikiPageUtil.addPage(root, PathParser.parse(SUITE_TEARDOWN_NAME)); PageData data = suiteTearDownPage.getData(); assertFalse(data.hasAttribute(SUITE.toString())); }
private boolean isEmpty(WikiPage page) { return page.getData().getContent().length() == 0; }
public void acceptFinalCount(TestSummary testSummary) throws Exception { suiteFormatter.testSummary(testSummary); suiteFormatter.finishWritingOutput(); }
public void shouldUseTheDefaultLocale() throws ParseException { when(request.getAttribute(LOCALE_KEY + ".request")).thenReturn(null); when(request.getSession()).thenReturn(session); when(session.getAttribute(LOCALE_KEY + ".session")). thenReturn(null); when(context.getAttribute(LOCALE_KEY + ".application")). thenReturn(null); when(context.getInitParameter(LOCALE_KEY)). thenReturn(null); when(request.getLocale()).thenReturn(null); Date date = new SimpleDateFormat("dd/MM/yyyy").parse("10/05/2010"); String formattedToday = DateFormat.getDateInstance(DateFormat.SHORT).format(date); assertThat(converter.convert(formattedToday, Date.class, bundle), is(equalTo(date))); }
public Response makeResponse(FitNesseContext context, Request request) throws Exception { loadPage(request.getResource(), context); SimpleResponse response = new SimpleResponse(); HtmlPage html = context.htmlPageFactory.newPage(); html.setMainTemplate("render.vm"); html.put("content", new SlimRenderer()); response.setContent(html.html()); return response; }
public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException { ZooKeeper zk = createClient(new CountdownWatcher(), hostPort); try { MyWatcher watchers[] = new MyWatcher[100];
public void setup() { this.mockery = new VRaptorMockery(); this.request = mockery.mock(MutableRequest.class); this.proxifier = new DefaultProxifier(); this.finder = mockery.mock(TypeFinder.class); this.router = new DefaultRouter(new NoRoutesConfiguration(), new ComponentRoutesParser(proxifier, finder), proxifier, null, null); }
private boolean isTeardownCollapsed() throws Exception { final String teardownCollapseVariable = parent.getVariable(COLLAPSE_TEARDOWN); return teardownCollapseVariable == null || "true".equals(teardownCollapseVariable); }
protected void setUp() throws Exception { tmpDir = File.createTempFile("bookie", "test"); tmpDir.delete(); tmpDir.mkdir(); bs = new BookieServer(port, tmpDir, new File[] { tmpDir }); bs.start(); channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors .newCachedThreadPool()); executor = new OrderedSafeExecutor(2); }
public void join() throws Exception { if (fitListeningThread != null) fitListeningThread.join();
public int read(byte[] b, int off, int len) throws IOException { return getRealInputStream().read(b, off, len); }
public byte[] take() throws KeeperException, InterruptedException { TreeMap<Long,String> orderedChildren;
String[] tryToParseTheFileIntoTheList(File updateFileList) { if (!updateFileList.exists()) throw new RuntimeException("Could Not Find UpdateList"); try { return parseTheFileContentToAList(updateFileList);
String getUnescapedCellContents(int col, int row); int getRowCount(); int getColumnCountInRow(int row); void substitute(int col, int row, String content); int addRow(List<String> list); void addColumnToRow(int row, String content); void appendChildTable(int row, Table table); void updateContent(int row, TestResult testResult); void updateContent(int col, int row, TestResult testResult); void updateContent(int col, int row, ExceptionResult exceptionResult); public Table asTemplate(CellContentSubstitution substitution) throws SyntaxError;
private QuorumServer nextObserverMaster() { if (nextObserverMaster >= observerMasters.size()) { nextObserverMaster = 0;
public static Options parseCommandLine(String[] args) { CommandLine commandLine = new CommandLine(OPTION_DESCRIPTOR); if (commandLine.parse(args)) { boolean verbose = commandLine.hasOption("v"); String interactionClassName = commandLine.getOptionArgument("i", "interactionClass"); String portString = commandLine.getArgument("port"); int port = (portString == null) ? 8099 : Integer.parseInt(portString); String statementTimeoutString = commandLine.getOptionArgument("s", "statementTimeout"); Integer statementTimeout = (statementTimeoutString == null) ? null : Integer.parseInt(statementTimeoutString); boolean daemon = commandLine.hasOption("d"); String sslParameterClassName = commandLine.getOptionArgument("ssl", "parameterClass"); boolean useSSL = commandLine.hasOption("ssl"); return new Options(verbose, port, getInteraction(interactionClassName), daemon, statementTimeout, useSSL, sslParameterClassName); } return null; }
public Maybe<String> render(Scanner scanner) { return new Maybe<String>(HtmlUtil.makeAnchorTag(getContent()).html());
public ContextConfigurator withParameter(ConfigurationParameter parameter, String value) { switch (parameter) { case ROOT_PATH: rootPath = value; break; case ROOT_DIRECTORY: rootDirectoryName = value; break; case CONTEXT_ROOT: contextRoot = value; if (!contextRoot.startsWith("/")) { contextRoot = "/" + contextRoot; } if (!contextRoot.endsWith("/")) { contextRoot = contextRoot + "/"; } break; case PORT: port = Integer.parseInt(value); break; default: properties.setProperty(parameter.getKey(), value); break; } return this; }
public List<WikiTestPage> testPageForDescriptor(WikiPageDescriptor descriptor) { return pagesByTestSystem.get(descriptor); }
private void activateSystemExitSecurityManager() { System.setSecurityManager(null); System.setProperty(SystemExitSecurityManager.PREVENT_SYSTEM_EXIT, "true"); SystemExitSecurityManager.activateIfWanted(); }
@Test public void translatesItalic() { ParserTest.assertTranslatesTo("''italic text''", "<i>italic text</i>" + HtmlElement.endl); }
public void testGetPropertyValue() { Assert.assertEquals("PEM", KeyStoreFileType.PEM.getPropertyValue()); Assert.assertEquals("JKS", KeyStoreFileType.JKS.getPropertyValue()); Assert.assertEquals("PKCS12", KeyStoreFileType.PKCS12.getPropertyValue()); }
private void parseRequest(FitNesseContext context, Request request) { childName = (String) request.getInput("name"); childName = childName == null ? "null" : childName; childPath = PathParser.parse(childName); currentPagePath = PathParser.parse(request.getResource()); crawler = context.root.getPageCrawler(); currentPage = crawler.getPage(context.root, currentPagePath); childContent = (String) request.getInput("content"); pageType = (String) request.getInput("pageType"); if (childContent == null) childContent = "!contents\n"; if (pageType == null) pageType = "Default";
private WikiPage findInheritedPage(String pageName) { return PageCrawlerImpl.getClosestInheritedPage(pageName, testPage.getSourcePage()); }
public void setUp() throws Exception { MockitoAnnotations.initMocks(this); when(result.use(PageResult.class)).thenReturn(pageResult); representation = new DefaultRepresentationResult(formatResolver, result, Arrays.asList(serialization), headerHandler); }
public void testResultsHtml() throws Exception { formatter.startOutputForNewTest("RelativeName", "FullName"); formatter.acceptOutput("starting"); formatter.acceptOutput(" output"); formatter.acceptResults("RelativeName", new TestSystem.TestSummary(1, 0, 0, 0)); formatter.startOutputForNewTest("NewRelativeName", "NewFullName"); formatter.acceptOutput("second"); formatter.acceptOutput(" test"); formatter.acceptResults("NewRelativeName", new TestSystem.TestSummary(0, 1, 0, 0)); String results = formatter.testOutput(); assertSubString("<h2 class=\"centered\">Test Output</h2>", results); assertSubString("<div class=\"test_output_name\">", results); assertSubString("<a href=\"FullName\" id=\"RelativeName\">RelativeName</a>", results); assertSubString("<div class=\"alternating_block_1\">starting output</div>", results); assertSubString("<a href=\"NewFullName\" id=\"NewRelativeName\">NewRelativeName</a>", results); assertSubString("<div class=\"alternating_block_2\">second test</div>", results); }
protected DefaultRelationBuilder createBuilderFor(String name) { return builder; }
public void process(WatcherEvent event) { synchronized (this) { notifyAll();
public static X509TrustManager createTrustManager(String trustStoreLocation, String trustStorePassword) throws TrustManagerException { FileInputStream inputStream = null; try { char[] trustStorePasswordChars = trustStorePassword.toCharArray();
BasicSerializer exclude(String... names); void serialize(); BasicSerializer include(String... names); }
<T> Future<CASResponse> asyncCAS(String key, long casId, T value, Transcoder<T> tc); Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) throws OperationTimeoutException; CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key, int hold); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
public void scenarioHasTooFewArguments() throws Exception { makeTables( "!|scenario|echo|input|giving|\n" +
public void lostTopic(ByteString topic) { top2sub2seq.remove(topic);
public CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException { return cas(key, casId, value, transcoder); }
public static Date readTime( byte[] buf, int offset, Calendar time ) { int dw1 = readUByte( buf, offset ); int dw2 = readUByte( buf, offset + 1 ); int dw3 = readUByte( buf, offset + 2 ); int dw4 = readUByte( buf, offset + 3 ); int dw5 = readUByte( buf, offset + 4 );
public boolean equals(Object o) { if (o instanceof SuiteExecutionReport) { SuiteExecutionReport report = (SuiteExecutionReport) o; if (!super.equals(report)) return false; if (pageHistoryReferences.size() != report.pageHistoryReferences.size()) return false; else return allReferencesEqual(pageHistoryReferences, report.pageHistoryReferences); } return false; }
public String toHtml(Translator translator, Symbol symbol) { if (!isWikiWordPath(symbol.getContent())) return new HtmlText(symbol.getContent()).html(); HtmlTag link = new HtmlTag("a", new HtmlText(symbol.getContent())); link.addAttribute("href", qualifiedName(translator.getPage(), symbol.getContent())); return link.html(); }
public static void main(String[] args) throws IOException, InterruptedException, BookieException { Bookie b = new Bookie(new File("/tmp"), new File[] { new File("/tmp") }); CounterCallback cb = new CounterCallback(); long start = System.currentTimeMillis(); for (int i = 0; i < 100000; i++) { ByteBuffer buff = ByteBuffer.allocate(1024); buff.putLong(1); buff.putLong(i); buff.limit(1024); buff.position(0); cb.incCount(); b.addEntry(buff, cb, null, new byte[0]); } cb.waitZero(); long end = System.currentTimeMillis(); System.out.println("Took " + (end-start) + "ms"); }
@Test public void translatesHeaders() { for (int i = 1; i < 7; i++) ParserTest.assertTranslates("!" + i + " some text \n", "<h" + i + ">some text</h" + i + ">" + HtmlElement.endl);
public void shouldTranslatePatternArgsWithRegex() { String uri = new DefaultParametersControl("/clients/{id:[0-9]{1,}}", converters, evaluator).fillUri(new String[] {"id"}, 30L); assertThat(uri, is(equalTo("/clients/30"))); }
int getRowCount(); int getColumnCountInRow(int rowIndex); String toString(); String toHtml(); void setCell(int col, int row, String contents); int addRow(List<String> list) throws Exception; void appendCellToRow(int row, String contents) throws Exception; String error(String s); String pass(String s); String fail(String s); String ignore(String s); String getUnescapedCellContents(int col, int row); }
public void shouldBeAbleToConvertNumbers(){ assertThat((Short) converter.convert("2", Short.class, errors, bundle), is(equalTo((short)2))); }
private void countTestResultsForFormatter(BaseFormatter formatter) throws Exception { formatter.testStarted(page); formatter.testComplete(page, right); formatter.testStarted(page); formatter.testComplete(page, wrong); formatter.testStarted(page); formatter.testComplete(page, exception); formatter.close(); assertEquals(3, formatter.testCount); assertEquals(2, formatter.failCount); if (!(formatter instanceof XmlFormatter)) assertEquals(2, BaseFormatter.finalErrorCount);
public void setUp() throws Exception { root = InMemoryPage.makeRoot("RooT"); crawler = root.getPageCrawler(); request = new MockRequest(); responder = new PacketResponder(); context = FitNesseUtil.makeTestContext(root); }
public void addContains(ContainsSelector arg0) { task.addContains(arg0); }
public void shouldDisposeAfterRequest() { registerAndGetFromContainer(Container.class, DisposableComponent.class); DisposableComponent comp = registerAndGetFromContainer(DisposableComponent.class, null); assertThat(comp.destroyed, is(equalTo(true))); }
public static ParsingPage makeParsingPage(BaseWikitextPage page) { ParsingPage.Cache cache = new ParsingPage.Cache(); VariableSource compositeVariableSource = new CompositeVariableSource( new ApplicationVariableSource(page.variableSource), new PageVariableSource(page), new UserVariableSource(page.variableSource), cache, new ParentPageVariableSource(page), page.variableSource); return new ParsingPage(new WikiSourcePage(page), compositeVariableSource, cache); }
<T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; Future<Long> asyncIncr(String key, int by); Future<Long> asyncDecr(String key, int by); long incr(String key, int by, long def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
boolean isDefaultExecutorService();  NodeLocator createLocator(List<MemcachedNode> nodes);  OperationFactory getOperationFactory();  long getOperationTimeout();  boolean isDaemon();  boolean useNagleAlgorithm();  boolean getKeepAlive();  Collection<ConnectionObserver> getInitialObservers();  FailureMode getFailureMode();  Transcoder<Object> getDefaultTranscoder();  boolean shouldOptimize();  int getReadBufSize();  HashAlgorithm getHashAlg();  long getMaxReconnectDelay();  AuthDescriptor getAuthDescriptor();  int getTimeoutExceptionThreshold();  MetricType enableMetrics();  MetricCollector getMetricCollector();  long getAuthWaitTime(); }
private void createMainFormatter() { if (response.isXmlFormat()) { mainFormatter = newXmlFormatter();
protected MethodInterceptor cglibMethodInterceptor(final MethodInvocation handler) { return new MethodInterceptor() { public Object intercept(Object proxy, Method method, Object[] args, final MethodProxy methodProxy) {
public void testVariableSubstitution() { final Map<String, String> map = new HashMap<String, String>(); map.put("VERSION", "1.2"); map.put("MAINTAINER", "Torsten Curdt <tcurdt@vafer.org>"); final PackageDescriptor d = new PackageDescriptor(new MapVariableResolver(map)); d.set("Version", "[[VERSION]]"); d.set("Maintainer", "[[MAINTAINER]]"); d.set("NoResolve1", "test[[test"); d.set("NoResolve2", "[[test]]"); assertEquals("1.2", d.get("Version")); assertEquals("Torsten Curdt <tcurdt@vafer.org>", d.get("Maintainer")); assertEquals("test[[test", d.get("NoResolve1")); assertEquals(null, d.get("NoResolve2")); }
public void testLoadPKCS12TrustStore( X509KeyType caKeyType, X509KeyType certKeyType, String keyPassword, Integer paramIndex) throws Exception { init(caKeyType, certKeyType, keyPassword, paramIndex);
String getPrimaryName();  String getDoc();  CommandResponse run(ZooKeeperServer zkServer, Map<String, String> kwargs); }
public void findXrefs(Consumer<String> takeXref) { tree.walkPreOrder(node -> { if (node.isType(See.symbolType)) {
public void acceptResults(Counts counts) throws Exception { super.acceptResults(counts); PageCrawler pageCrawler = page.getPageCrawler(); WikiPage testPage = processingQueue.removeFirst(); String relativeName = pageCrawler.getRelativeName(page, testPage); addToResponse(suiteFormatter.acceptResults(relativeName, counts)); }
public void list() throws ServletException, IOException { result.include("resources", registry.all()); result.forward("ok"); }
public void testVariables() throws Exception { ParentWidget root = new WidgetRoot(rootPage); ParentWidget parent1 = new MockParentWidget(root); ParentWidget parent2 = new MockParentWidget(parent1); parent2.addVariable("someKey", "someValue"); assertEquals("someValue", root.getVariable("someKey")); assertEquals("someValue", parent1.getVariable("someKey")); assertEquals("someValue", parent2.getVariable("someKey")); }
abstract byte[] getQuorumVerifierBytes(); abstract QuorumAuthServer getQuorumAuthServer();  abstract void registerLearnerHandlerBean(final LearnerHandler learnerHandler, Socket socket);  abstract void unregisterLearnerHandlerBean(final LearnerHandler learnerHandler); }
public void VariableOnParentShouldBeAbleToUseVariablesDeclaredOnChild() throws Exception { WikiPagePath parentPath = PathParser.parse("ParentPage"); WikiPagePath childPath = PathParser.parse("ChildPage"); WikiPage parent = crawler.addPage(rootPage, parentPath, "!define X (value=${Y})\n"); WikiPage child = crawler.addPage(parent, childPath, "!define Y {saba}\n"); PageData childData = child.getData(); assertEquals("value=saba", childData.getVariable("X")); }
public void testOverflowingInputQueue() throws Exception { runOverflowTest(new byte[] { 1 }); }
public static void logWarn(String mess) { RuntimeException re = new RuntimeException(); StackTraceElement ste = re.getStackTrace()[1]; String location = ZooLog.stackTrace2Location(ste); ZooLog.logWarn(mess, location); ZooLog.logTextTraceMessage(mess + " location: " + location, WARNING_TRACE_MASK);
public void shouldBeAbleToConvertWithPTBR() { when(request.getAttribute("javax.servlet.jsp.jstl.fmt.locale.request")).thenReturn("pt_BR"); assertThat(converter.convert("10,00", float.class, bundle), is(equalTo(Float.parseFloat("10.00")))); assertThat(converter.convert("10,01", float.class, bundle), is(equalTo(Float.parseFloat("10.01")))); }
protected void addToResponse(String output) throws Exception { if(!closed) response.add(output);
public ReplicaGetsOperation replicaGets(String key, int index, ReplicaGetsOperation.Callback callback) { return new ReplicaGetsOperationImpl(key, index, callback); }
private String decodeRef(String text, PwDatabase db) { if (db == null) { return text; } SprEngine spr = SprEngine.getInstance(db); return spr.compile(text, this, db); }
public TestSystem.TestSummary testSummary() { return testSummary; }
public void scanSingleMessage(ScanRequest request) { scanMessagesInternal(request.getTopic(), request.getStartSeqId(), 1, Long.MAX_VALUE, request.getCallback(), request.getCtx(), 1); return; }
public void shouldSerializeAllLinksIfThereAreTransitions() { Relation t = mock(Relation.class); when(t.getName()).thenReturn("kill"); when(t.getUri()).thenReturn("/kill"); Relation t2 = mock(Relation.class); when(t2.getName()).thenReturn("ressurect"); when(t2.getUri()).thenReturn("/ressurect"); String xml = xstream.toXML(new Client(t,t2)); assertThat(xml, containsString("<atom:link rel=\"kill\" href=\"http://www.caelum.com.br/kill\" xmlns:atom=\"http://www.w3.org/2005/Atom\"/>")); assertThat(xml, containsString("<atom:link rel=\"ressurect\" href=\"http://www.caelum.com.br/ressurect\" xmlns:atom=\"http://www.w3.org/2005/Atom\"/>")); verify(restfulie).clear(); }
public void digit(char c) { finalName.append(c); currentState = new InNumberState(); }
private void makeTestResponse(String pageName) throws Exception { root = InMemoryPage.makeRoot("RooT"); FitNesseContext context = FitNesseUtil.makeTestContext(root); page = root.getPageCrawler().addPage(root, PathParser.parse(pageName), "original content"); PageData data = page.getData(); WikiPageProperties properties = data.getProperties(); properties.set(PageData.PropertySUITES, "New Page tags"); data.setContent("new stuff"); VersionInfo commitRecord = page.commit(data); oldVersion = commitRecord.getName(); MockRequest request = new MockRequest(); request.setResource(pageName); request.addInput("version", oldVersion); Responder responder = new VersionResponder(); response = (SimpleResponse) responder.makeResponse(context, request); }
public Transaction create(final String path, byte data[], List<ACL> acl, CreateMode createMode) { ops.add(Op.create(path, data, acl, createMode.toFlag())); return this; }
public void canHandleUrlIfPlainRootContext() { final ResourceMethod expected = mockery.mock(ResourceMethod.class); mockery.checking(new Expectations(){{ one(request).getAttribute(DefaultResourceTranslator.INCLUDE_REQUEST_URI); will(returnValue(null)); one(request).getContextPath(); will(returnValue("")); one(request).getRequestURI(); will(returnValue("/")); one(request).getMethod(); will(returnValue("GET")); one(registry).parse("/", HttpMethod.GET,webRequest); will(returnValue(expected)); one(request).getParameter("_method"); will(returnValue(null)); }}); ResourceMethod resource = translator.translate(webRequest); assertThat(resource, is(equalTo(expected))); mockery.assertIsSatisfied();
public void tetGetIPV6HostAndPort_WhenNoPortAfterColon() { assertThrows(IllegalArgumentException.class, () -> { NetUtils.getIPV6HostAndPort("[2001:0db8:85a3:0000:0000:8a2e:0370:7334]:");
private String getBootClasspath() throws Exception { Set<String> classpath = new LinkedHashSet<String>(); addLibraryToClasspath(findScalaVersion().toString(), classpath); return MainHelper.toMultiPath(classpath.toArray(new String[classpath.size()])); }
public void testWikiImportUpdate() throws Exception { WikiImportProperty property = new WikiImportProperty("http://my.host.com/PageRoot"); property.setRoot(true); testWikiImportUpdateWith(property); assertSubString(" imports its subpages from ", content); assertSubString("value=\"Update Subpages\"", content); assertSubString("Automatically update imported content when executing tests", content); }
private void assign(PwEntryV3 source) { groupId = source.groupId; imageId = source.imageId; username = source.username; int passLen = source.password.length; password = new byte[passLen]; System.arraycopy(source.password, 0, password, 0, passLen); tCreation = (PwDate) source.tCreation.clone(); tLastMod = (PwDate) source.tLastMod.clone(); tLastAccess = (PwDate) source.tLastAccess.clone(); tExpire = (PwDate) source.tExpire.clone(); binaryDesc = source.binaryDesc; if ( source.binaryData != null ) { int descLen = source.binaryData.length; binaryData = new byte[descLen]; System.arraycopy(source.binaryData, 0, binaryData, 0, descLen); } parent = source.parent;
private Enhancer enhanceTypeWithCGLib(Class type, final MethodInvocation handler) { Enhancer enhancer = new Enhancer(); enhancer.setSuperclass(type); enhancer.setCallbackFilter(IGNORE_BRIDGE_AND_OBJECT_METHODS); enhancer.setCallbackTypes(new Class[] {MethodInterceptor.class, NoOp.class}); enhancer.setCallbacks(new Callback[] {cglibMethodInterceptor(handler), NoOp.INSTANCE }); return enhancer; }
private boolean springListenerAlreadyCalled() { return RequestContextHolder.getRequestAttributes() == null; }
public Object newInstance(Constructor<?> constructor, Object... initargs) throws InvocationTargetException, InstantiationException, IllegalAccessException { long startTime = System.nanoTime(); Object o = super.newInstance(constructor, initargs); System.out.println("newInstance : " + (System.nanoTime() - startTime)); return o; }
public void testDeserializeZxidDigest() throws Exception { try { ZooKeeperServer.setDigestEnabled(true);
public void showWithFunctionCall() throws Exception { buildInstructionsFor("|show|function|arg|\n"); List<CallInstruction> expectedInstructions = asList( new CallInstruction("htmlScriptTable_id_0", "htmlScriptTableActor", "function", new Object[]{"arg"}) ); assertEquals(expectedInstructions, instructions()); }
public void cmPluginCalledForCreate() throws Exception { WikiPage page = crawler.addPage(root, PathParser.parse("TestPage"), "!define CM_SYSTEM {fitnesse.wiki.FileSystemPageTest xxx}"); cmMethodCalls.clear(); page.addChildPage("CreatedPage"); assertEquals(1, cmMethodCalls.size()); assertEquals("update " + defaultPath + "/RooT/TestPage/CreatedPage|fitnesse.wiki.FileSystemPageTest xxx", cmMethodCalls.get(0)); }
public void doNothingWhenFileUploadExceptionOccurs() throws Exception { interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator); when(mockUpload.parseRequest(request)).thenThrow(new FileUploadException()); interceptor.intercept(stack, method, instance); }
public void visitAttribute(final Attribute attr) { } public void visitInnerClass(final String name, final String outerName, final String innerName, final int access) { } public FieldVisitor visitField(final int access, final String name, final String desc, final String signature, final Object value) { return this; } public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) { return this; } public void visitEnd() { } public AnnotationVisitor visitAnnotationDefault() { return this; } public AnnotationVisitor visitParameterAnnotation(final int parameter, final String desc, final boolean visible) { return this; } public void visitCode() { } public void visitFrame(final int type, final int nLocal, final Object[] local, final int nStack, final Object[] stack) { } public void visitInsn(final int opcode) { } public void visitIntInsn(final int opcode, final int operand) { } public void visitVarInsn(final int opcode, final int var) { } public void visitTypeInsn(final int opcode, final String type) { } public void visitFieldInsn(final int opcode, final String owner, final String name, final String desc) { } public void visitMethodInsn(final int opcode, final String owner, final String name, final String desc) { } public void visitJumpInsn(final int opcode, final Label label) { } public void visitLabel(final Label label) { } public void visitLdcInsn(final Object cst) { } public void visitIincInsn(final int var, final int increment) { } public void visitTableSwitchInsn(final int min, final int max, final Label dflt, final Label[] labels) { } public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels) { } public void visitMultiANewArrayInsn(final String desc, final int dims) { } public void visitTryCatchBlock(final Label start, final Label end, final Label handler, final String type) { } public void visitLocalVariable(final String name, final String desc, final String signature, final Label start, final Label end, final int index) { } public void visitLineNumber(final int line, final Label start) { } public void visitMaxs(final int maxStack, final int maxLocals) { } public void visit(final String name, final Object value) { } public void visitEnum(final String name, final String desc, final String value) { } public AnnotationVisitor visitAnnotation(final String name, final String desc) { return this; } public AnnotationVisitor visitArray(final String name) { return this; } }
public void commit(long zxid) { if (pendingTxns.size() == 0) { LOG.warn("Committing " + Long.toHexString(zxid) + " without seeing txn"); return; } long firstElementZxid = pendingTxns.element().zxid; if (firstElementZxid != zxid) { LOG.error("Committing zxid 0x" + Long.toHexString(zxid) + " but next pending txn 0x" + Long.toHexString(firstElementZxid)); System.exit(12); } Request request = pendingTxns.remove(); commitProcessor.commit(request); }
static BERSequence createSequence(ASN1EncodableVector v) { return v.size() < 1 ? EMPTY_SEQUENCE : new BERSequence(v); }
private void checkMetrics(String metricName, long min, long max, double avg, long cnt, long sum){ Map<String, Object> values = ServerMetrics.getAllValues(); Assert.assertEquals(min, values.get("min_" + metricName)); Assert.assertEquals(max, values.get("max_" + metricName)); Assert.assertEquals(avg, (Double)values.get("avg_" + metricName), 0.000001); Assert.assertEquals(cnt, values.get("cnt_" + metricName)); Assert.assertEquals(sum, values.get("sum_" + metricName)); }
public void testTearDownParts() throws Exception { IncludeWidget widget = new IncludeWidget(new WidgetRoot(root), "!include -teardown SomePage"); assertSubString("Tear Down: ", widget.render()); assertSubString("class=\"teardown\"", widget.render()); assertSubString("class=\"collapsable\"", widget.render()); }
private void incrementMatchedPairsIfBelowTheInsertedBlank(int tableIndex) { for (int j = 0; j < matchedTables.size(); j++) { MatchedPair match = matchedTables.get(j);
public static void main(final String[] args) throws Exception { int i = 0; int flags = ClassReader.SKIP_DEBUG; boolean ok = true; if ((args.length < 1) || (args.length > 2)) { ok = false; } if (ok && "-debug".equals(args[0])) { i = 1; flags = 0; if (args.length != 2) { ok = false; } } if (!ok) { System.err.println("Prints the ASM code to generate the given class."); System.err.println("Usage: ASMifierClassVisitor [-debug] " + "<fully qualified class name or class file name>"); return; } ClassReader cr; if (args[i].endsWith(".class") || (args[i].indexOf('\\') > -1) || (args[i].indexOf('/') > -1)) { cr = new ClassReader(new FileInputStream(args[i])); } else { cr = new ClassReader(args[i]); } cr.accept(new ASMifierClassVisitor(new PrintWriter(System.out)), getDefaultAttributes(), flags); }
public String[] parameterNamesFor(AccessibleObject method) { Type[] parameterTypes = parameterTypes(method); String[] names = new String[parameterTypes.length]; for (int i = 0; i < names.length; i++) { names[i] = nameFor(parameterTypes[i]); } return names; }
private void makeTree(List<String> pageList) { for (String pageName : pageList) { String[] splits = pageName.split("\\."); treeRoot.addItem(splits, 0); } compactTree(); }
public void checkIsCalled() throws Exception { Parse table = doTableOf( row("start", "fit.testFxtr.TestActionFixture") + row("check", "data", "42")); assertTrue(actionFixture().checked); }
public String asWikiText() throws Exception { return getText(); }
private void removeSymbolicLink(Request request, WikiPage page) throws Exception { String linkToRemove = (String)request.getInput("removal"); PageData data = page.getData(); WikiPageProperties properties = data.getProperties(); WikiPageProperty symLinks = getSymLinkProperty(properties); symLinks.remove(linkToRemove); if(symLinks.keySet().size() == 0) properties.remove("SymbolicLinks"); page.commit(data); setRedirect(resource); }
public void testCommand(String cmdName, Field... fields) throws IOException, InterruptedException { testCommand(cmdName, new HashMap<String, String>(), new HashMap<>(), HttpServletResponse.SC_OK, fields); }
public void slimHostDefaultsTolocalhost() throws Exception { WikiPage pageWithoutSlimHostVariable = WikiPageUtil.addPage(root, PathParser.parse("PageWithoutSlimHostVariable"), "some gunk\n"); assertEquals("localhost", new SlimTestSystem.SlimDescriptor(TestSystem.getDescriptor(pageWithoutSlimHostVariable, false)).determineSlimHost()); }
public void setUp() throws Exception { peer = createQuorumPeer(tmpDir); participantId = 1; Map<Long, QuorumPeer.QuorumServer> peers = peer.getQuorumVerifier().getAllMembers(); observerId = peers.size(); leader = createLeader(tmpDir, peer); peer.leader = leader; peers.put(observerId, new QuorumPeer.QuorumServer(observerId, new InetSocketAddress("127.0.0.1", PortAssignment.unique()), new InetSocketAddress("127.0.0.1", PortAssignment.unique()), new InetSocketAddress("127.0.0.1", PortAssignment.unique()), QuorumPeer.LearnerType.OBSERVER));
static Args parseArgs(String[] args) { AtomicInteger index = new AtomicInteger(); File javaHome = new File(args[index.getAndIncrement()]); File cacheFile = new File(args[index.getAndIncrement()]); CompileOrder compileOrder = CompileOrder.valueOf(args[index.getAndIncrement()]); File compilerBridgeJar = new File(args[index.getAndIncrement()]); String scalaVersion = args[index.getAndIncrement()]; List<File> compilerAndDependencies = readList(args, index, File::new); List<File> libraryAndDependencies = readList(args, index, File::new); List<File> classpathElements = readList(args, index, File::new); List<File> sources = readList(args, index, File::new); File classesDirectory = new File(args[index.getAndIncrement()]); List<String> scalacOptions = readList(args, index, Function.identity()); List<String> javacOptions = readList(args, index, Function.identity()); boolean debugEnabled = Boolean.parseBoolean(args[index.getAndIncrement()]); return new Args( javaHome,
public void done() throws IOException, InterruptedException { checkForPulse(); FitProtocol.writeSize(0, fitInput); isDoneSending = true; }
public static String expression(String[] strings, PropertySource source) { String locale = source.findProperty(Names.FORMAT_LOCALE, ""); Maybe<String> formatLocale = locale.length() > 0 ? new Maybe<>(locale) : Maybe.noString; Maybe<String> result = new FormattedExpression(strings[0], formatLocale).evaluate(); return (result.isNothing()) ? ToHtml.error(new String[] {result.because()})
public Response makeResponse(FitNesseContext context, Request request) throws Exception { response = new SimpleResponse(); jsonpFunction = (String) request.getInput("jsonp"); String pageName = request.getResource(); PageCrawler pageCrawler = context.root.getPageCrawler(); WikiPagePath resourcePath = PathParser.parse(pageName); page = pageCrawler.getPage(context.root, resourcePath); if (page == null) response.setStatus(404); else { buildPacket(); response.setStatus(200); } return response; }
private String createDynamicFile(String quorumCfgSection, String version) throws IOException { String filename = "zoo.cfg.dynamic"; if( version != null ){ filename = filename + "." + version; } File dynamicConfigFile = new File(tmpDir, filename); String dynamicConfigFilename = PathUtils.normalizeFileSystemPath(dynamicConfigFile.toString()); FileWriter fDynamicConfigWriter = new FileWriter(dynamicConfigFile); fDynamicConfigWriter.write(quorumCfgSection); fDynamicConfigWriter.flush(); fDynamicConfigWriter.close(); return dynamicConfigFilename; }
private void checkNotAction(int row) { int lastColInAction = table.getColumnCountInRow(row) - 1; String expected = table.getCellContents(lastColInAction, row); addExpectation(new RejectedValueExpectation(expected, getInstructionTag(), lastColInAction, row)); invokeAction(1, lastColInAction - 1, row); }
public Maybe<Symbol> parse(Symbol current, Parser parser) { Symbol nesting = parser.parseTo(SymbolType.CloseNesting, ParseSpecification.nestingPriority); if (!parser.getCurrent().isType(SymbolType.CloseNesting)) return Symbol.nothing; current.add(nesting); return new Maybe<Symbol>(current); }
private void startNewCompileServer() throws Exception { File serverTagFile = new File(mainOutputDir + ".server"); if (serverTagFile.exists()) { return; } getLog().info("start server..."); JavaMainCaller jcmd = getEmptyScalaCommand("scala.tools.nsc.MainGenericRunner"); jcmd.addArgs("scala.tools.nsc.CompileServer"); jcmd.addJvmArgs(jvmArgs); jcmd.addArgs(args); jcmd.spawn(displayCmd); org.codehaus.plexus.util.FileUtils.fileWrite(serverTagFile.getAbsolutePath(), "."); Thread.sleep(1000);
public void testRedirectToRefererEffect() throws Exception { crawler.addPage(root, PathParser.parse("ChildPage"), "child content with <html>"); request.setResource("ChildPage"); request.addInput("redirectToReferer", true); request.addInput("redirectAction", "boom"); request.addHeader("Referer", "http://fitnesse.org:8080/SomePage"); SimpleResponse response = (SimpleResponse) responder.makeResponse(FitNesseUtil.makeTestContext(root), request); assertEquals(200, response.getStatus()); String body = response.getContent(); assertSubString("name=\"redirect\" value=\"http://fitnesse.org:8080/SomePage?boom\"", body); }
public ResponseParser getResponse(URL url) throws Exception { String resource = url.getPath() + "?" + url.getQuery(); RequestBuilder request = new RequestBuilder(resource); int port = url.getPort() == -1 ? 80 : url.getPort(); String host = url.getHost(); Socket s = new Socket(host, port); OutputStream output = s.getOutputStream(); output.write(request.getText().getBytes()); InputStream input = s.getInputStream(); ResponseParser response = new ResponseParser(input); output.close(); input.close(); s.close(); return response; }
void containsWatcher(String path, Watcher watcher, WatcherType watcherType) throws NoWatcherException { boolean containsWatcher = false; switch (watcherType) { case Children: { synchronized (childWatches) { containsWatcher = contains(path, watcher, childWatches); } synchronized (persistentWatches) { boolean contains_temp = contains(path, watcher, persistentWatches); containsWatcher |= contains_temp; } synchronized (persistentRecursiveWatches) { boolean contains_temp = contains(path, watcher, persistentRecursiveWatches); containsWatcher |= contains_temp; } break; } case Data: { synchronized (dataWatches) { containsWatcher = contains(path, watcher, dataWatches); } synchronized (existWatches) { boolean contains_temp = contains(path, watcher, existWatches); containsWatcher |= contains_temp; } synchronized (persistentWatches) { boolean contains_temp = contains(path, watcher, persistentWatches); containsWatcher |= contains_temp; } synchronized (persistentRecursiveWatches) { boolean contains_temp = contains(path, watcher, persistentRecursiveWatches); containsWatcher |= contains_temp; } break; } case Any: { synchronized (childWatches) { containsWatcher = contains(path, watcher, childWatches); } synchronized (dataWatches) { boolean contains_temp = contains(path, watcher, dataWatches); containsWatcher |= contains_temp; } synchronized (existWatches) { boolean contains_temp = contains(path, watcher, existWatches); containsWatcher |= contains_temp; } synchronized (persistentWatches) { boolean contains_temp = contains(path, watcher, persistentWatches); containsWatcher |= contains_temp; } synchronized (persistentRecursiveWatches) { boolean contains_temp = contains(path, watcher, persistentRecursiveWatches); containsWatcher |= contains_temp; } } }
public void run() { Thread.currentThread().setName("Sender-" + sock.getRemoteSocketAddress()); try { sendPackets();
public <T> BulkFuture<Map<String, T>> asyncGetBulk(Collection<String> keys, Iterator<Transcoder<T>> tcIter) { return asyncGetBulk(keys.iterator(), tcIter); }
public void commonOverrideExecutesForward() throws ServletException, IOException, NoSuchMethodException { mockery.checking(new Expectations() { { allowing(resource).getType(); will(returnValue(CommonComponentOld.class)); allowing(method).getMethod(); will(returnValue(CommonComponentOld.class.getMethod("base"))); one(config).getForwardFor("CommonComponentOld.base.ok"); will(returnValue("serverSide")); one(request).getRequestDispatcher("serverSide"); will(returnValue(dispatcher)); one(dispatcher).forward(request, response); } }); this.result.forward(); mockery.assertIsSatisfied(); }
public void testCreateDelete() throws Exception { zk.multi(Arrays.asList( Op.create("/multi", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT), Op.delete("/multi", 0) ));
private void cycleSeed() { digestUpdate(seed); digestAddCounter(seedCounter++); digestDoFinal(seed); }
Future<CASResponse> asyncCAS(String key, long casId, Object value); <T> CASResponse cas(String key, long casId, T value, Transcoder<T> tc) throws OperationTimeoutException; CASResponse cas(String key, long casId, Object value) throws OperationTimeoutException; <T> Future<Boolean> add(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> add(String key, int exp, Object o); <T> Future<Boolean> set(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> set(String key, int exp, Object o); <T> Future<Boolean> replace(String key, int exp, T o, Transcoder<T> tc); Future<Boolean> replace(String key, int exp, Object o); <T> Future<T> asyncGet(String key, Transcoder<T> tc); Future<Object> asyncGet(String key); <T> Future<CASValue<T>> asyncGets(String key, Transcoder<T> tc); Future<CASValue<Object>> asyncGets(String key); <T> CASValue<T> gets(String key, Transcoder<T> tc) throws OperationTimeoutException; CASValue<Object> gets(String key) throws OperationTimeoutException; <T> T get(String key, Transcoder<T> tc) throws OperationTimeoutException; Object get(String key) throws OperationTimeoutException; <T> Future<Map<String, T>> asyncGetBulk(Collection<String> keys, Transcoder<T> tc); Future<Map<String, Object>> asyncGetBulk(Collection<String> keys); <T> Future<Map<String, T>> asyncGetBulk(Transcoder<T> tc, String... keys); Future<Map<String, Object>> asyncGetBulk(String... keys); <T> Map<String, T> getBulk(Collection<String> keys, Transcoder<T> tc) throws OperationTimeoutException; Map<String, Object> getBulk(Collection<String> keys) throws OperationTimeoutException; <T> Map<String, T> getBulk(Transcoder<T> tc, String... keys) throws OperationTimeoutException; Map<String, Object> getBulk(String... keys) throws OperationTimeoutException; Map<SocketAddress, String> getVersions(); Map<SocketAddress, Map<String, String>> getStats(); long incr(String key, int by) throws OperationTimeoutException; long decr(String key, int by) throws OperationTimeoutException; long incr(String key, int by, int def) throws OperationTimeoutException; long decr(String key, int by, long def) throws OperationTimeoutException; Future<Boolean> delete(String key, int hold); Future<Boolean> delete(String key); Future<Boolean> flush(int delay); Future<Boolean> flush(); void shutdown(); boolean shutdown(long timeout, TimeUnit unit); boolean waitForQueues(long timeout, TimeUnit unit); }
private ScenarioTable makeScenarioTable(String contents) throws Exception { String pageContents = "|" + EXTENSION_NAME + "|" + contents + "|\n"; WikiPageUtil.setPageContents(root, pageContents); TableScanner ts = new HtmlTableScanner(root.getData().getHtml()); Table t = ts.getTable(0); SlimTestContextImpl testContext = new SlimTestContextImpl(); st = new AutoArgScenarioTable(t, "id", testContext); instructions.addAll(st.getAssertions()); return st; }
public void operationFailed(Object ctx, PubSubException exception) { if (LOGGER.isDebugEnabled()) LOGGER.error("cross-region recv-fwd failed for topic " + topic.toStringUtf8(), exception); callback.operationFailed(context, exception); }
public void testThreadsShutdownOnAuthFailed() throws Exception { MyWatcher watcher = new MyWatcher(); ZooKeeper zk = null; try { zk = new ZooKeeper(hostPort, CONNECTION_TIMEOUT, watcher);
public void setBody(File file) throws FileNotFoundException { FileInputStream input = new FileInputStream(file); int size = (int) file.length(); setBody(input, size); }
private static String asHtml(String text) { return qualifiesAsHtml(text) ? text : Utils.escapeHTML(text); }
protected TableScanner scanTheTables(PageData pageData) throws Exception { return new WikiTableScanner(pageData); }
String defaultTestRunner() { String testSystemType = getTestSystemType(); if ("slim".equalsIgnoreCase(testSystemType)) return "fitnesse.slim.SlimService";
void setFlushDelay(long delay); long getMaxWriteQueuePollTime(); void setMaxWriteQueuePollTime(long delay); int getMaxBatchSize(); void setMaxBatchSize(int size); }
public Matcher endsWith(final char[] terminators) { matches.add(new ScanMatch() { @Override public Maybe<Integer> match(ScanString input, SymbolStream symbols, int offset) { int size = 0; while (true) { char candidate = input.charAt(offset + size); if (candidate == 0) return Maybe.noInteger; if (contains(terminators, candidate)) break; size++; } return size > 0 ? new Maybe<Integer>(size + 1) : Maybe.noInteger; } private boolean contains(char[] terminators, char candidate) { for (char terminator: terminators) if (candidate == terminator) return true; return false; } }); return this; }
public void testQueryStringValueWithNoQueryString() throws Exception { appendToMessage("GET /resource HTTP/1.1\r\n"); appendToMessage("\r\n"); parseMessage(); assertEquals("", request.getQueryString()); }
public final String makeHttpHeaders() { if (!withHttpHeaders) return ""; if (status != 304) { addStandardHeaders(); } StringBuffer text = new StringBuffer(); if (!Format.TEXT.contentType.equals(contentType)) { text.append("HTTP/1.1 ").append(status).append(" ").append( getReasonPhrase()).append(CRLF); makeHeaders(text); text.append(CRLF); } return text.toString(); }
private void extendRow(Table table, int row, List<Object> cellList) { while (table.getColumnCountInRow(row) < cellList.size()) table.appendContent(row, (String) cellList.get(table.getColumnCountInRow(row)));
private void fillData() {
synchronized void updateProposal(long leader, long zxid, long epoch){ if(LOG.isDebugEnabled()){ LOG.debug("Updating proposal: " + leader + " (newleader), 0x" + Long.toHexString(zxid) + " (newzxid), " + proposedLeader + " (oldleader), 0x" + Long.toHexString(proposedZxid) + " (oldzxid)"); } proposedLeader = leader; proposedZxid = zxid; proposedEpoch = epoch; }
public void setUp() throws Exception { root = InMemoryPage.makeRoot("root"); assertions = new ArrayList<>(); slimTableFactory = new SlimTableFactory(); slimTableFactory.addTableType("localized script", LocalizedScriptTable.class); }
protected abstract List<WikiPage> addSuiteSetUpsAndTearDowns(List<WikiPage> pages); }
